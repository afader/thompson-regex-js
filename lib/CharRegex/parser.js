var syntax = require('../syntax.js');
var parsers = require('../parsers.js');
var seq = parsers.seq;
var string = parsers.string;
var alt = parsers.alt;
var lazy = parsers.lazy;
var regexParser = parsers.regex;
var sepBy = parsers.sepBy;
var pipe = parsers.pipe;
var dot = parsers.dot;
var parenthesized = parsers.parenthesized;
var lsqr = parsers.lsqr;
var rsqr = parsers.rsqr;
var caret = parsers.caret;
var lparen = parsers.lparen;
var rparen = parsers.rparen;
var star = parsers.star;
var plus = parsers.plus;
var qmark = parsers.qmark;
var starred = parsers.starred(syntax.zeroOrMore);
var plussed = parsers.plussed(syntax.oneOrMore);
var qmarked = parsers.qmarked(syntax.zeroOrOne);
var root = lazy('root expression', function() {
  return regex.map(syntax.root);
});
var regex = lazy('regex', function() {
  return sepBy(branch, pipe).map(syntax.alternation);
});
var wildcard = dot.map(function() {
  return syntax.predicate('wildcard');
}).desc('wildcard');
var escaped = function(str, name) {
  if (!name) name = str;
  return string('\\' + str).result(syntax.predicate(name)).desc(name);
};
var character = regexParser(/[^\\*+?()\[\].|-]/).map(syntax.predicate).desc('character');
var space = string(' ').result(syntax.predicate('space')).desc('space');
var dash = string('-').result(syntax.predicate('-')).desc('-');
var escapedBackslash = escaped('\\');
var whitespace = escaped('s', 'whitespace');
var newline = escaped('n', 'newline');
var word = escaped('w', 'wordChar');
var escapedLparen = escaped('(');
var escapedRparen = escaped(')');
var escapedLsqr = escaped('[');
var escapedRsqr = escaped(']');
var escapedStar = escaped('*');
var escapedPlus = escaped('+');
var escapedQmark = escaped('?');
var escapedPipe = escaped('|');
var escapedDot = escaped('.');
var escapedSymbol = alt(escapedBackslash, escapedLparen, escapedRparen, escapedPlus, escapedQmark,
			escapedRsqr, escapedLsqr, word, newline, whitespace, escapedDot, escapedPipe);
var literal = alt(escapedBackslash, whitespace, newline, word, space, character, lparen, rparen, star, plus, qmark, pipe, dot);
var literals = sepBy(literal, string('')).map(syntax.alternation);
//var rangeValue = alt(escapedSymbol, nonDashCharacter);
//var ranges = alt(positiveRange, negativeRange);
var charClass = lsqr.then(literals).skip(rsqr).desc('character class');
var atom = alt(parenthesized(regex), charClass, wildcard, escapedSymbol, space, dash, character).desc('atom');
var piece = alt(starred(atom), plussed(atom), qmarked(atom), atom).desc('piece');
var branch = piece.atLeast(1).map(syntax.concatenation).desc('branch');
module.exports = root;
