/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(10);
	var React = __webpack_require__(12);
	var App = __webpack_require__(168);
	React.render(React.createElement(App, null), document.body);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(2);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(9)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../node_modules/css-loader/index.js!./bootstrap.css", function() {
				var newContent = require("!!../../node_modules/css-loader/index.js!./bootstrap.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports


	// module
	exports.push([module.id, "/*!\r\n * Bootstrap v3.3.5 (http://getbootstrap.com)\r\n * Copyright 2011-2015 Twitter, Inc.\r\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n */\r\n/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\r\nhtml {\r\n  font-family: sans-serif;\r\n  -webkit-text-size-adjust: 100%;\r\n      -ms-text-size-adjust: 100%;\r\n}\r\nbody {\r\n  margin: 0;\r\n}\r\narticle,\r\naside,\r\ndetails,\r\nfigcaption,\r\nfigure,\r\nfooter,\r\nheader,\r\nhgroup,\r\nmain,\r\nmenu,\r\nnav,\r\nsection,\r\nsummary {\r\n  display: block;\r\n}\r\naudio,\r\ncanvas,\r\nprogress,\r\nvideo {\r\n  display: inline-block;\r\n  vertical-align: baseline;\r\n}\r\naudio:not([controls]) {\r\n  display: none;\r\n  height: 0;\r\n}\r\n[hidden],\r\ntemplate {\r\n  display: none;\r\n}\r\na {\r\n  background-color: transparent;\r\n}\r\na:active,\r\na:hover {\r\n  outline: 0;\r\n}\r\nabbr[title] {\r\n  border-bottom: 1px dotted;\r\n}\r\nb,\r\nstrong {\r\n  font-weight: bold;\r\n}\r\ndfn {\r\n  font-style: italic;\r\n}\r\nh1 {\r\n  margin: .67em 0;\r\n  font-size: 2em;\r\n}\r\nmark {\r\n  color: #000;\r\n  background: #ff0;\r\n}\r\nsmall {\r\n  font-size: 80%;\r\n}\r\nsub,\r\nsup {\r\n  position: relative;\r\n  font-size: 75%;\r\n  line-height: 0;\r\n  vertical-align: baseline;\r\n}\r\nsup {\r\n  top: -.5em;\r\n}\r\nsub {\r\n  bottom: -.25em;\r\n}\r\nimg {\r\n  border: 0;\r\n}\r\nsvg:not(:root) {\r\n  overflow: hidden;\r\n}\r\nfigure {\r\n  margin: 1em 40px;\r\n}\r\nhr {\r\n  height: 0;\r\n  -webkit-box-sizing: content-box;\r\n     -moz-box-sizing: content-box;\r\n          box-sizing: content-box;\r\n}\r\npre {\r\n  overflow: auto;\r\n}\r\ncode,\r\nkbd,\r\npre,\r\nsamp {\r\n  font-family: monospace, monospace;\r\n  font-size: 1em;\r\n}\r\nbutton,\r\ninput,\r\noptgroup,\r\nselect,\r\ntextarea {\r\n  margin: 0;\r\n  font: inherit;\r\n  color: inherit;\r\n}\r\nbutton {\r\n  overflow: visible;\r\n}\r\nbutton,\r\nselect {\r\n  text-transform: none;\r\n}\r\nbutton,\r\nhtml input[type=\"button\"],\r\ninput[type=\"reset\"],\r\ninput[type=\"submit\"] {\r\n  -webkit-appearance: button;\r\n  cursor: pointer;\r\n}\r\nbutton[disabled],\r\nhtml input[disabled] {\r\n  cursor: default;\r\n}\r\nbutton::-moz-focus-inner,\r\ninput::-moz-focus-inner {\r\n  padding: 0;\r\n  border: 0;\r\n}\r\ninput {\r\n  line-height: normal;\r\n}\r\ninput[type=\"checkbox\"],\r\ninput[type=\"radio\"] {\r\n  -webkit-box-sizing: border-box;\r\n     -moz-box-sizing: border-box;\r\n          box-sizing: border-box;\r\n  padding: 0;\r\n}\r\ninput[type=\"number\"]::-webkit-inner-spin-button,\r\ninput[type=\"number\"]::-webkit-outer-spin-button {\r\n  height: auto;\r\n}\r\ninput[type=\"search\"] {\r\n  -webkit-box-sizing: content-box;\r\n     -moz-box-sizing: content-box;\r\n          box-sizing: content-box;\r\n  -webkit-appearance: textfield;\r\n}\r\ninput[type=\"search\"]::-webkit-search-cancel-button,\r\ninput[type=\"search\"]::-webkit-search-decoration {\r\n  -webkit-appearance: none;\r\n}\r\nfieldset {\r\n  padding: .35em .625em .75em;\r\n  margin: 0 2px;\r\n  border: 1px solid #c0c0c0;\r\n}\r\nlegend {\r\n  padding: 0;\r\n  border: 0;\r\n}\r\ntextarea {\r\n  overflow: auto;\r\n}\r\noptgroup {\r\n  font-weight: bold;\r\n}\r\ntable {\r\n  border-spacing: 0;\r\n  border-collapse: collapse;\r\n}\r\ntd,\r\nth {\r\n  padding: 0;\r\n}\r\n/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */\r\n@media print {\r\n  *,\r\n  *:before,\r\n  *:after {\r\n    color: #000 !important;\r\n    text-shadow: none !important;\r\n    background: transparent !important;\r\n    -webkit-box-shadow: none !important;\r\n            box-shadow: none !important;\r\n  }\r\n  a,\r\n  a:visited {\r\n    text-decoration: underline;\r\n  }\r\n  a[href]:after {\r\n    content: \" (\" attr(href) \")\";\r\n  }\r\n  abbr[title]:after {\r\n    content: \" (\" attr(title) \")\";\r\n  }\r\n  a[href^=\"#\"]:after,\r\n  a[href^=\"javascript:\"]:after {\r\n    content: \"\";\r\n  }\r\n  pre,\r\n  blockquote {\r\n    border: 1px solid #999;\r\n\r\n    page-break-inside: avoid;\r\n  }\r\n  thead {\r\n    display: table-header-group;\r\n  }\r\n  tr,\r\n  img {\r\n    page-break-inside: avoid;\r\n  }\r\n  img {\r\n    max-width: 100% !important;\r\n  }\r\n  p,\r\n  h2,\r\n  h3 {\r\n    orphans: 3;\r\n    widows: 3;\r\n  }\r\n  h2,\r\n  h3 {\r\n    page-break-after: avoid;\r\n  }\r\n  .navbar {\r\n    display: none;\r\n  }\r\n  .btn > .caret,\r\n  .dropup > .btn > .caret {\r\n    border-top-color: #000 !important;\r\n  }\r\n  .label {\r\n    border: 1px solid #000;\r\n  }\r\n  .table {\r\n    border-collapse: collapse !important;\r\n  }\r\n  .table td,\r\n  .table th {\r\n    background-color: #fff !important;\r\n  }\r\n  .table-bordered th,\r\n  .table-bordered td {\r\n    border: 1px solid #ddd !important;\r\n  }\r\n}\r\n@font-face {\r\n  font-family: 'Glyphicons Halflings';\r\n\r\n  src: url(" + __webpack_require__(4) + ");\r\n  src: url(" + __webpack_require__(4) + "?#iefix) format('embedded-opentype'), url(" + __webpack_require__(5) + ") format('woff2'), url(" + __webpack_require__(6) + ") format('woff'), url(" + __webpack_require__(7) + ") format('truetype'), url(" + __webpack_require__(8) + "#glyphicons_halflingsregular) format('svg');\r\n}\r\n.glyphicon {\r\n  position: relative;\r\n  top: 1px;\r\n  display: inline-block;\r\n  font-family: 'Glyphicons Halflings';\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  line-height: 1;\r\n\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n.glyphicon-asterisk:before {\r\n  content: \"*\";\r\n}\r\n.glyphicon-plus:before {\r\n  content: \"+\";\r\n}\r\n.glyphicon-euro:before,\r\n.glyphicon-eur:before {\r\n  content: \"\\20AC\";\r\n}\r\n.glyphicon-minus:before {\r\n  content: \"\\2212\";\r\n}\r\n.glyphicon-cloud:before {\r\n  content: \"\\2601\";\r\n}\r\n.glyphicon-envelope:before {\r\n  content: \"\\2709\";\r\n}\r\n.glyphicon-pencil:before {\r\n  content: \"\\270F\";\r\n}\r\n.glyphicon-glass:before {\r\n  content: \"\\E001\";\r\n}\r\n.glyphicon-music:before {\r\n  content: \"\\E002\";\r\n}\r\n.glyphicon-search:before {\r\n  content: \"\\E003\";\r\n}\r\n.glyphicon-heart:before {\r\n  content: \"\\E005\";\r\n}\r\n.glyphicon-star:before {\r\n  content: \"\\E006\";\r\n}\r\n.glyphicon-star-empty:before {\r\n  content: \"\\E007\";\r\n}\r\n.glyphicon-user:before {\r\n  content: \"\\E008\";\r\n}\r\n.glyphicon-film:before {\r\n  content: \"\\E009\";\r\n}\r\n.glyphicon-th-large:before {\r\n  content: \"\\E010\";\r\n}\r\n.glyphicon-th:before {\r\n  content: \"\\E011\";\r\n}\r\n.glyphicon-th-list:before {\r\n  content: \"\\E012\";\r\n}\r\n.glyphicon-ok:before {\r\n  content: \"\\E013\";\r\n}\r\n.glyphicon-remove:before {\r\n  content: \"\\E014\";\r\n}\r\n.glyphicon-zoom-in:before {\r\n  content: \"\\E015\";\r\n}\r\n.glyphicon-zoom-out:before {\r\n  content: \"\\E016\";\r\n}\r\n.glyphicon-off:before {\r\n  content: \"\\E017\";\r\n}\r\n.glyphicon-signal:before {\r\n  content: \"\\E018\";\r\n}\r\n.glyphicon-cog:before {\r\n  content: \"\\E019\";\r\n}\r\n.glyphicon-trash:before {\r\n  content: \"\\E020\";\r\n}\r\n.glyphicon-home:before {\r\n  content: \"\\E021\";\r\n}\r\n.glyphicon-file:before {\r\n  content: \"\\E022\";\r\n}\r\n.glyphicon-time:before {\r\n  content: \"\\E023\";\r\n}\r\n.glyphicon-road:before {\r\n  content: \"\\E024\";\r\n}\r\n.glyphicon-download-alt:before {\r\n  content: \"\\E025\";\r\n}\r\n.glyphicon-download:before {\r\n  content: \"\\E026\";\r\n}\r\n.glyphicon-upload:before {\r\n  content: \"\\E027\";\r\n}\r\n.glyphicon-inbox:before {\r\n  content: \"\\E028\";\r\n}\r\n.glyphicon-play-circle:before {\r\n  content: \"\\E029\";\r\n}\r\n.glyphicon-repeat:before {\r\n  content: \"\\E030\";\r\n}\r\n.glyphicon-refresh:before {\r\n  content: \"\\E031\";\r\n}\r\n.glyphicon-list-alt:before {\r\n  content: \"\\E032\";\r\n}\r\n.glyphicon-lock:before {\r\n  content: \"\\E033\";\r\n}\r\n.glyphicon-flag:before {\r\n  content: \"\\E034\";\r\n}\r\n.glyphicon-headphones:before {\r\n  content: \"\\E035\";\r\n}\r\n.glyphicon-volume-off:before {\r\n  content: \"\\E036\";\r\n}\r\n.glyphicon-volume-down:before {\r\n  content: \"\\E037\";\r\n}\r\n.glyphicon-volume-up:before {\r\n  content: \"\\E038\";\r\n}\r\n.glyphicon-qrcode:before {\r\n  content: \"\\E039\";\r\n}\r\n.glyphicon-barcode:before {\r\n  content: \"\\E040\";\r\n}\r\n.glyphicon-tag:before {\r\n  content: \"\\E041\";\r\n}\r\n.glyphicon-tags:before {\r\n  content: \"\\E042\";\r\n}\r\n.glyphicon-book:before {\r\n  content: \"\\E043\";\r\n}\r\n.glyphicon-bookmark:before {\r\n  content: \"\\E044\";\r\n}\r\n.glyphicon-print:before {\r\n  content: \"\\E045\";\r\n}\r\n.glyphicon-camera:before {\r\n  content: \"\\E046\";\r\n}\r\n.glyphicon-font:before {\r\n  content: \"\\E047\";\r\n}\r\n.glyphicon-bold:before {\r\n  content: \"\\E048\";\r\n}\r\n.glyphicon-italic:before {\r\n  content: \"\\E049\";\r\n}\r\n.glyphicon-text-height:before {\r\n  content: \"\\E050\";\r\n}\r\n.glyphicon-text-width:before {\r\n  content: \"\\E051\";\r\n}\r\n.glyphicon-align-left:before {\r\n  content: \"\\E052\";\r\n}\r\n.glyphicon-align-center:before {\r\n  content: \"\\E053\";\r\n}\r\n.glyphicon-align-right:before {\r\n  content: \"\\E054\";\r\n}\r\n.glyphicon-align-justify:before {\r\n  content: \"\\E055\";\r\n}\r\n.glyphicon-list:before {\r\n  content: \"\\E056\";\r\n}\r\n.glyphicon-indent-left:before {\r\n  content: \"\\E057\";\r\n}\r\n.glyphicon-indent-right:before {\r\n  content: \"\\E058\";\r\n}\r\n.glyphicon-facetime-video:before {\r\n  content: \"\\E059\";\r\n}\r\n.glyphicon-picture:before {\r\n  content: \"\\E060\";\r\n}\r\n.glyphicon-map-marker:before {\r\n  content: \"\\E062\";\r\n}\r\n.glyphicon-adjust:before {\r\n  content: \"\\E063\";\r\n}\r\n.glyphicon-tint:before {\r\n  content: \"\\E064\";\r\n}\r\n.glyphicon-edit:before {\r\n  content: \"\\E065\";\r\n}\r\n.glyphicon-share:before {\r\n  content: \"\\E066\";\r\n}\r\n.glyphicon-check:before {\r\n  content: \"\\E067\";\r\n}\r\n.glyphicon-move:before {\r\n  content: \"\\E068\";\r\n}\r\n.glyphicon-step-backward:before {\r\n  content: \"\\E069\";\r\n}\r\n.glyphicon-fast-backward:before {\r\n  content: \"\\E070\";\r\n}\r\n.glyphicon-backward:before {\r\n  content: \"\\E071\";\r\n}\r\n.glyphicon-play:before {\r\n  content: \"\\E072\";\r\n}\r\n.glyphicon-pause:before {\r\n  content: \"\\E073\";\r\n}\r\n.glyphicon-stop:before {\r\n  content: \"\\E074\";\r\n}\r\n.glyphicon-forward:before {\r\n  content: \"\\E075\";\r\n}\r\n.glyphicon-fast-forward:before {\r\n  content: \"\\E076\";\r\n}\r\n.glyphicon-step-forward:before {\r\n  content: \"\\E077\";\r\n}\r\n.glyphicon-eject:before {\r\n  content: \"\\E078\";\r\n}\r\n.glyphicon-chevron-left:before {\r\n  content: \"\\E079\";\r\n}\r\n.glyphicon-chevron-right:before {\r\n  content: \"\\E080\";\r\n}\r\n.glyphicon-plus-sign:before {\r\n  content: \"\\E081\";\r\n}\r\n.glyphicon-minus-sign:before {\r\n  content: \"\\E082\";\r\n}\r\n.glyphicon-remove-sign:before {\r\n  content: \"\\E083\";\r\n}\r\n.glyphicon-ok-sign:before {\r\n  content: \"\\E084\";\r\n}\r\n.glyphicon-question-sign:before {\r\n  content: \"\\E085\";\r\n}\r\n.glyphicon-info-sign:before {\r\n  content: \"\\E086\";\r\n}\r\n.glyphicon-screenshot:before {\r\n  content: \"\\E087\";\r\n}\r\n.glyphicon-remove-circle:before {\r\n  content: \"\\E088\";\r\n}\r\n.glyphicon-ok-circle:before {\r\n  content: \"\\E089\";\r\n}\r\n.glyphicon-ban-circle:before {\r\n  content: \"\\E090\";\r\n}\r\n.glyphicon-arrow-left:before {\r\n  content: \"\\E091\";\r\n}\r\n.glyphicon-arrow-right:before {\r\n  content: \"\\E092\";\r\n}\r\n.glyphicon-arrow-up:before {\r\n  content: \"\\E093\";\r\n}\r\n.glyphicon-arrow-down:before {\r\n  content: \"\\E094\";\r\n}\r\n.glyphicon-share-alt:before {\r\n  content: \"\\E095\";\r\n}\r\n.glyphicon-resize-full:before {\r\n  content: \"\\E096\";\r\n}\r\n.glyphicon-resize-small:before {\r\n  content: \"\\E097\";\r\n}\r\n.glyphicon-exclamation-sign:before {\r\n  content: \"\\E101\";\r\n}\r\n.glyphicon-gift:before {\r\n  content: \"\\E102\";\r\n}\r\n.glyphicon-leaf:before {\r\n  content: \"\\E103\";\r\n}\r\n.glyphicon-fire:before {\r\n  content: \"\\E104\";\r\n}\r\n.glyphicon-eye-open:before {\r\n  content: \"\\E105\";\r\n}\r\n.glyphicon-eye-close:before {\r\n  content: \"\\E106\";\r\n}\r\n.glyphicon-warning-sign:before {\r\n  content: \"\\E107\";\r\n}\r\n.glyphicon-plane:before {\r\n  content: \"\\E108\";\r\n}\r\n.glyphicon-calendar:before {\r\n  content: \"\\E109\";\r\n}\r\n.glyphicon-random:before {\r\n  content: \"\\E110\";\r\n}\r\n.glyphicon-comment:before {\r\n  content: \"\\E111\";\r\n}\r\n.glyphicon-magnet:before {\r\n  content: \"\\E112\";\r\n}\r\n.glyphicon-chevron-up:before {\r\n  content: \"\\E113\";\r\n}\r\n.glyphicon-chevron-down:before {\r\n  content: \"\\E114\";\r\n}\r\n.glyphicon-retweet:before {\r\n  content: \"\\E115\";\r\n}\r\n.glyphicon-shopping-cart:before {\r\n  content: \"\\E116\";\r\n}\r\n.glyphicon-folder-close:before {\r\n  content: \"\\E117\";\r\n}\r\n.glyphicon-folder-open:before {\r\n  content: \"\\E118\";\r\n}\r\n.glyphicon-resize-vertical:before {\r\n  content: \"\\E119\";\r\n}\r\n.glyphicon-resize-horizontal:before {\r\n  content: \"\\E120\";\r\n}\r\n.glyphicon-hdd:before {\r\n  content: \"\\E121\";\r\n}\r\n.glyphicon-bullhorn:before {\r\n  content: \"\\E122\";\r\n}\r\n.glyphicon-bell:before {\r\n  content: \"\\E123\";\r\n}\r\n.glyphicon-certificate:before {\r\n  content: \"\\E124\";\r\n}\r\n.glyphicon-thumbs-up:before {\r\n  content: \"\\E125\";\r\n}\r\n.glyphicon-thumbs-down:before {\r\n  content: \"\\E126\";\r\n}\r\n.glyphicon-hand-right:before {\r\n  content: \"\\E127\";\r\n}\r\n.glyphicon-hand-left:before {\r\n  content: \"\\E128\";\r\n}\r\n.glyphicon-hand-up:before {\r\n  content: \"\\E129\";\r\n}\r\n.glyphicon-hand-down:before {\r\n  content: \"\\E130\";\r\n}\r\n.glyphicon-circle-arrow-right:before {\r\n  content: \"\\E131\";\r\n}\r\n.glyphicon-circle-arrow-left:before {\r\n  content: \"\\E132\";\r\n}\r\n.glyphicon-circle-arrow-up:before {\r\n  content: \"\\E133\";\r\n}\r\n.glyphicon-circle-arrow-down:before {\r\n  content: \"\\E134\";\r\n}\r\n.glyphicon-globe:before {\r\n  content: \"\\E135\";\r\n}\r\n.glyphicon-wrench:before {\r\n  content: \"\\E136\";\r\n}\r\n.glyphicon-tasks:before {\r\n  content: \"\\E137\";\r\n}\r\n.glyphicon-filter:before {\r\n  content: \"\\E138\";\r\n}\r\n.glyphicon-briefcase:before {\r\n  content: \"\\E139\";\r\n}\r\n.glyphicon-fullscreen:before {\r\n  content: \"\\E140\";\r\n}\r\n.glyphicon-dashboard:before {\r\n  content: \"\\E141\";\r\n}\r\n.glyphicon-paperclip:before {\r\n  content: \"\\E142\";\r\n}\r\n.glyphicon-heart-empty:before {\r\n  content: \"\\E143\";\r\n}\r\n.glyphicon-link:before {\r\n  content: \"\\E144\";\r\n}\r\n.glyphicon-phone:before {\r\n  content: \"\\E145\";\r\n}\r\n.glyphicon-pushpin:before {\r\n  content: \"\\E146\";\r\n}\r\n.glyphicon-usd:before {\r\n  content: \"\\E148\";\r\n}\r\n.glyphicon-gbp:before {\r\n  content: \"\\E149\";\r\n}\r\n.glyphicon-sort:before {\r\n  content: \"\\E150\";\r\n}\r\n.glyphicon-sort-by-alphabet:before {\r\n  content: \"\\E151\";\r\n}\r\n.glyphicon-sort-by-alphabet-alt:before {\r\n  content: \"\\E152\";\r\n}\r\n.glyphicon-sort-by-order:before {\r\n  content: \"\\E153\";\r\n}\r\n.glyphicon-sort-by-order-alt:before {\r\n  content: \"\\E154\";\r\n}\r\n.glyphicon-sort-by-attributes:before {\r\n  content: \"\\E155\";\r\n}\r\n.glyphicon-sort-by-attributes-alt:before {\r\n  content: \"\\E156\";\r\n}\r\n.glyphicon-unchecked:before {\r\n  content: \"\\E157\";\r\n}\r\n.glyphicon-expand:before {\r\n  content: \"\\E158\";\r\n}\r\n.glyphicon-collapse-down:before {\r\n  content: \"\\E159\";\r\n}\r\n.glyphicon-collapse-up:before {\r\n  content: \"\\E160\";\r\n}\r\n.glyphicon-log-in:before {\r\n  content: \"\\E161\";\r\n}\r\n.glyphicon-flash:before {\r\n  content: \"\\E162\";\r\n}\r\n.glyphicon-log-out:before {\r\n  content: \"\\E163\";\r\n}\r\n.glyphicon-new-window:before {\r\n  content: \"\\E164\";\r\n}\r\n.glyphicon-record:before {\r\n  content: \"\\E165\";\r\n}\r\n.glyphicon-save:before {\r\n  content: \"\\E166\";\r\n}\r\n.glyphicon-open:before {\r\n  content: \"\\E167\";\r\n}\r\n.glyphicon-saved:before {\r\n  content: \"\\E168\";\r\n}\r\n.glyphicon-import:before {\r\n  content: \"\\E169\";\r\n}\r\n.glyphicon-export:before {\r\n  content: \"\\E170\";\r\n}\r\n.glyphicon-send:before {\r\n  content: \"\\E171\";\r\n}\r\n.glyphicon-floppy-disk:before {\r\n  content: \"\\E172\";\r\n}\r\n.glyphicon-floppy-saved:before {\r\n  content: \"\\E173\";\r\n}\r\n.glyphicon-floppy-remove:before {\r\n  content: \"\\E174\";\r\n}\r\n.glyphicon-floppy-save:before {\r\n  content: \"\\E175\";\r\n}\r\n.glyphicon-floppy-open:before {\r\n  content: \"\\E176\";\r\n}\r\n.glyphicon-credit-card:before {\r\n  content: \"\\E177\";\r\n}\r\n.glyphicon-transfer:before {\r\n  content: \"\\E178\";\r\n}\r\n.glyphicon-cutlery:before {\r\n  content: \"\\E179\";\r\n}\r\n.glyphicon-header:before {\r\n  content: \"\\E180\";\r\n}\r\n.glyphicon-compressed:before {\r\n  content: \"\\E181\";\r\n}\r\n.glyphicon-earphone:before {\r\n  content: \"\\E182\";\r\n}\r\n.glyphicon-phone-alt:before {\r\n  content: \"\\E183\";\r\n}\r\n.glyphicon-tower:before {\r\n  content: \"\\E184\";\r\n}\r\n.glyphicon-stats:before {\r\n  content: \"\\E185\";\r\n}\r\n.glyphicon-sd-video:before {\r\n  content: \"\\E186\";\r\n}\r\n.glyphicon-hd-video:before {\r\n  content: \"\\E187\";\r\n}\r\n.glyphicon-subtitles:before {\r\n  content: \"\\E188\";\r\n}\r\n.glyphicon-sound-stereo:before {\r\n  content: \"\\E189\";\r\n}\r\n.glyphicon-sound-dolby:before {\r\n  content: \"\\E190\";\r\n}\r\n.glyphicon-sound-5-1:before {\r\n  content: \"\\E191\";\r\n}\r\n.glyphicon-sound-6-1:before {\r\n  content: \"\\E192\";\r\n}\r\n.glyphicon-sound-7-1:before {\r\n  content: \"\\E193\";\r\n}\r\n.glyphicon-copyright-mark:before {\r\n  content: \"\\E194\";\r\n}\r\n.glyphicon-registration-mark:before {\r\n  content: \"\\E195\";\r\n}\r\n.glyphicon-cloud-download:before {\r\n  content: \"\\E197\";\r\n}\r\n.glyphicon-cloud-upload:before {\r\n  content: \"\\E198\";\r\n}\r\n.glyphicon-tree-conifer:before {\r\n  content: \"\\E199\";\r\n}\r\n.glyphicon-tree-deciduous:before {\r\n  content: \"\\E200\";\r\n}\r\n.glyphicon-cd:before {\r\n  content: \"\\E201\";\r\n}\r\n.glyphicon-save-file:before {\r\n  content: \"\\E202\";\r\n}\r\n.glyphicon-open-file:before {\r\n  content: \"\\E203\";\r\n}\r\n.glyphicon-level-up:before {\r\n  content: \"\\E204\";\r\n}\r\n.glyphicon-copy:before {\r\n  content: \"\\E205\";\r\n}\r\n.glyphicon-paste:before {\r\n  content: \"\\E206\";\r\n}\r\n.glyphicon-alert:before {\r\n  content: \"\\E209\";\r\n}\r\n.glyphicon-equalizer:before {\r\n  content: \"\\E210\";\r\n}\r\n.glyphicon-king:before {\r\n  content: \"\\E211\";\r\n}\r\n.glyphicon-queen:before {\r\n  content: \"\\E212\";\r\n}\r\n.glyphicon-pawn:before {\r\n  content: \"\\E213\";\r\n}\r\n.glyphicon-bishop:before {\r\n  content: \"\\E214\";\r\n}\r\n.glyphicon-knight:before {\r\n  content: \"\\E215\";\r\n}\r\n.glyphicon-baby-formula:before {\r\n  content: \"\\E216\";\r\n}\r\n.glyphicon-tent:before {\r\n  content: \"\\26FA\";\r\n}\r\n.glyphicon-blackboard:before {\r\n  content: \"\\E218\";\r\n}\r\n.glyphicon-bed:before {\r\n  content: \"\\E219\";\r\n}\r\n.glyphicon-apple:before {\r\n  content: \"\\F8FF\";\r\n}\r\n.glyphicon-erase:before {\r\n  content: \"\\E221\";\r\n}\r\n.glyphicon-hourglass:before {\r\n  content: \"\\231B\";\r\n}\r\n.glyphicon-lamp:before {\r\n  content: \"\\E223\";\r\n}\r\n.glyphicon-duplicate:before {\r\n  content: \"\\E224\";\r\n}\r\n.glyphicon-piggy-bank:before {\r\n  content: \"\\E225\";\r\n}\r\n.glyphicon-scissors:before {\r\n  content: \"\\E226\";\r\n}\r\n.glyphicon-bitcoin:before {\r\n  content: \"\\E227\";\r\n}\r\n.glyphicon-btc:before {\r\n  content: \"\\E227\";\r\n}\r\n.glyphicon-xbt:before {\r\n  content: \"\\E227\";\r\n}\r\n.glyphicon-yen:before {\r\n  content: \"\\A5\";\r\n}\r\n.glyphicon-jpy:before {\r\n  content: \"\\A5\";\r\n}\r\n.glyphicon-ruble:before {\r\n  content: \"\\20BD\";\r\n}\r\n.glyphicon-rub:before {\r\n  content: \"\\20BD\";\r\n}\r\n.glyphicon-scale:before {\r\n  content: \"\\E230\";\r\n}\r\n.glyphicon-ice-lolly:before {\r\n  content: \"\\E231\";\r\n}\r\n.glyphicon-ice-lolly-tasted:before {\r\n  content: \"\\E232\";\r\n}\r\n.glyphicon-education:before {\r\n  content: \"\\E233\";\r\n}\r\n.glyphicon-option-horizontal:before {\r\n  content: \"\\E234\";\r\n}\r\n.glyphicon-option-vertical:before {\r\n  content: \"\\E235\";\r\n}\r\n.glyphicon-menu-hamburger:before {\r\n  content: \"\\E236\";\r\n}\r\n.glyphicon-modal-window:before {\r\n  content: \"\\E237\";\r\n}\r\n.glyphicon-oil:before {\r\n  content: \"\\E238\";\r\n}\r\n.glyphicon-grain:before {\r\n  content: \"\\E239\";\r\n}\r\n.glyphicon-sunglasses:before {\r\n  content: \"\\E240\";\r\n}\r\n.glyphicon-text-size:before {\r\n  content: \"\\E241\";\r\n}\r\n.glyphicon-text-color:before {\r\n  content: \"\\E242\";\r\n}\r\n.glyphicon-text-background:before {\r\n  content: \"\\E243\";\r\n}\r\n.glyphicon-object-align-top:before {\r\n  content: \"\\E244\";\r\n}\r\n.glyphicon-object-align-bottom:before {\r\n  content: \"\\E245\";\r\n}\r\n.glyphicon-object-align-horizontal:before {\r\n  content: \"\\E246\";\r\n}\r\n.glyphicon-object-align-left:before {\r\n  content: \"\\E247\";\r\n}\r\n.glyphicon-object-align-vertical:before {\r\n  content: \"\\E248\";\r\n}\r\n.glyphicon-object-align-right:before {\r\n  content: \"\\E249\";\r\n}\r\n.glyphicon-triangle-right:before {\r\n  content: \"\\E250\";\r\n}\r\n.glyphicon-triangle-left:before {\r\n  content: \"\\E251\";\r\n}\r\n.glyphicon-triangle-bottom:before {\r\n  content: \"\\E252\";\r\n}\r\n.glyphicon-triangle-top:before {\r\n  content: \"\\E253\";\r\n}\r\n.glyphicon-console:before {\r\n  content: \"\\E254\";\r\n}\r\n.glyphicon-superscript:before {\r\n  content: \"\\E255\";\r\n}\r\n.glyphicon-subscript:before {\r\n  content: \"\\E256\";\r\n}\r\n.glyphicon-menu-left:before {\r\n  content: \"\\E257\";\r\n}\r\n.glyphicon-menu-right:before {\r\n  content: \"\\E258\";\r\n}\r\n.glyphicon-menu-down:before {\r\n  content: \"\\E259\";\r\n}\r\n.glyphicon-menu-up:before {\r\n  content: \"\\E260\";\r\n}\r\n* {\r\n  -webkit-box-sizing: border-box;\r\n     -moz-box-sizing: border-box;\r\n          box-sizing: border-box;\r\n}\r\n*:before,\r\n*:after {\r\n  -webkit-box-sizing: border-box;\r\n     -moz-box-sizing: border-box;\r\n          box-sizing: border-box;\r\n}\r\nhtml {\r\n  font-size: 10px;\r\n\r\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n}\r\nbody {\r\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 1.42857143;\r\n  color: #333;\r\n  background-color: #fff;\r\n}\r\ninput,\r\nbutton,\r\nselect,\r\ntextarea {\r\n  font-family: inherit;\r\n  font-size: inherit;\r\n  line-height: inherit;\r\n}\r\na {\r\n  color: #337ab7;\r\n  text-decoration: none;\r\n}\r\na:hover,\r\na:focus {\r\n  color: #23527c;\r\n  text-decoration: underline;\r\n}\r\na:focus {\r\n  outline: thin dotted;\r\n  outline: 5px auto -webkit-focus-ring-color;\r\n  outline-offset: -2px;\r\n}\r\nfigure {\r\n  margin: 0;\r\n}\r\nimg {\r\n  vertical-align: middle;\r\n}\r\n.img-responsive,\r\n.thumbnail > img,\r\n.thumbnail a > img,\r\n.carousel-inner > .item > img,\r\n.carousel-inner > .item > a > img {\r\n  display: block;\r\n  max-width: 100%;\r\n  height: auto;\r\n}\r\n.img-rounded {\r\n  border-radius: 6px;\r\n}\r\n.img-thumbnail {\r\n  display: inline-block;\r\n  max-width: 100%;\r\n  height: auto;\r\n  padding: 4px;\r\n  line-height: 1.42857143;\r\n  background-color: #fff;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  -webkit-transition: all .2s ease-in-out;\r\n       -o-transition: all .2s ease-in-out;\r\n          transition: all .2s ease-in-out;\r\n}\r\n.img-circle {\r\n  border-radius: 50%;\r\n}\r\nhr {\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  border: 0;\r\n  border-top: 1px solid #eee;\r\n}\r\n.sr-only {\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 1px;\r\n  padding: 0;\r\n  margin: -1px;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0);\r\n  border: 0;\r\n}\r\n.sr-only-focusable:active,\r\n.sr-only-focusable:focus {\r\n  position: static;\r\n  width: auto;\r\n  height: auto;\r\n  margin: 0;\r\n  overflow: visible;\r\n  clip: auto;\r\n}\r\n[role=\"button\"] {\r\n  cursor: pointer;\r\n}\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6,\r\n.h1,\r\n.h2,\r\n.h3,\r\n.h4,\r\n.h5,\r\n.h6 {\r\n  font-family: inherit;\r\n  font-weight: 500;\r\n  line-height: 1.1;\r\n  color: inherit;\r\n}\r\nh1 small,\r\nh2 small,\r\nh3 small,\r\nh4 small,\r\nh5 small,\r\nh6 small,\r\n.h1 small,\r\n.h2 small,\r\n.h3 small,\r\n.h4 small,\r\n.h5 small,\r\n.h6 small,\r\nh1 .small,\r\nh2 .small,\r\nh3 .small,\r\nh4 .small,\r\nh5 .small,\r\nh6 .small,\r\n.h1 .small,\r\n.h2 .small,\r\n.h3 .small,\r\n.h4 .small,\r\n.h5 .small,\r\n.h6 .small {\r\n  font-weight: normal;\r\n  line-height: 1;\r\n  color: #777;\r\n}\r\nh1,\r\n.h1,\r\nh2,\r\n.h2,\r\nh3,\r\n.h3 {\r\n  margin-top: 20px;\r\n  margin-bottom: 10px;\r\n}\r\nh1 small,\r\n.h1 small,\r\nh2 small,\r\n.h2 small,\r\nh3 small,\r\n.h3 small,\r\nh1 .small,\r\n.h1 .small,\r\nh2 .small,\r\n.h2 .small,\r\nh3 .small,\r\n.h3 .small {\r\n  font-size: 65%;\r\n}\r\nh4,\r\n.h4,\r\nh5,\r\n.h5,\r\nh6,\r\n.h6 {\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n}\r\nh4 small,\r\n.h4 small,\r\nh5 small,\r\n.h5 small,\r\nh6 small,\r\n.h6 small,\r\nh4 .small,\r\n.h4 .small,\r\nh5 .small,\r\n.h5 .small,\r\nh6 .small,\r\n.h6 .small {\r\n  font-size: 75%;\r\n}\r\nh1,\r\n.h1 {\r\n  font-size: 36px;\r\n}\r\nh2,\r\n.h2 {\r\n  font-size: 30px;\r\n}\r\nh3,\r\n.h3 {\r\n  font-size: 24px;\r\n}\r\nh4,\r\n.h4 {\r\n  font-size: 18px;\r\n}\r\nh5,\r\n.h5 {\r\n  font-size: 14px;\r\n}\r\nh6,\r\n.h6 {\r\n  font-size: 12px;\r\n}\r\np {\r\n  margin: 0 0 10px;\r\n}\r\n.lead {\r\n  margin-bottom: 20px;\r\n  font-size: 16px;\r\n  font-weight: 300;\r\n  line-height: 1.4;\r\n}\r\n@media (min-width: 768px) {\r\n  .lead {\r\n    font-size: 21px;\r\n  }\r\n}\r\nsmall,\r\n.small {\r\n  font-size: 85%;\r\n}\r\nmark,\r\n.mark {\r\n  padding: .2em;\r\n  background-color: #fcf8e3;\r\n}\r\n.text-left {\r\n  text-align: left;\r\n}\r\n.text-right {\r\n  text-align: right;\r\n}\r\n.text-center {\r\n  text-align: center;\r\n}\r\n.text-justify {\r\n  text-align: justify;\r\n}\r\n.text-nowrap {\r\n  white-space: nowrap;\r\n}\r\n.text-lowercase {\r\n  text-transform: lowercase;\r\n}\r\n.text-uppercase {\r\n  text-transform: uppercase;\r\n}\r\n.text-capitalize {\r\n  text-transform: capitalize;\r\n}\r\n.text-muted {\r\n  color: #777;\r\n}\r\n.text-primary {\r\n  color: #337ab7;\r\n}\r\na.text-primary:hover,\r\na.text-primary:focus {\r\n  color: #286090;\r\n}\r\n.text-success {\r\n  color: #3c763d;\r\n}\r\na.text-success:hover,\r\na.text-success:focus {\r\n  color: #2b542c;\r\n}\r\n.text-info {\r\n  color: #31708f;\r\n}\r\na.text-info:hover,\r\na.text-info:focus {\r\n  color: #245269;\r\n}\r\n.text-warning {\r\n  color: #8a6d3b;\r\n}\r\na.text-warning:hover,\r\na.text-warning:focus {\r\n  color: #66512c;\r\n}\r\n.text-danger {\r\n  color: #a94442;\r\n}\r\na.text-danger:hover,\r\na.text-danger:focus {\r\n  color: #843534;\r\n}\r\n.bg-primary {\r\n  color: #fff;\r\n  background-color: #337ab7;\r\n}\r\na.bg-primary:hover,\r\na.bg-primary:focus {\r\n  background-color: #286090;\r\n}\r\n.bg-success {\r\n  background-color: #dff0d8;\r\n}\r\na.bg-success:hover,\r\na.bg-success:focus {\r\n  background-color: #c1e2b3;\r\n}\r\n.bg-info {\r\n  background-color: #d9edf7;\r\n}\r\na.bg-info:hover,\r\na.bg-info:focus {\r\n  background-color: #afd9ee;\r\n}\r\n.bg-warning {\r\n  background-color: #fcf8e3;\r\n}\r\na.bg-warning:hover,\r\na.bg-warning:focus {\r\n  background-color: #f7ecb5;\r\n}\r\n.bg-danger {\r\n  background-color: #f2dede;\r\n}\r\na.bg-danger:hover,\r\na.bg-danger:focus {\r\n  background-color: #e4b9b9;\r\n}\r\n.page-header {\r\n  padding-bottom: 9px;\r\n  margin: 40px 0 20px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\nul,\r\nol {\r\n  margin-top: 0;\r\n  margin-bottom: 10px;\r\n}\r\nul ul,\r\nol ul,\r\nul ol,\r\nol ol {\r\n  margin-bottom: 0;\r\n}\r\n.list-unstyled {\r\n  padding-left: 0;\r\n  list-style: none;\r\n}\r\n.list-inline {\r\n  padding-left: 0;\r\n  margin-left: -5px;\r\n  list-style: none;\r\n}\r\n.list-inline > li {\r\n  display: inline-block;\r\n  padding-right: 5px;\r\n  padding-left: 5px;\r\n}\r\ndl {\r\n  margin-top: 0;\r\n  margin-bottom: 20px;\r\n}\r\ndt,\r\ndd {\r\n  line-height: 1.42857143;\r\n}\r\ndt {\r\n  font-weight: bold;\r\n}\r\ndd {\r\n  margin-left: 0;\r\n}\r\n@media (min-width: 768px) {\r\n  .dl-horizontal dt {\r\n    float: left;\r\n    width: 160px;\r\n    overflow: hidden;\r\n    clear: left;\r\n    text-align: right;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n  }\r\n  .dl-horizontal dd {\r\n    margin-left: 180px;\r\n  }\r\n}\r\nabbr[title],\r\nabbr[data-original-title] {\r\n  cursor: help;\r\n  border-bottom: 1px dotted #777;\r\n}\r\n.initialism {\r\n  font-size: 90%;\r\n  text-transform: uppercase;\r\n}\r\nblockquote {\r\n  padding: 10px 20px;\r\n  margin: 0 0 20px;\r\n  font-size: 17.5px;\r\n  border-left: 5px solid #eee;\r\n}\r\nblockquote p:last-child,\r\nblockquote ul:last-child,\r\nblockquote ol:last-child {\r\n  margin-bottom: 0;\r\n}\r\nblockquote footer,\r\nblockquote small,\r\nblockquote .small {\r\n  display: block;\r\n  font-size: 80%;\r\n  line-height: 1.42857143;\r\n  color: #777;\r\n}\r\nblockquote footer:before,\r\nblockquote small:before,\r\nblockquote .small:before {\r\n  content: '\\2014   \\A0';\r\n}\r\n.blockquote-reverse,\r\nblockquote.pull-right {\r\n  padding-right: 15px;\r\n  padding-left: 0;\r\n  text-align: right;\r\n  border-right: 5px solid #eee;\r\n  border-left: 0;\r\n}\r\n.blockquote-reverse footer:before,\r\nblockquote.pull-right footer:before,\r\n.blockquote-reverse small:before,\r\nblockquote.pull-right small:before,\r\n.blockquote-reverse .small:before,\r\nblockquote.pull-right .small:before {\r\n  content: '';\r\n}\r\n.blockquote-reverse footer:after,\r\nblockquote.pull-right footer:after,\r\n.blockquote-reverse small:after,\r\nblockquote.pull-right small:after,\r\n.blockquote-reverse .small:after,\r\nblockquote.pull-right .small:after {\r\n  content: '\\A0   \\2014';\r\n}\r\naddress {\r\n  margin-bottom: 20px;\r\n  font-style: normal;\r\n  line-height: 1.42857143;\r\n}\r\ncode,\r\nkbd,\r\npre,\r\nsamp {\r\n  font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace;\r\n}\r\ncode {\r\n  padding: 2px 4px;\r\n  font-size: 90%;\r\n  color: #c7254e;\r\n  background-color: #f9f2f4;\r\n  border-radius: 4px;\r\n}\r\nkbd {\r\n  padding: 2px 4px;\r\n  font-size: 90%;\r\n  color: #fff;\r\n  background-color: #333;\r\n  border-radius: 3px;\r\n  -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .25);\r\n          box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .25);\r\n}\r\nkbd kbd {\r\n  padding: 0;\r\n  font-size: 100%;\r\n  font-weight: bold;\r\n  -webkit-box-shadow: none;\r\n          box-shadow: none;\r\n}\r\npre {\r\n  display: block;\r\n  padding: 9.5px;\r\n  margin: 0 0 10px;\r\n  font-size: 13px;\r\n  line-height: 1.42857143;\r\n  color: #333;\r\n  word-break: break-all;\r\n  word-wrap: break-word;\r\n  background-color: #f5f5f5;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\npre code {\r\n  padding: 0;\r\n  font-size: inherit;\r\n  color: inherit;\r\n  white-space: pre-wrap;\r\n  background-color: transparent;\r\n  border-radius: 0;\r\n}\r\n.pre-scrollable {\r\n  max-height: 340px;\r\n  overflow-y: scroll;\r\n}\r\n.container {\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n}\r\n@media (min-width: 768px) {\r\n  .container {\r\n    width: 750px;\r\n  }\r\n}\r\n@media (min-width: 992px) {\r\n  .container {\r\n    width: 970px;\r\n  }\r\n}\r\n@media (min-width: 1200px) {\r\n  .container {\r\n    width: 1170px;\r\n  }\r\n}\r\n.container-fluid {\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n}\r\n.row {\r\n  margin-right: -15px;\r\n  margin-left: -15px;\r\n}\r\n.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {\r\n  position: relative;\r\n  min-height: 1px;\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n}\r\n.col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12 {\r\n  float: left;\r\n}\r\n.col-xs-12 {\r\n  width: 100%;\r\n}\r\n.col-xs-11 {\r\n  width: 91.66666667%;\r\n}\r\n.col-xs-10 {\r\n  width: 83.33333333%;\r\n}\r\n.col-xs-9 {\r\n  width: 75%;\r\n}\r\n.col-xs-8 {\r\n  width: 66.66666667%;\r\n}\r\n.col-xs-7 {\r\n  width: 58.33333333%;\r\n}\r\n.col-xs-6 {\r\n  width: 50%;\r\n}\r\n.col-xs-5 {\r\n  width: 41.66666667%;\r\n}\r\n.col-xs-4 {\r\n  width: 33.33333333%;\r\n}\r\n.col-xs-3 {\r\n  width: 25%;\r\n}\r\n.col-xs-2 {\r\n  width: 16.66666667%;\r\n}\r\n.col-xs-1 {\r\n  width: 8.33333333%;\r\n}\r\n.col-xs-pull-12 {\r\n  right: 100%;\r\n}\r\n.col-xs-pull-11 {\r\n  right: 91.66666667%;\r\n}\r\n.col-xs-pull-10 {\r\n  right: 83.33333333%;\r\n}\r\n.col-xs-pull-9 {\r\n  right: 75%;\r\n}\r\n.col-xs-pull-8 {\r\n  right: 66.66666667%;\r\n}\r\n.col-xs-pull-7 {\r\n  right: 58.33333333%;\r\n}\r\n.col-xs-pull-6 {\r\n  right: 50%;\r\n}\r\n.col-xs-pull-5 {\r\n  right: 41.66666667%;\r\n}\r\n.col-xs-pull-4 {\r\n  right: 33.33333333%;\r\n}\r\n.col-xs-pull-3 {\r\n  right: 25%;\r\n}\r\n.col-xs-pull-2 {\r\n  right: 16.66666667%;\r\n}\r\n.col-xs-pull-1 {\r\n  right: 8.33333333%;\r\n}\r\n.col-xs-pull-0 {\r\n  right: auto;\r\n}\r\n.col-xs-push-12 {\r\n  left: 100%;\r\n}\r\n.col-xs-push-11 {\r\n  left: 91.66666667%;\r\n}\r\n.col-xs-push-10 {\r\n  left: 83.33333333%;\r\n}\r\n.col-xs-push-9 {\r\n  left: 75%;\r\n}\r\n.col-xs-push-8 {\r\n  left: 66.66666667%;\r\n}\r\n.col-xs-push-7 {\r\n  left: 58.33333333%;\r\n}\r\n.col-xs-push-6 {\r\n  left: 50%;\r\n}\r\n.col-xs-push-5 {\r\n  left: 41.66666667%;\r\n}\r\n.col-xs-push-4 {\r\n  left: 33.33333333%;\r\n}\r\n.col-xs-push-3 {\r\n  left: 25%;\r\n}\r\n.col-xs-push-2 {\r\n  left: 16.66666667%;\r\n}\r\n.col-xs-push-1 {\r\n  left: 8.33333333%;\r\n}\r\n.col-xs-push-0 {\r\n  left: auto;\r\n}\r\n.col-xs-offset-12 {\r\n  margin-left: 100%;\r\n}\r\n.col-xs-offset-11 {\r\n  margin-left: 91.66666667%;\r\n}\r\n.col-xs-offset-10 {\r\n  margin-left: 83.33333333%;\r\n}\r\n.col-xs-offset-9 {\r\n  margin-left: 75%;\r\n}\r\n.col-xs-offset-8 {\r\n  margin-left: 66.66666667%;\r\n}\r\n.col-xs-offset-7 {\r\n  margin-left: 58.33333333%;\r\n}\r\n.col-xs-offset-6 {\r\n  margin-left: 50%;\r\n}\r\n.col-xs-offset-5 {\r\n  margin-left: 41.66666667%;\r\n}\r\n.col-xs-offset-4 {\r\n  margin-left: 33.33333333%;\r\n}\r\n.col-xs-offset-3 {\r\n  margin-left: 25%;\r\n}\r\n.col-xs-offset-2 {\r\n  margin-left: 16.66666667%;\r\n}\r\n.col-xs-offset-1 {\r\n  margin-left: 8.33333333%;\r\n}\r\n.col-xs-offset-0 {\r\n  margin-left: 0;\r\n}\r\n@media (min-width: 768px) {\r\n  .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12 {\r\n    float: left;\r\n  }\r\n  .col-sm-12 {\r\n    width: 100%;\r\n  }\r\n  .col-sm-11 {\r\n    width: 91.66666667%;\r\n  }\r\n  .col-sm-10 {\r\n    width: 83.33333333%;\r\n  }\r\n  .col-sm-9 {\r\n    width: 75%;\r\n  }\r\n  .col-sm-8 {\r\n    width: 66.66666667%;\r\n  }\r\n  .col-sm-7 {\r\n    width: 58.33333333%;\r\n  }\r\n  .col-sm-6 {\r\n    width: 50%;\r\n  }\r\n  .col-sm-5 {\r\n    width: 41.66666667%;\r\n  }\r\n  .col-sm-4 {\r\n    width: 33.33333333%;\r\n  }\r\n  .col-sm-3 {\r\n    width: 25%;\r\n  }\r\n  .col-sm-2 {\r\n    width: 16.66666667%;\r\n  }\r\n  .col-sm-1 {\r\n    width: 8.33333333%;\r\n  }\r\n  .col-sm-pull-12 {\r\n    right: 100%;\r\n  }\r\n  .col-sm-pull-11 {\r\n    right: 91.66666667%;\r\n  }\r\n  .col-sm-pull-10 {\r\n    right: 83.33333333%;\r\n  }\r\n  .col-sm-pull-9 {\r\n    right: 75%;\r\n  }\r\n  .col-sm-pull-8 {\r\n    right: 66.66666667%;\r\n  }\r\n  .col-sm-pull-7 {\r\n    right: 58.33333333%;\r\n  }\r\n  .col-sm-pull-6 {\r\n    right: 50%;\r\n  }\r\n  .col-sm-pull-5 {\r\n    right: 41.66666667%;\r\n  }\r\n  .col-sm-pull-4 {\r\n    right: 33.33333333%;\r\n  }\r\n  .col-sm-pull-3 {\r\n    right: 25%;\r\n  }\r\n  .col-sm-pull-2 {\r\n    right: 16.66666667%;\r\n  }\r\n  .col-sm-pull-1 {\r\n    right: 8.33333333%;\r\n  }\r\n  .col-sm-pull-0 {\r\n    right: auto;\r\n  }\r\n  .col-sm-push-12 {\r\n    left: 100%;\r\n  }\r\n  .col-sm-push-11 {\r\n    left: 91.66666667%;\r\n  }\r\n  .col-sm-push-10 {\r\n    left: 83.33333333%;\r\n  }\r\n  .col-sm-push-9 {\r\n    left: 75%;\r\n  }\r\n  .col-sm-push-8 {\r\n    left: 66.66666667%;\r\n  }\r\n  .col-sm-push-7 {\r\n    left: 58.33333333%;\r\n  }\r\n  .col-sm-push-6 {\r\n    left: 50%;\r\n  }\r\n  .col-sm-push-5 {\r\n    left: 41.66666667%;\r\n  }\r\n  .col-sm-push-4 {\r\n    left: 33.33333333%;\r\n  }\r\n  .col-sm-push-3 {\r\n    left: 25%;\r\n  }\r\n  .col-sm-push-2 {\r\n    left: 16.66666667%;\r\n  }\r\n  .col-sm-push-1 {\r\n    left: 8.33333333%;\r\n  }\r\n  .col-sm-push-0 {\r\n    left: auto;\r\n  }\r\n  .col-sm-offset-12 {\r\n    margin-left: 100%;\r\n  }\r\n  .col-sm-offset-11 {\r\n    margin-left: 91.66666667%;\r\n  }\r\n  .col-sm-offset-10 {\r\n    margin-left: 83.33333333%;\r\n  }\r\n  .col-sm-offset-9 {\r\n    margin-left: 75%;\r\n  }\r\n  .col-sm-offset-8 {\r\n    margin-left: 66.66666667%;\r\n  }\r\n  .col-sm-offset-7 {\r\n    margin-left: 58.33333333%;\r\n  }\r\n  .col-sm-offset-6 {\r\n    margin-left: 50%;\r\n  }\r\n  .col-sm-offset-5 {\r\n    margin-left: 41.66666667%;\r\n  }\r\n  .col-sm-offset-4 {\r\n    margin-left: 33.33333333%;\r\n  }\r\n  .col-sm-offset-3 {\r\n    margin-left: 25%;\r\n  }\r\n  .col-sm-offset-2 {\r\n    margin-left: 16.66666667%;\r\n  }\r\n  .col-sm-offset-1 {\r\n    margin-left: 8.33333333%;\r\n  }\r\n  .col-sm-offset-0 {\r\n    margin-left: 0;\r\n  }\r\n}\r\n@media (min-width: 992px) {\r\n  .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {\r\n    float: left;\r\n  }\r\n  .col-md-12 {\r\n    width: 100%;\r\n  }\r\n  .col-md-11 {\r\n    width: 91.66666667%;\r\n  }\r\n  .col-md-10 {\r\n    width: 83.33333333%;\r\n  }\r\n  .col-md-9 {\r\n    width: 75%;\r\n  }\r\n  .col-md-8 {\r\n    width: 66.66666667%;\r\n  }\r\n  .col-md-7 {\r\n    width: 58.33333333%;\r\n  }\r\n  .col-md-6 {\r\n    width: 50%;\r\n  }\r\n  .col-md-5 {\r\n    width: 41.66666667%;\r\n  }\r\n  .col-md-4 {\r\n    width: 33.33333333%;\r\n  }\r\n  .col-md-3 {\r\n    width: 25%;\r\n  }\r\n  .col-md-2 {\r\n    width: 16.66666667%;\r\n  }\r\n  .col-md-1 {\r\n    width: 8.33333333%;\r\n  }\r\n  .col-md-pull-12 {\r\n    right: 100%;\r\n  }\r\n  .col-md-pull-11 {\r\n    right: 91.66666667%;\r\n  }\r\n  .col-md-pull-10 {\r\n    right: 83.33333333%;\r\n  }\r\n  .col-md-pull-9 {\r\n    right: 75%;\r\n  }\r\n  .col-md-pull-8 {\r\n    right: 66.66666667%;\r\n  }\r\n  .col-md-pull-7 {\r\n    right: 58.33333333%;\r\n  }\r\n  .col-md-pull-6 {\r\n    right: 50%;\r\n  }\r\n  .col-md-pull-5 {\r\n    right: 41.66666667%;\r\n  }\r\n  .col-md-pull-4 {\r\n    right: 33.33333333%;\r\n  }\r\n  .col-md-pull-3 {\r\n    right: 25%;\r\n  }\r\n  .col-md-pull-2 {\r\n    right: 16.66666667%;\r\n  }\r\n  .col-md-pull-1 {\r\n    right: 8.33333333%;\r\n  }\r\n  .col-md-pull-0 {\r\n    right: auto;\r\n  }\r\n  .col-md-push-12 {\r\n    left: 100%;\r\n  }\r\n  .col-md-push-11 {\r\n    left: 91.66666667%;\r\n  }\r\n  .col-md-push-10 {\r\n    left: 83.33333333%;\r\n  }\r\n  .col-md-push-9 {\r\n    left: 75%;\r\n  }\r\n  .col-md-push-8 {\r\n    left: 66.66666667%;\r\n  }\r\n  .col-md-push-7 {\r\n    left: 58.33333333%;\r\n  }\r\n  .col-md-push-6 {\r\n    left: 50%;\r\n  }\r\n  .col-md-push-5 {\r\n    left: 41.66666667%;\r\n  }\r\n  .col-md-push-4 {\r\n    left: 33.33333333%;\r\n  }\r\n  .col-md-push-3 {\r\n    left: 25%;\r\n  }\r\n  .col-md-push-2 {\r\n    left: 16.66666667%;\r\n  }\r\n  .col-md-push-1 {\r\n    left: 8.33333333%;\r\n  }\r\n  .col-md-push-0 {\r\n    left: auto;\r\n  }\r\n  .col-md-offset-12 {\r\n    margin-left: 100%;\r\n  }\r\n  .col-md-offset-11 {\r\n    margin-left: 91.66666667%;\r\n  }\r\n  .col-md-offset-10 {\r\n    margin-left: 83.33333333%;\r\n  }\r\n  .col-md-offset-9 {\r\n    margin-left: 75%;\r\n  }\r\n  .col-md-offset-8 {\r\n    margin-left: 66.66666667%;\r\n  }\r\n  .col-md-offset-7 {\r\n    margin-left: 58.33333333%;\r\n  }\r\n  .col-md-offset-6 {\r\n    margin-left: 50%;\r\n  }\r\n  .col-md-offset-5 {\r\n    margin-left: 41.66666667%;\r\n  }\r\n  .col-md-offset-4 {\r\n    margin-left: 33.33333333%;\r\n  }\r\n  .col-md-offset-3 {\r\n    margin-left: 25%;\r\n  }\r\n  .col-md-offset-2 {\r\n    margin-left: 16.66666667%;\r\n  }\r\n  .col-md-offset-1 {\r\n    margin-left: 8.33333333%;\r\n  }\r\n  .col-md-offset-0 {\r\n    margin-left: 0;\r\n  }\r\n}\r\n@media (min-width: 1200px) {\r\n  .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12 {\r\n    float: left;\r\n  }\r\n  .col-lg-12 {\r\n    width: 100%;\r\n  }\r\n  .col-lg-11 {\r\n    width: 91.66666667%;\r\n  }\r\n  .col-lg-10 {\r\n    width: 83.33333333%;\r\n  }\r\n  .col-lg-9 {\r\n    width: 75%;\r\n  }\r\n  .col-lg-8 {\r\n    width: 66.66666667%;\r\n  }\r\n  .col-lg-7 {\r\n    width: 58.33333333%;\r\n  }\r\n  .col-lg-6 {\r\n    width: 50%;\r\n  }\r\n  .col-lg-5 {\r\n    width: 41.66666667%;\r\n  }\r\n  .col-lg-4 {\r\n    width: 33.33333333%;\r\n  }\r\n  .col-lg-3 {\r\n    width: 25%;\r\n  }\r\n  .col-lg-2 {\r\n    width: 16.66666667%;\r\n  }\r\n  .col-lg-1 {\r\n    width: 8.33333333%;\r\n  }\r\n  .col-lg-pull-12 {\r\n    right: 100%;\r\n  }\r\n  .col-lg-pull-11 {\r\n    right: 91.66666667%;\r\n  }\r\n  .col-lg-pull-10 {\r\n    right: 83.33333333%;\r\n  }\r\n  .col-lg-pull-9 {\r\n    right: 75%;\r\n  }\r\n  .col-lg-pull-8 {\r\n    right: 66.66666667%;\r\n  }\r\n  .col-lg-pull-7 {\r\n    right: 58.33333333%;\r\n  }\r\n  .col-lg-pull-6 {\r\n    right: 50%;\r\n  }\r\n  .col-lg-pull-5 {\r\n    right: 41.66666667%;\r\n  }\r\n  .col-lg-pull-4 {\r\n    right: 33.33333333%;\r\n  }\r\n  .col-lg-pull-3 {\r\n    right: 25%;\r\n  }\r\n  .col-lg-pull-2 {\r\n    right: 16.66666667%;\r\n  }\r\n  .col-lg-pull-1 {\r\n    right: 8.33333333%;\r\n  }\r\n  .col-lg-pull-0 {\r\n    right: auto;\r\n  }\r\n  .col-lg-push-12 {\r\n    left: 100%;\r\n  }\r\n  .col-lg-push-11 {\r\n    left: 91.66666667%;\r\n  }\r\n  .col-lg-push-10 {\r\n    left: 83.33333333%;\r\n  }\r\n  .col-lg-push-9 {\r\n    left: 75%;\r\n  }\r\n  .col-lg-push-8 {\r\n    left: 66.66666667%;\r\n  }\r\n  .col-lg-push-7 {\r\n    left: 58.33333333%;\r\n  }\r\n  .col-lg-push-6 {\r\n    left: 50%;\r\n  }\r\n  .col-lg-push-5 {\r\n    left: 41.66666667%;\r\n  }\r\n  .col-lg-push-4 {\r\n    left: 33.33333333%;\r\n  }\r\n  .col-lg-push-3 {\r\n    left: 25%;\r\n  }\r\n  .col-lg-push-2 {\r\n    left: 16.66666667%;\r\n  }\r\n  .col-lg-push-1 {\r\n    left: 8.33333333%;\r\n  }\r\n  .col-lg-push-0 {\r\n    left: auto;\r\n  }\r\n  .col-lg-offset-12 {\r\n    margin-left: 100%;\r\n  }\r\n  .col-lg-offset-11 {\r\n    margin-left: 91.66666667%;\r\n  }\r\n  .col-lg-offset-10 {\r\n    margin-left: 83.33333333%;\r\n  }\r\n  .col-lg-offset-9 {\r\n    margin-left: 75%;\r\n  }\r\n  .col-lg-offset-8 {\r\n    margin-left: 66.66666667%;\r\n  }\r\n  .col-lg-offset-7 {\r\n    margin-left: 58.33333333%;\r\n  }\r\n  .col-lg-offset-6 {\r\n    margin-left: 50%;\r\n  }\r\n  .col-lg-offset-5 {\r\n    margin-left: 41.66666667%;\r\n  }\r\n  .col-lg-offset-4 {\r\n    margin-left: 33.33333333%;\r\n  }\r\n  .col-lg-offset-3 {\r\n    margin-left: 25%;\r\n  }\r\n  .col-lg-offset-2 {\r\n    margin-left: 16.66666667%;\r\n  }\r\n  .col-lg-offset-1 {\r\n    margin-left: 8.33333333%;\r\n  }\r\n  .col-lg-offset-0 {\r\n    margin-left: 0;\r\n  }\r\n}\r\ntable {\r\n  background-color: transparent;\r\n}\r\ncaption {\r\n  padding-top: 8px;\r\n  padding-bottom: 8px;\r\n  color: #777;\r\n  text-align: left;\r\n}\r\nth {\r\n  text-align: left;\r\n}\r\n.table {\r\n  width: 100%;\r\n  max-width: 100%;\r\n  margin-bottom: 20px;\r\n}\r\n.table > thead > tr > th,\r\n.table > tbody > tr > th,\r\n.table > tfoot > tr > th,\r\n.table > thead > tr > td,\r\n.table > tbody > tr > td,\r\n.table > tfoot > tr > td {\r\n  padding: 8px;\r\n  line-height: 1.42857143;\r\n  vertical-align: top;\r\n  border-top: 1px solid #ddd;\r\n}\r\n.table > thead > tr > th {\r\n  vertical-align: bottom;\r\n  border-bottom: 2px solid #ddd;\r\n}\r\n.table > caption + thead > tr:first-child > th,\r\n.table > colgroup + thead > tr:first-child > th,\r\n.table > thead:first-child > tr:first-child > th,\r\n.table > caption + thead > tr:first-child > td,\r\n.table > colgroup + thead > tr:first-child > td,\r\n.table > thead:first-child > tr:first-child > td {\r\n  border-top: 0;\r\n}\r\n.table > tbody + tbody {\r\n  border-top: 2px solid #ddd;\r\n}\r\n.table .table {\r\n  background-color: #fff;\r\n}\r\n.table-condensed > thead > tr > th,\r\n.table-condensed > tbody > tr > th,\r\n.table-condensed > tfoot > tr > th,\r\n.table-condensed > thead > tr > td,\r\n.table-condensed > tbody > tr > td,\r\n.table-condensed > tfoot > tr > td {\r\n  padding: 5px;\r\n}\r\n.table-bordered {\r\n  border: 1px solid #ddd;\r\n}\r\n.table-bordered > thead > tr > th,\r\n.table-bordered > tbody > tr > th,\r\n.table-bordered > tfoot > tr > th,\r\n.table-bordered > thead > tr > td,\r\n.table-bordered > tbody > tr > td,\r\n.table-bordered > tfoot > tr > td {\r\n  border: 1px solid #ddd;\r\n}\r\n.table-bordered > thead > tr > th,\r\n.table-bordered > thead > tr > td {\r\n  border-bottom-width: 2px;\r\n}\r\n.table-striped > tbody > tr:nth-of-type(odd) {\r\n  background-color: #f9f9f9;\r\n}\r\n.table-hover > tbody > tr:hover {\r\n  background-color: #f5f5f5;\r\n}\r\ntable col[class*=\"col-\"] {\r\n  position: static;\r\n  display: table-column;\r\n  float: none;\r\n}\r\ntable td[class*=\"col-\"],\r\ntable th[class*=\"col-\"] {\r\n  position: static;\r\n  display: table-cell;\r\n  float: none;\r\n}\r\n.table > thead > tr > td.active,\r\n.table > tbody > tr > td.active,\r\n.table > tfoot > tr > td.active,\r\n.table > thead > tr > th.active,\r\n.table > tbody > tr > th.active,\r\n.table > tfoot > tr > th.active,\r\n.table > thead > tr.active > td,\r\n.table > tbody > tr.active > td,\r\n.table > tfoot > tr.active > td,\r\n.table > thead > tr.active > th,\r\n.table > tbody > tr.active > th,\r\n.table > tfoot > tr.active > th {\r\n  background-color: #f5f5f5;\r\n}\r\n.table-hover > tbody > tr > td.active:hover,\r\n.table-hover > tbody > tr > th.active:hover,\r\n.table-hover > tbody > tr.active:hover > td,\r\n.table-hover > tbody > tr:hover > .active,\r\n.table-hover > tbody > tr.active:hover > th {\r\n  background-color: #e8e8e8;\r\n}\r\n.table > thead > tr > td.success,\r\n.table > tbody > tr > td.success,\r\n.table > tfoot > tr > td.success,\r\n.table > thead > tr > th.success,\r\n.table > tbody > tr > th.success,\r\n.table > tfoot > tr > th.success,\r\n.table > thead > tr.success > td,\r\n.table > tbody > tr.success > td,\r\n.table > tfoot > tr.success > td,\r\n.table > thead > tr.success > th,\r\n.table > tbody > tr.success > th,\r\n.table > tfoot > tr.success > th {\r\n  background-color: #dff0d8;\r\n}\r\n.table-hover > tbody > tr > td.success:hover,\r\n.table-hover > tbody > tr > th.success:hover,\r\n.table-hover > tbody > tr.success:hover > td,\r\n.table-hover > tbody > tr:hover > .success,\r\n.table-hover > tbody > tr.success:hover > th {\r\n  background-color: #d0e9c6;\r\n}\r\n.table > thead > tr > td.info,\r\n.table > tbody > tr > td.info,\r\n.table > tfoot > tr > td.info,\r\n.table > thead > tr > th.info,\r\n.table > tbody > tr > th.info,\r\n.table > tfoot > tr > th.info,\r\n.table > thead > tr.info > td,\r\n.table > tbody > tr.info > td,\r\n.table > tfoot > tr.info > td,\r\n.table > thead > tr.info > th,\r\n.table > tbody > tr.info > th,\r\n.table > tfoot > tr.info > th {\r\n  background-color: #d9edf7;\r\n}\r\n.table-hover > tbody > tr > td.info:hover,\r\n.table-hover > tbody > tr > th.info:hover,\r\n.table-hover > tbody > tr.info:hover > td,\r\n.table-hover > tbody > tr:hover > .info,\r\n.table-hover > tbody > tr.info:hover > th {\r\n  background-color: #c4e3f3;\r\n}\r\n.table > thead > tr > td.warning,\r\n.table > tbody > tr > td.warning,\r\n.table > tfoot > tr > td.warning,\r\n.table > thead > tr > th.warning,\r\n.table > tbody > tr > th.warning,\r\n.table > tfoot > tr > th.warning,\r\n.table > thead > tr.warning > td,\r\n.table > tbody > tr.warning > td,\r\n.table > tfoot > tr.warning > td,\r\n.table > thead > tr.warning > th,\r\n.table > tbody > tr.warning > th,\r\n.table > tfoot > tr.warning > th {\r\n  background-color: #fcf8e3;\r\n}\r\n.table-hover > tbody > tr > td.warning:hover,\r\n.table-hover > tbody > tr > th.warning:hover,\r\n.table-hover > tbody > tr.warning:hover > td,\r\n.table-hover > tbody > tr:hover > .warning,\r\n.table-hover > tbody > tr.warning:hover > th {\r\n  background-color: #faf2cc;\r\n}\r\n.table > thead > tr > td.danger,\r\n.table > tbody > tr > td.danger,\r\n.table > tfoot > tr > td.danger,\r\n.table > thead > tr > th.danger,\r\n.table > tbody > tr > th.danger,\r\n.table > tfoot > tr > th.danger,\r\n.table > thead > tr.danger > td,\r\n.table > tbody > tr.danger > td,\r\n.table > tfoot > tr.danger > td,\r\n.table > thead > tr.danger > th,\r\n.table > tbody > tr.danger > th,\r\n.table > tfoot > tr.danger > th {\r\n  background-color: #f2dede;\r\n}\r\n.table-hover > tbody > tr > td.danger:hover,\r\n.table-hover > tbody > tr > th.danger:hover,\r\n.table-hover > tbody > tr.danger:hover > td,\r\n.table-hover > tbody > tr:hover > .danger,\r\n.table-hover > tbody > tr.danger:hover > th {\r\n  background-color: #ebcccc;\r\n}\r\n.table-responsive {\r\n  min-height: .01%;\r\n  overflow-x: auto;\r\n}\r\n@media screen and (max-width: 767px) {\r\n  .table-responsive {\r\n    width: 100%;\r\n    margin-bottom: 15px;\r\n    overflow-y: hidden;\r\n    -ms-overflow-style: -ms-autohiding-scrollbar;\r\n    border: 1px solid #ddd;\r\n  }\r\n  .table-responsive > .table {\r\n    margin-bottom: 0;\r\n  }\r\n  .table-responsive > .table > thead > tr > th,\r\n  .table-responsive > .table > tbody > tr > th,\r\n  .table-responsive > .table > tfoot > tr > th,\r\n  .table-responsive > .table > thead > tr > td,\r\n  .table-responsive > .table > tbody > tr > td,\r\n  .table-responsive > .table > tfoot > tr > td {\r\n    white-space: nowrap;\r\n  }\r\n  .table-responsive > .table-bordered {\r\n    border: 0;\r\n  }\r\n  .table-responsive > .table-bordered > thead > tr > th:first-child,\r\n  .table-responsive > .table-bordered > tbody > tr > th:first-child,\r\n  .table-responsive > .table-bordered > tfoot > tr > th:first-child,\r\n  .table-responsive > .table-bordered > thead > tr > td:first-child,\r\n  .table-responsive > .table-bordered > tbody > tr > td:first-child,\r\n  .table-responsive > .table-bordered > tfoot > tr > td:first-child {\r\n    border-left: 0;\r\n  }\r\n  .table-responsive > .table-bordered > thead > tr > th:last-child,\r\n  .table-responsive > .table-bordered > tbody > tr > th:last-child,\r\n  .table-responsive > .table-bordered > tfoot > tr > th:last-child,\r\n  .table-responsive > .table-bordered > thead > tr > td:last-child,\r\n  .table-responsive > .table-bordered > tbody > tr > td:last-child,\r\n  .table-responsive > .table-bordered > tfoot > tr > td:last-child {\r\n    border-right: 0;\r\n  }\r\n  .table-responsive > .table-bordered > tbody > tr:last-child > th,\r\n  .table-responsive > .table-bordered > tfoot > tr:last-child > th,\r\n  .table-responsive > .table-bordered > tbody > tr:last-child > td,\r\n  .table-responsive > .table-bordered > tfoot > tr:last-child > td {\r\n    border-bottom: 0;\r\n  }\r\n}\r\nfieldset {\r\n  min-width: 0;\r\n  padding: 0;\r\n  margin: 0;\r\n  border: 0;\r\n}\r\nlegend {\r\n  display: block;\r\n  width: 100%;\r\n  padding: 0;\r\n  margin-bottom: 20px;\r\n  font-size: 21px;\r\n  line-height: inherit;\r\n  color: #333;\r\n  border: 0;\r\n  border-bottom: 1px solid #e5e5e5;\r\n}\r\nlabel {\r\n  display: inline-block;\r\n  max-width: 100%;\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n}\r\ninput[type=\"search\"] {\r\n  -webkit-box-sizing: border-box;\r\n     -moz-box-sizing: border-box;\r\n          box-sizing: border-box;\r\n}\r\ninput[type=\"radio\"],\r\ninput[type=\"checkbox\"] {\r\n  margin: 4px 0 0;\r\n  margin-top: 1px \\9;\r\n  line-height: normal;\r\n}\r\ninput[type=\"file\"] {\r\n  display: block;\r\n}\r\ninput[type=\"range\"] {\r\n  display: block;\r\n  width: 100%;\r\n}\r\nselect[multiple],\r\nselect[size] {\r\n  height: auto;\r\n}\r\ninput[type=\"file\"]:focus,\r\ninput[type=\"radio\"]:focus,\r\ninput[type=\"checkbox\"]:focus {\r\n  outline: thin dotted;\r\n  outline: 5px auto -webkit-focus-ring-color;\r\n  outline-offset: -2px;\r\n}\r\noutput {\r\n  display: block;\r\n  padding-top: 7px;\r\n  font-size: 14px;\r\n  line-height: 1.42857143;\r\n  color: #555;\r\n}\r\n.form-control {\r\n  display: block;\r\n  width: 100%;\r\n  height: 34px;\r\n  padding: 6px 12px;\r\n  font-size: 14px;\r\n  line-height: 1.42857143;\r\n  color: #555;\r\n  background-color: #fff;\r\n  background-image: none;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\r\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\r\n  -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;\r\n       -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\r\n          transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\r\n}\r\n.form-control:focus {\r\n  border-color: #66afe9;\r\n  outline: 0;\r\n  -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, .6);\r\n          box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, .6);\r\n}\r\n.form-control::-moz-placeholder {\r\n  color: #999;\r\n  opacity: 1;\r\n}\r\n.form-control:-ms-input-placeholder {\r\n  color: #999;\r\n}\r\n.form-control::-webkit-input-placeholder {\r\n  color: #999;\r\n}\r\n.form-control[disabled],\r\n.form-control[readonly],\r\nfieldset[disabled] .form-control {\r\n  background-color: #eee;\r\n  opacity: 1;\r\n}\r\n.form-control[disabled],\r\nfieldset[disabled] .form-control {\r\n  cursor: not-allowed;\r\n}\r\ntextarea.form-control {\r\n  height: auto;\r\n}\r\ninput[type=\"search\"] {\r\n  -webkit-appearance: none;\r\n}\r\n@media screen and (-webkit-min-device-pixel-ratio: 0) {\r\n  input[type=\"date\"].form-control,\r\n  input[type=\"time\"].form-control,\r\n  input[type=\"datetime-local\"].form-control,\r\n  input[type=\"month\"].form-control {\r\n    line-height: 34px;\r\n  }\r\n  input[type=\"date\"].input-sm,\r\n  input[type=\"time\"].input-sm,\r\n  input[type=\"datetime-local\"].input-sm,\r\n  input[type=\"month\"].input-sm,\r\n  .input-group-sm input[type=\"date\"],\r\n  .input-group-sm input[type=\"time\"],\r\n  .input-group-sm input[type=\"datetime-local\"],\r\n  .input-group-sm input[type=\"month\"] {\r\n    line-height: 30px;\r\n  }\r\n  input[type=\"date\"].input-lg,\r\n  input[type=\"time\"].input-lg,\r\n  input[type=\"datetime-local\"].input-lg,\r\n  input[type=\"month\"].input-lg,\r\n  .input-group-lg input[type=\"date\"],\r\n  .input-group-lg input[type=\"time\"],\r\n  .input-group-lg input[type=\"datetime-local\"],\r\n  .input-group-lg input[type=\"month\"] {\r\n    line-height: 46px;\r\n  }\r\n}\r\n.form-group {\r\n  margin-bottom: 15px;\r\n}\r\n.radio,\r\n.checkbox {\r\n  position: relative;\r\n  display: block;\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n.radio label,\r\n.checkbox label {\r\n  min-height: 20px;\r\n  padding-left: 20px;\r\n  margin-bottom: 0;\r\n  font-weight: normal;\r\n  cursor: pointer;\r\n}\r\n.radio input[type=\"radio\"],\r\n.radio-inline input[type=\"radio\"],\r\n.checkbox input[type=\"checkbox\"],\r\n.checkbox-inline input[type=\"checkbox\"] {\r\n  position: absolute;\r\n  margin-top: 4px \\9;\r\n  margin-left: -20px;\r\n}\r\n.radio + .radio,\r\n.checkbox + .checkbox {\r\n  margin-top: -5px;\r\n}\r\n.radio-inline,\r\n.checkbox-inline {\r\n  position: relative;\r\n  display: inline-block;\r\n  padding-left: 20px;\r\n  margin-bottom: 0;\r\n  font-weight: normal;\r\n  vertical-align: middle;\r\n  cursor: pointer;\r\n}\r\n.radio-inline + .radio-inline,\r\n.checkbox-inline + .checkbox-inline {\r\n  margin-top: 0;\r\n  margin-left: 10px;\r\n}\r\ninput[type=\"radio\"][disabled],\r\ninput[type=\"checkbox\"][disabled],\r\ninput[type=\"radio\"].disabled,\r\ninput[type=\"checkbox\"].disabled,\r\nfieldset[disabled] input[type=\"radio\"],\r\nfieldset[disabled] input[type=\"checkbox\"] {\r\n  cursor: not-allowed;\r\n}\r\n.radio-inline.disabled,\r\n.checkbox-inline.disabled,\r\nfieldset[disabled] .radio-inline,\r\nfieldset[disabled] .checkbox-inline {\r\n  cursor: not-allowed;\r\n}\r\n.radio.disabled label,\r\n.checkbox.disabled label,\r\nfieldset[disabled] .radio label,\r\nfieldset[disabled] .checkbox label {\r\n  cursor: not-allowed;\r\n}\r\n.form-control-static {\r\n  min-height: 34px;\r\n  padding-top: 7px;\r\n  padding-bottom: 7px;\r\n  margin-bottom: 0;\r\n}\r\n.form-control-static.input-lg,\r\n.form-control-static.input-sm {\r\n  padding-right: 0;\r\n  padding-left: 0;\r\n}\r\n.input-sm {\r\n  height: 30px;\r\n  padding: 5px 10px;\r\n  font-size: 12px;\r\n  line-height: 1.5;\r\n  border-radius: 3px;\r\n}\r\nselect.input-sm {\r\n  height: 30px;\r\n  line-height: 30px;\r\n}\r\ntextarea.input-sm,\r\nselect[multiple].input-sm {\r\n  height: auto;\r\n}\r\n.form-group-sm .form-control {\r\n  height: 30px;\r\n  padding: 5px 10px;\r\n  font-size: 12px;\r\n  line-height: 1.5;\r\n  border-radius: 3px;\r\n}\r\n.form-group-sm select.form-control {\r\n  height: 30px;\r\n  line-height: 30px;\r\n}\r\n.form-group-sm textarea.form-control,\r\n.form-group-sm select[multiple].form-control {\r\n  height: auto;\r\n}\r\n.form-group-sm .form-control-static {\r\n  height: 30px;\r\n  min-height: 32px;\r\n  padding: 6px 10px;\r\n  font-size: 12px;\r\n  line-height: 1.5;\r\n}\r\n.input-lg {\r\n  height: 46px;\r\n  padding: 10px 16px;\r\n  font-size: 18px;\r\n  line-height: 1.3333333;\r\n  border-radius: 6px;\r\n}\r\nselect.input-lg {\r\n  height: 46px;\r\n  line-height: 46px;\r\n}\r\ntextarea.input-lg,\r\nselect[multiple].input-lg {\r\n  height: auto;\r\n}\r\n.form-group-lg .form-control {\r\n  height: 46px;\r\n  padding: 10px 16px;\r\n  font-size: 18px;\r\n  line-height: 1.3333333;\r\n  border-radius: 6px;\r\n}\r\n.form-group-lg select.form-control {\r\n  height: 46px;\r\n  line-height: 46px;\r\n}\r\n.form-group-lg textarea.form-control,\r\n.form-group-lg select[multiple].form-control {\r\n  height: auto;\r\n}\r\n.form-group-lg .form-control-static {\r\n  height: 46px;\r\n  min-height: 38px;\r\n  padding: 11px 16px;\r\n  font-size: 18px;\r\n  line-height: 1.3333333;\r\n}\r\n.has-feedback {\r\n  position: relative;\r\n}\r\n.has-feedback .form-control {\r\n  padding-right: 42.5px;\r\n}\r\n.form-control-feedback {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  z-index: 2;\r\n  display: block;\r\n  width: 34px;\r\n  height: 34px;\r\n  line-height: 34px;\r\n  text-align: center;\r\n  pointer-events: none;\r\n}\r\n.input-lg + .form-control-feedback,\r\n.input-group-lg + .form-control-feedback,\r\n.form-group-lg .form-control + .form-control-feedback {\r\n  width: 46px;\r\n  height: 46px;\r\n  line-height: 46px;\r\n}\r\n.input-sm + .form-control-feedback,\r\n.input-group-sm + .form-control-feedback,\r\n.form-group-sm .form-control + .form-control-feedback {\r\n  width: 30px;\r\n  height: 30px;\r\n  line-height: 30px;\r\n}\r\n.has-success .help-block,\r\n.has-success .control-label,\r\n.has-success .radio,\r\n.has-success .checkbox,\r\n.has-success .radio-inline,\r\n.has-success .checkbox-inline,\r\n.has-success.radio label,\r\n.has-success.checkbox label,\r\n.has-success.radio-inline label,\r\n.has-success.checkbox-inline label {\r\n  color: #3c763d;\r\n}\r\n.has-success .form-control {\r\n  border-color: #3c763d;\r\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\r\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\r\n}\r\n.has-success .form-control:focus {\r\n  border-color: #2b542c;\r\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #67b168;\r\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #67b168;\r\n}\r\n.has-success .input-group-addon {\r\n  color: #3c763d;\r\n  background-color: #dff0d8;\r\n  border-color: #3c763d;\r\n}\r\n.has-success .form-control-feedback {\r\n  color: #3c763d;\r\n}\r\n.has-warning .help-block,\r\n.has-warning .control-label,\r\n.has-warning .radio,\r\n.has-warning .checkbox,\r\n.has-warning .radio-inline,\r\n.has-warning .checkbox-inline,\r\n.has-warning.radio label,\r\n.has-warning.checkbox label,\r\n.has-warning.radio-inline label,\r\n.has-warning.checkbox-inline label {\r\n  color: #8a6d3b;\r\n}\r\n.has-warning .form-control {\r\n  border-color: #8a6d3b;\r\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\r\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\r\n}\r\n.has-warning .form-control:focus {\r\n  border-color: #66512c;\r\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #c0a16b;\r\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #c0a16b;\r\n}\r\n.has-warning .input-group-addon {\r\n  color: #8a6d3b;\r\n  background-color: #fcf8e3;\r\n  border-color: #8a6d3b;\r\n}\r\n.has-warning .form-control-feedback {\r\n  color: #8a6d3b;\r\n}\r\n.has-error .help-block,\r\n.has-error .control-label,\r\n.has-error .radio,\r\n.has-error .checkbox,\r\n.has-error .radio-inline,\r\n.has-error .checkbox-inline,\r\n.has-error.radio label,\r\n.has-error.checkbox label,\r\n.has-error.radio-inline label,\r\n.has-error.checkbox-inline label {\r\n  color: #a94442;\r\n}\r\n.has-error .form-control {\r\n  border-color: #a94442;\r\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\r\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\r\n}\r\n.has-error .form-control:focus {\r\n  border-color: #843534;\r\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #ce8483;\r\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #ce8483;\r\n}\r\n.has-error .input-group-addon {\r\n  color: #a94442;\r\n  background-color: #f2dede;\r\n  border-color: #a94442;\r\n}\r\n.has-error .form-control-feedback {\r\n  color: #a94442;\r\n}\r\n.has-feedback label ~ .form-control-feedback {\r\n  top: 25px;\r\n}\r\n.has-feedback label.sr-only ~ .form-control-feedback {\r\n  top: 0;\r\n}\r\n.help-block {\r\n  display: block;\r\n  margin-top: 5px;\r\n  margin-bottom: 10px;\r\n  color: #737373;\r\n}\r\n@media (min-width: 768px) {\r\n  .form-inline .form-group {\r\n    display: inline-block;\r\n    margin-bottom: 0;\r\n    vertical-align: middle;\r\n  }\r\n  .form-inline .form-control {\r\n    display: inline-block;\r\n    width: auto;\r\n    vertical-align: middle;\r\n  }\r\n  .form-inline .form-control-static {\r\n    display: inline-block;\r\n  }\r\n  .form-inline .input-group {\r\n    display: inline-table;\r\n    vertical-align: middle;\r\n  }\r\n  .form-inline .input-group .input-group-addon,\r\n  .form-inline .input-group .input-group-btn,\r\n  .form-inline .input-group .form-control {\r\n    width: auto;\r\n  }\r\n  .form-inline .input-group > .form-control {\r\n    width: 100%;\r\n  }\r\n  .form-inline .control-label {\r\n    margin-bottom: 0;\r\n    vertical-align: middle;\r\n  }\r\n  .form-inline .radio,\r\n  .form-inline .checkbox {\r\n    display: inline-block;\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n    vertical-align: middle;\r\n  }\r\n  .form-inline .radio label,\r\n  .form-inline .checkbox label {\r\n    padding-left: 0;\r\n  }\r\n  .form-inline .radio input[type=\"radio\"],\r\n  .form-inline .checkbox input[type=\"checkbox\"] {\r\n    position: relative;\r\n    margin-left: 0;\r\n  }\r\n  .form-inline .has-feedback .form-control-feedback {\r\n    top: 0;\r\n  }\r\n}\r\n.form-horizontal .radio,\r\n.form-horizontal .checkbox,\r\n.form-horizontal .radio-inline,\r\n.form-horizontal .checkbox-inline {\r\n  padding-top: 7px;\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n}\r\n.form-horizontal .radio,\r\n.form-horizontal .checkbox {\r\n  min-height: 27px;\r\n}\r\n.form-horizontal .form-group {\r\n  margin-right: -15px;\r\n  margin-left: -15px;\r\n}\r\n@media (min-width: 768px) {\r\n  .form-horizontal .control-label {\r\n    padding-top: 7px;\r\n    margin-bottom: 0;\r\n    text-align: right;\r\n  }\r\n}\r\n.form-horizontal .has-feedback .form-control-feedback {\r\n  right: 15px;\r\n}\r\n@media (min-width: 768px) {\r\n  .form-horizontal .form-group-lg .control-label {\r\n    padding-top: 14.333333px;\r\n    font-size: 18px;\r\n  }\r\n}\r\n@media (min-width: 768px) {\r\n  .form-horizontal .form-group-sm .control-label {\r\n    padding-top: 6px;\r\n    font-size: 12px;\r\n  }\r\n}\r\n.btn {\r\n  display: inline-block;\r\n  padding: 6px 12px;\r\n  margin-bottom: 0;\r\n  font-size: 14px;\r\n  font-weight: normal;\r\n  line-height: 1.42857143;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  vertical-align: middle;\r\n  -ms-touch-action: manipulation;\r\n      touch-action: manipulation;\r\n  cursor: pointer;\r\n  -webkit-user-select: none;\r\n     -moz-user-select: none;\r\n      -ms-user-select: none;\r\n          user-select: none;\r\n  background-image: none;\r\n  border: 1px solid transparent;\r\n  border-radius: 4px;\r\n}\r\n.btn:focus,\r\n.btn:active:focus,\r\n.btn.active:focus,\r\n.btn.focus,\r\n.btn:active.focus,\r\n.btn.active.focus {\r\n  outline: thin dotted;\r\n  outline: 5px auto -webkit-focus-ring-color;\r\n  outline-offset: -2px;\r\n}\r\n.btn:hover,\r\n.btn:focus,\r\n.btn.focus {\r\n  color: #333;\r\n  text-decoration: none;\r\n}\r\n.btn:active,\r\n.btn.active {\r\n  background-image: none;\r\n  outline: 0;\r\n  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);\r\n          box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);\r\n}\r\n.btn.disabled,\r\n.btn[disabled],\r\nfieldset[disabled] .btn {\r\n  cursor: not-allowed;\r\n  filter: alpha(opacity=65);\r\n  -webkit-box-shadow: none;\r\n          box-shadow: none;\r\n  opacity: .65;\r\n}\r\na.btn.disabled,\r\nfieldset[disabled] a.btn {\r\n  pointer-events: none;\r\n}\r\n.btn-default {\r\n  color: #333;\r\n  background-color: #fff;\r\n  border-color: #ccc;\r\n}\r\n.btn-default:focus,\r\n.btn-default.focus {\r\n  color: #333;\r\n  background-color: #e6e6e6;\r\n  border-color: #8c8c8c;\r\n}\r\n.btn-default:hover {\r\n  color: #333;\r\n  background-color: #e6e6e6;\r\n  border-color: #adadad;\r\n}\r\n.btn-default:active,\r\n.btn-default.active,\r\n.open > .dropdown-toggle.btn-default {\r\n  color: #333;\r\n  background-color: #e6e6e6;\r\n  border-color: #adadad;\r\n}\r\n.btn-default:active:hover,\r\n.btn-default.active:hover,\r\n.open > .dropdown-toggle.btn-default:hover,\r\n.btn-default:active:focus,\r\n.btn-default.active:focus,\r\n.open > .dropdown-toggle.btn-default:focus,\r\n.btn-default:active.focus,\r\n.btn-default.active.focus,\r\n.open > .dropdown-toggle.btn-default.focus {\r\n  color: #333;\r\n  background-color: #d4d4d4;\r\n  border-color: #8c8c8c;\r\n}\r\n.btn-default:active,\r\n.btn-default.active,\r\n.open > .dropdown-toggle.btn-default {\r\n  background-image: none;\r\n}\r\n.btn-default.disabled,\r\n.btn-default[disabled],\r\nfieldset[disabled] .btn-default,\r\n.btn-default.disabled:hover,\r\n.btn-default[disabled]:hover,\r\nfieldset[disabled] .btn-default:hover,\r\n.btn-default.disabled:focus,\r\n.btn-default[disabled]:focus,\r\nfieldset[disabled] .btn-default:focus,\r\n.btn-default.disabled.focus,\r\n.btn-default[disabled].focus,\r\nfieldset[disabled] .btn-default.focus,\r\n.btn-default.disabled:active,\r\n.btn-default[disabled]:active,\r\nfieldset[disabled] .btn-default:active,\r\n.btn-default.disabled.active,\r\n.btn-default[disabled].active,\r\nfieldset[disabled] .btn-default.active {\r\n  background-color: #fff;\r\n  border-color: #ccc;\r\n}\r\n.btn-default .badge {\r\n  color: #fff;\r\n  background-color: #333;\r\n}\r\n.btn-primary {\r\n  color: #fff;\r\n  background-color: #337ab7;\r\n  border-color: #2e6da4;\r\n}\r\n.btn-primary:focus,\r\n.btn-primary.focus {\r\n  color: #fff;\r\n  background-color: #286090;\r\n  border-color: #122b40;\r\n}\r\n.btn-primary:hover {\r\n  color: #fff;\r\n  background-color: #286090;\r\n  border-color: #204d74;\r\n}\r\n.btn-primary:active,\r\n.btn-primary.active,\r\n.open > .dropdown-toggle.btn-primary {\r\n  color: #fff;\r\n  background-color: #286090;\r\n  border-color: #204d74;\r\n}\r\n.btn-primary:active:hover,\r\n.btn-primary.active:hover,\r\n.open > .dropdown-toggle.btn-primary:hover,\r\n.btn-primary:active:focus,\r\n.btn-primary.active:focus,\r\n.open > .dropdown-toggle.btn-primary:focus,\r\n.btn-primary:active.focus,\r\n.btn-primary.active.focus,\r\n.open > .dropdown-toggle.btn-primary.focus {\r\n  color: #fff;\r\n  background-color: #204d74;\r\n  border-color: #122b40;\r\n}\r\n.btn-primary:active,\r\n.btn-primary.active,\r\n.open > .dropdown-toggle.btn-primary {\r\n  background-image: none;\r\n}\r\n.btn-primary.disabled,\r\n.btn-primary[disabled],\r\nfieldset[disabled] .btn-primary,\r\n.btn-primary.disabled:hover,\r\n.btn-primary[disabled]:hover,\r\nfieldset[disabled] .btn-primary:hover,\r\n.btn-primary.disabled:focus,\r\n.btn-primary[disabled]:focus,\r\nfieldset[disabled] .btn-primary:focus,\r\n.btn-primary.disabled.focus,\r\n.btn-primary[disabled].focus,\r\nfieldset[disabled] .btn-primary.focus,\r\n.btn-primary.disabled:active,\r\n.btn-primary[disabled]:active,\r\nfieldset[disabled] .btn-primary:active,\r\n.btn-primary.disabled.active,\r\n.btn-primary[disabled].active,\r\nfieldset[disabled] .btn-primary.active {\r\n  background-color: #337ab7;\r\n  border-color: #2e6da4;\r\n}\r\n.btn-primary .badge {\r\n  color: #337ab7;\r\n  background-color: #fff;\r\n}\r\n.btn-success {\r\n  color: #fff;\r\n  background-color: #5cb85c;\r\n  border-color: #4cae4c;\r\n}\r\n.btn-success:focus,\r\n.btn-success.focus {\r\n  color: #fff;\r\n  background-color: #449d44;\r\n  border-color: #255625;\r\n}\r\n.btn-success:hover {\r\n  color: #fff;\r\n  background-color: #449d44;\r\n  border-color: #398439;\r\n}\r\n.btn-success:active,\r\n.btn-success.active,\r\n.open > .dropdown-toggle.btn-success {\r\n  color: #fff;\r\n  background-color: #449d44;\r\n  border-color: #398439;\r\n}\r\n.btn-success:active:hover,\r\n.btn-success.active:hover,\r\n.open > .dropdown-toggle.btn-success:hover,\r\n.btn-success:active:focus,\r\n.btn-success.active:focus,\r\n.open > .dropdown-toggle.btn-success:focus,\r\n.btn-success:active.focus,\r\n.btn-success.active.focus,\r\n.open > .dropdown-toggle.btn-success.focus {\r\n  color: #fff;\r\n  background-color: #398439;\r\n  border-color: #255625;\r\n}\r\n.btn-success:active,\r\n.btn-success.active,\r\n.open > .dropdown-toggle.btn-success {\r\n  background-image: none;\r\n}\r\n.btn-success.disabled,\r\n.btn-success[disabled],\r\nfieldset[disabled] .btn-success,\r\n.btn-success.disabled:hover,\r\n.btn-success[disabled]:hover,\r\nfieldset[disabled] .btn-success:hover,\r\n.btn-success.disabled:focus,\r\n.btn-success[disabled]:focus,\r\nfieldset[disabled] .btn-success:focus,\r\n.btn-success.disabled.focus,\r\n.btn-success[disabled].focus,\r\nfieldset[disabled] .btn-success.focus,\r\n.btn-success.disabled:active,\r\n.btn-success[disabled]:active,\r\nfieldset[disabled] .btn-success:active,\r\n.btn-success.disabled.active,\r\n.btn-success[disabled].active,\r\nfieldset[disabled] .btn-success.active {\r\n  background-color: #5cb85c;\r\n  border-color: #4cae4c;\r\n}\r\n.btn-success .badge {\r\n  color: #5cb85c;\r\n  background-color: #fff;\r\n}\r\n.btn-info {\r\n  color: #fff;\r\n  background-color: #5bc0de;\r\n  border-color: #46b8da;\r\n}\r\n.btn-info:focus,\r\n.btn-info.focus {\r\n  color: #fff;\r\n  background-color: #31b0d5;\r\n  border-color: #1b6d85;\r\n}\r\n.btn-info:hover {\r\n  color: #fff;\r\n  background-color: #31b0d5;\r\n  border-color: #269abc;\r\n}\r\n.btn-info:active,\r\n.btn-info.active,\r\n.open > .dropdown-toggle.btn-info {\r\n  color: #fff;\r\n  background-color: #31b0d5;\r\n  border-color: #269abc;\r\n}\r\n.btn-info:active:hover,\r\n.btn-info.active:hover,\r\n.open > .dropdown-toggle.btn-info:hover,\r\n.btn-info:active:focus,\r\n.btn-info.active:focus,\r\n.open > .dropdown-toggle.btn-info:focus,\r\n.btn-info:active.focus,\r\n.btn-info.active.focus,\r\n.open > .dropdown-toggle.btn-info.focus {\r\n  color: #fff;\r\n  background-color: #269abc;\r\n  border-color: #1b6d85;\r\n}\r\n.btn-info:active,\r\n.btn-info.active,\r\n.open > .dropdown-toggle.btn-info {\r\n  background-image: none;\r\n}\r\n.btn-info.disabled,\r\n.btn-info[disabled],\r\nfieldset[disabled] .btn-info,\r\n.btn-info.disabled:hover,\r\n.btn-info[disabled]:hover,\r\nfieldset[disabled] .btn-info:hover,\r\n.btn-info.disabled:focus,\r\n.btn-info[disabled]:focus,\r\nfieldset[disabled] .btn-info:focus,\r\n.btn-info.disabled.focus,\r\n.btn-info[disabled].focus,\r\nfieldset[disabled] .btn-info.focus,\r\n.btn-info.disabled:active,\r\n.btn-info[disabled]:active,\r\nfieldset[disabled] .btn-info:active,\r\n.btn-info.disabled.active,\r\n.btn-info[disabled].active,\r\nfieldset[disabled] .btn-info.active {\r\n  background-color: #5bc0de;\r\n  border-color: #46b8da;\r\n}\r\n.btn-info .badge {\r\n  color: #5bc0de;\r\n  background-color: #fff;\r\n}\r\n.btn-warning {\r\n  color: #fff;\r\n  background-color: #f0ad4e;\r\n  border-color: #eea236;\r\n}\r\n.btn-warning:focus,\r\n.btn-warning.focus {\r\n  color: #fff;\r\n  background-color: #ec971f;\r\n  border-color: #985f0d;\r\n}\r\n.btn-warning:hover {\r\n  color: #fff;\r\n  background-color: #ec971f;\r\n  border-color: #d58512;\r\n}\r\n.btn-warning:active,\r\n.btn-warning.active,\r\n.open > .dropdown-toggle.btn-warning {\r\n  color: #fff;\r\n  background-color: #ec971f;\r\n  border-color: #d58512;\r\n}\r\n.btn-warning:active:hover,\r\n.btn-warning.active:hover,\r\n.open > .dropdown-toggle.btn-warning:hover,\r\n.btn-warning:active:focus,\r\n.btn-warning.active:focus,\r\n.open > .dropdown-toggle.btn-warning:focus,\r\n.btn-warning:active.focus,\r\n.btn-warning.active.focus,\r\n.open > .dropdown-toggle.btn-warning.focus {\r\n  color: #fff;\r\n  background-color: #d58512;\r\n  border-color: #985f0d;\r\n}\r\n.btn-warning:active,\r\n.btn-warning.active,\r\n.open > .dropdown-toggle.btn-warning {\r\n  background-image: none;\r\n}\r\n.btn-warning.disabled,\r\n.btn-warning[disabled],\r\nfieldset[disabled] .btn-warning,\r\n.btn-warning.disabled:hover,\r\n.btn-warning[disabled]:hover,\r\nfieldset[disabled] .btn-warning:hover,\r\n.btn-warning.disabled:focus,\r\n.btn-warning[disabled]:focus,\r\nfieldset[disabled] .btn-warning:focus,\r\n.btn-warning.disabled.focus,\r\n.btn-warning[disabled].focus,\r\nfieldset[disabled] .btn-warning.focus,\r\n.btn-warning.disabled:active,\r\n.btn-warning[disabled]:active,\r\nfieldset[disabled] .btn-warning:active,\r\n.btn-warning.disabled.active,\r\n.btn-warning[disabled].active,\r\nfieldset[disabled] .btn-warning.active {\r\n  background-color: #f0ad4e;\r\n  border-color: #eea236;\r\n}\r\n.btn-warning .badge {\r\n  color: #f0ad4e;\r\n  background-color: #fff;\r\n}\r\n.btn-danger {\r\n  color: #fff;\r\n  background-color: #d9534f;\r\n  border-color: #d43f3a;\r\n}\r\n.btn-danger:focus,\r\n.btn-danger.focus {\r\n  color: #fff;\r\n  background-color: #c9302c;\r\n  border-color: #761c19;\r\n}\r\n.btn-danger:hover {\r\n  color: #fff;\r\n  background-color: #c9302c;\r\n  border-color: #ac2925;\r\n}\r\n.btn-danger:active,\r\n.btn-danger.active,\r\n.open > .dropdown-toggle.btn-danger {\r\n  color: #fff;\r\n  background-color: #c9302c;\r\n  border-color: #ac2925;\r\n}\r\n.btn-danger:active:hover,\r\n.btn-danger.active:hover,\r\n.open > .dropdown-toggle.btn-danger:hover,\r\n.btn-danger:active:focus,\r\n.btn-danger.active:focus,\r\n.open > .dropdown-toggle.btn-danger:focus,\r\n.btn-danger:active.focus,\r\n.btn-danger.active.focus,\r\n.open > .dropdown-toggle.btn-danger.focus {\r\n  color: #fff;\r\n  background-color: #ac2925;\r\n  border-color: #761c19;\r\n}\r\n.btn-danger:active,\r\n.btn-danger.active,\r\n.open > .dropdown-toggle.btn-danger {\r\n  background-image: none;\r\n}\r\n.btn-danger.disabled,\r\n.btn-danger[disabled],\r\nfieldset[disabled] .btn-danger,\r\n.btn-danger.disabled:hover,\r\n.btn-danger[disabled]:hover,\r\nfieldset[disabled] .btn-danger:hover,\r\n.btn-danger.disabled:focus,\r\n.btn-danger[disabled]:focus,\r\nfieldset[disabled] .btn-danger:focus,\r\n.btn-danger.disabled.focus,\r\n.btn-danger[disabled].focus,\r\nfieldset[disabled] .btn-danger.focus,\r\n.btn-danger.disabled:active,\r\n.btn-danger[disabled]:active,\r\nfieldset[disabled] .btn-danger:active,\r\n.btn-danger.disabled.active,\r\n.btn-danger[disabled].active,\r\nfieldset[disabled] .btn-danger.active {\r\n  background-color: #d9534f;\r\n  border-color: #d43f3a;\r\n}\r\n.btn-danger .badge {\r\n  color: #d9534f;\r\n  background-color: #fff;\r\n}\r\n.btn-link {\r\n  font-weight: normal;\r\n  color: #337ab7;\r\n  border-radius: 0;\r\n}\r\n.btn-link,\r\n.btn-link:active,\r\n.btn-link.active,\r\n.btn-link[disabled],\r\nfieldset[disabled] .btn-link {\r\n  background-color: transparent;\r\n  -webkit-box-shadow: none;\r\n          box-shadow: none;\r\n}\r\n.btn-link,\r\n.btn-link:hover,\r\n.btn-link:focus,\r\n.btn-link:active {\r\n  border-color: transparent;\r\n}\r\n.btn-link:hover,\r\n.btn-link:focus {\r\n  color: #23527c;\r\n  text-decoration: underline;\r\n  background-color: transparent;\r\n}\r\n.btn-link[disabled]:hover,\r\nfieldset[disabled] .btn-link:hover,\r\n.btn-link[disabled]:focus,\r\nfieldset[disabled] .btn-link:focus {\r\n  color: #777;\r\n  text-decoration: none;\r\n}\r\n.btn-lg,\r\n.btn-group-lg > .btn {\r\n  padding: 10px 16px;\r\n  font-size: 18px;\r\n  line-height: 1.3333333;\r\n  border-radius: 6px;\r\n}\r\n.btn-sm,\r\n.btn-group-sm > .btn {\r\n  padding: 5px 10px;\r\n  font-size: 12px;\r\n  line-height: 1.5;\r\n  border-radius: 3px;\r\n}\r\n.btn-xs,\r\n.btn-group-xs > .btn {\r\n  padding: 1px 5px;\r\n  font-size: 12px;\r\n  line-height: 1.5;\r\n  border-radius: 3px;\r\n}\r\n.btn-block {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n.btn-block + .btn-block {\r\n  margin-top: 5px;\r\n}\r\ninput[type=\"submit\"].btn-block,\r\ninput[type=\"reset\"].btn-block,\r\ninput[type=\"button\"].btn-block {\r\n  width: 100%;\r\n}\r\n.fade {\r\n  opacity: 0;\r\n  -webkit-transition: opacity .15s linear;\r\n       -o-transition: opacity .15s linear;\r\n          transition: opacity .15s linear;\r\n}\r\n.fade.in {\r\n  opacity: 1;\r\n}\r\n.collapse {\r\n  display: none;\r\n}\r\n.collapse.in {\r\n  display: block;\r\n}\r\ntr.collapse.in {\r\n  display: table-row;\r\n}\r\ntbody.collapse.in {\r\n  display: table-row-group;\r\n}\r\n.collapsing {\r\n  position: relative;\r\n  height: 0;\r\n  overflow: hidden;\r\n  -webkit-transition-timing-function: ease;\r\n       -o-transition-timing-function: ease;\r\n          transition-timing-function: ease;\r\n  -webkit-transition-duration: .35s;\r\n       -o-transition-duration: .35s;\r\n          transition-duration: .35s;\r\n  -webkit-transition-property: height, visibility;\r\n       -o-transition-property: height, visibility;\r\n          transition-property: height, visibility;\r\n}\r\n.caret {\r\n  display: inline-block;\r\n  width: 0;\r\n  height: 0;\r\n  margin-left: 2px;\r\n  vertical-align: middle;\r\n  border-top: 4px dashed;\r\n  border-top: 4px solid \\9;\r\n  border-right: 4px solid transparent;\r\n  border-left: 4px solid transparent;\r\n}\r\n.dropup,\r\n.dropdown {\r\n  position: relative;\r\n}\r\n.dropdown-toggle:focus {\r\n  outline: 0;\r\n}\r\n.dropdown-menu {\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  z-index: 1000;\r\n  display: none;\r\n  float: left;\r\n  min-width: 160px;\r\n  padding: 5px 0;\r\n  margin: 2px 0 0;\r\n  font-size: 14px;\r\n  text-align: left;\r\n  list-style: none;\r\n  background-color: #fff;\r\n  -webkit-background-clip: padding-box;\r\n          background-clip: padding-box;\r\n  border: 1px solid #ccc;\r\n  border: 1px solid rgba(0, 0, 0, .15);\r\n  border-radius: 4px;\r\n  -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, .175);\r\n          box-shadow: 0 6px 12px rgba(0, 0, 0, .175);\r\n}\r\n.dropdown-menu.pull-right {\r\n  right: 0;\r\n  left: auto;\r\n}\r\n.dropdown-menu .divider {\r\n  height: 1px;\r\n  margin: 9px 0;\r\n  overflow: hidden;\r\n  background-color: #e5e5e5;\r\n}\r\n.dropdown-menu > li > a {\r\n  display: block;\r\n  padding: 3px 20px;\r\n  clear: both;\r\n  font-weight: normal;\r\n  line-height: 1.42857143;\r\n  color: #333;\r\n  white-space: nowrap;\r\n}\r\n.dropdown-menu > li > a:hover,\r\n.dropdown-menu > li > a:focus {\r\n  color: #262626;\r\n  text-decoration: none;\r\n  background-color: #f5f5f5;\r\n}\r\n.dropdown-menu > .active > a,\r\n.dropdown-menu > .active > a:hover,\r\n.dropdown-menu > .active > a:focus {\r\n  color: #fff;\r\n  text-decoration: none;\r\n  background-color: #337ab7;\r\n  outline: 0;\r\n}\r\n.dropdown-menu > .disabled > a,\r\n.dropdown-menu > .disabled > a:hover,\r\n.dropdown-menu > .disabled > a:focus {\r\n  color: #777;\r\n}\r\n.dropdown-menu > .disabled > a:hover,\r\n.dropdown-menu > .disabled > a:focus {\r\n  text-decoration: none;\r\n  cursor: not-allowed;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\r\n}\r\n.open > .dropdown-menu {\r\n  display: block;\r\n}\r\n.open > a {\r\n  outline: 0;\r\n}\r\n.dropdown-menu-right {\r\n  right: 0;\r\n  left: auto;\r\n}\r\n.dropdown-menu-left {\r\n  right: auto;\r\n  left: 0;\r\n}\r\n.dropdown-header {\r\n  display: block;\r\n  padding: 3px 20px;\r\n  font-size: 12px;\r\n  line-height: 1.42857143;\r\n  color: #777;\r\n  white-space: nowrap;\r\n}\r\n.dropdown-backdrop {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 990;\r\n}\r\n.pull-right > .dropdown-menu {\r\n  right: 0;\r\n  left: auto;\r\n}\r\n.dropup .caret,\r\n.navbar-fixed-bottom .dropdown .caret {\r\n  content: \"\";\r\n  border-top: 0;\r\n  border-bottom: 4px dashed;\r\n  border-bottom: 4px solid \\9;\r\n}\r\n.dropup .dropdown-menu,\r\n.navbar-fixed-bottom .dropdown .dropdown-menu {\r\n  top: auto;\r\n  bottom: 100%;\r\n  margin-bottom: 2px;\r\n}\r\n@media (min-width: 768px) {\r\n  .navbar-right .dropdown-menu {\r\n    right: 0;\r\n    left: auto;\r\n  }\r\n  .navbar-right .dropdown-menu-left {\r\n    right: auto;\r\n    left: 0;\r\n  }\r\n}\r\n.btn-group,\r\n.btn-group-vertical {\r\n  position: relative;\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n}\r\n.btn-group > .btn,\r\n.btn-group-vertical > .btn {\r\n  position: relative;\r\n  float: left;\r\n}\r\n.btn-group > .btn:hover,\r\n.btn-group-vertical > .btn:hover,\r\n.btn-group > .btn:focus,\r\n.btn-group-vertical > .btn:focus,\r\n.btn-group > .btn:active,\r\n.btn-group-vertical > .btn:active,\r\n.btn-group > .btn.active,\r\n.btn-group-vertical > .btn.active {\r\n  z-index: 2;\r\n}\r\n.btn-group .btn + .btn,\r\n.btn-group .btn + .btn-group,\r\n.btn-group .btn-group + .btn,\r\n.btn-group .btn-group + .btn-group {\r\n  margin-left: -1px;\r\n}\r\n.btn-toolbar {\r\n  margin-left: -5px;\r\n}\r\n.btn-toolbar .btn,\r\n.btn-toolbar .btn-group,\r\n.btn-toolbar .input-group {\r\n  float: left;\r\n}\r\n.btn-toolbar > .btn,\r\n.btn-toolbar > .btn-group,\r\n.btn-toolbar > .input-group {\r\n  margin-left: 5px;\r\n}\r\n.btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {\r\n  border-radius: 0;\r\n}\r\n.btn-group > .btn:first-child {\r\n  margin-left: 0;\r\n}\r\n.btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) {\r\n  border-top-right-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n}\r\n.btn-group > .btn:last-child:not(:first-child),\r\n.btn-group > .dropdown-toggle:not(:first-child) {\r\n  border-top-left-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n}\r\n.btn-group > .btn-group {\r\n  float: left;\r\n}\r\n.btn-group > .btn-group:not(:first-child):not(:last-child) > .btn {\r\n  border-radius: 0;\r\n}\r\n.btn-group > .btn-group:first-child:not(:last-child) > .btn:last-child,\r\n.btn-group > .btn-group:first-child:not(:last-child) > .dropdown-toggle {\r\n  border-top-right-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n}\r\n.btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child {\r\n  border-top-left-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n}\r\n.btn-group .dropdown-toggle:active,\r\n.btn-group.open .dropdown-toggle {\r\n  outline: 0;\r\n}\r\n.btn-group > .btn + .dropdown-toggle {\r\n  padding-right: 8px;\r\n  padding-left: 8px;\r\n}\r\n.btn-group > .btn-lg + .dropdown-toggle {\r\n  padding-right: 12px;\r\n  padding-left: 12px;\r\n}\r\n.btn-group.open .dropdown-toggle {\r\n  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);\r\n          box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);\r\n}\r\n.btn-group.open .dropdown-toggle.btn-link {\r\n  -webkit-box-shadow: none;\r\n          box-shadow: none;\r\n}\r\n.btn .caret {\r\n  margin-left: 0;\r\n}\r\n.btn-lg .caret {\r\n  border-width: 5px 5px 0;\r\n  border-bottom-width: 0;\r\n}\r\n.dropup .btn-lg .caret {\r\n  border-width: 0 5px 5px;\r\n}\r\n.btn-group-vertical > .btn,\r\n.btn-group-vertical > .btn-group,\r\n.btn-group-vertical > .btn-group > .btn {\r\n  display: block;\r\n  float: none;\r\n  width: 100%;\r\n  max-width: 100%;\r\n}\r\n.btn-group-vertical > .btn-group > .btn {\r\n  float: none;\r\n}\r\n.btn-group-vertical > .btn + .btn,\r\n.btn-group-vertical > .btn + .btn-group,\r\n.btn-group-vertical > .btn-group + .btn,\r\n.btn-group-vertical > .btn-group + .btn-group {\r\n  margin-top: -1px;\r\n  margin-left: 0;\r\n}\r\n.btn-group-vertical > .btn:not(:first-child):not(:last-child) {\r\n  border-radius: 0;\r\n}\r\n.btn-group-vertical > .btn:first-child:not(:last-child) {\r\n  border-top-right-radius: 4px;\r\n  border-bottom-right-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n}\r\n.btn-group-vertical > .btn:last-child:not(:first-child) {\r\n  border-top-left-radius: 0;\r\n  border-top-right-radius: 0;\r\n  border-bottom-left-radius: 4px;\r\n}\r\n.btn-group-vertical > .btn-group:not(:first-child):not(:last-child) > .btn {\r\n  border-radius: 0;\r\n}\r\n.btn-group-vertical > .btn-group:first-child:not(:last-child) > .btn:last-child,\r\n.btn-group-vertical > .btn-group:first-child:not(:last-child) > .dropdown-toggle {\r\n  border-bottom-right-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n}\r\n.btn-group-vertical > .btn-group:last-child:not(:first-child) > .btn:first-child {\r\n  border-top-left-radius: 0;\r\n  border-top-right-radius: 0;\r\n}\r\n.btn-group-justified {\r\n  display: table;\r\n  width: 100%;\r\n  table-layout: fixed;\r\n  border-collapse: separate;\r\n}\r\n.btn-group-justified > .btn,\r\n.btn-group-justified > .btn-group {\r\n  display: table-cell;\r\n  float: none;\r\n  width: 1%;\r\n}\r\n.btn-group-justified > .btn-group .btn {\r\n  width: 100%;\r\n}\r\n.btn-group-justified > .btn-group .dropdown-menu {\r\n  left: auto;\r\n}\r\n[data-toggle=\"buttons\"] > .btn input[type=\"radio\"],\r\n[data-toggle=\"buttons\"] > .btn-group > .btn input[type=\"radio\"],\r\n[data-toggle=\"buttons\"] > .btn input[type=\"checkbox\"],\r\n[data-toggle=\"buttons\"] > .btn-group > .btn input[type=\"checkbox\"] {\r\n  position: absolute;\r\n  clip: rect(0, 0, 0, 0);\r\n  pointer-events: none;\r\n}\r\n.input-group {\r\n  position: relative;\r\n  display: table;\r\n  border-collapse: separate;\r\n}\r\n.input-group[class*=\"col-\"] {\r\n  float: none;\r\n  padding-right: 0;\r\n  padding-left: 0;\r\n}\r\n.input-group .form-control {\r\n  position: relative;\r\n  z-index: 2;\r\n  float: left;\r\n  width: 100%;\r\n  margin-bottom: 0;\r\n}\r\n.input-group-lg > .form-control,\r\n.input-group-lg > .input-group-addon,\r\n.input-group-lg > .input-group-btn > .btn {\r\n  height: 46px;\r\n  padding: 10px 16px;\r\n  font-size: 18px;\r\n  line-height: 1.3333333;\r\n  border-radius: 6px;\r\n}\r\nselect.input-group-lg > .form-control,\r\nselect.input-group-lg > .input-group-addon,\r\nselect.input-group-lg > .input-group-btn > .btn {\r\n  height: 46px;\r\n  line-height: 46px;\r\n}\r\ntextarea.input-group-lg > .form-control,\r\ntextarea.input-group-lg > .input-group-addon,\r\ntextarea.input-group-lg > .input-group-btn > .btn,\r\nselect[multiple].input-group-lg > .form-control,\r\nselect[multiple].input-group-lg > .input-group-addon,\r\nselect[multiple].input-group-lg > .input-group-btn > .btn {\r\n  height: auto;\r\n}\r\n.input-group-sm > .form-control,\r\n.input-group-sm > .input-group-addon,\r\n.input-group-sm > .input-group-btn > .btn {\r\n  height: 30px;\r\n  padding: 5px 10px;\r\n  font-size: 12px;\r\n  line-height: 1.5;\r\n  border-radius: 3px;\r\n}\r\nselect.input-group-sm > .form-control,\r\nselect.input-group-sm > .input-group-addon,\r\nselect.input-group-sm > .input-group-btn > .btn {\r\n  height: 30px;\r\n  line-height: 30px;\r\n}\r\ntextarea.input-group-sm > .form-control,\r\ntextarea.input-group-sm > .input-group-addon,\r\ntextarea.input-group-sm > .input-group-btn > .btn,\r\nselect[multiple].input-group-sm > .form-control,\r\nselect[multiple].input-group-sm > .input-group-addon,\r\nselect[multiple].input-group-sm > .input-group-btn > .btn {\r\n  height: auto;\r\n}\r\n.input-group-addon,\r\n.input-group-btn,\r\n.input-group .form-control {\r\n  display: table-cell;\r\n}\r\n.input-group-addon:not(:first-child):not(:last-child),\r\n.input-group-btn:not(:first-child):not(:last-child),\r\n.input-group .form-control:not(:first-child):not(:last-child) {\r\n  border-radius: 0;\r\n}\r\n.input-group-addon,\r\n.input-group-btn {\r\n  width: 1%;\r\n  white-space: nowrap;\r\n  vertical-align: middle;\r\n}\r\n.input-group-addon {\r\n  padding: 6px 12px;\r\n  font-size: 14px;\r\n  font-weight: normal;\r\n  line-height: 1;\r\n  color: #555;\r\n  text-align: center;\r\n  background-color: #eee;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n.input-group-addon.input-sm {\r\n  padding: 5px 10px;\r\n  font-size: 12px;\r\n  border-radius: 3px;\r\n}\r\n.input-group-addon.input-lg {\r\n  padding: 10px 16px;\r\n  font-size: 18px;\r\n  border-radius: 6px;\r\n}\r\n.input-group-addon input[type=\"radio\"],\r\n.input-group-addon input[type=\"checkbox\"] {\r\n  margin-top: 0;\r\n}\r\n.input-group .form-control:first-child,\r\n.input-group-addon:first-child,\r\n.input-group-btn:first-child > .btn,\r\n.input-group-btn:first-child > .btn-group > .btn,\r\n.input-group-btn:first-child > .dropdown-toggle,\r\n.input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle),\r\n.input-group-btn:last-child > .btn-group:not(:last-child) > .btn {\r\n  border-top-right-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n}\r\n.input-group-addon:first-child {\r\n  border-right: 0;\r\n}\r\n.input-group .form-control:last-child,\r\n.input-group-addon:last-child,\r\n.input-group-btn:last-child > .btn,\r\n.input-group-btn:last-child > .btn-group > .btn,\r\n.input-group-btn:last-child > .dropdown-toggle,\r\n.input-group-btn:first-child > .btn:not(:first-child),\r\n.input-group-btn:first-child > .btn-group:not(:first-child) > .btn {\r\n  border-top-left-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n}\r\n.input-group-addon:last-child {\r\n  border-left: 0;\r\n}\r\n.input-group-btn {\r\n  position: relative;\r\n  font-size: 0;\r\n  white-space: nowrap;\r\n}\r\n.input-group-btn > .btn {\r\n  position: relative;\r\n}\r\n.input-group-btn > .btn + .btn {\r\n  margin-left: -1px;\r\n}\r\n.input-group-btn > .btn:hover,\r\n.input-group-btn > .btn:focus,\r\n.input-group-btn > .btn:active {\r\n  z-index: 2;\r\n}\r\n.input-group-btn:first-child > .btn,\r\n.input-group-btn:first-child > .btn-group {\r\n  margin-right: -1px;\r\n}\r\n.input-group-btn:last-child > .btn,\r\n.input-group-btn:last-child > .btn-group {\r\n  z-index: 2;\r\n  margin-left: -1px;\r\n}\r\n.nav {\r\n  padding-left: 0;\r\n  margin-bottom: 0;\r\n  list-style: none;\r\n}\r\n.nav > li {\r\n  position: relative;\r\n  display: block;\r\n}\r\n.nav > li > a {\r\n  position: relative;\r\n  display: block;\r\n  padding: 10px 15px;\r\n}\r\n.nav > li > a:hover,\r\n.nav > li > a:focus {\r\n  text-decoration: none;\r\n  background-color: #eee;\r\n}\r\n.nav > li.disabled > a {\r\n  color: #777;\r\n}\r\n.nav > li.disabled > a:hover,\r\n.nav > li.disabled > a:focus {\r\n  color: #777;\r\n  text-decoration: none;\r\n  cursor: not-allowed;\r\n  background-color: transparent;\r\n}\r\n.nav .open > a,\r\n.nav .open > a:hover,\r\n.nav .open > a:focus {\r\n  background-color: #eee;\r\n  border-color: #337ab7;\r\n}\r\n.nav .nav-divider {\r\n  height: 1px;\r\n  margin: 9px 0;\r\n  overflow: hidden;\r\n  background-color: #e5e5e5;\r\n}\r\n.nav > li > a > img {\r\n  max-width: none;\r\n}\r\n.nav-tabs {\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n.nav-tabs > li {\r\n  float: left;\r\n  margin-bottom: -1px;\r\n}\r\n.nav-tabs > li > a {\r\n  margin-right: 2px;\r\n  line-height: 1.42857143;\r\n  border: 1px solid transparent;\r\n  border-radius: 4px 4px 0 0;\r\n}\r\n.nav-tabs > li > a:hover {\r\n  border-color: #eee #eee #ddd;\r\n}\r\n.nav-tabs > li.active > a,\r\n.nav-tabs > li.active > a:hover,\r\n.nav-tabs > li.active > a:focus {\r\n  color: #555;\r\n  cursor: default;\r\n  background-color: #fff;\r\n  border: 1px solid #ddd;\r\n  border-bottom-color: transparent;\r\n}\r\n.nav-tabs.nav-justified {\r\n  width: 100%;\r\n  border-bottom: 0;\r\n}\r\n.nav-tabs.nav-justified > li {\r\n  float: none;\r\n}\r\n.nav-tabs.nav-justified > li > a {\r\n  margin-bottom: 5px;\r\n  text-align: center;\r\n}\r\n.nav-tabs.nav-justified > .dropdown .dropdown-menu {\r\n  top: auto;\r\n  left: auto;\r\n}\r\n@media (min-width: 768px) {\r\n  .nav-tabs.nav-justified > li {\r\n    display: table-cell;\r\n    width: 1%;\r\n  }\r\n  .nav-tabs.nav-justified > li > a {\r\n    margin-bottom: 0;\r\n  }\r\n}\r\n.nav-tabs.nav-justified > li > a {\r\n  margin-right: 0;\r\n  border-radius: 4px;\r\n}\r\n.nav-tabs.nav-justified > .active > a,\r\n.nav-tabs.nav-justified > .active > a:hover,\r\n.nav-tabs.nav-justified > .active > a:focus {\r\n  border: 1px solid #ddd;\r\n}\r\n@media (min-width: 768px) {\r\n  .nav-tabs.nav-justified > li > a {\r\n    border-bottom: 1px solid #ddd;\r\n    border-radius: 4px 4px 0 0;\r\n  }\r\n  .nav-tabs.nav-justified > .active > a,\r\n  .nav-tabs.nav-justified > .active > a:hover,\r\n  .nav-tabs.nav-justified > .active > a:focus {\r\n    border-bottom-color: #fff;\r\n  }\r\n}\r\n.nav-pills > li {\r\n  float: left;\r\n}\r\n.nav-pills > li > a {\r\n  border-radius: 4px;\r\n}\r\n.nav-pills > li + li {\r\n  margin-left: 2px;\r\n}\r\n.nav-pills > li.active > a,\r\n.nav-pills > li.active > a:hover,\r\n.nav-pills > li.active > a:focus {\r\n  color: #fff;\r\n  background-color: #337ab7;\r\n}\r\n.nav-stacked > li {\r\n  float: none;\r\n}\r\n.nav-stacked > li + li {\r\n  margin-top: 2px;\r\n  margin-left: 0;\r\n}\r\n.nav-justified {\r\n  width: 100%;\r\n}\r\n.nav-justified > li {\r\n  float: none;\r\n}\r\n.nav-justified > li > a {\r\n  margin-bottom: 5px;\r\n  text-align: center;\r\n}\r\n.nav-justified > .dropdown .dropdown-menu {\r\n  top: auto;\r\n  left: auto;\r\n}\r\n@media (min-width: 768px) {\r\n  .nav-justified > li {\r\n    display: table-cell;\r\n    width: 1%;\r\n  }\r\n  .nav-justified > li > a {\r\n    margin-bottom: 0;\r\n  }\r\n}\r\n.nav-tabs-justified {\r\n  border-bottom: 0;\r\n}\r\n.nav-tabs-justified > li > a {\r\n  margin-right: 0;\r\n  border-radius: 4px;\r\n}\r\n.nav-tabs-justified > .active > a,\r\n.nav-tabs-justified > .active > a:hover,\r\n.nav-tabs-justified > .active > a:focus {\r\n  border: 1px solid #ddd;\r\n}\r\n@media (min-width: 768px) {\r\n  .nav-tabs-justified > li > a {\r\n    border-bottom: 1px solid #ddd;\r\n    border-radius: 4px 4px 0 0;\r\n  }\r\n  .nav-tabs-justified > .active > a,\r\n  .nav-tabs-justified > .active > a:hover,\r\n  .nav-tabs-justified > .active > a:focus {\r\n    border-bottom-color: #fff;\r\n  }\r\n}\r\n.tab-content > .tab-pane {\r\n  display: none;\r\n}\r\n.tab-content > .active {\r\n  display: block;\r\n}\r\n.nav-tabs .dropdown-menu {\r\n  margin-top: -1px;\r\n  border-top-left-radius: 0;\r\n  border-top-right-radius: 0;\r\n}\r\n.navbar {\r\n  position: relative;\r\n  min-height: 50px;\r\n  margin-bottom: 20px;\r\n  border: 1px solid transparent;\r\n}\r\n@media (min-width: 768px) {\r\n  .navbar {\r\n    border-radius: 4px;\r\n  }\r\n}\r\n@media (min-width: 768px) {\r\n  .navbar-header {\r\n    float: left;\r\n  }\r\n}\r\n.navbar-collapse {\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n  overflow-x: visible;\r\n  -webkit-overflow-scrolling: touch;\r\n  border-top: 1px solid transparent;\r\n  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1);\r\n          box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1);\r\n}\r\n.navbar-collapse.in {\r\n  overflow-y: auto;\r\n}\r\n@media (min-width: 768px) {\r\n  .navbar-collapse {\r\n    width: auto;\r\n    border-top: 0;\r\n    -webkit-box-shadow: none;\r\n            box-shadow: none;\r\n  }\r\n  .navbar-collapse.collapse {\r\n    display: block !important;\r\n    height: auto !important;\r\n    padding-bottom: 0;\r\n    overflow: visible !important;\r\n  }\r\n  .navbar-collapse.in {\r\n    overflow-y: visible;\r\n  }\r\n  .navbar-fixed-top .navbar-collapse,\r\n  .navbar-static-top .navbar-collapse,\r\n  .navbar-fixed-bottom .navbar-collapse {\r\n    padding-right: 0;\r\n    padding-left: 0;\r\n  }\r\n}\r\n.navbar-fixed-top .navbar-collapse,\r\n.navbar-fixed-bottom .navbar-collapse {\r\n  max-height: 340px;\r\n}\r\n@media (max-device-width: 480px) and (orientation: landscape) {\r\n  .navbar-fixed-top .navbar-collapse,\r\n  .navbar-fixed-bottom .navbar-collapse {\r\n    max-height: 200px;\r\n  }\r\n}\r\n.container > .navbar-header,\r\n.container-fluid > .navbar-header,\r\n.container > .navbar-collapse,\r\n.container-fluid > .navbar-collapse {\r\n  margin-right: -15px;\r\n  margin-left: -15px;\r\n}\r\n@media (min-width: 768px) {\r\n  .container > .navbar-header,\r\n  .container-fluid > .navbar-header,\r\n  .container > .navbar-collapse,\r\n  .container-fluid > .navbar-collapse {\r\n    margin-right: 0;\r\n    margin-left: 0;\r\n  }\r\n}\r\n.navbar-static-top {\r\n  z-index: 1000;\r\n  border-width: 0 0 1px;\r\n}\r\n@media (min-width: 768px) {\r\n  .navbar-static-top {\r\n    border-radius: 0;\r\n  }\r\n}\r\n.navbar-fixed-top,\r\n.navbar-fixed-bottom {\r\n  position: fixed;\r\n  right: 0;\r\n  left: 0;\r\n  z-index: 1030;\r\n}\r\n@media (min-width: 768px) {\r\n  .navbar-fixed-top,\r\n  .navbar-fixed-bottom {\r\n    border-radius: 0;\r\n  }\r\n}\r\n.navbar-fixed-top {\r\n  top: 0;\r\n  border-width: 0 0 1px;\r\n}\r\n.navbar-fixed-bottom {\r\n  bottom: 0;\r\n  margin-bottom: 0;\r\n  border-width: 1px 0 0;\r\n}\r\n.navbar-brand {\r\n  float: left;\r\n  height: 50px;\r\n  padding: 15px 15px;\r\n  font-size: 18px;\r\n  line-height: 20px;\r\n}\r\n.navbar-brand:hover,\r\n.navbar-brand:focus {\r\n  text-decoration: none;\r\n}\r\n.navbar-brand > img {\r\n  display: block;\r\n}\r\n@media (min-width: 768px) {\r\n  .navbar > .container .navbar-brand,\r\n  .navbar > .container-fluid .navbar-brand {\r\n    margin-left: -15px;\r\n  }\r\n}\r\n.navbar-toggle {\r\n  position: relative;\r\n  float: right;\r\n  padding: 9px 10px;\r\n  margin-top: 8px;\r\n  margin-right: 15px;\r\n  margin-bottom: 8px;\r\n  background-color: transparent;\r\n  background-image: none;\r\n  border: 1px solid transparent;\r\n  border-radius: 4px;\r\n}\r\n.navbar-toggle:focus {\r\n  outline: 0;\r\n}\r\n.navbar-toggle .icon-bar {\r\n  display: block;\r\n  width: 22px;\r\n  height: 2px;\r\n  border-radius: 1px;\r\n}\r\n.navbar-toggle .icon-bar + .icon-bar {\r\n  margin-top: 4px;\r\n}\r\n@media (min-width: 768px) {\r\n  .navbar-toggle {\r\n    display: none;\r\n  }\r\n}\r\n.navbar-nav {\r\n  margin: 7.5px -15px;\r\n}\r\n.navbar-nav > li > a {\r\n  padding-top: 10px;\r\n  padding-bottom: 10px;\r\n  line-height: 20px;\r\n}\r\n@media (max-width: 767px) {\r\n  .navbar-nav .open .dropdown-menu {\r\n    position: static;\r\n    float: none;\r\n    width: auto;\r\n    margin-top: 0;\r\n    background-color: transparent;\r\n    border: 0;\r\n    -webkit-box-shadow: none;\r\n            box-shadow: none;\r\n  }\r\n  .navbar-nav .open .dropdown-menu > li > a,\r\n  .navbar-nav .open .dropdown-menu .dropdown-header {\r\n    padding: 5px 15px 5px 25px;\r\n  }\r\n  .navbar-nav .open .dropdown-menu > li > a {\r\n    line-height: 20px;\r\n  }\r\n  .navbar-nav .open .dropdown-menu > li > a:hover,\r\n  .navbar-nav .open .dropdown-menu > li > a:focus {\r\n    background-image: none;\r\n  }\r\n}\r\n@media (min-width: 768px) {\r\n  .navbar-nav {\r\n    float: left;\r\n    margin: 0;\r\n  }\r\n  .navbar-nav > li {\r\n    float: left;\r\n  }\r\n  .navbar-nav > li > a {\r\n    padding-top: 15px;\r\n    padding-bottom: 15px;\r\n  }\r\n}\r\n.navbar-form {\r\n  padding: 10px 15px;\r\n  margin-top: 8px;\r\n  margin-right: -15px;\r\n  margin-bottom: 8px;\r\n  margin-left: -15px;\r\n  border-top: 1px solid transparent;\r\n  border-bottom: 1px solid transparent;\r\n  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1), 0 1px 0 rgba(255, 255, 255, .1);\r\n          box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1), 0 1px 0 rgba(255, 255, 255, .1);\r\n}\r\n@media (min-width: 768px) {\r\n  .navbar-form .form-group {\r\n    display: inline-block;\r\n    margin-bottom: 0;\r\n    vertical-align: middle;\r\n  }\r\n  .navbar-form .form-control {\r\n    display: inline-block;\r\n    width: auto;\r\n    vertical-align: middle;\r\n  }\r\n  .navbar-form .form-control-static {\r\n    display: inline-block;\r\n  }\r\n  .navbar-form .input-group {\r\n    display: inline-table;\r\n    vertical-align: middle;\r\n  }\r\n  .navbar-form .input-group .input-group-addon,\r\n  .navbar-form .input-group .input-group-btn,\r\n  .navbar-form .input-group .form-control {\r\n    width: auto;\r\n  }\r\n  .navbar-form .input-group > .form-control {\r\n    width: 100%;\r\n  }\r\n  .navbar-form .control-label {\r\n    margin-bottom: 0;\r\n    vertical-align: middle;\r\n  }\r\n  .navbar-form .radio,\r\n  .navbar-form .checkbox {\r\n    display: inline-block;\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n    vertical-align: middle;\r\n  }\r\n  .navbar-form .radio label,\r\n  .navbar-form .checkbox label {\r\n    padding-left: 0;\r\n  }\r\n  .navbar-form .radio input[type=\"radio\"],\r\n  .navbar-form .checkbox input[type=\"checkbox\"] {\r\n    position: relative;\r\n    margin-left: 0;\r\n  }\r\n  .navbar-form .has-feedback .form-control-feedback {\r\n    top: 0;\r\n  }\r\n}\r\n@media (max-width: 767px) {\r\n  .navbar-form .form-group {\r\n    margin-bottom: 5px;\r\n  }\r\n  .navbar-form .form-group:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n}\r\n@media (min-width: 768px) {\r\n  .navbar-form {\r\n    width: auto;\r\n    padding-top: 0;\r\n    padding-bottom: 0;\r\n    margin-right: 0;\r\n    margin-left: 0;\r\n    border: 0;\r\n    -webkit-box-shadow: none;\r\n            box-shadow: none;\r\n  }\r\n}\r\n.navbar-nav > li > .dropdown-menu {\r\n  margin-top: 0;\r\n  border-top-left-radius: 0;\r\n  border-top-right-radius: 0;\r\n}\r\n.navbar-fixed-bottom .navbar-nav > li > .dropdown-menu {\r\n  margin-bottom: 0;\r\n  border-top-left-radius: 4px;\r\n  border-top-right-radius: 4px;\r\n  border-bottom-right-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n}\r\n.navbar-btn {\r\n  margin-top: 8px;\r\n  margin-bottom: 8px;\r\n}\r\n.navbar-btn.btn-sm {\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n.navbar-btn.btn-xs {\r\n  margin-top: 14px;\r\n  margin-bottom: 14px;\r\n}\r\n.navbar-text {\r\n  margin-top: 15px;\r\n  margin-bottom: 15px;\r\n}\r\n@media (min-width: 768px) {\r\n  .navbar-text {\r\n    float: left;\r\n    margin-right: 15px;\r\n    margin-left: 15px;\r\n  }\r\n}\r\n@media (min-width: 768px) {\r\n  .navbar-left {\r\n    float: left !important;\r\n  }\r\n  .navbar-right {\r\n    float: right !important;\r\n    margin-right: -15px;\r\n  }\r\n  .navbar-right ~ .navbar-right {\r\n    margin-right: 0;\r\n  }\r\n}\r\n.navbar-default {\r\n  background-color: #f8f8f8;\r\n  border-color: #e7e7e7;\r\n}\r\n.navbar-default .navbar-brand {\r\n  color: #777;\r\n}\r\n.navbar-default .navbar-brand:hover,\r\n.navbar-default .navbar-brand:focus {\r\n  color: #5e5e5e;\r\n  background-color: transparent;\r\n}\r\n.navbar-default .navbar-text {\r\n  color: #777;\r\n}\r\n.navbar-default .navbar-nav > li > a {\r\n  color: #777;\r\n}\r\n.navbar-default .navbar-nav > li > a:hover,\r\n.navbar-default .navbar-nav > li > a:focus {\r\n  color: #333;\r\n  background-color: transparent;\r\n}\r\n.navbar-default .navbar-nav > .active > a,\r\n.navbar-default .navbar-nav > .active > a:hover,\r\n.navbar-default .navbar-nav > .active > a:focus {\r\n  color: #555;\r\n  background-color: #e7e7e7;\r\n}\r\n.navbar-default .navbar-nav > .disabled > a,\r\n.navbar-default .navbar-nav > .disabled > a:hover,\r\n.navbar-default .navbar-nav > .disabled > a:focus {\r\n  color: #ccc;\r\n  background-color: transparent;\r\n}\r\n.navbar-default .navbar-toggle {\r\n  border-color: #ddd;\r\n}\r\n.navbar-default .navbar-toggle:hover,\r\n.navbar-default .navbar-toggle:focus {\r\n  background-color: #ddd;\r\n}\r\n.navbar-default .navbar-toggle .icon-bar {\r\n  background-color: #888;\r\n}\r\n.navbar-default .navbar-collapse,\r\n.navbar-default .navbar-form {\r\n  border-color: #e7e7e7;\r\n}\r\n.navbar-default .navbar-nav > .open > a,\r\n.navbar-default .navbar-nav > .open > a:hover,\r\n.navbar-default .navbar-nav > .open > a:focus {\r\n  color: #555;\r\n  background-color: #e7e7e7;\r\n}\r\n@media (max-width: 767px) {\r\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a {\r\n    color: #777;\r\n  }\r\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a:hover,\r\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a:focus {\r\n    color: #333;\r\n    background-color: transparent;\r\n  }\r\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a,\r\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a:hover,\r\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a:focus {\r\n    color: #555;\r\n    background-color: #e7e7e7;\r\n  }\r\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a,\r\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:hover,\r\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:focus {\r\n    color: #ccc;\r\n    background-color: transparent;\r\n  }\r\n}\r\n.navbar-default .navbar-link {\r\n  color: #777;\r\n}\r\n.navbar-default .navbar-link:hover {\r\n  color: #333;\r\n}\r\n.navbar-default .btn-link {\r\n  color: #777;\r\n}\r\n.navbar-default .btn-link:hover,\r\n.navbar-default .btn-link:focus {\r\n  color: #333;\r\n}\r\n.navbar-default .btn-link[disabled]:hover,\r\nfieldset[disabled] .navbar-default .btn-link:hover,\r\n.navbar-default .btn-link[disabled]:focus,\r\nfieldset[disabled] .navbar-default .btn-link:focus {\r\n  color: #ccc;\r\n}\r\n.navbar-inverse {\r\n  background-color: #222;\r\n  border-color: #080808;\r\n}\r\n.navbar-inverse .navbar-brand {\r\n  color: #9d9d9d;\r\n}\r\n.navbar-inverse .navbar-brand:hover,\r\n.navbar-inverse .navbar-brand:focus {\r\n  color: #fff;\r\n  background-color: transparent;\r\n}\r\n.navbar-inverse .navbar-text {\r\n  color: #9d9d9d;\r\n}\r\n.navbar-inverse .navbar-nav > li > a {\r\n  color: #9d9d9d;\r\n}\r\n.navbar-inverse .navbar-nav > li > a:hover,\r\n.navbar-inverse .navbar-nav > li > a:focus {\r\n  color: #fff;\r\n  background-color: transparent;\r\n}\r\n.navbar-inverse .navbar-nav > .active > a,\r\n.navbar-inverse .navbar-nav > .active > a:hover,\r\n.navbar-inverse .navbar-nav > .active > a:focus {\r\n  color: #fff;\r\n  background-color: #080808;\r\n}\r\n.navbar-inverse .navbar-nav > .disabled > a,\r\n.navbar-inverse .navbar-nav > .disabled > a:hover,\r\n.navbar-inverse .navbar-nav > .disabled > a:focus {\r\n  color: #444;\r\n  background-color: transparent;\r\n}\r\n.navbar-inverse .navbar-toggle {\r\n  border-color: #333;\r\n}\r\n.navbar-inverse .navbar-toggle:hover,\r\n.navbar-inverse .navbar-toggle:focus {\r\n  background-color: #333;\r\n}\r\n.navbar-inverse .navbar-toggle .icon-bar {\r\n  background-color: #fff;\r\n}\r\n.navbar-inverse .navbar-collapse,\r\n.navbar-inverse .navbar-form {\r\n  border-color: #101010;\r\n}\r\n.navbar-inverse .navbar-nav > .open > a,\r\n.navbar-inverse .navbar-nav > .open > a:hover,\r\n.navbar-inverse .navbar-nav > .open > a:focus {\r\n  color: #fff;\r\n  background-color: #080808;\r\n}\r\n@media (max-width: 767px) {\r\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .dropdown-header {\r\n    border-color: #080808;\r\n  }\r\n  .navbar-inverse .navbar-nav .open .dropdown-menu .divider {\r\n    background-color: #080808;\r\n  }\r\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a {\r\n    color: #9d9d9d;\r\n  }\r\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:hover,\r\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:focus {\r\n    color: #fff;\r\n    background-color: transparent;\r\n  }\r\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a,\r\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:hover,\r\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:focus {\r\n    color: #fff;\r\n    background-color: #080808;\r\n  }\r\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a,\r\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:hover,\r\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:focus {\r\n    color: #444;\r\n    background-color: transparent;\r\n  }\r\n}\r\n.navbar-inverse .navbar-link {\r\n  color: #9d9d9d;\r\n}\r\n.navbar-inverse .navbar-link:hover {\r\n  color: #fff;\r\n}\r\n.navbar-inverse .btn-link {\r\n  color: #9d9d9d;\r\n}\r\n.navbar-inverse .btn-link:hover,\r\n.navbar-inverse .btn-link:focus {\r\n  color: #fff;\r\n}\r\n.navbar-inverse .btn-link[disabled]:hover,\r\nfieldset[disabled] .navbar-inverse .btn-link:hover,\r\n.navbar-inverse .btn-link[disabled]:focus,\r\nfieldset[disabled] .navbar-inverse .btn-link:focus {\r\n  color: #444;\r\n}\r\n.breadcrumb {\r\n  padding: 8px 15px;\r\n  margin-bottom: 20px;\r\n  list-style: none;\r\n  background-color: #f5f5f5;\r\n  border-radius: 4px;\r\n}\r\n.breadcrumb > li {\r\n  display: inline-block;\r\n}\r\n.breadcrumb > li + li:before {\r\n  padding: 0 5px;\r\n  color: #ccc;\r\n  content: \"/\\A0\";\r\n}\r\n.breadcrumb > .active {\r\n  color: #777;\r\n}\r\n.pagination {\r\n  display: inline-block;\r\n  padding-left: 0;\r\n  margin: 20px 0;\r\n  border-radius: 4px;\r\n}\r\n.pagination > li {\r\n  display: inline;\r\n}\r\n.pagination > li > a,\r\n.pagination > li > span {\r\n  position: relative;\r\n  float: left;\r\n  padding: 6px 12px;\r\n  margin-left: -1px;\r\n  line-height: 1.42857143;\r\n  color: #337ab7;\r\n  text-decoration: none;\r\n  background-color: #fff;\r\n  border: 1px solid #ddd;\r\n}\r\n.pagination > li:first-child > a,\r\n.pagination > li:first-child > span {\r\n  margin-left: 0;\r\n  border-top-left-radius: 4px;\r\n  border-bottom-left-radius: 4px;\r\n}\r\n.pagination > li:last-child > a,\r\n.pagination > li:last-child > span {\r\n  border-top-right-radius: 4px;\r\n  border-bottom-right-radius: 4px;\r\n}\r\n.pagination > li > a:hover,\r\n.pagination > li > span:hover,\r\n.pagination > li > a:focus,\r\n.pagination > li > span:focus {\r\n  z-index: 3;\r\n  color: #23527c;\r\n  background-color: #eee;\r\n  border-color: #ddd;\r\n}\r\n.pagination > .active > a,\r\n.pagination > .active > span,\r\n.pagination > .active > a:hover,\r\n.pagination > .active > span:hover,\r\n.pagination > .active > a:focus,\r\n.pagination > .active > span:focus {\r\n  z-index: 2;\r\n  color: #fff;\r\n  cursor: default;\r\n  background-color: #337ab7;\r\n  border-color: #337ab7;\r\n}\r\n.pagination > .disabled > span,\r\n.pagination > .disabled > span:hover,\r\n.pagination > .disabled > span:focus,\r\n.pagination > .disabled > a,\r\n.pagination > .disabled > a:hover,\r\n.pagination > .disabled > a:focus {\r\n  color: #777;\r\n  cursor: not-allowed;\r\n  background-color: #fff;\r\n  border-color: #ddd;\r\n}\r\n.pagination-lg > li > a,\r\n.pagination-lg > li > span {\r\n  padding: 10px 16px;\r\n  font-size: 18px;\r\n  line-height: 1.3333333;\r\n}\r\n.pagination-lg > li:first-child > a,\r\n.pagination-lg > li:first-child > span {\r\n  border-top-left-radius: 6px;\r\n  border-bottom-left-radius: 6px;\r\n}\r\n.pagination-lg > li:last-child > a,\r\n.pagination-lg > li:last-child > span {\r\n  border-top-right-radius: 6px;\r\n  border-bottom-right-radius: 6px;\r\n}\r\n.pagination-sm > li > a,\r\n.pagination-sm > li > span {\r\n  padding: 5px 10px;\r\n  font-size: 12px;\r\n  line-height: 1.5;\r\n}\r\n.pagination-sm > li:first-child > a,\r\n.pagination-sm > li:first-child > span {\r\n  border-top-left-radius: 3px;\r\n  border-bottom-left-radius: 3px;\r\n}\r\n.pagination-sm > li:last-child > a,\r\n.pagination-sm > li:last-child > span {\r\n  border-top-right-radius: 3px;\r\n  border-bottom-right-radius: 3px;\r\n}\r\n.pager {\r\n  padding-left: 0;\r\n  margin: 20px 0;\r\n  text-align: center;\r\n  list-style: none;\r\n}\r\n.pager li {\r\n  display: inline;\r\n}\r\n.pager li > a,\r\n.pager li > span {\r\n  display: inline-block;\r\n  padding: 5px 14px;\r\n  background-color: #fff;\r\n  border: 1px solid #ddd;\r\n  border-radius: 15px;\r\n}\r\n.pager li > a:hover,\r\n.pager li > a:focus {\r\n  text-decoration: none;\r\n  background-color: #eee;\r\n}\r\n.pager .next > a,\r\n.pager .next > span {\r\n  float: right;\r\n}\r\n.pager .previous > a,\r\n.pager .previous > span {\r\n  float: left;\r\n}\r\n.pager .disabled > a,\r\n.pager .disabled > a:hover,\r\n.pager .disabled > a:focus,\r\n.pager .disabled > span {\r\n  color: #777;\r\n  cursor: not-allowed;\r\n  background-color: #fff;\r\n}\r\n.label {\r\n  display: inline;\r\n  padding: .2em .6em .3em;\r\n  font-size: 75%;\r\n  font-weight: bold;\r\n  line-height: 1;\r\n  color: #fff;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  vertical-align: baseline;\r\n  border-radius: .25em;\r\n}\r\na.label:hover,\r\na.label:focus {\r\n  color: #fff;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n}\r\n.label:empty {\r\n  display: none;\r\n}\r\n.btn .label {\r\n  position: relative;\r\n  top: -1px;\r\n}\r\n.label-default {\r\n  background-color: #777;\r\n}\r\n.label-default[href]:hover,\r\n.label-default[href]:focus {\r\n  background-color: #5e5e5e;\r\n}\r\n.label-primary {\r\n  background-color: #337ab7;\r\n}\r\n.label-primary[href]:hover,\r\n.label-primary[href]:focus {\r\n  background-color: #286090;\r\n}\r\n.label-success {\r\n  background-color: #5cb85c;\r\n}\r\n.label-success[href]:hover,\r\n.label-success[href]:focus {\r\n  background-color: #449d44;\r\n}\r\n.label-info {\r\n  background-color: #5bc0de;\r\n}\r\n.label-info[href]:hover,\r\n.label-info[href]:focus {\r\n  background-color: #31b0d5;\r\n}\r\n.label-warning {\r\n  background-color: #f0ad4e;\r\n}\r\n.label-warning[href]:hover,\r\n.label-warning[href]:focus {\r\n  background-color: #ec971f;\r\n}\r\n.label-danger {\r\n  background-color: #d9534f;\r\n}\r\n.label-danger[href]:hover,\r\n.label-danger[href]:focus {\r\n  background-color: #c9302c;\r\n}\r\n.badge {\r\n  display: inline-block;\r\n  min-width: 10px;\r\n  padding: 3px 7px;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  line-height: 1;\r\n  color: #fff;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  vertical-align: middle;\r\n  background-color: #777;\r\n  border-radius: 10px;\r\n}\r\n.badge:empty {\r\n  display: none;\r\n}\r\n.btn .badge {\r\n  position: relative;\r\n  top: -1px;\r\n}\r\n.btn-xs .badge,\r\n.btn-group-xs > .btn .badge {\r\n  top: 0;\r\n  padding: 1px 5px;\r\n}\r\na.badge:hover,\r\na.badge:focus {\r\n  color: #fff;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n}\r\n.list-group-item.active > .badge,\r\n.nav-pills > .active > a > .badge {\r\n  color: #337ab7;\r\n  background-color: #fff;\r\n}\r\n.list-group-item > .badge {\r\n  float: right;\r\n}\r\n.list-group-item > .badge + .badge {\r\n  margin-right: 5px;\r\n}\r\n.nav-pills > li > a > .badge {\r\n  margin-left: 3px;\r\n}\r\n.jumbotron {\r\n  padding-top: 30px;\r\n  padding-bottom: 30px;\r\n  margin-bottom: 30px;\r\n  color: inherit;\r\n  background-color: #eee;\r\n}\r\n.jumbotron h1,\r\n.jumbotron .h1 {\r\n  color: inherit;\r\n}\r\n.jumbotron p {\r\n  margin-bottom: 15px;\r\n  font-size: 21px;\r\n  font-weight: 200;\r\n}\r\n.jumbotron > hr {\r\n  border-top-color: #d5d5d5;\r\n}\r\n.container .jumbotron,\r\n.container-fluid .jumbotron {\r\n  border-radius: 6px;\r\n}\r\n.jumbotron .container {\r\n  max-width: 100%;\r\n}\r\n@media screen and (min-width: 768px) {\r\n  .jumbotron {\r\n    padding-top: 48px;\r\n    padding-bottom: 48px;\r\n  }\r\n  .container .jumbotron,\r\n  .container-fluid .jumbotron {\r\n    padding-right: 60px;\r\n    padding-left: 60px;\r\n  }\r\n  .jumbotron h1,\r\n  .jumbotron .h1 {\r\n    font-size: 63px;\r\n  }\r\n}\r\n.thumbnail {\r\n  display: block;\r\n  padding: 4px;\r\n  margin-bottom: 20px;\r\n  line-height: 1.42857143;\r\n  background-color: #fff;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n  -webkit-transition: border .2s ease-in-out;\r\n       -o-transition: border .2s ease-in-out;\r\n          transition: border .2s ease-in-out;\r\n}\r\n.thumbnail > img,\r\n.thumbnail a > img {\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n}\r\na.thumbnail:hover,\r\na.thumbnail:focus,\r\na.thumbnail.active {\r\n  border-color: #337ab7;\r\n}\r\n.thumbnail .caption {\r\n  padding: 9px;\r\n  color: #333;\r\n}\r\n.alert {\r\n  padding: 15px;\r\n  margin-bottom: 20px;\r\n  border: 1px solid transparent;\r\n  border-radius: 4px;\r\n}\r\n.alert h4 {\r\n  margin-top: 0;\r\n  color: inherit;\r\n}\r\n.alert .alert-link {\r\n  font-weight: bold;\r\n}\r\n.alert > p,\r\n.alert > ul {\r\n  margin-bottom: 0;\r\n}\r\n.alert > p + p {\r\n  margin-top: 5px;\r\n}\r\n.alert-dismissable,\r\n.alert-dismissible {\r\n  padding-right: 35px;\r\n}\r\n.alert-dismissable .close,\r\n.alert-dismissible .close {\r\n  position: relative;\r\n  top: -2px;\r\n  right: -21px;\r\n  color: inherit;\r\n}\r\n.alert-success {\r\n  color: #3c763d;\r\n  background-color: #dff0d8;\r\n  border-color: #d6e9c6;\r\n}\r\n.alert-success hr {\r\n  border-top-color: #c9e2b3;\r\n}\r\n.alert-success .alert-link {\r\n  color: #2b542c;\r\n}\r\n.alert-info {\r\n  color: #31708f;\r\n  background-color: #d9edf7;\r\n  border-color: #bce8f1;\r\n}\r\n.alert-info hr {\r\n  border-top-color: #a6e1ec;\r\n}\r\n.alert-info .alert-link {\r\n  color: #245269;\r\n}\r\n.alert-warning {\r\n  color: #8a6d3b;\r\n  background-color: #fcf8e3;\r\n  border-color: #faebcc;\r\n}\r\n.alert-warning hr {\r\n  border-top-color: #f7e1b5;\r\n}\r\n.alert-warning .alert-link {\r\n  color: #66512c;\r\n}\r\n.alert-danger {\r\n  color: #a94442;\r\n  background-color: #f2dede;\r\n  border-color: #ebccd1;\r\n}\r\n.alert-danger hr {\r\n  border-top-color: #e4b9c0;\r\n}\r\n.alert-danger .alert-link {\r\n  color: #843534;\r\n}\r\n@-webkit-keyframes progress-bar-stripes {\r\n  from {\r\n    background-position: 40px 0;\r\n  }\r\n  to {\r\n    background-position: 0 0;\r\n  }\r\n}\r\n@-o-keyframes progress-bar-stripes {\r\n  from {\r\n    background-position: 40px 0;\r\n  }\r\n  to {\r\n    background-position: 0 0;\r\n  }\r\n}\r\n@keyframes progress-bar-stripes {\r\n  from {\r\n    background-position: 40px 0;\r\n  }\r\n  to {\r\n    background-position: 0 0;\r\n  }\r\n}\r\n.progress {\r\n  height: 20px;\r\n  margin-bottom: 20px;\r\n  overflow: hidden;\r\n  background-color: #f5f5f5;\r\n  border-radius: 4px;\r\n  -webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, .1);\r\n          box-shadow: inset 0 1px 2px rgba(0, 0, 0, .1);\r\n}\r\n.progress-bar {\r\n  float: left;\r\n  width: 0;\r\n  height: 100%;\r\n  font-size: 12px;\r\n  line-height: 20px;\r\n  color: #fff;\r\n  text-align: center;\r\n  background-color: #337ab7;\r\n  -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .15);\r\n          box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .15);\r\n  -webkit-transition: width .6s ease;\r\n       -o-transition: width .6s ease;\r\n          transition: width .6s ease;\r\n}\r\n.progress-striped .progress-bar,\r\n.progress-bar-striped {\r\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\r\n  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\r\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\r\n  -webkit-background-size: 40px 40px;\r\n          background-size: 40px 40px;\r\n}\r\n.progress.active .progress-bar,\r\n.progress-bar.active {\r\n  -webkit-animation: progress-bar-stripes 2s linear infinite;\r\n       -o-animation: progress-bar-stripes 2s linear infinite;\r\n          animation: progress-bar-stripes 2s linear infinite;\r\n}\r\n.progress-bar-success {\r\n  background-color: #5cb85c;\r\n}\r\n.progress-striped .progress-bar-success {\r\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\r\n  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\r\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\r\n}\r\n.progress-bar-info {\r\n  background-color: #5bc0de;\r\n}\r\n.progress-striped .progress-bar-info {\r\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\r\n  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\r\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\r\n}\r\n.progress-bar-warning {\r\n  background-color: #f0ad4e;\r\n}\r\n.progress-striped .progress-bar-warning {\r\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\r\n  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\r\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\r\n}\r\n.progress-bar-danger {\r\n  background-color: #d9534f;\r\n}\r\n.progress-striped .progress-bar-danger {\r\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\r\n  background-image:      -o-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\r\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\r\n}\r\n.media {\r\n  margin-top: 15px;\r\n}\r\n.media:first-child {\r\n  margin-top: 0;\r\n}\r\n.media,\r\n.media-body {\r\n  overflow: hidden;\r\n  zoom: 1;\r\n}\r\n.media-body {\r\n  width: 10000px;\r\n}\r\n.media-object {\r\n  display: block;\r\n}\r\n.media-object.img-thumbnail {\r\n  max-width: none;\r\n}\r\n.media-right,\r\n.media > .pull-right {\r\n  padding-left: 10px;\r\n}\r\n.media-left,\r\n.media > .pull-left {\r\n  padding-right: 10px;\r\n}\r\n.media-left,\r\n.media-right,\r\n.media-body {\r\n  display: table-cell;\r\n  vertical-align: top;\r\n}\r\n.media-middle {\r\n  vertical-align: middle;\r\n}\r\n.media-bottom {\r\n  vertical-align: bottom;\r\n}\r\n.media-heading {\r\n  margin-top: 0;\r\n  margin-bottom: 5px;\r\n}\r\n.media-list {\r\n  padding-left: 0;\r\n  list-style: none;\r\n}\r\n.list-group {\r\n  padding-left: 0;\r\n  margin-bottom: 20px;\r\n}\r\n.list-group-item {\r\n  position: relative;\r\n  display: block;\r\n  padding: 10px 15px;\r\n  margin-bottom: -1px;\r\n  background-color: #fff;\r\n  border: 1px solid #ddd;\r\n}\r\n.list-group-item:first-child {\r\n  border-top-left-radius: 4px;\r\n  border-top-right-radius: 4px;\r\n}\r\n.list-group-item:last-child {\r\n  margin-bottom: 0;\r\n  border-bottom-right-radius: 4px;\r\n  border-bottom-left-radius: 4px;\r\n}\r\na.list-group-item,\r\nbutton.list-group-item {\r\n  color: #555;\r\n}\r\na.list-group-item .list-group-item-heading,\r\nbutton.list-group-item .list-group-item-heading {\r\n  color: #333;\r\n}\r\na.list-group-item:hover,\r\nbutton.list-group-item:hover,\r\na.list-group-item:focus,\r\nbutton.list-group-item:focus {\r\n  color: #555;\r\n  text-decoration: none;\r\n  background-color: #f5f5f5;\r\n}\r\nbutton.list-group-item {\r\n  width: 100%;\r\n  text-align: left;\r\n}\r\n.list-group-item.disabled,\r\n.list-group-item.disabled:hover,\r\n.list-group-item.disabled:focus {\r\n  color: #777;\r\n  cursor: not-allowed;\r\n  background-color: #eee;\r\n}\r\n.list-group-item.disabled .list-group-item-heading,\r\n.list-group-item.disabled:hover .list-group-item-heading,\r\n.list-group-item.disabled:focus .list-group-item-heading {\r\n  color: inherit;\r\n}\r\n.list-group-item.disabled .list-group-item-text,\r\n.list-group-item.disabled:hover .list-group-item-text,\r\n.list-group-item.disabled:focus .list-group-item-text {\r\n  color: #777;\r\n}\r\n.list-group-item.active,\r\n.list-group-item.active:hover,\r\n.list-group-item.active:focus {\r\n  z-index: 2;\r\n  color: #fff;\r\n  background-color: #337ab7;\r\n  border-color: #337ab7;\r\n}\r\n.list-group-item.active .list-group-item-heading,\r\n.list-group-item.active:hover .list-group-item-heading,\r\n.list-group-item.active:focus .list-group-item-heading,\r\n.list-group-item.active .list-group-item-heading > small,\r\n.list-group-item.active:hover .list-group-item-heading > small,\r\n.list-group-item.active:focus .list-group-item-heading > small,\r\n.list-group-item.active .list-group-item-heading > .small,\r\n.list-group-item.active:hover .list-group-item-heading > .small,\r\n.list-group-item.active:focus .list-group-item-heading > .small {\r\n  color: inherit;\r\n}\r\n.list-group-item.active .list-group-item-text,\r\n.list-group-item.active:hover .list-group-item-text,\r\n.list-group-item.active:focus .list-group-item-text {\r\n  color: #c7ddef;\r\n}\r\n.list-group-item-success {\r\n  color: #3c763d;\r\n  background-color: #dff0d8;\r\n}\r\na.list-group-item-success,\r\nbutton.list-group-item-success {\r\n  color: #3c763d;\r\n}\r\na.list-group-item-success .list-group-item-heading,\r\nbutton.list-group-item-success .list-group-item-heading {\r\n  color: inherit;\r\n}\r\na.list-group-item-success:hover,\r\nbutton.list-group-item-success:hover,\r\na.list-group-item-success:focus,\r\nbutton.list-group-item-success:focus {\r\n  color: #3c763d;\r\n  background-color: #d0e9c6;\r\n}\r\na.list-group-item-success.active,\r\nbutton.list-group-item-success.active,\r\na.list-group-item-success.active:hover,\r\nbutton.list-group-item-success.active:hover,\r\na.list-group-item-success.active:focus,\r\nbutton.list-group-item-success.active:focus {\r\n  color: #fff;\r\n  background-color: #3c763d;\r\n  border-color: #3c763d;\r\n}\r\n.list-group-item-info {\r\n  color: #31708f;\r\n  background-color: #d9edf7;\r\n}\r\na.list-group-item-info,\r\nbutton.list-group-item-info {\r\n  color: #31708f;\r\n}\r\na.list-group-item-info .list-group-item-heading,\r\nbutton.list-group-item-info .list-group-item-heading {\r\n  color: inherit;\r\n}\r\na.list-group-item-info:hover,\r\nbutton.list-group-item-info:hover,\r\na.list-group-item-info:focus,\r\nbutton.list-group-item-info:focus {\r\n  color: #31708f;\r\n  background-color: #c4e3f3;\r\n}\r\na.list-group-item-info.active,\r\nbutton.list-group-item-info.active,\r\na.list-group-item-info.active:hover,\r\nbutton.list-group-item-info.active:hover,\r\na.list-group-item-info.active:focus,\r\nbutton.list-group-item-info.active:focus {\r\n  color: #fff;\r\n  background-color: #31708f;\r\n  border-color: #31708f;\r\n}\r\n.list-group-item-warning {\r\n  color: #8a6d3b;\r\n  background-color: #fcf8e3;\r\n}\r\na.list-group-item-warning,\r\nbutton.list-group-item-warning {\r\n  color: #8a6d3b;\r\n}\r\na.list-group-item-warning .list-group-item-heading,\r\nbutton.list-group-item-warning .list-group-item-heading {\r\n  color: inherit;\r\n}\r\na.list-group-item-warning:hover,\r\nbutton.list-group-item-warning:hover,\r\na.list-group-item-warning:focus,\r\nbutton.list-group-item-warning:focus {\r\n  color: #8a6d3b;\r\n  background-color: #faf2cc;\r\n}\r\na.list-group-item-warning.active,\r\nbutton.list-group-item-warning.active,\r\na.list-group-item-warning.active:hover,\r\nbutton.list-group-item-warning.active:hover,\r\na.list-group-item-warning.active:focus,\r\nbutton.list-group-item-warning.active:focus {\r\n  color: #fff;\r\n  background-color: #8a6d3b;\r\n  border-color: #8a6d3b;\r\n}\r\n.list-group-item-danger {\r\n  color: #a94442;\r\n  background-color: #f2dede;\r\n}\r\na.list-group-item-danger,\r\nbutton.list-group-item-danger {\r\n  color: #a94442;\r\n}\r\na.list-group-item-danger .list-group-item-heading,\r\nbutton.list-group-item-danger .list-group-item-heading {\r\n  color: inherit;\r\n}\r\na.list-group-item-danger:hover,\r\nbutton.list-group-item-danger:hover,\r\na.list-group-item-danger:focus,\r\nbutton.list-group-item-danger:focus {\r\n  color: #a94442;\r\n  background-color: #ebcccc;\r\n}\r\na.list-group-item-danger.active,\r\nbutton.list-group-item-danger.active,\r\na.list-group-item-danger.active:hover,\r\nbutton.list-group-item-danger.active:hover,\r\na.list-group-item-danger.active:focus,\r\nbutton.list-group-item-danger.active:focus {\r\n  color: #fff;\r\n  background-color: #a94442;\r\n  border-color: #a94442;\r\n}\r\n.list-group-item-heading {\r\n  margin-top: 0;\r\n  margin-bottom: 5px;\r\n}\r\n.list-group-item-text {\r\n  margin-bottom: 0;\r\n  line-height: 1.3;\r\n}\r\n.panel {\r\n  margin-bottom: 20px;\r\n  background-color: #fff;\r\n  border: 1px solid transparent;\r\n  border-radius: 4px;\r\n  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, .05);\r\n          box-shadow: 0 1px 1px rgba(0, 0, 0, .05);\r\n}\r\n.panel-body {\r\n  padding: 15px;\r\n}\r\n.panel-heading {\r\n  padding: 10px 15px;\r\n  border-bottom: 1px solid transparent;\r\n  border-top-left-radius: 3px;\r\n  border-top-right-radius: 3px;\r\n}\r\n.panel-heading > .dropdown .dropdown-toggle {\r\n  color: inherit;\r\n}\r\n.panel-title {\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n  font-size: 16px;\r\n  color: inherit;\r\n}\r\n.panel-title > a,\r\n.panel-title > small,\r\n.panel-title > .small,\r\n.panel-title > small > a,\r\n.panel-title > .small > a {\r\n  color: inherit;\r\n}\r\n.panel-footer {\r\n  padding: 10px 15px;\r\n  background-color: #f5f5f5;\r\n  border-top: 1px solid #ddd;\r\n  border-bottom-right-radius: 3px;\r\n  border-bottom-left-radius: 3px;\r\n}\r\n.panel > .list-group,\r\n.panel > .panel-collapse > .list-group {\r\n  margin-bottom: 0;\r\n}\r\n.panel > .list-group .list-group-item,\r\n.panel > .panel-collapse > .list-group .list-group-item {\r\n  border-width: 1px 0;\r\n  border-radius: 0;\r\n}\r\n.panel > .list-group:first-child .list-group-item:first-child,\r\n.panel > .panel-collapse > .list-group:first-child .list-group-item:first-child {\r\n  border-top: 0;\r\n  border-top-left-radius: 3px;\r\n  border-top-right-radius: 3px;\r\n}\r\n.panel > .list-group:last-child .list-group-item:last-child,\r\n.panel > .panel-collapse > .list-group:last-child .list-group-item:last-child {\r\n  border-bottom: 0;\r\n  border-bottom-right-radius: 3px;\r\n  border-bottom-left-radius: 3px;\r\n}\r\n.panel > .panel-heading + .panel-collapse > .list-group .list-group-item:first-child {\r\n  border-top-left-radius: 0;\r\n  border-top-right-radius: 0;\r\n}\r\n.panel-heading + .list-group .list-group-item:first-child {\r\n  border-top-width: 0;\r\n}\r\n.list-group + .panel-footer {\r\n  border-top-width: 0;\r\n}\r\n.panel > .table,\r\n.panel > .table-responsive > .table,\r\n.panel > .panel-collapse > .table {\r\n  margin-bottom: 0;\r\n}\r\n.panel > .table caption,\r\n.panel > .table-responsive > .table caption,\r\n.panel > .panel-collapse > .table caption {\r\n  padding-right: 15px;\r\n  padding-left: 15px;\r\n}\r\n.panel > .table:first-child,\r\n.panel > .table-responsive:first-child > .table:first-child {\r\n  border-top-left-radius: 3px;\r\n  border-top-right-radius: 3px;\r\n}\r\n.panel > .table:first-child > thead:first-child > tr:first-child,\r\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child,\r\n.panel > .table:first-child > tbody:first-child > tr:first-child,\r\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child {\r\n  border-top-left-radius: 3px;\r\n  border-top-right-radius: 3px;\r\n}\r\n.panel > .table:first-child > thead:first-child > tr:first-child td:first-child,\r\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:first-child,\r\n.panel > .table:first-child > tbody:first-child > tr:first-child td:first-child,\r\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:first-child,\r\n.panel > .table:first-child > thead:first-child > tr:first-child th:first-child,\r\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:first-child,\r\n.panel > .table:first-child > tbody:first-child > tr:first-child th:first-child,\r\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:first-child {\r\n  border-top-left-radius: 3px;\r\n}\r\n.panel > .table:first-child > thead:first-child > tr:first-child td:last-child,\r\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:last-child,\r\n.panel > .table:first-child > tbody:first-child > tr:first-child td:last-child,\r\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:last-child,\r\n.panel > .table:first-child > thead:first-child > tr:first-child th:last-child,\r\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:last-child,\r\n.panel > .table:first-child > tbody:first-child > tr:first-child th:last-child,\r\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:last-child {\r\n  border-top-right-radius: 3px;\r\n}\r\n.panel > .table:last-child,\r\n.panel > .table-responsive:last-child > .table:last-child {\r\n  border-bottom-right-radius: 3px;\r\n  border-bottom-left-radius: 3px;\r\n}\r\n.panel > .table:last-child > tbody:last-child > tr:last-child,\r\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child,\r\n.panel > .table:last-child > tfoot:last-child > tr:last-child,\r\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child {\r\n  border-bottom-right-radius: 3px;\r\n  border-bottom-left-radius: 3px;\r\n}\r\n.panel > .table:last-child > tbody:last-child > tr:last-child td:first-child,\r\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:first-child,\r\n.panel > .table:last-child > tfoot:last-child > tr:last-child td:first-child,\r\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:first-child,\r\n.panel > .table:last-child > tbody:last-child > tr:last-child th:first-child,\r\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:first-child,\r\n.panel > .table:last-child > tfoot:last-child > tr:last-child th:first-child,\r\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:first-child {\r\n  border-bottom-left-radius: 3px;\r\n}\r\n.panel > .table:last-child > tbody:last-child > tr:last-child td:last-child,\r\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:last-child,\r\n.panel > .table:last-child > tfoot:last-child > tr:last-child td:last-child,\r\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:last-child,\r\n.panel > .table:last-child > tbody:last-child > tr:last-child th:last-child,\r\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:last-child,\r\n.panel > .table:last-child > tfoot:last-child > tr:last-child th:last-child,\r\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:last-child {\r\n  border-bottom-right-radius: 3px;\r\n}\r\n.panel > .panel-body + .table,\r\n.panel > .panel-body + .table-responsive,\r\n.panel > .table + .panel-body,\r\n.panel > .table-responsive + .panel-body {\r\n  border-top: 1px solid #ddd;\r\n}\r\n.panel > .table > tbody:first-child > tr:first-child th,\r\n.panel > .table > tbody:first-child > tr:first-child td {\r\n  border-top: 0;\r\n}\r\n.panel > .table-bordered,\r\n.panel > .table-responsive > .table-bordered {\r\n  border: 0;\r\n}\r\n.panel > .table-bordered > thead > tr > th:first-child,\r\n.panel > .table-responsive > .table-bordered > thead > tr > th:first-child,\r\n.panel > .table-bordered > tbody > tr > th:first-child,\r\n.panel > .table-responsive > .table-bordered > tbody > tr > th:first-child,\r\n.panel > .table-bordered > tfoot > tr > th:first-child,\r\n.panel > .table-responsive > .table-bordered > tfoot > tr > th:first-child,\r\n.panel > .table-bordered > thead > tr > td:first-child,\r\n.panel > .table-responsive > .table-bordered > thead > tr > td:first-child,\r\n.panel > .table-bordered > tbody > tr > td:first-child,\r\n.panel > .table-responsive > .table-bordered > tbody > tr > td:first-child,\r\n.panel > .table-bordered > tfoot > tr > td:first-child,\r\n.panel > .table-responsive > .table-bordered > tfoot > tr > td:first-child {\r\n  border-left: 0;\r\n}\r\n.panel > .table-bordered > thead > tr > th:last-child,\r\n.panel > .table-responsive > .table-bordered > thead > tr > th:last-child,\r\n.panel > .table-bordered > tbody > tr > th:last-child,\r\n.panel > .table-responsive > .table-bordered > tbody > tr > th:last-child,\r\n.panel > .table-bordered > tfoot > tr > th:last-child,\r\n.panel > .table-responsive > .table-bordered > tfoot > tr > th:last-child,\r\n.panel > .table-bordered > thead > tr > td:last-child,\r\n.panel > .table-responsive > .table-bordered > thead > tr > td:last-child,\r\n.panel > .table-bordered > tbody > tr > td:last-child,\r\n.panel > .table-responsive > .table-bordered > tbody > tr > td:last-child,\r\n.panel > .table-bordered > tfoot > tr > td:last-child,\r\n.panel > .table-responsive > .table-bordered > tfoot > tr > td:last-child {\r\n  border-right: 0;\r\n}\r\n.panel > .table-bordered > thead > tr:first-child > td,\r\n.panel > .table-responsive > .table-bordered > thead > tr:first-child > td,\r\n.panel > .table-bordered > tbody > tr:first-child > td,\r\n.panel > .table-responsive > .table-bordered > tbody > tr:first-child > td,\r\n.panel > .table-bordered > thead > tr:first-child > th,\r\n.panel > .table-responsive > .table-bordered > thead > tr:first-child > th,\r\n.panel > .table-bordered > tbody > tr:first-child > th,\r\n.panel > .table-responsive > .table-bordered > tbody > tr:first-child > th {\r\n  border-bottom: 0;\r\n}\r\n.panel > .table-bordered > tbody > tr:last-child > td,\r\n.panel > .table-responsive > .table-bordered > tbody > tr:last-child > td,\r\n.panel > .table-bordered > tfoot > tr:last-child > td,\r\n.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > td,\r\n.panel > .table-bordered > tbody > tr:last-child > th,\r\n.panel > .table-responsive > .table-bordered > tbody > tr:last-child > th,\r\n.panel > .table-bordered > tfoot > tr:last-child > th,\r\n.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > th {\r\n  border-bottom: 0;\r\n}\r\n.panel > .table-responsive {\r\n  margin-bottom: 0;\r\n  border: 0;\r\n}\r\n.panel-group {\r\n  margin-bottom: 20px;\r\n}\r\n.panel-group .panel {\r\n  margin-bottom: 0;\r\n  border-radius: 4px;\r\n}\r\n.panel-group .panel + .panel {\r\n  margin-top: 5px;\r\n}\r\n.panel-group .panel-heading {\r\n  border-bottom: 0;\r\n}\r\n.panel-group .panel-heading + .panel-collapse > .panel-body,\r\n.panel-group .panel-heading + .panel-collapse > .list-group {\r\n  border-top: 1px solid #ddd;\r\n}\r\n.panel-group .panel-footer {\r\n  border-top: 0;\r\n}\r\n.panel-group .panel-footer + .panel-collapse .panel-body {\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n.panel-default {\r\n  border-color: #ddd;\r\n}\r\n.panel-default > .panel-heading {\r\n  color: #333;\r\n  background-color: #f5f5f5;\r\n  border-color: #ddd;\r\n}\r\n.panel-default > .panel-heading + .panel-collapse > .panel-body {\r\n  border-top-color: #ddd;\r\n}\r\n.panel-default > .panel-heading .badge {\r\n  color: #f5f5f5;\r\n  background-color: #333;\r\n}\r\n.panel-default > .panel-footer + .panel-collapse > .panel-body {\r\n  border-bottom-color: #ddd;\r\n}\r\n.panel-primary {\r\n  border-color: #337ab7;\r\n}\r\n.panel-primary > .panel-heading {\r\n  color: #fff;\r\n  background-color: #337ab7;\r\n  border-color: #337ab7;\r\n}\r\n.panel-primary > .panel-heading + .panel-collapse > .panel-body {\r\n  border-top-color: #337ab7;\r\n}\r\n.panel-primary > .panel-heading .badge {\r\n  color: #337ab7;\r\n  background-color: #fff;\r\n}\r\n.panel-primary > .panel-footer + .panel-collapse > .panel-body {\r\n  border-bottom-color: #337ab7;\r\n}\r\n.panel-success {\r\n  border-color: #d6e9c6;\r\n}\r\n.panel-success > .panel-heading {\r\n  color: #3c763d;\r\n  background-color: #dff0d8;\r\n  border-color: #d6e9c6;\r\n}\r\n.panel-success > .panel-heading + .panel-collapse > .panel-body {\r\n  border-top-color: #d6e9c6;\r\n}\r\n.panel-success > .panel-heading .badge {\r\n  color: #dff0d8;\r\n  background-color: #3c763d;\r\n}\r\n.panel-success > .panel-footer + .panel-collapse > .panel-body {\r\n  border-bottom-color: #d6e9c6;\r\n}\r\n.panel-info {\r\n  border-color: #bce8f1;\r\n}\r\n.panel-info > .panel-heading {\r\n  color: #31708f;\r\n  background-color: #d9edf7;\r\n  border-color: #bce8f1;\r\n}\r\n.panel-info > .panel-heading + .panel-collapse > .panel-body {\r\n  border-top-color: #bce8f1;\r\n}\r\n.panel-info > .panel-heading .badge {\r\n  color: #d9edf7;\r\n  background-color: #31708f;\r\n}\r\n.panel-info > .panel-footer + .panel-collapse > .panel-body {\r\n  border-bottom-color: #bce8f1;\r\n}\r\n.panel-warning {\r\n  border-color: #faebcc;\r\n}\r\n.panel-warning > .panel-heading {\r\n  color: #8a6d3b;\r\n  background-color: #fcf8e3;\r\n  border-color: #faebcc;\r\n}\r\n.panel-warning > .panel-heading + .panel-collapse > .panel-body {\r\n  border-top-color: #faebcc;\r\n}\r\n.panel-warning > .panel-heading .badge {\r\n  color: #fcf8e3;\r\n  background-color: #8a6d3b;\r\n}\r\n.panel-warning > .panel-footer + .panel-collapse > .panel-body {\r\n  border-bottom-color: #faebcc;\r\n}\r\n.panel-danger {\r\n  border-color: #ebccd1;\r\n}\r\n.panel-danger > .panel-heading {\r\n  color: #a94442;\r\n  background-color: #f2dede;\r\n  border-color: #ebccd1;\r\n}\r\n.panel-danger > .panel-heading + .panel-collapse > .panel-body {\r\n  border-top-color: #ebccd1;\r\n}\r\n.panel-danger > .panel-heading .badge {\r\n  color: #f2dede;\r\n  background-color: #a94442;\r\n}\r\n.panel-danger > .panel-footer + .panel-collapse > .panel-body {\r\n  border-bottom-color: #ebccd1;\r\n}\r\n.embed-responsive {\r\n  position: relative;\r\n  display: block;\r\n  height: 0;\r\n  padding: 0;\r\n  overflow: hidden;\r\n}\r\n.embed-responsive .embed-responsive-item,\r\n.embed-responsive iframe,\r\n.embed-responsive embed,\r\n.embed-responsive object,\r\n.embed-responsive video {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  border: 0;\r\n}\r\n.embed-responsive-16by9 {\r\n  padding-bottom: 56.25%;\r\n}\r\n.embed-responsive-4by3 {\r\n  padding-bottom: 75%;\r\n}\r\n.well {\r\n  min-height: 20px;\r\n  padding: 19px;\r\n  margin-bottom: 20px;\r\n  background-color: #f5f5f5;\r\n  border: 1px solid #e3e3e3;\r\n  border-radius: 4px;\r\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .05);\r\n          box-shadow: inset 0 1px 1px rgba(0, 0, 0, .05);\r\n}\r\n.well blockquote {\r\n  border-color: #ddd;\r\n  border-color: rgba(0, 0, 0, .15);\r\n}\r\n.well-lg {\r\n  padding: 24px;\r\n  border-radius: 6px;\r\n}\r\n.well-sm {\r\n  padding: 9px;\r\n  border-radius: 3px;\r\n}\r\n.close {\r\n  float: right;\r\n  font-size: 21px;\r\n  font-weight: bold;\r\n  line-height: 1;\r\n  color: #000;\r\n  text-shadow: 0 1px 0 #fff;\r\n  filter: alpha(opacity=20);\r\n  opacity: .2;\r\n}\r\n.close:hover,\r\n.close:focus {\r\n  color: #000;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  filter: alpha(opacity=50);\r\n  opacity: .5;\r\n}\r\nbutton.close {\r\n  -webkit-appearance: none;\r\n  padding: 0;\r\n  cursor: pointer;\r\n  background: transparent;\r\n  border: 0;\r\n}\r\n.modal-open {\r\n  overflow: hidden;\r\n}\r\n.modal {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 1050;\r\n  display: none;\r\n  overflow: hidden;\r\n  -webkit-overflow-scrolling: touch;\r\n  outline: 0;\r\n}\r\n.modal.fade .modal-dialog {\r\n  -webkit-transition: -webkit-transform .3s ease-out;\r\n       -o-transition:      -o-transform .3s ease-out;\r\n          transition:         transform .3s ease-out;\r\n  -webkit-transform: translate(0, -25%);\r\n      -ms-transform: translate(0, -25%);\r\n       -o-transform: translate(0, -25%);\r\n          transform: translate(0, -25%);\r\n}\r\n.modal.in .modal-dialog {\r\n  -webkit-transform: translate(0, 0);\r\n      -ms-transform: translate(0, 0);\r\n       -o-transform: translate(0, 0);\r\n          transform: translate(0, 0);\r\n}\r\n.modal-open .modal {\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n}\r\n.modal-dialog {\r\n  position: relative;\r\n  width: auto;\r\n  margin: 10px;\r\n}\r\n.modal-content {\r\n  position: relative;\r\n  background-color: #fff;\r\n  -webkit-background-clip: padding-box;\r\n          background-clip: padding-box;\r\n  border: 1px solid #999;\r\n  border: 1px solid rgba(0, 0, 0, .2);\r\n  border-radius: 6px;\r\n  outline: 0;\r\n  -webkit-box-shadow: 0 3px 9px rgba(0, 0, 0, .5);\r\n          box-shadow: 0 3px 9px rgba(0, 0, 0, .5);\r\n}\r\n.modal-backdrop {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 1040;\r\n  background-color: #000;\r\n}\r\n.modal-backdrop.fade {\r\n  filter: alpha(opacity=0);\r\n  opacity: 0;\r\n}\r\n.modal-backdrop.in {\r\n  filter: alpha(opacity=50);\r\n  opacity: .5;\r\n}\r\n.modal-header {\r\n  min-height: 16.42857143px;\r\n  padding: 15px;\r\n  border-bottom: 1px solid #e5e5e5;\r\n}\r\n.modal-header .close {\r\n  margin-top: -2px;\r\n}\r\n.modal-title {\r\n  margin: 0;\r\n  line-height: 1.42857143;\r\n}\r\n.modal-body {\r\n  position: relative;\r\n  padding: 15px;\r\n}\r\n.modal-footer {\r\n  padding: 15px;\r\n  text-align: right;\r\n  border-top: 1px solid #e5e5e5;\r\n}\r\n.modal-footer .btn + .btn {\r\n  margin-bottom: 0;\r\n  margin-left: 5px;\r\n}\r\n.modal-footer .btn-group .btn + .btn {\r\n  margin-left: -1px;\r\n}\r\n.modal-footer .btn-block + .btn-block {\r\n  margin-left: 0;\r\n}\r\n.modal-scrollbar-measure {\r\n  position: absolute;\r\n  top: -9999px;\r\n  width: 50px;\r\n  height: 50px;\r\n  overflow: scroll;\r\n}\r\n@media (min-width: 768px) {\r\n  .modal-dialog {\r\n    width: 600px;\r\n    margin: 30px auto;\r\n  }\r\n  .modal-content {\r\n    -webkit-box-shadow: 0 5px 15px rgba(0, 0, 0, .5);\r\n            box-shadow: 0 5px 15px rgba(0, 0, 0, .5);\r\n  }\r\n  .modal-sm {\r\n    width: 300px;\r\n  }\r\n}\r\n@media (min-width: 992px) {\r\n  .modal-lg {\r\n    width: 900px;\r\n  }\r\n}\r\n.tooltip {\r\n  position: absolute;\r\n  z-index: 1070;\r\n  display: block;\r\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n  font-size: 12px;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  line-height: 1.42857143;\r\n  text-align: left;\r\n  text-align: start;\r\n  text-decoration: none;\r\n  text-shadow: none;\r\n  text-transform: none;\r\n  letter-spacing: normal;\r\n  word-break: normal;\r\n  word-spacing: normal;\r\n  word-wrap: normal;\r\n  white-space: normal;\r\n  filter: alpha(opacity=0);\r\n  opacity: 0;\r\n\r\n  line-break: auto;\r\n}\r\n.tooltip.in {\r\n  filter: alpha(opacity=90);\r\n  opacity: .9;\r\n}\r\n.tooltip.top {\r\n  padding: 5px 0;\r\n  margin-top: -3px;\r\n}\r\n.tooltip.right {\r\n  padding: 0 5px;\r\n  margin-left: 3px;\r\n}\r\n.tooltip.bottom {\r\n  padding: 5px 0;\r\n  margin-top: 3px;\r\n}\r\n.tooltip.left {\r\n  padding: 0 5px;\r\n  margin-left: -3px;\r\n}\r\n.tooltip-inner {\r\n  max-width: 200px;\r\n  padding: 3px 8px;\r\n  color: #fff;\r\n  text-align: center;\r\n  background-color: #000;\r\n  border-radius: 4px;\r\n}\r\n.tooltip-arrow {\r\n  position: absolute;\r\n  width: 0;\r\n  height: 0;\r\n  border-color: transparent;\r\n  border-style: solid;\r\n}\r\n.tooltip.top .tooltip-arrow {\r\n  bottom: 0;\r\n  left: 50%;\r\n  margin-left: -5px;\r\n  border-width: 5px 5px 0;\r\n  border-top-color: #000;\r\n}\r\n.tooltip.top-left .tooltip-arrow {\r\n  right: 5px;\r\n  bottom: 0;\r\n  margin-bottom: -5px;\r\n  border-width: 5px 5px 0;\r\n  border-top-color: #000;\r\n}\r\n.tooltip.top-right .tooltip-arrow {\r\n  bottom: 0;\r\n  left: 5px;\r\n  margin-bottom: -5px;\r\n  border-width: 5px 5px 0;\r\n  border-top-color: #000;\r\n}\r\n.tooltip.right .tooltip-arrow {\r\n  top: 50%;\r\n  left: 0;\r\n  margin-top: -5px;\r\n  border-width: 5px 5px 5px 0;\r\n  border-right-color: #000;\r\n}\r\n.tooltip.left .tooltip-arrow {\r\n  top: 50%;\r\n  right: 0;\r\n  margin-top: -5px;\r\n  border-width: 5px 0 5px 5px;\r\n  border-left-color: #000;\r\n}\r\n.tooltip.bottom .tooltip-arrow {\r\n  top: 0;\r\n  left: 50%;\r\n  margin-left: -5px;\r\n  border-width: 0 5px 5px;\r\n  border-bottom-color: #000;\r\n}\r\n.tooltip.bottom-left .tooltip-arrow {\r\n  top: 0;\r\n  right: 5px;\r\n  margin-top: -5px;\r\n  border-width: 0 5px 5px;\r\n  border-bottom-color: #000;\r\n}\r\n.tooltip.bottom-right .tooltip-arrow {\r\n  top: 0;\r\n  left: 5px;\r\n  margin-top: -5px;\r\n  border-width: 0 5px 5px;\r\n  border-bottom-color: #000;\r\n}\r\n.popover {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 1060;\r\n  display: none;\r\n  max-width: 276px;\r\n  padding: 1px;\r\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  line-height: 1.42857143;\r\n  text-align: left;\r\n  text-align: start;\r\n  text-decoration: none;\r\n  text-shadow: none;\r\n  text-transform: none;\r\n  letter-spacing: normal;\r\n  word-break: normal;\r\n  word-spacing: normal;\r\n  word-wrap: normal;\r\n  white-space: normal;\r\n  background-color: #fff;\r\n  -webkit-background-clip: padding-box;\r\n          background-clip: padding-box;\r\n  border: 1px solid #ccc;\r\n  border: 1px solid rgba(0, 0, 0, .2);\r\n  border-radius: 6px;\r\n  -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, .2);\r\n          box-shadow: 0 5px 10px rgba(0, 0, 0, .2);\r\n\r\n  line-break: auto;\r\n}\r\n.popover.top {\r\n  margin-top: -10px;\r\n}\r\n.popover.right {\r\n  margin-left: 10px;\r\n}\r\n.popover.bottom {\r\n  margin-top: 10px;\r\n}\r\n.popover.left {\r\n  margin-left: -10px;\r\n}\r\n.popover-title {\r\n  padding: 8px 14px;\r\n  margin: 0;\r\n  font-size: 14px;\r\n  background-color: #f7f7f7;\r\n  border-bottom: 1px solid #ebebeb;\r\n  border-radius: 5px 5px 0 0;\r\n}\r\n.popover-content {\r\n  padding: 9px 14px;\r\n}\r\n.popover > .arrow,\r\n.popover > .arrow:after {\r\n  position: absolute;\r\n  display: block;\r\n  width: 0;\r\n  height: 0;\r\n  border-color: transparent;\r\n  border-style: solid;\r\n}\r\n.popover > .arrow {\r\n  border-width: 11px;\r\n}\r\n.popover > .arrow:after {\r\n  content: \"\";\r\n  border-width: 10px;\r\n}\r\n.popover.top > .arrow {\r\n  bottom: -11px;\r\n  left: 50%;\r\n  margin-left: -11px;\r\n  border-top-color: #999;\r\n  border-top-color: rgba(0, 0, 0, .25);\r\n  border-bottom-width: 0;\r\n}\r\n.popover.top > .arrow:after {\r\n  bottom: 1px;\r\n  margin-left: -10px;\r\n  content: \" \";\r\n  border-top-color: #fff;\r\n  border-bottom-width: 0;\r\n}\r\n.popover.right > .arrow {\r\n  top: 50%;\r\n  left: -11px;\r\n  margin-top: -11px;\r\n  border-right-color: #999;\r\n  border-right-color: rgba(0, 0, 0, .25);\r\n  border-left-width: 0;\r\n}\r\n.popover.right > .arrow:after {\r\n  bottom: -10px;\r\n  left: 1px;\r\n  content: \" \";\r\n  border-right-color: #fff;\r\n  border-left-width: 0;\r\n}\r\n.popover.bottom > .arrow {\r\n  top: -11px;\r\n  left: 50%;\r\n  margin-left: -11px;\r\n  border-top-width: 0;\r\n  border-bottom-color: #999;\r\n  border-bottom-color: rgba(0, 0, 0, .25);\r\n}\r\n.popover.bottom > .arrow:after {\r\n  top: 1px;\r\n  margin-left: -10px;\r\n  content: \" \";\r\n  border-top-width: 0;\r\n  border-bottom-color: #fff;\r\n}\r\n.popover.left > .arrow {\r\n  top: 50%;\r\n  right: -11px;\r\n  margin-top: -11px;\r\n  border-right-width: 0;\r\n  border-left-color: #999;\r\n  border-left-color: rgba(0, 0, 0, .25);\r\n}\r\n.popover.left > .arrow:after {\r\n  right: 1px;\r\n  bottom: -10px;\r\n  content: \" \";\r\n  border-right-width: 0;\r\n  border-left-color: #fff;\r\n}\r\n.carousel {\r\n  position: relative;\r\n}\r\n.carousel-inner {\r\n  position: relative;\r\n  width: 100%;\r\n  overflow: hidden;\r\n}\r\n.carousel-inner > .item {\r\n  position: relative;\r\n  display: none;\r\n  -webkit-transition: .6s ease-in-out left;\r\n       -o-transition: .6s ease-in-out left;\r\n          transition: .6s ease-in-out left;\r\n}\r\n.carousel-inner > .item > img,\r\n.carousel-inner > .item > a > img {\r\n  line-height: 1;\r\n}\r\n@media all and (transform-3d), (-webkit-transform-3d) {\r\n  .carousel-inner > .item {\r\n    -webkit-transition: -webkit-transform .6s ease-in-out;\r\n         -o-transition:      -o-transform .6s ease-in-out;\r\n            transition:         transform .6s ease-in-out;\r\n\r\n    -webkit-backface-visibility: hidden;\r\n            backface-visibility: hidden;\r\n    -webkit-perspective: 1000px;\r\n            perspective: 1000px;\r\n  }\r\n  .carousel-inner > .item.next,\r\n  .carousel-inner > .item.active.right {\r\n    left: 0;\r\n    -webkit-transform: translate3d(100%, 0, 0);\r\n            transform: translate3d(100%, 0, 0);\r\n  }\r\n  .carousel-inner > .item.prev,\r\n  .carousel-inner > .item.active.left {\r\n    left: 0;\r\n    -webkit-transform: translate3d(-100%, 0, 0);\r\n            transform: translate3d(-100%, 0, 0);\r\n  }\r\n  .carousel-inner > .item.next.left,\r\n  .carousel-inner > .item.prev.right,\r\n  .carousel-inner > .item.active {\r\n    left: 0;\r\n    -webkit-transform: translate3d(0, 0, 0);\r\n            transform: translate3d(0, 0, 0);\r\n  }\r\n}\r\n.carousel-inner > .active,\r\n.carousel-inner > .next,\r\n.carousel-inner > .prev {\r\n  display: block;\r\n}\r\n.carousel-inner > .active {\r\n  left: 0;\r\n}\r\n.carousel-inner > .next,\r\n.carousel-inner > .prev {\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n}\r\n.carousel-inner > .next {\r\n  left: 100%;\r\n}\r\n.carousel-inner > .prev {\r\n  left: -100%;\r\n}\r\n.carousel-inner > .next.left,\r\n.carousel-inner > .prev.right {\r\n  left: 0;\r\n}\r\n.carousel-inner > .active.left {\r\n  left: -100%;\r\n}\r\n.carousel-inner > .active.right {\r\n  left: 100%;\r\n}\r\n.carousel-control {\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 15%;\r\n  font-size: 20px;\r\n  color: #fff;\r\n  text-align: center;\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, .6);\r\n  filter: alpha(opacity=50);\r\n  opacity: .5;\r\n}\r\n.carousel-control.left {\r\n  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);\r\n  background-image:      -o-linear-gradient(left, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);\r\n  background-image: -webkit-gradient(linear, left top, right top, from(rgba(0, 0, 0, .5)), to(rgba(0, 0, 0, .0001)));\r\n  background-image:         linear-gradient(to right, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);\r\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1);\r\n  background-repeat: repeat-x;\r\n}\r\n.carousel-control.right {\r\n  right: 0;\r\n  left: auto;\r\n  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);\r\n  background-image:      -o-linear-gradient(left, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);\r\n  background-image: -webkit-gradient(linear, left top, right top, from(rgba(0, 0, 0, .0001)), to(rgba(0, 0, 0, .5)));\r\n  background-image:         linear-gradient(to right, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);\r\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1);\r\n  background-repeat: repeat-x;\r\n}\r\n.carousel-control:hover,\r\n.carousel-control:focus {\r\n  color: #fff;\r\n  text-decoration: none;\r\n  filter: alpha(opacity=90);\r\n  outline: 0;\r\n  opacity: .9;\r\n}\r\n.carousel-control .icon-prev,\r\n.carousel-control .icon-next,\r\n.carousel-control .glyphicon-chevron-left,\r\n.carousel-control .glyphicon-chevron-right {\r\n  position: absolute;\r\n  top: 50%;\r\n  z-index: 5;\r\n  display: inline-block;\r\n  margin-top: -10px;\r\n}\r\n.carousel-control .icon-prev,\r\n.carousel-control .glyphicon-chevron-left {\r\n  left: 50%;\r\n  margin-left: -10px;\r\n}\r\n.carousel-control .icon-next,\r\n.carousel-control .glyphicon-chevron-right {\r\n  right: 50%;\r\n  margin-right: -10px;\r\n}\r\n.carousel-control .icon-prev,\r\n.carousel-control .icon-next {\r\n  width: 20px;\r\n  height: 20px;\r\n  font-family: serif;\r\n  line-height: 1;\r\n}\r\n.carousel-control .icon-prev:before {\r\n  content: '\\2039';\r\n}\r\n.carousel-control .icon-next:before {\r\n  content: '\\203A';\r\n}\r\n.carousel-indicators {\r\n  position: absolute;\r\n  bottom: 10px;\r\n  left: 50%;\r\n  z-index: 15;\r\n  width: 60%;\r\n  padding-left: 0;\r\n  margin-left: -30%;\r\n  text-align: center;\r\n  list-style: none;\r\n}\r\n.carousel-indicators li {\r\n  display: inline-block;\r\n  width: 10px;\r\n  height: 10px;\r\n  margin: 1px;\r\n  text-indent: -999px;\r\n  cursor: pointer;\r\n  background-color: #000 \\9;\r\n  background-color: rgba(0, 0, 0, 0);\r\n  border: 1px solid #fff;\r\n  border-radius: 10px;\r\n}\r\n.carousel-indicators .active {\r\n  width: 12px;\r\n  height: 12px;\r\n  margin: 0;\r\n  background-color: #fff;\r\n}\r\n.carousel-caption {\r\n  position: absolute;\r\n  right: 15%;\r\n  bottom: 20px;\r\n  left: 15%;\r\n  z-index: 10;\r\n  padding-top: 20px;\r\n  padding-bottom: 20px;\r\n  color: #fff;\r\n  text-align: center;\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, .6);\r\n}\r\n.carousel-caption .btn {\r\n  text-shadow: none;\r\n}\r\n@media screen and (min-width: 768px) {\r\n  .carousel-control .glyphicon-chevron-left,\r\n  .carousel-control .glyphicon-chevron-right,\r\n  .carousel-control .icon-prev,\r\n  .carousel-control .icon-next {\r\n    width: 30px;\r\n    height: 30px;\r\n    margin-top: -15px;\r\n    font-size: 30px;\r\n  }\r\n  .carousel-control .glyphicon-chevron-left,\r\n  .carousel-control .icon-prev {\r\n    margin-left: -15px;\r\n  }\r\n  .carousel-control .glyphicon-chevron-right,\r\n  .carousel-control .icon-next {\r\n    margin-right: -15px;\r\n  }\r\n  .carousel-caption {\r\n    right: 20%;\r\n    left: 20%;\r\n    padding-bottom: 30px;\r\n  }\r\n  .carousel-indicators {\r\n    bottom: 20px;\r\n  }\r\n}\r\n.clearfix:before,\r\n.clearfix:after,\r\n.dl-horizontal dd:before,\r\n.dl-horizontal dd:after,\r\n.container:before,\r\n.container:after,\r\n.container-fluid:before,\r\n.container-fluid:after,\r\n.row:before,\r\n.row:after,\r\n.form-horizontal .form-group:before,\r\n.form-horizontal .form-group:after,\r\n.btn-toolbar:before,\r\n.btn-toolbar:after,\r\n.btn-group-vertical > .btn-group:before,\r\n.btn-group-vertical > .btn-group:after,\r\n.nav:before,\r\n.nav:after,\r\n.navbar:before,\r\n.navbar:after,\r\n.navbar-header:before,\r\n.navbar-header:after,\r\n.navbar-collapse:before,\r\n.navbar-collapse:after,\r\n.pager:before,\r\n.pager:after,\r\n.panel-body:before,\r\n.panel-body:after,\r\n.modal-footer:before,\r\n.modal-footer:after {\r\n  display: table;\r\n  content: \" \";\r\n}\r\n.clearfix:after,\r\n.dl-horizontal dd:after,\r\n.container:after,\r\n.container-fluid:after,\r\n.row:after,\r\n.form-horizontal .form-group:after,\r\n.btn-toolbar:after,\r\n.btn-group-vertical > .btn-group:after,\r\n.nav:after,\r\n.navbar:after,\r\n.navbar-header:after,\r\n.navbar-collapse:after,\r\n.pager:after,\r\n.panel-body:after,\r\n.modal-footer:after {\r\n  clear: both;\r\n}\r\n.center-block {\r\n  display: block;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n}\r\n.pull-right {\r\n  float: right !important;\r\n}\r\n.pull-left {\r\n  float: left !important;\r\n}\r\n.hide {\r\n  display: none !important;\r\n}\r\n.show {\r\n  display: block !important;\r\n}\r\n.invisible {\r\n  visibility: hidden;\r\n}\r\n.text-hide {\r\n  font: 0/0 a;\r\n  color: transparent;\r\n  text-shadow: none;\r\n  background-color: transparent;\r\n  border: 0;\r\n}\r\n.hidden {\r\n  display: none !important;\r\n}\r\n.affix {\r\n  position: fixed;\r\n}\r\n@-ms-viewport {\r\n  width: device-width;\r\n}\r\n.visible-xs,\r\n.visible-sm,\r\n.visible-md,\r\n.visible-lg {\r\n  display: none !important;\r\n}\r\n.visible-xs-block,\r\n.visible-xs-inline,\r\n.visible-xs-inline-block,\r\n.visible-sm-block,\r\n.visible-sm-inline,\r\n.visible-sm-inline-block,\r\n.visible-md-block,\r\n.visible-md-inline,\r\n.visible-md-inline-block,\r\n.visible-lg-block,\r\n.visible-lg-inline,\r\n.visible-lg-inline-block {\r\n  display: none !important;\r\n}\r\n@media (max-width: 767px) {\r\n  .visible-xs {\r\n    display: block !important;\r\n  }\r\n  table.visible-xs {\r\n    display: table !important;\r\n  }\r\n  tr.visible-xs {\r\n    display: table-row !important;\r\n  }\r\n  th.visible-xs,\r\n  td.visible-xs {\r\n    display: table-cell !important;\r\n  }\r\n}\r\n@media (max-width: 767px) {\r\n  .visible-xs-block {\r\n    display: block !important;\r\n  }\r\n}\r\n@media (max-width: 767px) {\r\n  .visible-xs-inline {\r\n    display: inline !important;\r\n  }\r\n}\r\n@media (max-width: 767px) {\r\n  .visible-xs-inline-block {\r\n    display: inline-block !important;\r\n  }\r\n}\r\n@media (min-width: 768px) and (max-width: 991px) {\r\n  .visible-sm {\r\n    display: block !important;\r\n  }\r\n  table.visible-sm {\r\n    display: table !important;\r\n  }\r\n  tr.visible-sm {\r\n    display: table-row !important;\r\n  }\r\n  th.visible-sm,\r\n  td.visible-sm {\r\n    display: table-cell !important;\r\n  }\r\n}\r\n@media (min-width: 768px) and (max-width: 991px) {\r\n  .visible-sm-block {\r\n    display: block !important;\r\n  }\r\n}\r\n@media (min-width: 768px) and (max-width: 991px) {\r\n  .visible-sm-inline {\r\n    display: inline !important;\r\n  }\r\n}\r\n@media (min-width: 768px) and (max-width: 991px) {\r\n  .visible-sm-inline-block {\r\n    display: inline-block !important;\r\n  }\r\n}\r\n@media (min-width: 992px) and (max-width: 1199px) {\r\n  .visible-md {\r\n    display: block !important;\r\n  }\r\n  table.visible-md {\r\n    display: table !important;\r\n  }\r\n  tr.visible-md {\r\n    display: table-row !important;\r\n  }\r\n  th.visible-md,\r\n  td.visible-md {\r\n    display: table-cell !important;\r\n  }\r\n}\r\n@media (min-width: 992px) and (max-width: 1199px) {\r\n  .visible-md-block {\r\n    display: block !important;\r\n  }\r\n}\r\n@media (min-width: 992px) and (max-width: 1199px) {\r\n  .visible-md-inline {\r\n    display: inline !important;\r\n  }\r\n}\r\n@media (min-width: 992px) and (max-width: 1199px) {\r\n  .visible-md-inline-block {\r\n    display: inline-block !important;\r\n  }\r\n}\r\n@media (min-width: 1200px) {\r\n  .visible-lg {\r\n    display: block !important;\r\n  }\r\n  table.visible-lg {\r\n    display: table !important;\r\n  }\r\n  tr.visible-lg {\r\n    display: table-row !important;\r\n  }\r\n  th.visible-lg,\r\n  td.visible-lg {\r\n    display: table-cell !important;\r\n  }\r\n}\r\n@media (min-width: 1200px) {\r\n  .visible-lg-block {\r\n    display: block !important;\r\n  }\r\n}\r\n@media (min-width: 1200px) {\r\n  .visible-lg-inline {\r\n    display: inline !important;\r\n  }\r\n}\r\n@media (min-width: 1200px) {\r\n  .visible-lg-inline-block {\r\n    display: inline-block !important;\r\n  }\r\n}\r\n@media (max-width: 767px) {\r\n  .hidden-xs {\r\n    display: none !important;\r\n  }\r\n}\r\n@media (min-width: 768px) and (max-width: 991px) {\r\n  .hidden-sm {\r\n    display: none !important;\r\n  }\r\n}\r\n@media (min-width: 992px) and (max-width: 1199px) {\r\n  .hidden-md {\r\n    display: none !important;\r\n  }\r\n}\r\n@media (min-width: 1200px) {\r\n  .hidden-lg {\r\n    display: none !important;\r\n  }\r\n}\r\n.visible-print {\r\n  display: none !important;\r\n}\r\n@media print {\r\n  .visible-print {\r\n    display: block !important;\r\n  }\r\n  table.visible-print {\r\n    display: table !important;\r\n  }\r\n  tr.visible-print {\r\n    display: table-row !important;\r\n  }\r\n  th.visible-print,\r\n  td.visible-print {\r\n    display: table-cell !important;\r\n  }\r\n}\r\n.visible-print-block {\r\n  display: none !important;\r\n}\r\n@media print {\r\n  .visible-print-block {\r\n    display: block !important;\r\n  }\r\n}\r\n.visible-print-inline {\r\n  display: none !important;\r\n}\r\n@media print {\r\n  .visible-print-inline {\r\n    display: inline !important;\r\n  }\r\n}\r\n.visible-print-inline-block {\r\n  display: none !important;\r\n}\r\n@media print {\r\n  .visible-print-inline-block {\r\n    display: inline-block !important;\r\n  }\r\n}\r\n@media print {\r\n  .hidden-print {\r\n    display: none !important;\r\n  }\r\n}\r\n/*# sourceMappingURL=bootstrap.css.map */\r\n", ""]);

	// exports


/***/ }),
/* 3 */
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "f4769f9bdb7466be65088239c12046d1.eot";

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "448c34a56d699c29117adc64c43affeb.woff2";

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fa2772327f55d8198301fdb8bcfc8158.woff";

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "e18bbf611f2a2e43afc071aa2f4e1512.ttf";

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "f721466883998665b87923b92dea655b.svg";

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0;

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function createStyleElement() {
		var styleElement = document.createElement("style");
		var head = getHeadElement();
		styleElement.type = "text/css";
		head.appendChild(styleElement);
		return styleElement;
	}

	function createLinkElement() {
		var linkElement = document.createElement("link");
		var head = getHeadElement();
		linkElement.rel = "stylesheet";
		head.appendChild(linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement());
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement();
			update = updateLink.bind(null, styleElement);
			remove = function() {
				styleElement.parentNode.removeChild(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement();
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				styleElement.parentNode.removeChild(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(11);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(9)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!../../node_modules/css-loader/index.js!./main.css", function() {
				var newContent = require("!!../../node_modules/css-loader/index.js!./main.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports


	// module
	exports.push([module.id, ".code {\r\n  font-family: monospace;\r\n  background-color: #f1ede4;\r\n  border-radius: 5px;\r\n  padding: 2px;\r\n}\r\n\r\nem {\r\n  background-color: #FF9;\r\n  font-style: normal;\r\n  padding: 2px;\r\n}\r\n\r\n.program {\r\n  overflow: auto;\r\n}\r\n\r\n.figure > .panel > .panel-body {\r\n  width: 100%;\r\n  margin-bottom: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 400px;\r\n}\r\n\r\n.figure > .panel > .panel-body > div {\r\n  width: 100%;\r\n  flex-shrink: 1;\r\n}\r\n\r\n.figure > .panel > .panel-body > div:last-child {\r\n  width: 100%;\r\n  flex-grow: 1;\r\n  flex-direction: column;\r\n}\r\n\r\n.caption {\r\n  text-align: center;\r\n  width: 100%;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  font-style: italic;\r\n}\r\n\r\nbody {\r\n}\r\n\r\np {\r\n  line-height: 1.75;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n", ""]);

	// exports


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(13);


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var EventPluginUtils = __webpack_require__(15);
	var ReactChildren = __webpack_require__(19);
	var ReactComponent = __webpack_require__(33);
	var ReactClass = __webpack_require__(48);
	var ReactContext = __webpack_require__(23);
	var ReactCurrentOwner = __webpack_require__(28);
	var ReactElement = __webpack_require__(22);
	var ReactElementValidator = __webpack_require__(43);
	var ReactDOM = __webpack_require__(51);
	var ReactDOMTextComponent = __webpack_require__(53);
	var ReactDefaultInjection = __webpack_require__(102);
	var ReactInstanceHandles = __webpack_require__(30);
	var ReactMount = __webpack_require__(78);
	var ReactPerf = __webpack_require__(39);
	var ReactPropTypes = __webpack_require__(133);
	var ReactReconciler = __webpack_require__(40);
	var ReactServerRendering = __webpack_require__(165);

	var assign = __webpack_require__(24);
	var findDOMNode = __webpack_require__(122);
	var onlyChild = __webpack_require__(167);

	ReactDefaultInjection.inject();

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if ("production" !== process.env.NODE_ENV) {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    only: onlyChild
	  },
	  Component: ReactComponent,
	  DOM: ReactDOM,
	  PropTypes: ReactPropTypes,
	  initializeTouchEvents: function(shouldUseTouch) {
	    EventPluginUtils.useTouchEvents = shouldUseTouch;
	  },
	  createClass: ReactClass.createClass,
	  createElement: createElement,
	  cloneElement: cloneElement,
	  createFactory: createFactory,
	  createMixin: function(mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
	  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
	  findDOMNode: findDOMNode,
	  render: render,
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  isValidElement: ReactElement.isValidElement,
	  withContext: ReactContext.withContext,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if ("production" !== process.env.NODE_ENV) {
	  var ExecutionEnvironment = __webpack_require__(62);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // If we're in Chrome, look for the devtools marker and provide a download
	    // link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1) {
	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	        console.debug(
	          'Download the React DevTools for a better development experience: ' +
	          'https://fb.me/react-devtools'
	        );
	      }
	    }

	    var expectedFeatures = [
	      // shims
	      Array.isArray,
	      Array.prototype.every,
	      Array.prototype.forEach,
	      Array.prototype.indexOf,
	      Array.prototype.map,
	      Date.now,
	      Function.prototype.bind,
	      Object.keys,
	      String.prototype.split,
	      String.prototype.trim,

	      // shams
	      Object.create,
	      Object.freeze
	    ];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error(
	          'One or more ES5 shim/shams expected by React are not available: ' +
	          'https://fb.me/react-warning-polyfills'
	        );
	        break;
	      }
	    }
	  }
	}

	React.version = '0.13.3';

	module.exports = React;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(16);

	var invariant = __webpack_require__(18);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        InjectedMount && InjectedMount.getNode,
	        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
	        'is missing getNode.'
	      ) : invariant(InjectedMount && InjectedMount.getNode));
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp ||
	         topLevelType === topLevelTypes.topTouchEnd ||
	         topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove ||
	         topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown ||
	         topLevelType === topLevelTypes.topTouchStart;
	}


	var validateEventDispatches;
	if ("production" !== process.env.NODE_ENV) {
	  validateEventDispatches = function(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ?
	      dispatchListeners.length :
	      dispatchListeners ? 1 : 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      idsIsArr === listenersIsArr && IDsLen === listenersLen,
	      'EventPluginUtils: Invalid `event`.'
	    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
	  };
	}

	/**
	 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
	 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
	 * kept separate to conserve memory.
	 */
	function forEachEventDispatch(event, cb) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      cb(event, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    cb(event, dispatchListeners, dispatchIDs);
	  }
	}

	/**
	 * Default implementation of PluginModule.executeDispatch().
	 * @param {SyntheticEvent} SyntheticEvent to handle
	 * @param {function} Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, listener, domID) {
	  event.currentTarget = injection.Mount.getNode(domID);
	  var returnValue = listener(event, domID);
	  event.currentTarget = null;
	  return returnValue;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, cb) {
	  forEachEventDispatch(event, cb);
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return id of the first dispatch execution who's listener returns true, or
	 * null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(dispatchListener),
	    'executeDirectDispatch(...): Invalid `event`.'
	  ) : invariant(!Array.isArray(dispatchListener)));
	  var res = dispatchListener ?
	    dispatchListener(event, dispatchID) :
	    null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {bool} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatch: executeDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	  injection: injection,
	  useTouchEvents: false
	};

	module.exports = EventPluginUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	var PropagationPhases = keyMirror({bubbled: null, captured: null});

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topBlur: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topReset: null,
	  topScroll: null,
	  topSelectionChange: null,
	  topSubmit: null,
	  topTextInput: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(18);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    obj instanceof Object && !Array.isArray(obj),
	    'keyMirror(...): Argument must be an object.'
	  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(20);
	var ReactFragment = __webpack_require__(21);

	var traverseAllChildren = __webpack_require__(29);
	var warning = __webpack_require__(26);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var threeArgumentPooler = PooledClass.threeArgumentPooler;

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.forEachFunction = forEachFunction;
	  this.forEachContext = forEachContext;
	}
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(traverseContext, child, name, i) {
	  var forEachBookKeeping = traverseContext;
	  forEachBookKeeping.forEachFunction.call(
	    forEachBookKeeping.forEachContext, child, i);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }

	  var traverseContext =
	    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, mapFunction, mapContext) {
	  this.mapResult = mapResult;
	  this.mapFunction = mapFunction;
	  this.mapContext = mapContext;
	}
	PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

	function mapSingleChildIntoContext(traverseContext, child, name, i) {
	  var mapBookKeeping = traverseContext;
	  var mapResult = mapBookKeeping.mapResult;

	  var keyUnique = !mapResult.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'ReactChildren.map(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }

	  if (keyUnique) {
	    var mappedChild =
	      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
	    mapResult[name] = mappedChild;
	  }
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * TODO: This may likely break any calls to `ReactChildren.map` that were
	 * previously relying on the fact that we guarded against null children.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var mapResult = {};
	  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	  return ReactFragment.create(mapResult);
	}

	function forEachSingleChildDummy(traverseContext, child, name, i) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  count: countChildren
	};

	module.exports = ReactChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(18);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function(instance) {
	  var Klass = this;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance instanceof Klass,
	    'Trying to release an instance into a pool of a different type.'
	  ) : invariant(instance instanceof Klass));
	  if (instance.destructor) {
	    instance.destructor();
	  }
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactFragment
	*/

	'use strict';

	var ReactElement = __webpack_require__(22);

	var warning = __webpack_require__(26);

	/**
	 * We used to allow keyed objects to serve as a collection of ReactElements,
	 * or nested sets. This allowed us a way to explicitly key a set a fragment of
	 * components. This is now being replaced with an opaque data structure.
	 * The upgrade path is to call React.addons.createFragment({ key: value }) to
	 * create a keyed fragment. The resulting data structure is opaque, for now.
	 */

	if ("production" !== process.env.NODE_ENV) {
	  var fragmentKey = '_reactFragment';
	  var didWarnKey = '_reactDidWarn';
	  var canWarnForReactFragment = false;

	  try {
	    // Feature test. Don't even try to issue this warning if we can't use
	    // enumerable: false.

	    var dummy = function() {
	      return 1;
	    };

	    Object.defineProperty(
	      {},
	      fragmentKey,
	      {enumerable: false, value: true}
	    );

	    Object.defineProperty(
	      {},
	      'key',
	      {enumerable: true, get: dummy}
	    );

	    canWarnForReactFragment = true;
	  } catch (x) { }

	  var proxyPropertyAccessWithWarning = function(obj, key) {
	    Object.defineProperty(obj, key, {
	      enumerable: true,
	      get: function() {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an opaque type. Accessing any of its ' +
	          'properties is deprecated. Pass it to one of the React.Children ' +
	          'helpers.'
	        ) : null);
	        this[didWarnKey] = true;
	        return this[fragmentKey][key];
	      },
	      set: function(value) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an immutable opaque type. Mutating its ' +
	          'properties is deprecated.'
	        ) : null);
	        this[didWarnKey] = true;
	        this[fragmentKey][key] = value;
	      }
	    });
	  };

	  var issuedWarnings = {};

	  var didWarnForFragment = function(fragment) {
	    // We use the keys and the type of the value as a heuristic to dedupe the
	    // warning to avoid spamming too much.
	    var fragmentCacheKey = '';
	    for (var key in fragment) {
	      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
	    }
	    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
	    issuedWarnings[fragmentCacheKey] = true;
	    return alreadyWarnedOnce;
	  };
	}

	var ReactFragment = {
	  // Wrap a keyed object in an opaque proxy that warns you if you access any
	  // of its properties.
	  create: function(object) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (typeof object !== 'object' || !object || Array.isArray(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment only accepts a single object.',
	          object
	        ) : null);
	        return object;
	      }
	      if (ReactElement.isValidElement(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment does not accept a ReactElement ' +
	          'without a wrapper object.'
	        ) : null);
	        return object;
	      }
	      if (canWarnForReactFragment) {
	        var proxy = {};
	        Object.defineProperty(proxy, fragmentKey, {
	          enumerable: false,
	          value: object
	        });
	        Object.defineProperty(proxy, didWarnKey, {
	          writable: true,
	          enumerable: false,
	          value: false
	        });
	        for (var key in object) {
	          proxyPropertyAccessWithWarning(proxy, key);
	        }
	        Object.preventExtensions(proxy);
	        return proxy;
	      }
	    }
	    return object;
	  },
	  // Extract the original keyed object from the fragment opaque type. Warn if
	  // a plain object is passed here.
	  extract: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        if (!fragment[fragmentKey]) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnForFragment(fragment),
	            'Any use of a keyed object should be wrapped in ' +
	            'React.addons.createFragment(object) before being passed as a ' +
	            'child.'
	          ) : null);
	          return fragment;
	        }
	        return fragment[fragmentKey];
	      }
	    }
	    return fragment;
	  },
	  // Check if this is a fragment and if so, extract the keyed object. If it
	  // is a fragment-like object, warn that it should be wrapped. Ignore if we
	  // can't determine what kind of object this is.
	  extractIfFragment: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        // If it is the opaque type, return the keyed object.
	        if (fragment[fragmentKey]) {
	          return fragment[fragmentKey];
	        }
	        // Otherwise, check each property if it has an element, if it does
	        // it is probably meant as a fragment, so we can warn early. Defer,
	        // the warning to extract.
	        for (var key in fragment) {
	          if (fragment.hasOwnProperty(key) &&
	              ReactElement.isValidElement(fragment[key])) {
	            // This looks like a fragment object, we should provide an
	            // early warning.
	            return ReactFragment.extract(fragment);
	          }
	        }
	      }
	    }
	    return fragment;
	  }
	};

	module.exports = ReactFragment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactContext = __webpack_require__(23);
	var ReactCurrentOwner = __webpack_require__(28);

	var assign = __webpack_require__(24);
	var warning = __webpack_require__(26);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true
	};

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} object
	 * @param {string} key
	 */
	function defineWarningProperty(object, key) {
	  Object.defineProperty(object, key, {

	    configurable: false,
	    enumerable: true,

	    get: function() {
	      if (!this._store) {
	        return null;
	      }
	      return this._store[key];
	    },

	    set: function(value) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        false,
	        'Don\'t set the %s property of the React element. Instead, ' +
	        'specify the correct value when initially creating the element.',
	        key
	      ) : null);
	      this._store[key] = value;
	    }

	  });
	}

	/**
	 * This is updated to true if the membrane is successfully created.
	 */
	var useMutationMembrane = false;

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} element
	 */
	function defineMutationMembrane(prototype) {
	  try {
	    var pseudoFrozenProperties = {
	      props: true
	    };
	    for (var key in pseudoFrozenProperties) {
	      defineWarningProperty(prototype, key);
	    }
	    useMutationMembrane = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {string|object} ref
	 * @param {*} key
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function(type, key, ref, owner, context, props) {
	  // Built-in properties that belong on the element
	  this.type = type;
	  this.key = key;
	  this.ref = ref;

	  // Record the component responsible for creating this element.
	  this._owner = owner;

	  // TODO: Deprecate withContext, and then the context becomes accessible
	  // through the owner.
	  this._context = context;

	  if ("production" !== process.env.NODE_ENV) {
	    // The validation flag and props are currently mutative. We put them on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    this._store = {props: props, originalProps: assign({}, props)};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    try {
	      Object.defineProperty(this._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true
	      });
	    } catch (x) {
	    }
	    this._store.validated = false;

	    // We're not allowed to set props directly on the object so we early
	    // return and rely on the prototype membrane to forward to the backing
	    // store.
	    if (useMutationMembrane) {
	      Object.freeze(this);
	      return;
	    }
	  }

	  this.props = props;
	};

	// We intentionally don't expose the function on the constructor property.
	// ReactElement should be indistinguishable from a plain object.
	ReactElement.prototype = {
	  _isReactElement: true
	};

	if ("production" !== process.env.NODE_ENV) {
	  defineMutationMembrane(ReactElement.prototype);
	}

	ReactElement.createElement = function(type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return new ReactElement(
	    type,
	    key,
	    ref,
	    ReactCurrentOwner.current,
	    ReactContext.current,
	    props
	  );
	};

	ReactElement.createFactory = function(type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
	  var newElement = new ReactElement(
	    oldElement.type,
	    oldElement.key,
	    oldElement.ref,
	    oldElement._owner,
	    oldElement._context,
	    newProps
	  );

	  if ("production" !== process.env.NODE_ENV) {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	  return newElement;
	};

	ReactElement.cloneElement = function(element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return new ReactElement(
	    element.type,
	    key,
	    ref,
	    owner,
	    element._context,
	    props
	  );
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function(object) {
	  // ReactTestUtils is often used outside of beforeEach where as React is
	  // within it. This leads to two different instances of React on the same
	  // page. To identify a element from a different React instance we use
	  // a flag instead of an instanceof check.
	  var isElement = !!(object && object._isReactElement);
	  // if (isElement && !(object instanceof ReactElement)) {
	  // This is an indicator that you're using multiple versions of React at the
	  // same time. This will screw with ownership and stuff. Fix it, please.
	  // TODO: We could possibly warn here.
	  // }
	  return isElement;
	};

	module.exports = ReactElement;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactContext
	 */

	'use strict';

	var assign = __webpack_require__(24);
	var emptyObject = __webpack_require__(25);
	var warning = __webpack_require__(26);

	var didWarn = false;

	/**
	 * Keeps track of the current context.
	 *
	 * The context is automatically passed down the component ownership hierarchy
	 * and is accessible via `this.context` on ReactCompositeComponents.
	 */
	var ReactContext = {

	  /**
	   * @internal
	   * @type {object}
	   */
	  current: emptyObject,

	  /**
	   * Temporarily extends the current context while executing scopedCallback.
	   *
	   * A typical use case might look like
	   *
	   *  render: function() {
	   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
	   *
	   *    ));
	   *    return <div>{children}</div>;
	   *  }
	   *
	   * @param {object} newContext New context to merge into the existing context
	   * @param {function} scopedCallback Callback to run with the new context
	   * @return {ReactComponent|array<ReactComponent>}
	   */
	  withContext: function(newContext, scopedCallback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        didWarn,
	        'withContext is deprecated and will be removed in a future version. ' +
	        'Use a wrapper component with getChildContext instead.'
	      ) : null);

	      didWarn = true;
	    }

	    var result;
	    var previousContext = ReactContext.current;
	    ReactContext.current = assign({}, previousContext, newContext);
	    try {
	      result = scopedCallback();
	    } finally {
	      ReactContext.current = previousContext;
	    }
	    return result;
	  }

	};

	module.exports = ReactContext;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 24 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	"use strict";

	var emptyObject = {};

	if ("production" !== process.env.NODE_ENV) {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	"use strict";

	var emptyFunction = __webpack_require__(27);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if ("production" !== process.env.NODE_ENV) {
	  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
	      console.warn(message);
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 27 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	function makeEmptyFunction(arg) {
	  return function() {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function() { return this; };
	emptyFunction.thatReturnsArgument = function(arg) { return arg; };

	module.exports = emptyFunction;


/***/ }),
/* 28 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 *
	 * The depth indicate how many composite components are above this render level.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactElement = __webpack_require__(22);
	var ReactFragment = __webpack_require__(21);
	var ReactInstanceHandles = __webpack_require__(30);

	var getIteratorFn = __webpack_require__(32);
	var invariant = __webpack_require__(18);
	var warning = __webpack_require__(26);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} key Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(
	    userProvidedKeyEscapeRegex,
	    userProvidedKeyEscaper
	  );
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!number} indexSoFar Number of children encountered until this point.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(
	  children,
	  nameSoFar,
	  indexSoFar,
	  callback,
	  traverseContext
	) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null ||
	      type === 'string' ||
	      type === 'number' ||
	      ReactElement.isValidElement(children)) {
	    callback(
	      traverseContext,
	      children,
	      // If it's the only child, treat the name as if it was wrapped in an array
	      // so that it's consistent if the number of children grows.
	      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
	      indexSoFar
	    );
	    return 1;
	  }

	  var child, nextName, nextIndex;
	  var subtreeCount = 0; // Count of children found in the current subtree.

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = (
	        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	        getComponentKey(child, i)
	      );
	      nextIndex = indexSoFar + subtreeCount;
	      subtreeCount += traverseAllChildrenImpl(
	        child,
	        nextName,
	        nextIndex,
	        callback,
	        traverseContext
	      );
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            getComponentKey(child, ii++)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      } else {
	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnAboutMaps,
	            'Using Maps as children is not yet fully supported. It is an ' +
	            'experimental feature that might be removed. Convert it to a ' +
	            'sequence / iterable of keyed ReactElements instead.'
	          ) : null);
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = (
	              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
	              getComponentKey(child, 0)
	            );
	            nextIndex = indexSoFar + subtreeCount;
	            subtreeCount += traverseAllChildrenImpl(
	              child,
	              nextName,
	              nextIndex,
	              callback,
	              traverseContext
	            );
	          }
	        }
	      }
	    } else if (type === 'object') {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        children.nodeType !== 1,
	        'traverseAllChildren(...): Encountered an invalid child; DOM ' +
	        'elements are not valid children of React components.'
	      ) : invariant(children.nodeType !== 1));
	      var fragment = ReactFragment.extract(children);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          child = fragment[key];
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            wrapUserProvidedKey(key) + SUBSEPARATOR +
	            getComponentKey(child, 0)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      }
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
	}

	module.exports = traverseAllChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(31);

	var invariant = __webpack_require__(18);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 100;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || (
	    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
	  );
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return (
	    descendantID.indexOf(ancestorID) === 0 &&
	    isBoundary(descendantID, ancestorID.length)
	  );
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(ancestorID) && isValidID(destinationID),
	    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
	    ancestorID,
	    destinationID
	  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isAncestorIDOf(ancestorID, destinationID),
	    'getNextDescendantID(...): React has made an invalid assumption about ' +
	    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
	    ancestorID,
	    destinationID
	  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(longestCommonID),
	    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
	    oneID,
	    twoID,
	    longestCommonID
	  ) : invariant(isValidID(longestCommonID)));
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  ("production" !== process.env.NODE_ENV ? invariant(
	    start !== stop,
	    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
	    start
	  ) : invariant(start !== stop));
	  var traverseUp = isAncestorIDOf(stop, start);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    traverseUp || isAncestorIDOf(start, stop),
	    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
	    'not have a parent path.',
	    start,
	    stop
	  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start; /* until break */; id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      depth++ < MAX_TREE_DEPTH,
	      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
	      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
	      start, stop
	    ) : invariant(depth++ < MAX_TREE_DEPTH));
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function(rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 31 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;


/***/ }),
/* 32 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (
	    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
	  );
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactUpdateQueue = __webpack_require__(34);

	var invariant = __webpack_require__(18);
	var warning = __webpack_require__(26);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context) {
	  this.props = props;
	  this.context = context;
	}

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function(partialState, callback) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof partialState === 'object' ||
	    typeof partialState === 'function' ||
	    partialState == null,
	    'setState(...): takes an object of state variables to update or a ' +
	    'function which returns an object of state variables.'
	  ) : invariant(typeof partialState === 'object' ||
	  typeof partialState === 'function' ||
	  partialState == null));
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      partialState != null,
	      'setState(...): You passed an undefined or null state object; ' +
	      'instead, use forceUpdate().'
	    ) : null);
	  }
	  ReactUpdateQueue.enqueueSetState(this, partialState);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function(callback) {
	  ReactUpdateQueue.enqueueForceUpdate(this);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if ("production" !== process.env.NODE_ENV) {
	  var deprecatedAPIs = {
	    getDOMNode: [
	      'getDOMNode',
	      'Use React.findDOMNode(component) instead.'
	    ],
	    isMounted: [
	      'isMounted',
	      'Instead, make sure to clean up subscriptions and pending requests in ' +
	      'componentWillUnmount to prevent memory leaks.'
	    ],
	    replaceProps: [
	      'replaceProps',
	      'Instead, call React.render again at the top level.'
	    ],
	    replaceState: [
	      'replaceState',
	      'Refactor your code to use setState instead (see ' +
	      'https://github.com/facebook/react/issues/3236).'
	    ],
	    setProps: [
	      'setProps',
	      'Instead, call React.render again at the top level.'
	    ]
	  };
	  var defineDeprecationWarning = function(methodName, info) {
	    try {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function() {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            '%s(...) is deprecated in plain JavaScript React classes. %s',
	            info[0],
	            info[1]
	          ) : null);
	          return undefined;
	        }
	      });
	    } catch (x) {
	      // IE will fail on defineProperty (es5-shim/sham too)
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactLifeCycle = __webpack_require__(35);
	var ReactCurrentOwner = __webpack_require__(28);
	var ReactElement = __webpack_require__(22);
	var ReactInstanceMap = __webpack_require__(36);
	var ReactUpdates = __webpack_require__(37);

	var assign = __webpack_require__(24);
	var invariant = __webpack_require__(18);
	var warning = __webpack_require__(26);

	function enqueueUpdate(internalInstance) {
	  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
	    // If we're in a componentWillMount handler, don't enqueue a rerender
	    // because ReactUpdates assumes we're in a browser context (which is
	    // wrong for server rendering) and we're about to do a render anyway.
	    // See bug in #1740.
	    ReactUpdates.enqueueUpdate(internalInstance);
	  }
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactCurrentOwner.current == null,
	    '%s(...): Cannot update during an existing state transition ' +
	    '(such as within `render`). Render methods should be a pure function ' +
	    'of props and state.',
	    callerName
	  ) : invariant(ReactCurrentOwner.current == null));

	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if ("production" !== process.env.NODE_ENV) {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !callerName,
	        '%s(...): Can only update a mounted or mounting component. ' +
	        'This usually means you called %s() on an unmounted ' +
	        'component. This is a no-op.',
	        callerName,
	        callerName
	      ) : null);
	    }
	    return null;
	  }

	  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
	    return null;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function(publicInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance ||
	        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function(internalInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldUpdateComponent`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function(publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'forceUpdate'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function(publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function(publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    var queue =
	      internalInstance._pendingStateQueue ||
	      (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function(publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'setProps(...): You called `setProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    var props = assign({}, element.props, partialProps);
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function(publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'replaceProps(...): You called `replaceProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function(internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 35 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLifeCycle
	 */

	'use strict';

	/**
	 * This module manages the bookkeeping when a component is in the process
	 * of being mounted or being unmounted. This is used as a way to enforce
	 * invariants (or warnings) when it is not recommended to call
	 * setState/forceUpdate.
	 *
	 * currentlyMountingInstance: During the construction phase, it is not possible
	 * to trigger an update since the instance is not fully mounted yet. However, we
	 * currently allow this as a convenience for mutating the initial state.
	 *
	 * currentlyUnmountingInstance: During the unmounting phase, the instance is
	 * still mounted and can therefore schedule an update. However, this is not
	 * recommended and probably an error since it's about to be unmounted.
	 * Therefore we still want to trigger in an error for that case.
	 */

	var ReactLifeCycle = {
	  currentlyMountingInstance: null,
	  currentlyUnmountingInstance: null
	};

	module.exports = ReactLifeCycle;


/***/ }),
/* 36 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function(key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function(key) {
	    return key._reactInternalInstance;
	  },

	  has: function(key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function(key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(38);
	var PooledClass = __webpack_require__(20);
	var ReactCurrentOwner = __webpack_require__(28);
	var ReactPerf = __webpack_require__(39);
	var ReactReconciler = __webpack_require__(40);
	var Transaction = __webpack_require__(47);

	var assign = __webpack_require__(24);
	var invariant = __webpack_require__(18);
	var warning = __webpack_require__(26);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
	    'ReactUpdates: must inject a reconcile transaction class and batching ' +
	    'strategy'
	  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
	}

	var NESTED_UPDATES = {
	  initialize: function() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function() {
	    this.callbackQueue.reset();
	  },
	  close: function() {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction =
	    ReactUpdates.ReactReconcileTransaction.getPooled();
	}

	assign(
	  ReactUpdatesFlushTransaction.prototype,
	  Transaction.Mixin, {
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(
	      this,
	      this.reconcileTransaction.perform,
	      this.reconcileTransaction,
	      method,
	      scope,
	      a
	    );
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    len === dirtyComponents.length,
	    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
	    'match dirty-components array length (%s).',
	    len,
	    dirtyComponents.length
	  ) : invariant(len === dirtyComponents.length));

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(
	      component,
	      transaction.reconcileTransaction
	    );

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(
	          callbacks[j],
	          component.getPublicInstance()
	        );
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function() {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure(
	  'ReactUpdates',
	  'flushBatchedUpdates',
	  flushBatchedUpdates
	);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	  ("production" !== process.env.NODE_ENV ? warning(
	    ReactCurrentOwner.current == null,
	    'enqueueUpdate(): Render methods should be a pure function of props ' +
	    'and state; triggering nested component updates from render is not ' +
	    'allowed. If necessary, trigger nested updates in ' +
	    'componentDidUpdate.'
	  ) : null);

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    batchingStrategy.isBatchingUpdates,
	    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
	    'updates are not being batched.'
	  ) : invariant(batchingStrategy.isBatchingUpdates));
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function(ReconcileTransaction) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReconcileTransaction,
	      'ReactUpdates: must provide a reconcile transaction class'
	    ) : invariant(ReconcileTransaction));
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function(_batchingStrategy) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      _batchingStrategy,
	      'ReactUpdates: must provide a batching strategy'
	    ) : invariant(_batchingStrategy));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.batchedUpdates === 'function',
	      'ReactUpdates: must provide a batchedUpdates() function'
	    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
	      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
	    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(20);

	var assign = __webpack_require__(24);
	var invariant = __webpack_require__(18);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        callbacks.length === contexts.length,
	        'Mismatched list of contexts in callback queue'
	      ) : invariant(callbacks.length === contexts.length));
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0, l = callbacks.length; i < l; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function() {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function() {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function(object, objectName, methodNames) {
	    if ("production" !== process.env.NODE_ENV) {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(
	          objectName,
	          methodNames[key],
	          object[key]
	        );
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function(objName, fnName, func) {
	    if ("production" !== process.env.NODE_ENV) {
	      var measuredFunc = null;
	      var wrapper = function() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function(measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(41);
	var ReactElementValidator = __webpack_require__(43);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(
	        internalInstance._currentElement
	      );
	    }
	    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function(internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function(
	    internalInstance, nextElement, transaction, context
	  ) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && nextElement._owner != null) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(
	      prevElement,
	      nextElement
	    );

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(
	    internalInstance,
	    transaction
	  ) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(42);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  return (
	    nextElement._owner !== prevElement._owner ||
	    nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(18);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function(object) {
	    return !!(
	      (object &&
	      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
	    );
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to add a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to remove a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(22);
	var ReactFragment = __webpack_require__(21);
	var ReactPropTypeLocations = __webpack_require__(44);
	var ReactPropTypeLocationNames = __webpack_require__(45);
	var ReactCurrentOwner = __webpack_require__(28);
	var ReactNativeComponent = __webpack_require__(46);

	var getIteratorFn = __webpack_require__(32);
	var invariant = __webpack_require__(18);
	var warning = __webpack_require__(26);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	var NUMERIC_PROPERTY_REGEX = /^\d+$/;

	/**
	 * Gets the instance's name for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getName(instance) {
	  var publicInstance = instance && instance.getPublicInstance();
	  if (!publicInstance) {
	    return undefined;
	  }
	  var constructor = publicInstance.constructor;
	  if (!constructor) {
	    return undefined;
	  }
	  return constructor.displayName || constructor.name || undefined;
	}

	/**
	 * Gets the current owner's displayName for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getCurrentOwnerDisplayName() {
	  var current = ReactCurrentOwner.current;
	  return (
	    current && getName(current) || undefined
	  );
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  warnAndMonitorForKeyUse(
	    'Each child in an array or iterator should have a unique "key" prop.',
	    element,
	    parentType
	  );
	}

	/**
	 * Warn if the key is being defined as an object property but has an incorrect
	 * value.
	 *
	 * @internal
	 * @param {string} name Property name of the key.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validatePropertyKey(name, element, parentType) {
	  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
	    return;
	  }
	  warnAndMonitorForKeyUse(
	    'Child objects should have non-numeric keys so ordering is preserved.',
	    element,
	    parentType
	  );
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} message The base warning that gets output.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function warnAndMonitorForKeyUse(message, element, parentType) {
	  var ownerName = getCurrentOwnerDisplayName();
	  var parentName = typeof parentType === 'string' ?
	    parentType : parentType.displayName || parentType.name;

	  var useName = ownerName || parentName;
	  var memoizer = ownerHasKeyUseWarning[message] || (
	    (ownerHasKeyUseWarning[message] = {})
	  );
	  if (memoizer.hasOwnProperty(useName)) {
	    return;
	  }
	  memoizer[useName] = true;

	  var parentOrOwnerAddendum =
	    ownerName ? (" Check the render method of " + ownerName + ".") :
	    parentName ? (" Check the React.render call using <" + parentName + ">.") :
	    '';

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwnerAddendum = '';
	  if (element &&
	      element._owner &&
	      element._owner !== ReactCurrentOwner.current) {
	    // Name of the component that originally created this child.
	    var childOwnerName = getName(element._owner);

	    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    message + '%s%s See https://fb.me/react-warning-keys for more information.',
	    parentOrOwnerAddendum,
	    childOwnerAddendum
	  ) : null);
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    node._store.validated = true;
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    } else if (typeof node === 'object') {
	      var fragment = ReactFragment.extractIfFragment(node);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          validatePropertyKey(key, fragment[key], parentType);
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        ("production" !== process.env.NODE_ENV ? invariant(
	          typeof propTypes[propName] === 'function',
	          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	          'React.PropTypes.',
	          componentName || 'React class',
	          ReactPropTypeLocationNames[location],
	          propName
	        ) : invariant(typeof propTypes[propName] === 'function'));
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(this);
	        ("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
	      }
	    }
	  }
	}

	var warnedPropsMutations = {};

	/**
	 * Warn about mutating props when setting `propName` on `element`.
	 *
	 * @param {string} propName The string key within props that was set
	 * @param {ReactElement} element
	 */
	function warnForPropsMutation(propName, element) {
	  var type = element.type;
	  var elementName = typeof type === 'string' ? type : type.displayName;
	  var ownerName = element._owner ?
	    element._owner.getPublicInstance().constructor.displayName : null;

	  var warningKey = propName + '|' + elementName + '|' + ownerName;
	  if (warnedPropsMutations.hasOwnProperty(warningKey)) {
	    return;
	  }
	  warnedPropsMutations[warningKey] = true;

	  var elementInfo = '';
	  if (elementName) {
	    elementInfo = ' <' + elementName + ' />';
	  }
	  var ownerInfo = '';
	  if (ownerName) {
	    ownerInfo = ' The element was created by ' + ownerName + '.';
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
	    'correct value when initially creating the element or use ' +
	    'React.cloneElement to make a new element with updated props.%s',
	    propName,
	    elementInfo,
	    ownerInfo
	  ) : null);
	}

	// Inline Object.is polyfill
	function is(a, b) {
	  if (a !== a) {
	    // NaN
	    return b !== b;
	  }
	  if (a === 0 && b === 0) {
	    // +-0
	    return 1 / a === 1 / b;
	  }
	  return a === b;
	}

	/**
	 * Given an element, check if its props have been mutated since element
	 * creation (or the last call to this function). In particular, check if any
	 * new props have been added, which we can't directly catch by defining warning
	 * properties on the props object.
	 *
	 * @param {ReactElement} element
	 */
	function checkAndWarnForMutatedProps(element) {
	  if (!element._store) {
	    // Element was created using `new ReactElement` directly or with
	    // `ReactElement.createElement`; skip mutation checking
	    return;
	  }

	  var originalProps = element._store.originalProps;
	  var props = element.props;

	  for (var propName in props) {
	    if (props.hasOwnProperty(propName)) {
	      if (!originalProps.hasOwnProperty(propName) ||
	          !is(originalProps[propName], props[propName])) {
	        warnForPropsMutation(propName, element);

	        // Copy over the new value so that the two props objects match again
	        originalProps[propName] = props[propName];
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  if (element.type == null) {
	    // This has already warned. Don't throw.
	    return;
	  }
	  // Extract the component class from the element. Converts string types
	  // to a composite class which may have propTypes.
	  // TODO: Validating a string's propTypes is not decoupled from the
	  // rendering target which is problematic.
	  var componentClass = ReactNativeComponent.getComponentClassForElement(
	    element
	  );
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(
	      name,
	      componentClass.propTypes,
	      element.props,
	      ReactPropTypeLocations.prop
	    );
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    ("production" !== process.env.NODE_ENV ? warning(
	      componentClass.getDefaultProps.isReactClassApproved,
	      'getDefaultProps is only used on classic React.createClass ' +
	      'definitions. Use a static property named `defaultProps` instead.'
	    ) : null);
	  }
	}

	var ReactElementValidator = {

	  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

	  createElement: function(type, props, children) {
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    ("production" !== process.env.NODE_ENV ? warning(
	      type != null,
	      'React.createElement: type should not be null or undefined. It should ' +
	        'be a string (for DOM elements) or a ReactClass (for composite ' +
	        'components).'
	    ) : null);

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(
	      null,
	      type
	    );
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(
	          validatedFactory,
	          'type',
	          {
	            enumerable: false,
	            get: function() {
	              ("production" !== process.env.NODE_ENV ? warning(
	                false,
	                'Factory.type is deprecated. Access the class directly ' +
	                'before passing it to createFactory.'
	              ) : null);
	              Object.defineProperty(this, 'type', {
	                value: type
	              });
	              return type;
	            }
	          }
	        );
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }


	    return validatedFactory;
	  },

	  cloneElement: function(element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if ("production" !== process.env.NODE_ENV) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(24);
	var invariant = __webpack_require__(18);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function(componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function(componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  },
	  // Temporary hack since we expect DOM refs to behave like composites,
	  // for this release.
	  injectAutoWrapper: function(wrapperFactory) {
	    autoGenerateWrapperClass = wrapperFactory;
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    genericComponentClass,
	    'There is no registered component for the tag %s',
	    element.type
	  ) : invariant(genericComponentClass));
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(18);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (!this.wrapperInitData) {
	      this.wrapperInitData = [];
	    } else {
	      this.wrapperInitData.length = 0;
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function() {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} args... Arguments to pass to the method (optional).
	   *                           Helps prevent need to bind in many cases.
	   * @return Return value from `method`.
	   */
	  perform: function(method, scope, a, b, c, d, e, f) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !this.isInTransaction(),
	      'Transaction.perform(...): Cannot initialize a transaction when there ' +
	      'is already an outstanding transaction.'
	    ) : invariant(!this.isInTransaction()));
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {
	          }
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ?
	          wrapper.initialize.call(this) :
	          null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {
	          }
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function(startIndex) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isInTransaction(),
	      'Transaction.closeAll(): Cannot close transaction when none are open.'
	    ) : invariant(this.isInTransaction()));
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {
	          }
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occured.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(33);
	var ReactCurrentOwner = __webpack_require__(28);
	var ReactElement = __webpack_require__(22);
	var ReactErrorUtils = __webpack_require__(49);
	var ReactInstanceMap = __webpack_require__(36);
	var ReactLifeCycle = __webpack_require__(35);
	var ReactPropTypeLocations = __webpack_require__(44);
	var ReactPropTypeLocationNames = __webpack_require__(45);
	var ReactUpdateQueue = __webpack_require__(34);

	var assign = __webpack_require__(24);
	var invariant = __webpack_require__(18);
	var keyMirror = __webpack_require__(17);
	var keyOf = __webpack_require__(50);
	var warning = __webpack_require__(26);

	var MIXINS_KEY = keyOf({mixins: null});

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,



	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,



	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function(Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function(Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function(Constructor, childContextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        childContextTypes,
	        ReactPropTypeLocations.childContext
	      );
	    }
	    Constructor.childContextTypes = assign(
	      {},
	      Constructor.childContextTypes,
	      childContextTypes
	    );
	  },
	  contextTypes: function(Constructor, contextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        contextTypes,
	        ReactPropTypeLocations.context
	      );
	    }
	    Constructor.contextTypes = assign(
	      {},
	      Constructor.contextTypes,
	      contextTypes
	    );
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function(Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(
	        Constructor.getDefaultProps,
	        getDefaultProps
	      );
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function(Constructor, propTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        propTypes,
	        ReactPropTypeLocations.prop
	      );
	    }
	    Constructor.propTypes = assign(
	      {},
	      Constructor.propTypes,
	      propTypes
	    );
	  },
	  statics: function(Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  }
	};

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof typeDef[propName] === 'function',
	        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	        'React.PropTypes.',
	        Constructor.displayName || 'ReactClass',
	        ReactPropTypeLocationNames[location],
	        propName
	      ) : null);
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
	    ReactClassInterface[name] :
	    null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.OVERRIDE_BASE,
	      'ReactClassInterface: You are attempting to override ' +
	      '`%s` from your class specification. Ensure that your method names ' +
	      'do not overlap with React methods.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.DEFINE_MANY ||
	      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
	      'ReactClassInterface: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be due ' +
	      'to a mixin.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
	    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec !== 'function',
	    'ReactClass: You\'re attempting to ' +
	    'use a component class as a mixin. Instead, just use a regular object.'
	  ) : invariant(typeof spec !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactElement.isValidElement(spec),
	    'ReactClass: You\'re attempting to ' +
	    'use a component as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactElement.isValidElement(spec)));

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod =
	        ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var markedDontBind = property && property.__reactDontBind;
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind =
	        isFunction &&
	        !isReactClassMethod &&
	        !isAlreadyDefined &&
	        !markedDontBind;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride
	          ("production" !== process.env.NODE_ENV ? invariant(
	            isReactClassMethod && (
	              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	            ),
	            'ReactClass: Unexpected spec policy %s for key %s ' +
	            'when mixing in component specs.',
	            specPolicy,
	            name
	          ) : invariant(isReactClassMethod && (
	            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	          )));

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if ("production" !== process.env.NODE_ENV) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isReserved,
	      'ReactClass: You are attempting to define a reserved ' +
	      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	      'as an instance property instead; it will still be accessible on the ' +
	      'constructor.',
	      name
	    ) : invariant(!isReserved));

	    var isInherited = name in Constructor;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isInherited,
	      'ReactClass: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be ' +
	      'due to a mixin.',
	      name
	    ) : invariant(!isInherited));
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    one && two && typeof one === 'object' && typeof two === 'object',
	    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        one[key] === undefined,
	        'mergeIntoWithNoDuplicateKeys(): ' +
	        'Tried to merge two objects with the same key: `%s`. This conflict ' +
	        'may be due to a mixin; in particular, this may be caused by two ' +
	        'getInitialState() or getDefaultProps() methods returning objects ' +
	        'with clashing keys.',
	        key
	      ) : invariant(one[key] === undefined));
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if ("production" !== process.env.NODE_ENV) {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): React component methods may only be bound to the ' +
	          'component instance. See %s',
	          componentName
	        ) : null);
	      } else if (!args.length) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): You are binding a component method to the component. ' +
	          'React does this for you automatically in a high-performance ' +
	          'way, so you can safely remove this call. See %s',
	          componentName
	        ) : null);
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(
	        component,
	        ReactErrorUtils.guard(
	          method,
	          component.constructor.displayName + '.' + autoBindKey
	        )
	      );
	    }
	  }
	}

	var typeDeprecationDescriptor = {
	  enumerable: false,
	  get: function() {
	    var displayName = this.displayName || this.name || 'Component';
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      '%s.type is deprecated. Use %s directly to access the class.',
	      displayName,
	      displayName
	    ) : null);
	    Object.defineProperty(this, 'type', {
	      value: this
	    });
	    return this;
	  }
	};

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function(newState, callback) {
	    ReactUpdateQueue.enqueueReplaceState(this, newState);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function() {
	    if ("production" !== process.env.NODE_ENV) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          owner._warnedAboutRefsInRender,
	          '%s is accessing isMounted inside its render() function. ' +
	          'render() should be a pure function of props and state. It should ' +
	          'never access something that requires stale data from the previous ' +
	          'render, such as refs. Move this logic to componentDidMount and ' +
	          'componentDidUpdate instead.',
	          owner.getName() || 'A component'
	        ) : null);
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(this);
	    return (
	      internalInstance &&
	      internalInstance !== ReactLifeCycle.currentlyMountingInstance
	    );
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function(partialProps, callback) {
	    ReactUpdateQueue.enqueueSetProps(this, partialProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function(newProps, callback) {
	    ReactUpdateQueue.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function() {};
	assign(
	  ReactClassComponent.prototype,
	  ReactComponent.prototype,
	  ReactClassMixin
	);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function(spec) {
	    var Constructor = function(props, context) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	          'JSX instead. See: https://fb.me/react-legacyfactory'
	        ) : null);
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if ("production" !== process.env.NODE_ENV) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' &&
	            this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(
	      mixSpecIntoComponent.bind(null, Constructor)
	    );

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    ) : invariant(Constructor.prototype.render));

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        spec.displayName || 'A component'
	      ) : null);
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    // Legacy hook
	    Constructor.type = Constructor;
	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 49 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	"use strict";

	var ReactErrorUtils = {
	  /**
	   * Creates a guarded version of a function. This is supposed to make debugging
	   * of event handlers easier. To aid debugging with the browser's debugger,
	   * this currently simply returns the original function.
	   *
	   * @param {function} func Function to be executed
	   * @param {string} name The name of the guard
	   * @return {function}
	   */
	  guard: function(func, name) {
	    return func;
	  }
	};

	module.exports = ReactErrorUtils;


/***/ }),
/* 50 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without loosing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};


	module.exports = keyOf;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(22);
	var ReactElementValidator = __webpack_require__(43);

	var mapObject = __webpack_require__(52);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if ("production" !== process.env.NODE_ENV) {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOM = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOM;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 52 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMPropertyOperations = __webpack_require__(54);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(58);
	var ReactDOMComponent = __webpack_require__(98);

	var assign = __webpack_require__(24);
	var escapeTextContentForBrowser = __webpack_require__(57);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function(props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function(text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    var escapedText = escapeTextContentForBrowser(this._stringText);

	    if (transaction.renderToStaticMarkup) {
	      // Normally we'd wrap this in a `span` for the reasons stated above, but
	      // since this is a situation where React won't take over (static pages),
	      // we can simply return the text as it is.
	      return escapedText;
	    }

	    return (
	      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
	        escapedText +
	      '</span>'
	    );
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function(nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        ReactDOMComponent.BackendIDOperations.updateTextContentByID(
	          this._rootNodeID,
	          nextStringText
	        );
	      }
	    }
	  },

	  unmountComponent: function() {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(55);

	var quoteAttributeValueForBrowser = __webpack_require__(56);
	var warning = __webpack_require__(26);

	function shouldIgnoreValue(name, value) {
	  return value == null ||
	    (DOMProperty.hasBooleanValue[name] && !value) ||
	    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
	    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
	    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
	}

	if ("production" !== process.env.NODE_ENV) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
	        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = (
	      DOMProperty.isCustomAttribute(lowerCasedName) ?
	        lowerCasedName :
	      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
	        DOMProperty.getPossibleStandardName[lowerCasedName] :
	        null
	    );

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    ("production" !== process.env.NODE_ENV ? warning(
	      standardName == null,
	      'Unknown DOM property %s. Did you mean %s?',
	      name,
	      standardName
	    ) : null);

	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function(id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
	      quoteAttributeValueForBrowser(id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function(name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      if (shouldIgnoreValue(name, value)) {
	        return '';
	      }
	      var attributeName = DOMProperty.getAttributeName[name];
	      if (DOMProperty.hasBooleanValue[name] ||
	          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
	        return attributeName;
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function(node, name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(name, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== ('' + value)) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        node.removeAttribute(name);
	      } else {
	        node.setAttribute(name, '' + value);
	      }
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function(node, name) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        node.removeAttribute(DOMProperty.getAttributeName[name]);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        var defaultValue = DOMProperty.getDefaultValueForProperty(
	          node.nodeName,
	          propName
	        );
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  }

	};

	module.exports = DOMPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	/*jslint bitwise: true */

	'use strict';

	var invariant = __webpack_require__(18);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function(domPropertyConfig) {
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(
	        domPropertyConfig.isCustomAttribute
	      );
	    }

	    for (var propName in Properties) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.isStandardName.hasOwnProperty(propName),
	        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
	        '\'%s\' which has already been injected. You may be accidentally ' +
	        'injecting the same DOM property config twice, or you may be ' +
	        'injecting two configs that have conflicting property names.',
	        propName
	      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

	      DOMProperty.isStandardName[propName] = true;

	      var lowerCased = propName.toLowerCase();
	      DOMProperty.getPossibleStandardName[lowerCased] = propName;

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        DOMProperty.getPossibleStandardName[attributeName] = propName;
	        DOMProperty.getAttributeName[propName] = attributeName;
	      } else {
	        DOMProperty.getAttributeName[propName] = lowerCased;
	      }

	      DOMProperty.getPropertyName[propName] =
	        DOMPropertyNames.hasOwnProperty(propName) ?
	          DOMPropertyNames[propName] :
	          propName;

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
	      } else {
	        DOMProperty.getMutationMethod[propName] = null;
	      }

	      var propConfig = Properties[propName];
	      DOMProperty.mustUseAttribute[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
	      DOMProperty.mustUseProperty[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
	      DOMProperty.hasSideEffects[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
	      DOMProperty.hasBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
	      DOMProperty.hasNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
	      DOMProperty.hasPositiveNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
	      DOMProperty.hasOverloadedBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.mustUseAttribute[propName] ||
	          !DOMProperty.mustUseProperty[propName],
	        'DOMProperty: Cannot require using both attribute and property: %s',
	        propName
	      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
	        !DOMProperty.mustUseProperty[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        DOMProperty.mustUseProperty[propName] ||
	          !DOMProperty.hasSideEffects[propName],
	        'DOMProperty: Properties that have side effects must use property: %s',
	        propName
	      ) : invariant(DOMProperty.mustUseProperty[propName] ||
	        !DOMProperty.hasSideEffects[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !!DOMProperty.hasBooleanValue[propName] +
	          !!DOMProperty.hasNumericValue[propName] +
	          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
	        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
	        'numeric value, but not a combination: %s',
	        propName
	      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
	        !!DOMProperty.hasNumericValue[propName] +
	        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Checks whether a property name is a standard property.
	   * @type {Object}
	   */
	  isStandardName: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties.
	   * @type {Object}
	   */
	  getPossibleStandardName: {},

	  /**
	   * Mapping from normalized names to attribute names that differ. Attribute
	   * names are used when rendering markup or with `*Attribute()`.
	   * @type {Object}
	   */
	  getAttributeName: {},

	  /**
	   * Mapping from normalized names to properties on DOM node instances.
	   * (This includes properties that mutate due to external factors.)
	   * @type {Object}
	   */
	  getPropertyName: {},

	  /**
	   * Mapping from normalized names to mutation methods. This will only exist if
	   * mutation cannot be set simply by the property or `setAttribute()`.
	   * @type {Object}
	   */
	  getMutationMethod: {},

	  /**
	   * Whether the property must be accessed and mutated as an object property.
	   * @type {Object}
	   */
	  mustUseAttribute: {},

	  /**
	   * Whether the property must be accessed and mutated using `*Attribute()`.
	   * (This includes anything that fails `<propName> in <element>`.)
	   * @type {Object}
	   */
	  mustUseProperty: {},

	  /**
	   * Whether or not setting a value causes side effects such as triggering
	   * resources to be loaded or text selection changes. We must ensure that
	   * the value is only set if it has changed.
	   * @type {Object}
	   */
	  hasSideEffects: {},

	  /**
	   * Whether the property should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasBooleanValue: {},

	  /**
	   * Whether the property must be numeric or parse as a
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasNumericValue: {},

	  /**
	   * Whether the property must be positive numeric or parse as a positive
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasPositiveNumericValue: {},

	  /**
	   * Whether the property can be used as a flag as well as with a value. Removed
	   * when strictly equal to false; present without a value when strictly equal
	   * to true; present with a value otherwise.
	   * @type {Object}
	   */
	  hasOverloadedBooleanValue: {},

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(57);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;


/***/ }),
/* 57 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	/*jslint evil: true */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(59);
	var ReactMount = __webpack_require__(78);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates:
	    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID:
	    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	/*jslint evil: true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(60);
	var DOMChildrenOperations = __webpack_require__(69);
	var DOMPropertyOperations = __webpack_require__(54);
	var ReactMount = __webpack_require__(78);
	var ReactPerf = __webpack_require__(39);

	var invariant = __webpack_require__(18);
	var setInnerHTML = __webpack_require__(77);

	/**
	 * Errors for properties that should not be updated with `updatePropertyById()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML:
	    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes. This is made injectable via
	 * `ReactDOMComponent.BackendIDOperations`.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Updates a DOM node to remove a property. This should only be used to remove
	   * DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A property name to remove, see `DOMProperty`.
	   * @internal
	   */
	  deletePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	    DOMPropertyOperations.deleteValueForProperty(node, name, value);
	  },

	  /**
	   * Updates a DOM node with new style values. If a value is specified as '',
	   * the corresponding style property will be unset.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {object} styles Mapping from styles to values.
	   * @internal
	   */
	  updateStylesByID: function(id, styles) {
	    var node = ReactMount.getNode(id);
	    CSSPropertyOperations.setValueForStyles(node, styles);
	  },

	  /**
	   * Updates a DOM node's innerHTML.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} html An HTML string.
	   * @internal
	   */
	  updateInnerHTMLByID: function(id, html) {
	    var node = ReactMount.getNode(id);
	    setInnerHTML(node, html);
	  },

	  /**
	   * Updates a DOM node's text content set by `props.content`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} content Text content.
	   * @internal
	   */
	  updateTextContentByID: function(id, content) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.updateTextContent(node, content);
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function(updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  updatePropertyByID: 'updatePropertyByID',
	  deletePropertyByID: 'deletePropertyByID',
	  updateStylesByID: 'updateStylesByID',
	  updateInnerHTMLByID: 'updateInnerHTMLByID',
	  updateTextContentByID: 'updateTextContentByID',
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(61);
	var ExecutionEnvironment = __webpack_require__(62);

	var camelizeStyleName = __webpack_require__(63);
	var dangerousStyleValue = __webpack_require__(65);
	var hyphenateStyleName = __webpack_require__(66);
	var memoizeStringOnly = __webpack_require__(68);
	var warning = __webpack_require__(26);

	var processStyleName = memoizeStringOnly(function(styleName) {
	  return hyphenateStyleName(styleName);
	});

	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if ("production" !== process.env.NODE_ENV) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported style property %s. Did you mean %s?',
	      name,
	      camelizeStyleName(name)
	    ) : null);
	  };

	  var warnBadVendoredStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
	      name,
	      name.charAt(0).toUpperCase() + name.slice(1)
	    ) : null);
	  };

	  var warnStyleValueWithSemicolon = function(name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Style property values shouldn\'t contain a semicolon. ' +
	      'Try "%s: %s" instead.',
	      name,
	      value.replace(badStyleValueWithSemicolonPattern, '')
	    ) : null);
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function(name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 61 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  boxFlex: true,
	  boxFlexGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function(prop) {
	  prefixes.forEach(function(prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundImage: true,
	    backgroundPosition: true,
	    backgroundRepeat: true,
	    backgroundColor: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;


/***/ }),
/* 62 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	/*jslint evil: true */

	"use strict";

	var canUseDOM = !!(
	  (typeof window !== 'undefined' &&
	  window.document && window.document.createElement)
	);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners:
	    canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	"use strict";

	var camelize = __webpack_require__(64);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;


/***/ }),
/* 64 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function(_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(61);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 ||
	      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	"use strict";

	var hyphenate = __webpack_require__(67);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;


/***/ }),
/* 67 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;


/***/ }),
/* 68 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function(string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(70);
	var ReactMultiChildUpdateTypes = __webpack_require__(75);

	var setTextContent = __webpack_require__(76);
	var invariant = __webpack_require__(18);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	  parentNode.insertBefore(
	    childNode,
	    parentNode.childNodes[index] || null
	  );
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
	          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        ("production" !== process.env.NODE_ENV ? invariant(
	          updatedChild,
	          'processUpdates(): Unable to find child %s of element. This ' +
	          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
	          'browser), usually due to forgetting a <tbody> when using tables, ' +
	          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
	          'in an <svg> parent. Try inspecting the child nodes of the element ' +
	          'with React ID `%s`.',
	          updatedIndex,
	          parentID
	        ) : invariant(updatedChild));

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(
	            update.parentNode,
	            renderedMarkup[update.markupIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(
	            update.parentNode,
	            initialChildren[update.parentID][update.fromIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(
	            update.parentNode,
	            update.textContent
	          );
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	/*jslint evil: true, sub: true */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(62);

	var createNodesFromMarkup = __webpack_require__(71);
	var emptyFunction = __webpack_require__(27);
	var getMarkupWrap = __webpack_require__(74);
	var invariant = __webpack_require__(18);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function(markupList) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
	      'thread. Make sure `window` and `document` are available globally ' +
	      'before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        markupList[i],
	        'dangerouslyRenderMarkup(...): Missing markup.'
	      ) : invariant(markupList[i]));
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(
	            OPEN_TAG_NAME_EXP,
	            // This index will be parsed back out below.
	            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
	          );
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(
	        markupListByNodeName.join(''),
	        emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute &&
	            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          ("production" !== process.env.NODE_ENV ? invariant(
	            !resultList.hasOwnProperty(resultIndex),
	            'Danger: Assigning to an already-occupied result index.'
	          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;

	        } else if ("production" !== process.env.NODE_ENV) {
	          console.error(
	            'Danger: Discarding unexpected node:',
	            renderNode
	          );
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultListAssignmentCount === resultList.length,
	      'Danger: Did not assign to every index of resultList.'
	    ) : invariant(resultListAssignmentCount === resultList.length));

	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultList.length === markupList.length,
	      'Danger: Expected markup to render %s nodes, but rendered %s.',
	      markupList.length,
	      resultList.length
	    ) : invariant(resultList.length === markupList.length));

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
	      'worker thread. Make sure `window` and `document` are available ' +
	      'globally before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      oldChild.tagName.toLowerCase() !== 'html',
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
	      '<html> node. This is because browser quirks make this unreliable ' +
	      'and/or slow. If you want to render to the root you must use ' +
	      'server rendering. See React.renderToString().'
	    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

	    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*jslint evil: true, sub: true */

	var ExecutionEnvironment = __webpack_require__(62);

	var createArrayFromMixed = __webpack_require__(72);
	var getMarkupWrap = __webpack_require__(74);
	var invariant = __webpack_require__(18);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      handleScript,
	      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
	    ) : invariant(handleScript));
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	var toArray = __webpack_require__(73);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj &&
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    ('length' in obj) &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    (typeof obj.nodeType != 'number') &&
	    (
	      // a real array
	      (// HTMLCollection/NodeList
	      (Array.isArray(obj) ||
	      // arguments
	      ('callee' in obj) || 'item' in obj))
	    )
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	var invariant = __webpack_require__(18);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(obj) &&
	    (typeof obj === 'object' || typeof obj === 'function'),
	    'toArray: Array-like object expected'
	  ) : invariant(!Array.isArray(obj) &&
	  (typeof obj === 'object' || typeof obj === 'function')));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof length === 'number',
	    'toArray: Object needs a length property'
	  ) : invariant(typeof length === 'number'));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    length === 0 ||
	    (length - 1) in obj,
	    'toArray: Object should have keys for indices'
	  ) : invariant(length === 0 ||
	  (length - 1) in obj));

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	var ExecutionEnvironment = __webpack_require__(62);

	var invariant = __webpack_require__(18);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	var shouldWrap = {
	  // Force wrapping for SVG elements because if they get created inside a <div>,
	  // they will be initialized in the wrong namespace (and will not display).
	  'circle': true,
	  'clipPath': true,
	  'defs': true,
	  'ellipse': true,
	  'g': true,
	  'line': true,
	  'linearGradient': true,
	  'path': true,
	  'polygon': true,
	  'polyline': true,
	  'radialGradient': true,
	  'rect': true,
	  'stop': true,
	  'text': true
	};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg>', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap,

	  'circle': svgWrap,
	  'clipPath': svgWrap,
	  'defs': svgWrap,
	  'ellipse': svgWrap,
	  'g': svgWrap,
	  'line': svgWrap,
	  'linearGradient': svgWrap,
	  'path': svgWrap,
	  'polygon': svgWrap,
	  'polyline': svgWrap,
	  'radialGradient': svgWrap,
	  'rect': svgWrap,
	  'stop': svgWrap,
	  'text': svgWrap
	};

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}


	module.exports = getMarkupWrap;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(62);
	var escapeTextContentForBrowser = __webpack_require__(57);
	var setInnerHTML = __webpack_require__(77);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function(node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function(node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(62);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function(node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function(node, html) {
	    MSApp.execUnsafeLocalFunction(function() {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) ||
	          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        node.innerHTML = '\uFEFF' + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(55);
	var ReactBrowserEventEmitter = __webpack_require__(79);
	var ReactCurrentOwner = __webpack_require__(28);
	var ReactElement = __webpack_require__(22);
	var ReactElementValidator = __webpack_require__(43);
	var ReactEmptyComponent = __webpack_require__(87);
	var ReactInstanceHandles = __webpack_require__(30);
	var ReactInstanceMap = __webpack_require__(36);
	var ReactMarkupChecksum = __webpack_require__(88);
	var ReactPerf = __webpack_require__(39);
	var ReactReconciler = __webpack_require__(40);
	var ReactUpdateQueue = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(37);

	var emptyObject = __webpack_require__(25);
	var containsNode = __webpack_require__(90);
	var getReactRootElementInContainer = __webpack_require__(93);
	var instantiateReactComponent = __webpack_require__(94);
	var invariant = __webpack_require__(18);
	var setInnerHTML = __webpack_require__(77);
	var shouldUpdateReactComponent = __webpack_require__(97);
	var warning = __webpack_require__(26);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if ("production" !== process.env.NODE_ENV) {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !isValid(cached, id),
	          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
	          ATTR_NAME, id
	        ) : invariant(!isValid(cached, id)));

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponent.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalGetID(node) === id,
	      'ReactMount: Unexpected modification of `%s`',
	      ATTR_NAME
	    ) : invariant(internalGetID(node) === id));

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(
	    targetID,
	    findDeepestCachedAncestorImpl
	  );

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup) {
	  var markup = ReactReconciler.mountComponent(
	    componentInstance, rootID, transaction, emptyObject
	  );
	  componentInstance._isTopLevel = true;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    shouldReuseMarkup) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  transaction.perform(
	    mountComponentIntoNode,
	    null,
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup
	  );
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function(container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function(
	      prevComponent,
	      nextElement,
	      container,
	      callback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    ReactMount.scrollMonitor(container, function() {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] =
	        getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function(nextComponent, container) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      '_registerComponent(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function(
	    nextElement,
	    container,
	    shouldReuseMarkup
	  ) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      '_renderNewRootComponent(): Render methods should be a pure function ' +
	      'of props and state; triggering nested component updates from ' +
	      'render is not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(
	      componentInstance,
	      container
	    );

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(
	      batchedMountComponentIntoNode,
	      componentInstance,
	      reactRootID,
	      container,
	      shouldReuseMarkup
	    );

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] =
	        getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function(nextElement, container, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactElement.isValidElement(nextElement),
	      'React.render(): Invalid component element.%s',
	      (
	        typeof nextElement === 'string' ?
	          ' Instead of passing an element string, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        typeof nextElement === 'function' ?
	          ' Instead of passing a component class, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        // Check if it quacks like an element
	        nextElement != null && nextElement.props !== undefined ?
	          ' This may be caused by unintentionally loading two independent ' +
	          'copies of React.' :
	          ''
	      )
	    ) : invariant(ReactElement.isValidElement(nextElement)));

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevElement = prevComponent._currentElement;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        return ReactMount._updateRootComponent(
	          prevComponent,
	          nextElement,
	          container,
	          callback
	        ).getPublicInstance();
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup =
	      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

	    if ("production" !== process.env.NODE_ENV) {
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (ReactMount.isRenderedByReact(rootElementSibling)) {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'render(): Target node has markup rendered by React, but there ' +
	              'are unrelated nodes as well. This is most commonly caused by ' +
	              'white-space inserted around server-rendered markup.'
	            ) : null);
	            break;
	          }

	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

	    var component = ReactMount._renderNewRootComponent(
	      nextElement,
	      container,
	      shouldReuseMarkup
	    ).getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into the supplied `container`.
	   *
	   * @param {function} constructor React component constructor.
	   * @param {?object} props Initial props of the component instance.
	   * @param {DOMElement} container DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  constructAndRenderComponent: function(constructor, props, container) {
	    var element = ReactElement.createElement(constructor, props);
	    return ReactMount.render(element, container);
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into a container node identified by supplied `id`.
	   *
	   * @param {function} componentConstructor React component constructor
	   * @param {?object} props Initial props of the component instance.
	   * @param {string} id ID of the DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in the container node.
	   */
	  constructAndRenderComponentByID: function(constructor, props, id) {
	    var domNode = document.getElementById(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      domNode,
	      'Tried to get element with id of "%s" but it is not present on the page.',
	      id
	    ) : invariant(domNode));
	    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      'unmountComponentAtNode(): Render methods should be a pure function of ' +
	      'props and state; triggering nested component updates from render is ' +
	      'not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'unmountComponentAtNode(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      return false;
	    }
	    ReactMount.unmountComponentFromNode(component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if ("production" !== process.env.NODE_ENV) {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Unmounts a component and removes it from the DOM.
	   *
	   * @param {ReactComponent} instance React component instance.
	   * @param {DOMElement} container DOM element to unmount from.
	   * @final
	   * @internal
	   * @see {ReactMount.unmountComponentAtNode}
	   */
	  unmountComponentFromNode: function(instance, container) {
	    ReactReconciler.unmountComponent(instance);

	    if (container.nodeType === DOC_NODE_TYPE) {
	      container = container.documentElement;
	    }

	    // http://jsperf.com/emptying-a-node
	    while (container.lastChild) {
	      container.removeChild(container.lastChild);
	    }
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if ("production" !== process.env.NODE_ENV) {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          // Call internalGetID here because getID calls isValid which calls
	          // findReactContainerForID (this function).
	          internalGetID(rootElement) === reactRootID,
	          'ReactMount: Root element ID differed from reactRootID.'
	        ) : invariant(// Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID));

	        var containerChild = container.firstChild;
	        if (containerChild &&
	            reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'ReactMount: Root element has been removed from its original ' +
	            'container. New container:', rootElement.parentNode
	          ) : null);
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * True if the supplied `node` is rendered by React.
	   *
	   * @param {*} node DOM Element to check.
	   * @return {boolean} True if the DOM Element appears to be rendered by React.
	   * @internal
	   */
	  isRenderedByReact: function(node) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      return false;
	    }
	    var id = ReactMount.getID(node);
	    return id ? id.charAt(0) === SEPARATOR : false;
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function(node) {
	    var current = node;
	    while (current && current.parentNode !== current) {
	      if (ReactMount.isRenderedByReact(current)) {
	        return current;
	      }
	      current = current.parentNode;
	    }
	    return null;
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }

	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'findComponentRoot(..., %s): Unable to find element. This probably ' +
	      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
	      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
	      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
	      'parent. ' +
	      'Try inspecting the child nodes of the element with React ID `%s`.',
	      targetID,
	      ReactMount.getID(ancestorNode)
	    ) : invariant(false));
	  },

	  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'mountComponentIntoNode(...): Target container is not valid.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	        );
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
	          checksum
	        );

	        var diffIndex = firstDifferenceIndex(markup, rootMarkup);
	        var difference = ' (client) ' +
	          markup.substring(diffIndex - 20, diffIndex + 20) +
	          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        ("production" !== process.env.NODE_ENV ? invariant(
	          container.nodeType !== DOC_NODE_TYPE,
	          'You\'re trying to render a component to the document using ' +
	          'server rendering but the checksum was invalid. This usually ' +
	          'means you rendered a different component type or props on ' +
	          'the client from the one on the server, or your render() ' +
	          'methods are impure. React cannot handle this case due to ' +
	          'cross-browser quirks by rendering at the document root. You ' +
	          'should look for environment dependent code in your components ' +
	          'and ensure the props are the same client and server side:\n%s',
	          difference
	        ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'React attempted to reuse markup in a container but the ' +
	            'checksum was invalid. This generally means that you are ' +
	            'using server rendering and the markup generated on the ' +
	            'server was not what the client was expecting. React injected ' +
	            'new markup to compensate which works but you have lost many ' +
	            'of the benefits of server rendering. Instead, figure out ' +
	            'why the markup being generated is different on the client ' +
	            'or server:\n%s',
	            difference
	          ) : null);
	        }
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container.nodeType !== DOC_NODE_TYPE,
	      'You\'re trying to render a component to the document but ' +
	        'you didn\'t use server rendering. We can\'t do this ' +
	        'without using server rendering due to cross-browser quirks. ' +
	        'See React.renderToString() for server rendering.'
	    ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	    setInnerHTML(container, markup);
	  },

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(16);
	var EventPluginHub = __webpack_require__(80);
	var EventPluginRegistry = __webpack_require__(81);
	var ReactEventEmitterMixin = __webpack_require__(84);
	var ViewportMetrics = __webpack_require__(85);

	var assign = __webpack_require__(24);
	var isEventSupported = __webpack_require__(86);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topBlur: 'blur',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topScroll: 'scroll',
	  topSelectionChange: 'selectionchange',
	  topTextInput: 'textInput',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(
	        ReactBrowserEventEmitter.handleTopLevel
	      );
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function() {
	    return !!(
	      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
	    );
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.
	      registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0, l = dependencies.length; i < l; i++) {
	      var dependency = dependencies[i];
	      if (!(
	            (isListening.hasOwnProperty(dependency) && isListening[dependency])
	          )) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'wheel',
	              mountAt
	            );
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'mousewheel',
	              mountAt
	            );
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'DOMMouseScroll',
	              mountAt
	            );
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              mountAt
	            );
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
	            );
	          }
	        } else if (dependency === topLevelTypes.topFocus ||
	            dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topFocus,
	              'focus',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topBlur,
	              'blur',
	              mountAt
	            );
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topFocus,
	              'focusin',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topBlur,
	              'focusout',
	              mountAt
	            );
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	            dependency,
	            topEventMapping[dependency],
	            mountAt
	          );
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function() {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	module.exports = ReactBrowserEventEmitter;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(81);
	var EventPluginUtils = __webpack_require__(15);

	var accumulateInto = __webpack_require__(82);
	var forEachAccumulated = __webpack_require__(83);
	var invariant = __webpack_require__(18);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function(event) {
	  if (event) {
	    var executeDispatch = EventPluginUtils.executeDispatch;
	    // Plugins can provide custom behavior when dispatching events.
	    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
	    if (PluginModule && PluginModule.executeDispatch) {
	      executeDispatch = PluginModule.executeDispatch;
	    }
	    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid =
	    InstanceHandle &&
	    InstanceHandle.traverseTwoPhase &&
	    InstanceHandle.traverseEnterLeave;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    valid,
	    'InstanceHandle not injected before use!'
	  ) : invariant(valid));
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function() {
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function(id, registrationName, listener) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !listener || typeof listener === 'function',
	      'Expected %s listener to be a function, instead got type %s',
	      registrationName, typeof listener
	    ) : invariant(!listener || typeof listener === 'function'));

	    var bankForRegistrationName =
	      listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function(id) {
	    for (var registrationName in listenerBank) {
	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0, l = plugins.length; i < l; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(
	          topLevelType,
	          topLevelTarget,
	          topLevelTargetID,
	          nativeEvent
	        );
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function() {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !eventQueue,
	      'processEventQueue(): Additional events were enqueued while processing ' +
	      'an event queue. Support for this has not yet been implemented.'
	    ) : invariant(!eventQueue));
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function() {
	    listenerBank = {};
	  },

	  __getListenerBank: function() {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(18);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      pluginIndex > -1,
	      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
	      'the plugin ordering, `%s`.',
	      pluginName
	    ) : invariant(pluginIndex > -1));
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      PluginModule.extractEvents,
	      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
	      'method, but `%s` does not.',
	      pluginName
	    ) : invariant(PluginModule.extractEvents));
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        publishEventForPlugin(
	          publishedEvents[eventName],
	          PluginModule,
	          eventName
	        ),
	        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
	        eventName,
	        pluginName
	      ) : invariant(publishEventForPlugin(
	        publishedEvents[eventName],
	        PluginModule,
	        eventName
	      )));
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'event name, `%s`.',
	    eventName
	  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(
	          phasedRegistrationName,
	          PluginModule,
	          eventName
	        );
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(
	      dispatchConfig.registrationName,
	      PluginModule,
	      eventName
	    );
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.registrationNameModules[registrationName],
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'registration name, `%s`.',
	    registrationName
	  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] =
	    PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function(InjectedEventPluginOrder) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !EventPluginOrder,
	      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
	      'once. You are likely trying to load more than one copy of React.'
	    ) : invariant(!EventPluginOrder));
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) ||
	          namesToPlugins[pluginName] !== PluginModule) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !namesToPlugins[pluginName],
	          'EventPluginRegistry: Cannot inject two different event plugins ' +
	          'using the same name, `%s`.',
	          pluginName
	        ) : invariant(!namesToPlugins[pluginName]));
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[
	        dispatchConfig.registrationName
	      ] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[
	        dispatchConfig.phasedRegistrationNames[phase]
	      ];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(18);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    next != null,
	    'accumulateInto(...): Accumulated items must not be null or undefined.'
	  ) : invariant(next != null));
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 83 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(80);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue();
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events = EventPluginHub.extractEvents(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent
	    );

	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;


/***/ }),
/* 85 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function(scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(62);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature =
	    document.implementation &&
	    document.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM ||
	      capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(22);
	var ReactInstanceMap = __webpack_require__(36);

	var invariant = __webpack_require__(18);

	var component;
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function(emptyComponent) {
	    component = ReactElement.createFactory(emptyComponent);
	  }
	};

	var ReactEmptyComponentType = function() {};
	ReactEmptyComponentType.prototype.componentDidMount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Make sure we run these methods in the correct order, we shouldn't
	  // need this check. We're going to assume if we're here it means we ran
	  // componentWillUnmount already so there is no internal instance (it gets
	  // removed as part of the unmounting process).
	  if (!internalInstance) {
	    return;
	  }
	  registerNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.componentWillUnmount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Get rid of this check. See TODO in componentDidMount.
	  if (!internalInstance) {
	    return;
	  }
	  deregisterNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.render = function() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    component,
	    'Trying to return null from a render, but no null placeholder component ' +
	    'was injected.'
	  ) : invariant(component));
	  return component();
	};

	var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponent = {
	  emptyElement: emptyElement,
	  injection: ReactEmptyComponentInjection,
	  isNullComponentID: isNullComponentID
	};

	module.exports = ReactEmptyComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(89);

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function(markup) {
	    var checksum = adler32(markup);
	    return markup.replace(
	      '>',
	      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
	    );
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function(markup, element) {
	    var existingChecksum = element.getAttribute(
	      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	    );
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;


/***/ }),
/* 89 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	/* jslint bitwise:true */

	'use strict';

	var MOD = 65521;

	// This is a clean-room implementation of adler32 designed for detecting
	// if markup is not what we expect it to be. It does not need to be
	// cryptographically strong, only reasonably good at detecting if markup
	// generated on the server is different than that on the client.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  for (var i = 0; i < data.length; i++) {
	    a = (a + data.charCodeAt(i)) % MOD;
	    b = (b + a) % MOD;
	  }
	  return a | (b << 16);
	}

	module.exports = adler32;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	var isTextNode = __webpack_require__(91);

	/*jslint bitwise:true */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if (outerNode.contains) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	var isNode = __webpack_require__(92);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;


/***/ }),
/* 92 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (
	    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
	    typeof object.nodeType === 'number' &&
	    typeof object.nodeName === 'string'))
	  ));
	}

	module.exports = isNode;


/***/ }),
/* 93 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getReactRootElementInContainer
	 */

	'use strict';

	var DOC_NODE_TYPE = 9;

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 *                                           a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	module.exports = getReactRootElementInContainer;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(95);
	var ReactEmptyComponent = __webpack_require__(87);
	var ReactNativeComponent = __webpack_require__(46);

	var assign = __webpack_require__(24);
	var invariant = __webpack_require__(18);
	var warning = __webpack_require__(26);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function() { };
	assign(
	  ReactCompositeComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin,
	  {
	    _instantiateReactComponent: instantiateReactComponent
	  }
	);

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return (
	    typeof type === 'function' &&
	    typeof type.prototype !== 'undefined' &&
	    typeof type.prototype.mountComponent === 'function' &&
	    typeof type.prototype.receiveComponent === 'function'
	  );
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {*} parentCompositeType The composite type that resolved this.
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, parentCompositeType) {
	  var instance;

	  if (node === null || node === false) {
	    node = ReactEmptyComponent.emptyElement;
	  }

	  if (typeof node === 'object') {
	    var element = node;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        element && (typeof element.type === 'function' ||
	                    typeof element.type === 'string'),
	        'Only functions or strings can be mounted as React components.'
	      ) : null);
	    }

	    // Special case string values
	    if (parentCompositeType === element.type &&
	        typeof element.type === 'string') {
	      // Avoid recursion if the wrapper renders itself.
	      instance = ReactNativeComponent.createInternalComponent(element);
	      // All native components are currently wrapped in a composite so we're
	      // safe to assume that this is what we should instantiate.
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // represenations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'Encountered invalid React node of type %s',
	      typeof node
	    ) : invariant(false));
	  }

	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof instance.construct === 'function' &&
	      typeof instance.mountComponent === 'function' &&
	      typeof instance.receiveComponent === 'function' &&
	      typeof instance.unmountComponent === 'function',
	      'Only React Components can be mounted.'
	    ) : null);
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if ("production" !== process.env.NODE_ENV) {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if ("production" !== process.env.NODE_ENV) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(96);
	var ReactContext = __webpack_require__(23);
	var ReactCurrentOwner = __webpack_require__(28);
	var ReactElement = __webpack_require__(22);
	var ReactElementValidator = __webpack_require__(43);
	var ReactInstanceMap = __webpack_require__(36);
	var ReactLifeCycle = __webpack_require__(35);
	var ReactNativeComponent = __webpack_require__(46);
	var ReactPerf = __webpack_require__(39);
	var ReactPropTypeLocations = __webpack_require__(44);
	var ReactPropTypeLocationNames = __webpack_require__(45);
	var ReactReconciler = __webpack_require__(40);
	var ReactUpdates = __webpack_require__(37);

	var assign = __webpack_require__(24);
	var emptyObject = __webpack_require__(25);
	var invariant = __webpack_require__(18);
	var shouldUpdateReactComponent = __webpack_require__(97);
	var warning = __webpack_require__(26);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function(element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._isTopLevel = false;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(this._currentElement._context);

	    var Component = ReactNativeComponent.getComponentClassForElement(
	      this._currentElement
	    );

	    // Initialize the public class
	    var inst = new Component(publicProps, publicContext);

	    if ("production" !== process.env.NODE_ENV) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      ("production" !== process.env.NODE_ENV ? warning(
	        inst.render != null,
	        '%s(...): No `render` method found on the returned component ' +
	        'instance: you may have forgotten to define `render` in your ' +
	        'component or you may have accidentally tried to render an element ' +
	        'whose type is a function that isn\'t a React component.',
	        Component.displayName || Component.name || 'Component'
	      ) : null);
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if ("production" !== process.env.NODE_ENV) {
	      this._warnIfContextsDiffer(this._currentElement._context, context);
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getInitialState ||
	        inst.getInitialState.isReactClassApproved,
	        'getInitialState was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Did you mean to define a state property instead?',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getDefaultProps ||
	        inst.getDefaultProps.isReactClassApproved,
	        'getDefaultProps was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Use a static property to define defaultProps instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.propTypes,
	        'propTypes was defined as an instance property on %s. Use a static ' +
	        'property to define propTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.contextTypes,
	        'contextTypes was defined as an instance property on %s. Use a ' +
	        'static property to define contextTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof inst.componentShouldUpdate !== 'function',
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        (this.getName() || 'A component')
	      ) : null);
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof initialState === 'object' && !Array.isArray(initialState),
	      '%s.state: must be set to an object or null',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var childContext;
	    var renderedElement;

	    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
	    ReactLifeCycle.currentlyMountingInstance = this;
	    try {
	      if (inst.componentWillMount) {
	        inst.componentWillMount();
	        // When mounting, calls to `setState` by `componentWillMount` will set
	        // `this._pendingStateQueue` without triggering a re-render.
	        if (this._pendingStateQueue) {
	          inst.state = this._processPendingState(inst.props, inst.context);
	        }
	      }

	      childContext = this._getValidatedChildContext(context);
	      renderedElement = this._renderValidatedComponent(childContext);
	    } finally {
	      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
	    }

	    this._renderedComponent = this._instantiateReactComponent(
	      renderedElement,
	      this._currentElement.type // The wrapping type
	    );

	    var markup = ReactReconciler.mountComponent(
	      this._renderedComponent,
	      rootID,
	      transaction,
	      this._mergeChildContext(context, childContext)
	    );
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function() {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
	      ReactLifeCycle.currentlyUnmountingInstance = this;
	      try {
	        inst.componentWillUnmount();
	      } finally {
	        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
	      }
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;

	    // Reset pending fields
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Schedule a partial update to the props. Only used for internal testing.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @internal
	   */
	  _setPropsInternal: function(partialProps, callback) {
	    // This is a deoptimized path. We optimize for always having an element.
	    // This creates an extra internal element.
	    var element = this._pendingElement || this._currentElement;
	    this._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      assign({}, element.props, partialProps)
	    );
	    ReactUpdates.enqueueUpdate(this, callback);
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function(context) {
	    var maskedContext = null;
	    // This really should be getting the component class for the element,
	    // but we know that we're not going to need it for built-ins.
	    if (typeof this._currentElement.type === 'string') {
	      return emptyObject;
	    }
	    var contextTypes = this._currentElement.type.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function(context) {
	    var maskedContext = this._maskContext(context);
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.contextTypes) {
	        this._checkPropTypes(
	          Component.contextTypes,
	          maskedContext,
	          ReactPropTypeLocations.context
	        );
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _getValidatedChildContext: function(currentContext) {
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof inst.constructor.childContextTypes === 'object',
	        '%s.getChildContext(): childContextTypes must be defined in order to ' +
	        'use getChildContext().',
	        this.getName() || 'ReactCompositeComponent'
	      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          inst.constructor.childContextTypes,
	          childContext,
	          ReactPropTypeLocations.childContext
	        );
	      }
	      for (var name in childContext) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          name in inst.constructor.childContextTypes,
	          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
	          this.getName() || 'ReactCompositeComponent',
	          name
	        ) : invariant(name in inst.constructor.childContextTypes));
	      }
	      return childContext;
	    }
	    return null;
	  },

	  _mergeChildContext: function(currentContext, childContext) {
	    if (childContext) {
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function(newProps) {
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.propTypes) {
	        this._checkPropTypes(
	          Component.propTypes,
	          newProps,
	          ReactPropTypeLocations.prop
	        );
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          ("production" !== process.env.NODE_ENV ? invariant(
	            typeof propTypes[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually ' +
	            'from React.PropTypes.',
	            componentName || 'React class',
	            ReactPropTypeLocationNames[location],
	            propName
	          ) : invariant(typeof propTypes[propName] === 'function'));
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // React.render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Composite propType: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          } else {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Context Types: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function(nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(
	      transaction,
	      prevElement,
	      nextElement,
	      prevContext,
	      nextContext
	    );
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(
	        this,
	        this._pendingElement || this._currentElement,
	        transaction,
	        this._context
	      );
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      if ("production" !== process.env.NODE_ENV) {
	        ReactElementValidator.checkAndWarnForMutatedProps(
	          this._currentElement
	        );
	      }

	      this.updateComponent(
	        transaction,
	        this._currentElement,
	        this._currentElement,
	        this._context,
	        this._context
	      );
	    }
	  },

	  /**
	   * Compare two contexts, warning if they are different
	   * TODO: Remove this check when owner-context is removed
	   */
	   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
	    ownerBasedContext = this._maskContext(ownerBasedContext);
	    parentBasedContext = this._maskContext(parentBasedContext);
	    var parentKeys = Object.keys(parentBasedContext).sort();
	    var displayName = this.getName() || 'ReactCompositeComponent';
	    for (var i = 0; i < parentKeys.length; i++) {
	      var key = parentKeys[i];
	      ("production" !== process.env.NODE_ENV ? warning(
	        ownerBasedContext[key] === parentBasedContext[key],
	        'owner-based and parent-based contexts differ '  +
	        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
	        '(see: http://fb.me/react-context-by-parent)',
	        ownerBasedContext[key],
	        parentBasedContext[key],
	        key,
	        displayName
	      ) : null);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(
	    transaction,
	    prevParentElement,
	    nextParentElement,
	    prevUnmaskedContext,
	    nextUnmaskedContext
	  ) {
	    var inst = this._instance;

	    var nextContext = inst.context;
	    var nextProps = inst.props;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement !== nextParentElement) {
	      nextContext = this._processContext(nextParentElement._context);
	      nextProps = this._processProps(nextParentElement.props);

	      if ("production" !== process.env.NODE_ENV) {
	        if (nextUnmaskedContext != null) {
	          this._warnIfContextsDiffer(
	            nextParentElement._context,
	            nextUnmaskedContext
	          );
	        }
	      }

	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate =
	      this._pendingForceUpdate ||
	      !inst.shouldComponentUpdate ||
	      inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof shouldUpdate !== 'undefined',
	        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
	        'boolean value. Make sure to return true or false.',
	        this.getName() || 'ReactCompositeComponent'
	      ) : null);
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(
	        nextParentElement,
	        nextProps,
	        nextState,
	        nextContext,
	        transaction,
	        nextUnmaskedContext
	      );
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function(props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(
	        nextState,
	        typeof partial === 'function' ?
	          partial.call(inst, nextState, props, context) :
	          partial
	      );
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function(
	    nextElement,
	    nextProps,
	    nextState,
	    nextContext,
	    transaction,
	    unmaskedContext
	  ) {
	    var inst = this._instance;

	    var prevProps = inst.props;
	    var prevState = inst.state;
	    var prevContext = inst.context;

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (inst.componentDidUpdate) {
	      transaction.getReactMountReady().enqueue(
	        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
	        inst
	      );
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function(transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var childContext = this._getValidatedChildContext();
	    var nextRenderedElement = this._renderValidatedComponent(childContext);
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(
	        prevComponentInstance,
	        nextRenderedElement,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(
	        nextRenderedElement,
	        this._currentElement.type
	      );
	      var nextMarkup = ReactReconciler.mountComponent(
	        this._renderedComponent,
	        thisID,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(
	      prevComponentID,
	      nextMarkup
	    );
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function() {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if ("production" !== process.env.NODE_ENV) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' &&
	          inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function(childContext) {
	    var renderedComponent;
	    var previousContext = ReactContext.current;
	    ReactContext.current = this._mergeChildContext(
	      this._currentElement._context,
	      childContext
	    );
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent =
	        this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactContext.current = previousContext;
	      ReactCurrentOwner.current = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      // TODO: An `isValidNode` function would probably be more appropriate
	      renderedComponent === null || renderedComponent === false ||
	      ReactElement.isValidElement(renderedComponent),
	      '%s.render(): A valid ReactComponent must be returned. You may have ' +
	        'returned undefined, an array or some other invalid object.',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false ||
	    ReactElement.isValidElement(renderedComponent)));
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function(ref, component) {
	    var inst = this.getPublicInstance();
	    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
	    refs[ref] = component.getPublicInstance();
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function(ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function() {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return (
	      type.displayName || (constructor && constructor.displayName) ||
	      type.name || (constructor && constructor.name) ||
	      null
	    );
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by React.render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function() {
	    return this._instance;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(
	  ReactCompositeComponentMixin,
	  'ReactCompositeComponent',
	  {
	    mountComponent: 'mountComponent',
	    updateComponent: 'updateComponent',
	    _renderValidatedComponent: '_renderValidatedComponent'
	  }
	);

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(18);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function(environment) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !injected,
	        'ReactCompositeComponent: injectEnvironment() can only be called once.'
	      ) : invariant(!injected));
	      ReactComponentEnvironment.unmountIDFromEnvironment =
	        environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID =
	        environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates =
	        environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var warning = __webpack_require__(26);

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  if (prevElement != null && nextElement != null) {
	    var prevType = typeof prevElement;
	    var nextType = typeof nextElement;
	    if (prevType === 'string' || prevType === 'number') {
	      return (nextType === 'string' || nextType === 'number');
	    } else {
	      if (nextType === 'object' &&
	          prevElement.type === nextElement.type &&
	          prevElement.key === nextElement.key) {
	        var ownersMatch = prevElement._owner === nextElement._owner;
	        var prevName = null;
	        var nextName = null;
	        var nextDisplayName = null;
	        if ("production" !== process.env.NODE_ENV) {
	          if (!ownersMatch) {
	            if (prevElement._owner != null &&
	                prevElement._owner.getPublicInstance() != null &&
	                prevElement._owner.getPublicInstance().constructor != null) {
	              prevName =
	                prevElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement._owner != null &&
	                nextElement._owner.getPublicInstance() != null &&
	                nextElement._owner.getPublicInstance().constructor != null) {
	              nextName =
	                nextElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement.type != null &&
	                nextElement.type.displayName != null) {
	              nextDisplayName = nextElement.type.displayName;
	            }
	            if (nextElement.type != null && typeof nextElement.type === 'string') {
	              nextDisplayName = nextElement.type;
	            }
	            if (typeof nextElement.type !== 'string' ||
	                nextElement.type === 'input' ||
	                nextElement.type === 'textarea') {
	              if ((prevElement._owner != null &&
	                  prevElement._owner._isOwnerNecessary === false) ||
	                  (nextElement._owner != null &&
	                  nextElement._owner._isOwnerNecessary === false)) {
	                if (prevElement._owner != null) {
	                  prevElement._owner._isOwnerNecessary = true;
	                }
	                if (nextElement._owner != null) {
	                  nextElement._owner._isOwnerNecessary = true;
	                }
	                ("production" !== process.env.NODE_ENV ? warning(
	                  false,
	                  '<%s /> is being rendered by both %s and %s using the same ' +
	                  'key (%s) in the same place. Currently, this means that ' +
	                  'they don\'t preserve state. This behavior should be very ' +
	                  'rare so we\'re considering deprecating it. Please contact ' +
	                  'the React team and explain your use case so that we can ' +
	                  'take that into consideration.',
	                  nextDisplayName || 'Unknown Component',
	                  prevName || '[Unknown]',
	                  nextName || '[Unknown]',
	                  prevElement.key
	                ) : null);
	              }
	            }
	          }
	        }
	        return ownersMatch;
	      }
	    }
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(60);
	var DOMProperty = __webpack_require__(55);
	var DOMPropertyOperations = __webpack_require__(54);
	var ReactBrowserEventEmitter = __webpack_require__(79);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(58);
	var ReactMount = __webpack_require__(78);
	var ReactMultiChild = __webpack_require__(99);
	var ReactPerf = __webpack_require__(39);

	var assign = __webpack_require__(24);
	var escapeTextContentForBrowser = __webpack_require__(57);
	var invariant = __webpack_require__(18);
	var isEventSupported = __webpack_require__(86);
	var keyOf = __webpack_require__(50);
	var warning = __webpack_require__(26);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = {'string': true, 'number': true};

	var STYLE = keyOf({style: null});

	var ELEMENT_NODE_TYPE = 1;

	/**
	 * Optionally injectable operations for mutating the DOM
	 */
	var BackendIDOperations = null;

	/**
	 * @param {?object} props
	 */
	function assertValidProps(props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (props.dangerouslySetInnerHTML != null) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.children == null,
	      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
	    ) : invariant(props.children == null));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof props.dangerouslySetInnerHTML === 'object' &&
	      '__html' in props.dangerouslySetInnerHTML,
	      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
	      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
	      'for more information.'
	    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
	    '__html' in props.dangerouslySetInnerHTML));
	  }
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      props.innerHTML == null,
	      'Directly setting property `innerHTML` is not permitted. ' +
	      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
	    ) : null);
	    ("production" !== process.env.NODE_ENV ? warning(
	      !props.contentEditable || props.children == null,
	      'A component is `contentEditable` and contains `children` managed by ' +
	      'React. It is now your responsibility to guarantee that none of ' +
	      'those nodes are unexpectedly modified or duplicated. This is ' +
	      'probably not intentional.'
	    ) : null);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.style == null || typeof props.style === 'object',
	    'The `style` prop expects a mapping from style properties to values, ' +
	    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
	    'using JSX.'
	  ) : invariant(props.style == null || typeof props.style === 'object'));
	}

	function putListener(id, registrationName, listener, transaction) {
	  if ("production" !== process.env.NODE_ENV) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    ("production" !== process.env.NODE_ENV ? warning(
	      registrationName !== 'onScroll' || isEventSupported('scroll', true),
	      'This browser doesn\'t support the `onScroll` event'
	    ) : null);
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
	      container.ownerDocument :
	      container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getPutListenerQueue().enqueuePutListener(
	    id,
	    registrationName,
	    listener
	  );
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};

	// We accept any tag to be rendered but since this gets injected into abitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
	    validatedTagCache[tag] = true;
	  }
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag;
	  this._renderedChildren = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function(element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} The computed markup.
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    assertValidProps(this._currentElement.props);
	    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
	    return (
	      this._createOpenTagMarkupAndPutListeners(transaction) +
	      this._createContentMarkup(transaction, context) +
	      closeTag
	    );
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function(transaction) {
	    var props = this._currentElement.props;
	    var ret = '<' + this._tag;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, propValue, transaction);
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup =
	          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret + '>';
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID + '>';
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function(transaction, context) {
	    var prefix = '';
	    if (this._tag === 'listing' ||
	        this._tag === 'pre' ||
	        this._tag === 'textarea') {
	      // Add an initial newline because browsers ignore the first newline in
	      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
	      prefix = '\n';
	    }

	    var props = this._currentElement.props;

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        return prefix + innerHTML.__html;
	      }
	    } else {
	      var contentToUse =
	        CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        return prefix + escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(
	          childrenToUse,
	          transaction,
	          context
	        );
	        return prefix + mountImages.join('');
	      }
	    }
	    return prefix;
	  },

	  receiveComponent: function(nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(transaction, prevElement, nextElement, context) {
	    assertValidProps(this._currentElement.props);
	    this._updateDOMProperties(prevElement.props, transaction);
	    this._updateDOMChildren(prevElement.props, transaction, context);
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMProperties: function(lastProps, transaction) {
	    var nextProps = this._currentElement.props;
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) ||
	         !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        deleteListener(this._rootNodeID, propKey);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.deletePropertyByID(
	          this._rootNodeID,
	          propKey
	        );
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ?
	        this._previousStyleCopy :
	        lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) &&
	                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) &&
	                lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, nextProp, transaction);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.updatePropertyByID(
	          this._rootNodeID,
	          propKey,
	          nextProp
	        );
	      }
	    }
	    if (styleUpdates) {
	      BackendIDOperations.updateStylesByID(
	        this._rootNodeID,
	        styleUpdates
	      );
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMChildren: function(lastProps, transaction, context) {
	    var nextProps = this._currentElement.props;

	    var lastContent =
	      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent =
	      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml =
	      lastProps.dangerouslySetInnerHTML &&
	      lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml =
	      nextProps.dangerouslySetInnerHTML &&
	      nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        BackendIDOperations.updateInnerHTMLByID(
	          this._rootNodeID,
	          nextHtml
	        );
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function() {
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(
	  ReactDOMComponent.prototype,
	  ReactDOMComponent.Mixin,
	  ReactMultiChild.Mixin
	);

	ReactDOMComponent.injection = {
	  injectIDOperations: function(IDOperations) {
	    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
	  }
	};

	module.exports = ReactDOMComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(96);
	var ReactMultiChildUpdateTypes = __webpack_require__(75);

	var ReactReconciler = __webpack_require__(40);
	var ReactChildReconciler = __webpack_require__(100);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    textContent: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    textContent: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(
	      updateQueue,
	      markupQueue
	    );
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function(nestedChildren, transaction, context) {
	      var children = ReactChildReconciler.instantiateChildren(
	        nestedChildren, transaction, context
	      );
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(
	            child,
	            rootID,
	            transaction,
	            context
	          );
	          child._mountIndex = index;
	          mountImages.push(mountImage);
	          index++;
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function(nextNestedChildren, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildren, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }

	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function(nextNestedChildren, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = ReactChildReconciler.updateChildren(
	        prevChildren, nextNestedChildren, transaction, context
	      );
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChildByName(prevChild, name);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(
	            nextChild, name, nextIndex, transaction, context
	          );
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) &&
	            !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChildByName(prevChildren[name], name);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function() {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function(child, mountImage) {
	      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function(
	      child,
	      name,
	      index,
	      transaction,
	      context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(
	        child,
	        rootID,
	        transaction,
	        context
	      );
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child by name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @param {string} name Name of the child in `this._renderedChildren`.
	     * @private
	     */
	    _unmountChildByName: function(child, name) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(40);

	var flattenChildren = __webpack_require__(101);
	var instantiateReactComponent = __webpack_require__(94);
	var shouldUpdateReactComponent = __webpack_require__(97);

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {

	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function(nestedChildNodes, transaction, context) {
	    var children = flattenChildren(nestedChildNodes);
	    for (var name in children) {
	      if (children.hasOwnProperty(name)) {
	        var child = children[name];
	        // The rendered children must be turned into instances as they're
	        // mounted.
	        var childInstance = instantiateReactComponent(child, null);
	        children[name] = childInstance;
	      }
	    }
	    return children;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextNestedChildNodes Nested child maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function(
	    prevChildren,
	    nextNestedChildNodes,
	    transaction,
	    context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    var nextChildren = flattenChildren(nextNestedChildNodes);
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(
	          prevChild, nextElement, transaction, context
	        );
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(
	          nextElement,
	          null
	        );
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) &&
	          !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function(renderedChildren) {
	    for (var name in renderedChildren) {
	      var renderedChild = renderedChildren[name];
	      ReactReconciler.unmountComponent(renderedChild);
	    }
	  }

	};

	module.exports = ReactChildReconciler;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(29);
	var warning = __webpack_require__(26);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = !result.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'flattenChildren(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(103);
	var ChangeEventPlugin = __webpack_require__(111);
	var ClientReactRootIndex = __webpack_require__(113);
	var DefaultEventPluginOrder = __webpack_require__(114);
	var EnterLeaveEventPlugin = __webpack_require__(115);
	var ExecutionEnvironment = __webpack_require__(62);
	var HTMLDOMPropertyConfig = __webpack_require__(119);
	var MobileSafariClickEventPlugin = __webpack_require__(120);
	var ReactBrowserComponentMixin = __webpack_require__(121);
	var ReactClass = __webpack_require__(48);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(58);
	var ReactDefaultBatchingStrategy = __webpack_require__(123);
	var ReactDOMComponent = __webpack_require__(98);
	var ReactDOMButton = __webpack_require__(124);
	var ReactDOMForm = __webpack_require__(127);
	var ReactDOMImg = __webpack_require__(129);
	var ReactDOMIDOperations = __webpack_require__(59);
	var ReactDOMIframe = __webpack_require__(130);
	var ReactDOMInput = __webpack_require__(131);
	var ReactDOMOption = __webpack_require__(134);
	var ReactDOMSelect = __webpack_require__(135);
	var ReactDOMTextarea = __webpack_require__(136);
	var ReactDOMTextComponent = __webpack_require__(53);
	var ReactElement = __webpack_require__(22);
	var ReactEventListener = __webpack_require__(137);
	var ReactInjection = __webpack_require__(140);
	var ReactInstanceHandles = __webpack_require__(30);
	var ReactMount = __webpack_require__(78);
	var ReactReconcileTransaction = __webpack_require__(141);
	var SelectEventPlugin = __webpack_require__(147);
	var ServerReactRootIndex = __webpack_require__(149);
	var SimpleEventPlugin = __webpack_require__(150);
	var SVGDOMPropertyConfig = __webpack_require__(159);

	var createFullPageComponent = __webpack_require__(160);

	function autoGenerateWrapperClass(type) {
	  return ReactClass.createClass({
	    tagName: type.toUpperCase(),
	    render: function() {
	      return new ReactElement(
	        type,
	        null,
	        null,
	        null,
	        null,
	        this.props
	      );
	    }
	  });
	}

	function inject() {
	  ReactInjection.EventEmitter.injectReactEventListener(
	    ReactEventListener
	  );

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(
	    ReactDOMComponent
	  );

	  ReactInjection.NativeComponent.injectTextComponentClass(
	    ReactDOMTextComponent
	  );

	  ReactInjection.NativeComponent.injectAutoWrapper(
	    autoGenerateWrapperClass
	  );

	  // This needs to happen before createFullPageComponent() otherwise the mixin
	  // won't be included.
	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.NativeComponent.injectComponentClasses({
	    'button': ReactDOMButton,
	    'form': ReactDOMForm,
	    'iframe': ReactDOMIframe,
	    'img': ReactDOMImg,
	    'input': ReactDOMInput,
	    'option': ReactDOMOption,
	    'select': ReactDOMSelect,
	    'textarea': ReactDOMTextarea,

	    'html': createFullPageComponent('html'),
	    'head': createFullPageComponent('head'),
	    'body': createFullPageComponent('body')
	  });

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(
	    ReactReconcileTransaction
	  );
	  ReactInjection.Updates.injectBatchingStrategy(
	    ReactDefaultBatchingStrategy
	  );

	  ReactInjection.RootIndex.injectCreateReactRootIndex(
	    ExecutionEnvironment.canUseDOM ?
	      ClientReactRootIndex.createReactRootIndex :
	      ServerReactRootIndex.createReactRootIndex
	  );

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

	  if ("production" !== process.env.NODE_ENV) {
	    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
	    if ((/[?&]react_perf\b/).test(url)) {
	      var ReactDefaultPerf = __webpack_require__(161);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(16);
	var EventPropagators = __webpack_require__(104);
	var ExecutionEnvironment = __webpack_require__(62);
	var FallbackCompositionState = __webpack_require__(105);
	var SyntheticCompositionEvent = __webpack_require__(107);
	var SyntheticInputEvent = __webpack_require__(110);

	var keyOf = __webpack_require__(50);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'CompositionEvent' in window
	);

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'TextEvent' in window &&
	  !documentMode &&
	  !isPresto()
	);

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = (
	  ExecutionEnvironment.canUseDOM &&
	  (
	    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
	  )
	);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (
	    typeof opera === 'object' &&
	    typeof opera.version === 'function' &&
	    parseInt(opera.version(), 10) <= 12
	  );
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBeforeInput: null}),
	      captured: keyOf({onBeforeInputCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topTextInput,
	      topLevelTypes.topPaste
	    ]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionEnd: null}),
	      captured: keyOf({onCompositionEndCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionStart: null}),
	      captured: keyOf({onCompositionStartCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionStart,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionUpdate: null}),
	      captured: keyOf({onCompositionUpdateCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionUpdate,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (
	    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	    !(nativeEvent.ctrlKey && nativeEvent.altKey)
	  );
	}


	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return (
	    topLevelType === topLevelTypes.topKeyDown &&
	    nativeEvent.keyCode === START_KEYCODE
	  );
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return (nativeEvent.keyCode !== START_KEYCODE);
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(
	    eventType,
	    topLevelTargetID,
	    nativeEvent
	  );

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (
	      topLevelType === topLevelTypes.topCompositionEnd ||
	      isFallbackCompositionEnd(topLevelType, nativeEvent)
	    ) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(
	    eventTypes.beforeInput,
	    topLevelTargetID,
	    nativeEvent
	  );

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID,
	    nativeEvent
	  ) {
	    return [
	      extractCompositionEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      ),
	      extractBeforeInputEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      )
	    ];
	  }
	};

	module.exports = BeforeInputEventPlugin;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(16);
	var EventPluginHub = __webpack_require__(80);

	var accumulateInto = __webpack_require__(82);
	var forEachAccumulated = __webpack_require__(83);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName =
	    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (!domID) {
	      throw new Error('Dispatching id must not be null');
	    }
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners =
	      accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We can not perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
	      event.dispatchMarker,
	      accumulateDirectionalDispatches,
	      event
	    );
	  }
	}


	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners =
	        accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
	    fromID,
	    toID,
	    accumulateDispatches,
	    leave,
	    enter
	  );
	}


	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}



	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(20);

	var assign = __webpack_require__(24);
	var getTextContentAccessor = __webpack_require__(106);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function() {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function() {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(62);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ?
	      'textContent' :
	      'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(108);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticCompositionEvent,
	  CompositionEventInterface
	);

	module.exports = SyntheticCompositionEvent;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(20);

	var assign = __webpack_require__(24);
	var emptyFunction = __webpack_require__(27);
	var getEventTarget = __webpack_require__(109);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: getEventTarget,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ?
	    nativeEvent.defaultPrevented :
	    nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function() {
	    var event = this.nativeEvent;
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function(Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

	module.exports = SyntheticEvent;


/***/ }),
/* 109 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(108);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticInputEvent,
	  InputEventInterface
	);

	module.exports = SyntheticInputEvent;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(16);
	var EventPluginHub = __webpack_require__(80);
	var EventPropagators = __webpack_require__(104);
	var ExecutionEnvironment = __webpack_require__(62);
	var ReactUpdates = __webpack_require__(37);
	var SyntheticEvent = __webpack_require__(108);

	var isEventSupported = __webpack_require__(86);
	var isTextInputElement = __webpack_require__(112);
	var keyOf = __webpack_require__(50);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onChange: null}),
	      captured: keyOf({onChangeCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topChange,
	      topLevelTypes.topClick,
	      topLevelTypes.topFocus,
	      topLevelTypes.topInput,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  return (
	    elem.nodeName === 'SELECT' ||
	    (elem.nodeName === 'INPUT' && elem.type === 'file')
	  );
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (
	    (!('documentMode' in document) || document.documentMode > 8)
	  );
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(
	    eventTypes.change,
	    activeElementID,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue();
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}


	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (
	    (!('documentMode' in document) || document.documentMode > 9)
	  );
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp =  {
	  get: function() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(
	    target.constructor.prototype,
	    'value'
	  );

	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange ||
	      topLevelType === topLevelTypes.topKeyUp ||
	      topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}


	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return (
	    elem.nodeName === 'INPUT' &&
	    (elem.type === 'checkbox' || elem.type === 'radio')
	  );
	}

	function getTargetIDForClickEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(
	          eventTypes.change,
	          targetID,
	          nativeEvent
	        );
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	    }
	  }

	};

	module.exports = ChangeEventPlugin;


/***/ }),
/* 112 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  return elem && (
	    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
	  );
	}

	module.exports = isTextInputElement;


/***/ }),
/* 113 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function() {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(50);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [
	  keyOf({ResponderEventPlugin: null}),
	  keyOf({SimpleEventPlugin: null}),
	  keyOf({TapEventPlugin: null}),
	  keyOf({EnterLeaveEventPlugin: null}),
	  keyOf({ChangeEventPlugin: null}),
	  keyOf({SelectEventPlugin: null}),
	  keyOf({BeforeInputEventPlugin: null}),
	  keyOf({AnalyticsEventPlugin: null}),
	  keyOf({MobileSafariClickEventPlugin: null})
	];

	module.exports = DefaultEventPluginOrder;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(16);
	var EventPropagators = __webpack_require__(104);
	var SyntheticMouseEvent = __webpack_require__(116);

	var ReactMount = __webpack_require__(78);
	var keyOf = __webpack_require__(50);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({onMouseEnter: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  },
	  mouseLeave: {
	    registrationName: keyOf({onMouseLeave: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topMouseOver &&
	        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut &&
	        topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from, to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      to =
	        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
	        win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromID = from ? ReactMount.getID(from) : '';
	    var toID = to ? ReactMount.getID(to) : '';

	    var leave = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseLeave,
	      fromID,
	      nativeEvent
	    );
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseEnter,
	      toID,
	      nativeEvent
	    );
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(117);
	var ViewportMetrics = __webpack_require__(85);

	var getEventModifierState = __webpack_require__(118);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function(event) {
	    return event.relatedTarget || (
	      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
	    );
	  },
	  // "Proprietary" Interface.
	  pageX: function(event) {
	    return 'pageX' in event ?
	      event.pageX :
	      event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function(event) {
	    return 'pageY' in event ?
	      event.pageY :
	      event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(108);

	var getEventTarget = __webpack_require__(109);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function(event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function(event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;


/***/ }),
/* 118 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  /*jshint validthis:true */
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(55);
	var ExecutionEnvironment = __webpack_require__(62);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE =
	  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE =
	  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = (
	    implementation &&
	    implementation.hasFeature &&
	    implementation.hasFeature(
	      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
	      '1.1'
	    )
	  );
	}


	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(
	    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
	  ),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusMixin
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: null,
	    autoCorrect: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // property is supported for OpenGraph in meta tags.
	    property: null,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule MobileSafariClickEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(16);

	var emptyFunction = __webpack_require__(27);

	var topLevelTypes = EventConstants.topLevelTypes;

	/**
	 * Mobile Safari does not fire properly bubble click events on non-interactive
	 * elements, which means delegated click listeners do not fire. The workaround
	 * for this bug involves attaching an empty click listener on the target node.
	 *
	 * This particular plugin works around the bug by attaching an empty click
	 * listener on `touchstart` (which does fire on every element).
	 */
	var MobileSafariClickEventPlugin = {

	  eventTypes: null,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topTouchStart) {
	      var target = nativeEvent.target;
	      if (target && !target.onclick) {
	        target.onclick = emptyFunction;
	      }
	    }
	  }

	};

	module.exports = MobileSafariClickEventPlugin;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var findDOMNode = __webpack_require__(122);

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function() {
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(28);
	var ReactInstanceMap = __webpack_require__(36);
	var ReactMount = __webpack_require__(78);

	var invariant = __webpack_require__(18);
	var isNode = __webpack_require__(92);
	var warning = __webpack_require__(26);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if ("production" !== process.env.NODE_ENV) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        owner._warnedAboutRefsInRender,
	        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
	        'render() should be a pure function of props and state. It should ' +
	        'never access something that requires stale data from the previous ' +
	        'render, such as refs. Move this logic to componentDidMount and ' +
	        'componentDidUpdate instead.',
	        owner.getName() || 'A component'
	      ) : null);
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (isNode(componentOrElement)) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    componentOrElement.render == null ||
	    typeof componentOrElement.render !== 'function',
	    'Component (with keys: %s) contains `render` method ' +
	    'but is not mounted in the DOM',
	    Object.keys(componentOrElement)
	  ) : invariant(componentOrElement.render == null ||
	  typeof componentOrElement.render !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    false,
	    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
	    Object.keys(componentOrElement)
	  ) : invariant(false));
	}

	module.exports = findDOMNode;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(37);
	var Transaction = __webpack_require__(47);

	var assign = __webpack_require__(24);
	var emptyFunction = __webpack_require__(27);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(
	  ReactDefaultBatchingStrategyTransaction.prototype,
	  Transaction.Mixin,
	  {
	    getTransactionWrappers: function() {
	      return TRANSACTION_WRAPPERS;
	    }
	  }
	);

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function(callback, a, b, c, d) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d);
	    } else {
	      transaction.perform(callback, null, a, b, c, d);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(125);
	var ReactBrowserComponentMixin = __webpack_require__(121);
	var ReactClass = __webpack_require__(48);
	var ReactElement = __webpack_require__(22);

	var keyMirror = __webpack_require__(17);

	var button = ReactElement.createFactory('button');

	var mouseListenerNames = keyMirror({
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	});

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = ReactClass.createClass({
	  displayName: 'ReactDOMButton',
	  tagName: 'BUTTON',

	  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

	  render: function() {
	    var props = {};

	    // Copy the props; except the mouse listeners if we're disabled
	    for (var key in this.props) {
	      if (this.props.hasOwnProperty(key) &&
	          (!this.props.disabled || !mouseListenerNames[key])) {
	        props[key] = this.props[key];
	      }
	    }

	    return button(props, this.props.children);
	  }

	});

	module.exports = ReactDOMButton;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusMixin
	 * @typechecks static-only
	 */

	'use strict';

	var focusNode = __webpack_require__(126);

	var AutoFocusMixin = {
	  componentDidMount: function() {
	    if (this.props.autoFocus) {
	      focusNode(this.getDOMNode());
	    }
	  }
	};

	module.exports = AutoFocusMixin;


/***/ }),
/* 126 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	"use strict";

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch(e) {
	  }
	}

	module.exports = focusNode;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMForm
	 */

	'use strict';

	var EventConstants = __webpack_require__(16);
	var LocalEventTrapMixin = __webpack_require__(128);
	var ReactBrowserComponentMixin = __webpack_require__(121);
	var ReactClass = __webpack_require__(48);
	var ReactElement = __webpack_require__(22);

	var form = ReactElement.createFactory('form');

	/**
	 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
	 * to capture it on the <form> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <form> a
	 * composite component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMForm = ReactClass.createClass({
	  displayName: 'ReactDOMForm',
	  tagName: 'FORM',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
	    // `jshint` fails to parse JSX so in order for linting to work in the open
	    // source repo, we need to just use `ReactDOM.form`.
	    return form(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
	  }
	});

	module.exports = ReactDOMForm;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LocalEventTrapMixin
	 */

	'use strict';

	var ReactBrowserEventEmitter = __webpack_require__(79);

	var accumulateInto = __webpack_require__(82);
	var forEachAccumulated = __webpack_require__(83);
	var invariant = __webpack_require__(18);

	function remove(event) {
	  event.remove();
	}

	var LocalEventTrapMixin = {
	  trapBubbledEvent:function(topLevelType, handlerBaseName) {
	    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
	    // If a component renders to null or if another component fatals and causes
	    // the state of the tree to be corrupted, `node` here can be null.
	    var node = this.getDOMNode();
	    ("production" !== process.env.NODE_ENV ? invariant(
	      node,
	      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
	    ) : invariant(node));
	    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      node
	    );
	    this._localEventListeners =
	      accumulateInto(this._localEventListeners, listener);
	  },

	  // trapCapturedEvent would look nearly identical. We don't implement that
	  // method because it isn't currently needed.

	  componentWillUnmount:function() {
	    if (this._localEventListeners) {
	      forEachAccumulated(this._localEventListeners, remove);
	    }
	  }
	};

	module.exports = LocalEventTrapMixin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMImg
	 */

	'use strict';

	var EventConstants = __webpack_require__(16);
	var LocalEventTrapMixin = __webpack_require__(128);
	var ReactBrowserComponentMixin = __webpack_require__(121);
	var ReactClass = __webpack_require__(48);
	var ReactElement = __webpack_require__(22);

	var img = ReactElement.createFactory('img');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <img> element itself. There are lots of hacks we could do
	 * to accomplish this, but the most reliable is to make <img> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMImg = ReactClass.createClass({
	  displayName: 'ReactDOMImg',
	  tagName: 'IMG',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return img(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
	  }
	});

	module.exports = ReactDOMImg;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIframe
	 */

	'use strict';

	var EventConstants = __webpack_require__(16);
	var LocalEventTrapMixin = __webpack_require__(128);
	var ReactBrowserComponentMixin = __webpack_require__(121);
	var ReactClass = __webpack_require__(48);
	var ReactElement = __webpack_require__(22);

	var iframe = ReactElement.createFactory('iframe');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <iframe> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <iframe> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMIframe = ReactClass.createClass({
	  displayName: 'ReactDOMIframe',
	  tagName: 'IFRAME',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return iframe(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	  }
	});

	module.exports = ReactDOMIframe;


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(125);
	var DOMPropertyOperations = __webpack_require__(54);
	var LinkedValueUtils = __webpack_require__(132);
	var ReactBrowserComponentMixin = __webpack_require__(121);
	var ReactClass = __webpack_require__(48);
	var ReactElement = __webpack_require__(22);
	var ReactMount = __webpack_require__(78);
	var ReactUpdates = __webpack_require__(37);

	var assign = __webpack_require__(24);
	var invariant = __webpack_require__(18);

	var input = ReactElement.createFactory('input');

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = ReactClass.createClass({
	  displayName: 'ReactDOMInput',
	  tagName: 'INPUT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    return {
	      initialChecked: this.props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.defaultChecked = null;
	    props.defaultValue = null;

	    var value = LinkedValueUtils.getValue(this);
	    props.value = value != null ? value : this.state.initialValue;

	    var checked = LinkedValueUtils.getChecked(this);
	    props.checked = checked != null ? checked : this.state.initialChecked;

	    props.onChange = this._handleChange;

	    return input(props, this.props.children);
	  },

	  componentDidMount: function() {
	    var id = ReactMount.getID(this.getDOMNode());
	    instancesByReactID[id] = this;
	  },

	  componentWillUnmount: function() {
	    var rootNode = this.getDOMNode();
	    var id = ReactMount.getID(rootNode);
	    delete instancesByReactID[id];
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var rootNode = this.getDOMNode();
	    if (this.props.checked != null) {
	      DOMPropertyOperations.setValueForProperty(
	        rootNode,
	        'checked',
	        this.props.checked || false
	      );
	    }

	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    // Here we use asap to wait until all updates have propagated, which
	    // is important when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    ReactUpdates.asap(forceUpdateIfMounted, this);

	    var name = this.props.name;
	    if (this.props.type === 'radio' && name != null) {
	      var rootNode = this.getDOMNode();
	      var queryRoot = rootNode;

	      while (queryRoot.parentNode) {
	        queryRoot = queryRoot.parentNode;
	      }

	      // If `rootNode.form` was non-null, then we could try `form.elements`,
	      // but that sometimes behaves strangely in IE8. We could also try using
	      // `form.getElementsByName`, but that will only return direct children
	      // and won't include inputs that use the HTML5 `form=` attribute. Since
	      // the input might not even be in a form, let's just use the global
	      // `querySelectorAll` to ensure we don't miss anything.
	      var group = queryRoot.querySelectorAll(
	        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
	        var otherNode = group[i];
	        if (otherNode === rootNode ||
	            otherNode.form !== rootNode.form) {
	          continue;
	        }
	        var otherID = ReactMount.getID(otherNode);
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherID,
	          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
	          'same `name` is not supported.'
	        ) : invariant(otherID));
	        var otherInstance = instancesByReactID[otherID];
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherInstance,
	          'ReactDOMInput: Unknown radio button ID %s.',
	          otherID
	        ) : invariant(otherInstance));
	        // If this is a controlled radio button group, forcing the input that
	        // was previously checked to update will cause it to be come re-checked
	        // as appropriate.
	        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	      }
	    }

	    return returnValue;
	  }

	});

	module.exports = ReactDOMInput;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(133);

	var invariant = __webpack_require__(18);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(input) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checkedLink == null || input.props.valueLink == null,
	    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
	    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
	  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
	}
	function _assertValueLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.value == null && input.props.onChange == null,
	    'Cannot provide a valueLink and a value or onChange event. If you want ' +
	    'to use value or onChange, you probably don\'t want to use valueLink.'
	  ) : invariant(input.props.value == null && input.props.onChange == null));
	}

	function _assertCheckedLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checked == null && input.props.onChange == null,
	    'Cannot provide a checkedLink and a checked property or onChange event. ' +
	    'If you want to use checked or onChange, you probably don\'t want to ' +
	    'use checkedLink'
	  ) : invariant(input.props.checked == null && input.props.onChange == null));
	}

	/**
	 * @param {SyntheticEvent} e change event to handle
	 */
	function _handleLinkedValueChange(e) {
	  /*jshint validthis:true */
	  this.props.valueLink.requestChange(e.target.value);
	}

	/**
	  * @param {SyntheticEvent} e change event to handle
	  */
	function _handleLinkedCheckChange(e) {
	  /*jshint validthis:true */
	  this.props.checkedLink.requestChange(e.target.checked);
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  Mixin: {
	    propTypes: {
	      value: function(props, propName, componentName) {
	        if (!props[propName] ||
	            hasReadOnlyValue[props.type] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `value` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultValue`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      checked: function(props, propName, componentName) {
	        if (!props[propName] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `checked` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultChecked`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      onChange: ReactPropTypes.func
	    }
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return input.props.valueLink.value;
	    }
	    return input.props.value;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function(input) {
	    if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return input.props.checkedLink.value;
	    }
	    return input.props.checked;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {function} change callback either from onChange prop or link.
	   */
	  getOnChange: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return _handleLinkedValueChange;
	    } else if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return _handleLinkedCheckChange;
	    }
	    return input.props.onChange;
	  }
	};

	module.exports = LinkedValueUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(22);
	var ReactFragment = __webpack_require__(21);
	var ReactPropTypeLocationNames = __webpack_require__(45);

	var emptyFunction = __webpack_require__(27);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var elementTypeChecker = createElementTypeChecker();
	var nodeTypeChecker = createNodeChecker();

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: elementTypeChecker,
	  instanceOf: createInstanceTypeChecker,
	  node: nodeTypeChecker,
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location) {
	    componentName = componentName || ANONYMOUS;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error(
	          ("Required " + locationName + " `" + propName + "` was not specified in ") +
	          ("`" + componentName + "`.")
	        );
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
	        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
	      );
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactElement.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
	      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
	      );
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  function validate(props, propName, componentName, location) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	      ("`" + componentName + "`.")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactNode.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
	        ("supplied to `" + componentName + "`, expected `object`.")
	      );
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	      propValue = ReactFragment.extractIfFragment(propValue);
	      for (var k in propValue) {
	        if (!isNode(propValue[k])) {
	          return false;
	        }
	      }
	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	module.exports = ReactPropTypes;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactBrowserComponentMixin = __webpack_require__(121);
	var ReactClass = __webpack_require__(48);
	var ReactElement = __webpack_require__(22);

	var warning = __webpack_require__(26);

	var option = ReactElement.createFactory('option');

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = ReactClass.createClass({
	  displayName: 'ReactDOMOption',
	  tagName: 'OPTION',

	  mixins: [ReactBrowserComponentMixin],

	  componentWillMount: function() {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        this.props.selected == null,
	        'Use the `defaultValue` or `value` props on <select> instead of ' +
	        'setting `selected` on <option>.'
	      ) : null);
	    }
	  },

	  render: function() {
	    return option(this.props, this.props.children);
	  }

	});

	module.exports = ReactDOMOption;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(125);
	var LinkedValueUtils = __webpack_require__(132);
	var ReactBrowserComponentMixin = __webpack_require__(121);
	var ReactClass = __webpack_require__(48);
	var ReactElement = __webpack_require__(22);
	var ReactUpdates = __webpack_require__(37);

	var assign = __webpack_require__(24);

	var select = ReactElement.createFactory('select');

	function updateOptionsIfPendingUpdateAndMounted() {
	  /*jshint validthis:true */
	  if (this._pendingUpdate) {
	    this._pendingUpdate = false;
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null && this.isMounted()) {
	      updateOptions(this, value);
	    }
	  }
	}

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function selectValueType(props, propName, componentName) {
	  if (props[propName] == null) {
	    return null;
	  }
	  if (props.multiple) {
	    if (!Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
	        ("`multiple` is true.")
	      );
	    }
	  } else {
	    if (Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
	        ("value if `multiple` is false.")
	      );
	    }
	  }
	}

	/**
	 * @param {ReactComponent} component Instance of ReactDOMSelect
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(component, propValue) {
	  var selectedValue, i, l;
	  var options = component.getDOMNode().options;

	  if (component.props.multiple) {
	    selectedValue = {};
	    for (i = 0, l = propValue.length; i < l; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0, l = options.length; i < l; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0, l = options.length; i < l; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = ReactClass.createClass({
	  displayName: 'ReactDOMSelect',
	  tagName: 'SELECT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  propTypes: {
	    defaultValue: selectValueType,
	    value: selectValueType
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.onChange = this._handleChange;
	    props.value = null;

	    return select(props, this.props.children);
	  },

	  componentWillMount: function() {
	    this._pendingUpdate = false;
	  },

	  componentDidMount: function() {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      updateOptions(this, value);
	    } else if (this.props.defaultValue != null) {
	      updateOptions(this, this.props.defaultValue);
	    }
	  },

	  componentDidUpdate: function(prevProps) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      this._pendingUpdate = false;
	      updateOptions(this, value);
	    } else if (!prevProps.multiple !== !this.props.multiple) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (this.props.defaultValue != null) {
	        updateOptions(this, this.props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(this, this.props.multiple ? [] : '');
	      }
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }

	    this._pendingUpdate = true;
	    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMSelect;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(125);
	var DOMPropertyOperations = __webpack_require__(54);
	var LinkedValueUtils = __webpack_require__(132);
	var ReactBrowserComponentMixin = __webpack_require__(121);
	var ReactClass = __webpack_require__(48);
	var ReactElement = __webpack_require__(22);
	var ReactUpdates = __webpack_require__(37);

	var assign = __webpack_require__(24);
	var invariant = __webpack_require__(18);

	var warning = __webpack_require__(26);

	var textarea = ReactElement.createFactory('textarea');

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = ReactClass.createClass({
	  displayName: 'ReactDOMTextarea',
	  tagName: 'TEXTAREA',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = this.props.children;
	    if (children != null) {
	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'Use the `defaultValue` or `value` props instead of setting ' +
	          'children on <textarea>.'
	        ) : null);
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        defaultValue == null,
	        'If you supply `defaultValue` on a <textarea>, do not pass children.'
	      ) : invariant(defaultValue == null));
	      if (Array.isArray(children)) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          children.length <= 1,
	          '<textarea> can only have at most one child.'
	        ) : invariant(children.length <= 1));
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(this);
	    return {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue)
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.dangerouslySetInnerHTML == null,
	      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
	    ) : invariant(props.dangerouslySetInnerHTML == null));

	    props.defaultValue = null;
	    props.value = null;
	    props.onChange = this._handleChange;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    return textarea(props, this.state.initialValue);
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      var rootNode = this.getDOMNode();
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    ReactUpdates.asap(forceUpdateIfMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMTextarea;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(138);
	var ExecutionEnvironment = __webpack_require__(62);
	var PooledClass = __webpack_require__(20);
	var ReactInstanceHandles = __webpack_require__(30);
	var ReactMount = __webpack_require__(78);
	var ReactUpdates = __webpack_require__(37);

	var assign = __webpack_require__(24);
	var getEventTarget = __webpack_require__(109);
	var getUnboundedScrollPosition = __webpack_require__(139);

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(
	  TopLevelCallbackBookKeeping,
	  PooledClass.twoArgumentPooler
	);

	function handleTopLevelImpl(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(
	    getEventTarget(bookKeeping.nativeEvent)
	  ) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(
	      bookKeeping.topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      bookKeeping.nativeEvent
	    );
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function() {
	    return ReactEventListener._enabled;
	  },


	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  monitorScrollValue: function(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
	      topLevelType,
	      nativeEvent
	    );
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(27);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function(target, eventType, callback) {
	    if (!target.addEventListener) {
	      if ("production" !== process.env.NODE_ENV) {
	        console.error(
	          'Attempted to listen to events during the capture phase on a ' +
	          'browser that does not support the capture phase. Your application ' +
	          'will not receive some events.'
	        );
	      }
	      return {
	        remove: emptyFunction
	      };
	    } else {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    }
	  },

	  registerDefault: function() {}
	};

	module.exports = EventListener;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 139 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	"use strict";

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(55);
	var EventPluginHub = __webpack_require__(80);
	var ReactComponentEnvironment = __webpack_require__(96);
	var ReactClass = __webpack_require__(48);
	var ReactEmptyComponent = __webpack_require__(87);
	var ReactBrowserEventEmitter = __webpack_require__(79);
	var ReactNativeComponent = __webpack_require__(46);
	var ReactDOMComponent = __webpack_require__(98);
	var ReactPerf = __webpack_require__(39);
	var ReactRootIndex = __webpack_require__(31);
	var ReactUpdates = __webpack_require__(37);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMComponent: ReactDOMComponent.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(38);
	var PooledClass = __webpack_require__(20);
	var ReactBrowserEventEmitter = __webpack_require__(79);
	var ReactInputSelection = __webpack_require__(142);
	var ReactPutListenerQueue = __webpack_require__(146);
	var Transaction = __webpack_require__(47);

	var assign = __webpack_require__(24);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
	   *   restores the previous value.
	   */
	  close: function(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function() {
	    this.reactMountReady.notifyAll();
	  }
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: function() {
	    this.putListenerQueue.putListeners();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  SELECTION_RESTORATION,
	  EVENT_SUPPRESSION,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction() {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap proceedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(143);

	var containsNode = __webpack_require__(90);
	var focusNode = __webpack_require__(126);
	var getActiveElement = __webpack_require__(145);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function(elem) {
	    return elem && (
	      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
	      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
	    );
	  },

	  getSelectionInformation: function() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange:
	          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
	          ReactInputSelection.getSelection(focusedElem) :
	          null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem &&
	        isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(
	          priorFocusedElem,
	          priorSelectionRange
	        );
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function(input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || {start: 0, end: 0};
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(62);

	var getNodeForCharacterOffset = __webpack_require__(144);
	var getTextContentAccessor = __webpack_require__(106);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(
	    selection.anchorNode,
	    selection.anchorOffset,
	    selection.focusNode,
	    selection.focusOffset
	  );

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(
	    tempRange.startContainer,
	    tempRange.startOffset,
	    tempRange.endContainer,
	    tempRange.endOffset
	  );

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ?
	            start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = (
	  ExecutionEnvironment.canUseDOM &&
	  'selection' in document &&
	  !('getSelection' in window)
	);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;


/***/ }),
/* 144 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;


/***/ }),
/* 145 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document body is not yet defined.
	 */
	function getActiveElement() /*?DOMElement*/ {
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPutListenerQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(20);
	var ReactBrowserEventEmitter = __webpack_require__(79);

	var assign = __webpack_require__(24);

	function ReactPutListenerQueue() {
	  this.listenersToPut = [];
	}

	assign(ReactPutListenerQueue.prototype, {
	  enqueuePutListener: function(rootNodeID, propKey, propValue) {
	    this.listenersToPut.push({
	      rootNodeID: rootNodeID,
	      propKey: propKey,
	      propValue: propValue
	    });
	  },

	  putListeners: function() {
	    for (var i = 0; i < this.listenersToPut.length; i++) {
	      var listenerToPut = this.listenersToPut[i];
	      ReactBrowserEventEmitter.putListener(
	        listenerToPut.rootNodeID,
	        listenerToPut.propKey,
	        listenerToPut.propValue
	      );
	    }
	  },

	  reset: function() {
	    this.listenersToPut.length = 0;
	  },

	  destructor: function() {
	    this.reset();
	  }
	});

	PooledClass.addPoolingTo(ReactPutListenerQueue);

	module.exports = ReactPutListenerQueue;


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(16);
	var EventPropagators = __webpack_require__(104);
	var ReactInputSelection = __webpack_require__(142);
	var SyntheticEvent = __webpack_require__(108);

	var getActiveElement = __webpack_require__(145);
	var isTextInputElement = __webpack_require__(112);
	var keyOf = __webpack_require__(50);
	var shallowEqual = __webpack_require__(148);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSelect: null}),
	      captured: keyOf({onSelectCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topContextMenu,
	      topLevelTypes.topFocus,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topMouseDown,
	      topLevelTypes.topMouseUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @param {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node &&
	      ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown ||
	      activeElement == null ||
	      activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(
	      eventTypes.select,
	      activeElementID,
	      nativeEvent
	    );

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) ||
	            topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't).
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      case topLevelTypes.topSelectionChange:
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent);
	    }
	  }
	};

	module.exports = SelectEventPlugin;


/***/ }),
/* 148 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 */

	'use strict';

	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) &&
	        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B's keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = shallowEqual;


/***/ }),
/* 149 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(16);
	var EventPluginUtils = __webpack_require__(15);
	var EventPropagators = __webpack_require__(104);
	var SyntheticClipboardEvent = __webpack_require__(151);
	var SyntheticEvent = __webpack_require__(108);
	var SyntheticFocusEvent = __webpack_require__(152);
	var SyntheticKeyboardEvent = __webpack_require__(153);
	var SyntheticMouseEvent = __webpack_require__(116);
	var SyntheticDragEvent = __webpack_require__(156);
	var SyntheticTouchEvent = __webpack_require__(157);
	var SyntheticUIEvent = __webpack_require__(117);
	var SyntheticWheelEvent = __webpack_require__(158);

	var getEventCharCode = __webpack_require__(154);

	var invariant = __webpack_require__(18);
	var keyOf = __webpack_require__(50);
	var warning = __webpack_require__(26);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBlur: true}),
	      captured: keyOf({onBlurCapture: true})
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onClick: true}),
	      captured: keyOf({onClickCapture: true})
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onContextMenu: true}),
	      captured: keyOf({onContextMenuCapture: true})
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCopy: true}),
	      captured: keyOf({onCopyCapture: true})
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCut: true}),
	      captured: keyOf({onCutCapture: true})
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDoubleClick: true}),
	      captured: keyOf({onDoubleClickCapture: true})
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrag: true}),
	      captured: keyOf({onDragCapture: true})
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnd: true}),
	      captured: keyOf({onDragEndCapture: true})
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnter: true}),
	      captured: keyOf({onDragEnterCapture: true})
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragExit: true}),
	      captured: keyOf({onDragExitCapture: true})
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragLeave: true}),
	      captured: keyOf({onDragLeaveCapture: true})
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragOver: true}),
	      captured: keyOf({onDragOverCapture: true})
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragStart: true}),
	      captured: keyOf({onDragStartCapture: true})
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrop: true}),
	      captured: keyOf({onDropCapture: true})
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onFocus: true}),
	      captured: keyOf({onFocusCapture: true})
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onInput: true}),
	      captured: keyOf({onInputCapture: true})
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyDown: true}),
	      captured: keyOf({onKeyDownCapture: true})
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyPress: true}),
	      captured: keyOf({onKeyPressCapture: true})
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyUp: true}),
	      captured: keyOf({onKeyUpCapture: true})
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onLoad: true}),
	      captured: keyOf({onLoadCapture: true})
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onError: true}),
	      captured: keyOf({onErrorCapture: true})
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseDown: true}),
	      captured: keyOf({onMouseDownCapture: true})
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseMove: true}),
	      captured: keyOf({onMouseMoveCapture: true})
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOut: true}),
	      captured: keyOf({onMouseOutCapture: true})
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOver: true}),
	      captured: keyOf({onMouseOverCapture: true})
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseUp: true}),
	      captured: keyOf({onMouseUpCapture: true})
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onPaste: true}),
	      captured: keyOf({onPasteCapture: true})
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onReset: true}),
	      captured: keyOf({onResetCapture: true})
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScroll: true}),
	      captured: keyOf({onScrollCapture: true})
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSubmit: true}),
	      captured: keyOf({onSubmitCapture: true})
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchCancel: true}),
	      captured: keyOf({onTouchCancelCapture: true})
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchEnd: true}),
	      captured: keyOf({onTouchEndCapture: true})
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchMove: true}),
	      captured: keyOf({onTouchMoveCapture: true})
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchStart: true}),
	      captured: keyOf({onTouchStartCapture: true})
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onWheel: true}),
	      captured: keyOf({onWheelCapture: true})
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topBlur:        eventTypes.blur,
	  topClick:       eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy:        eventTypes.copy,
	  topCut:         eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag:        eventTypes.drag,
	  topDragEnd:     eventTypes.dragEnd,
	  topDragEnter:   eventTypes.dragEnter,
	  topDragExit:    eventTypes.dragExit,
	  topDragLeave:   eventTypes.dragLeave,
	  topDragOver:    eventTypes.dragOver,
	  topDragStart:   eventTypes.dragStart,
	  topDrop:        eventTypes.drop,
	  topError:       eventTypes.error,
	  topFocus:       eventTypes.focus,
	  topInput:       eventTypes.input,
	  topKeyDown:     eventTypes.keyDown,
	  topKeyPress:    eventTypes.keyPress,
	  topKeyUp:       eventTypes.keyUp,
	  topLoad:        eventTypes.load,
	  topMouseDown:   eventTypes.mouseDown,
	  topMouseMove:   eventTypes.mouseMove,
	  topMouseOut:    eventTypes.mouseOut,
	  topMouseOver:   eventTypes.mouseOver,
	  topMouseUp:     eventTypes.mouseUp,
	  topPaste:       eventTypes.paste,
	  topReset:       eventTypes.reset,
	  topScroll:      eventTypes.scroll,
	  topSubmit:      eventTypes.submit,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd:    eventTypes.touchEnd,
	  topTouchMove:   eventTypes.touchMove,
	  topTouchStart:  eventTypes.touchStart,
	  topWheel:       eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * Same as the default implementation, except cancels the event when return
	   * value is false. This behavior will be disabled in a future release.
	   *
	   * @param {object} Event to be dispatched.
	   * @param {function} Application-level callback.
	   * @param {string} domID DOM ID to pass to the callback.
	   */
	  executeDispatch: function(event, listener, domID) {
	    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof returnValue !== 'boolean',
	      'Returning `false` from an event handler is deprecated and will be ' +
	      'ignored in a future release. Instead, manually call ' +
	      'e.stopPropagation() or e.preventDefault(), as appropriate.'
	    ) : null);

	    if (returnValue === false) {
	      event.stopPropagation();
	      event.preventDefault();
	    }
	  },

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topError:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSubmit:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      EventConstructor,
	      'SimpleEventPlugin: Unhandled event type, `%s`.',
	      topLevelType
	    ) : invariant(EventConstructor));
	    var event = EventConstructor.getPooled(
	      dispatchConfig,
	      topLevelTargetID,
	      nativeEvent
	    );
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }

	};

	module.exports = SimpleEventPlugin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(108);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function(event) {
	    return (
	      'clipboardData' in event ?
	        event.clipboardData :
	        window.clipboardData
	    );
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(117);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(117);

	var getEventCharCode = __webpack_require__(154);
	var getEventKey = __webpack_require__(155);
	var getEventModifierState = __webpack_require__(118);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;


/***/ }),
/* 154 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(154);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(116);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(117);

	var getEventModifierState = __webpack_require__(118);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(116);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function(event) {
	    return (
	      'deltaX' in event ? event.deltaX :
	      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
	    );
	  },
	  deltaY: function(event) {
	    return (
	      'deltaY' in event ? event.deltaY :
	      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	      'wheelDeltaY' in event ? -event.wheelDeltaY :
	      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	      'wheelDelta' in event ? -event.wheelDelta : 0
	    );
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(55);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox'
	  }
	};

	module.exports = SVGDOMPropertyConfig;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createFullPageComponent
	 * @typechecks
	 */

	'use strict';

	// Defeat circular references by requiring this directly.
	var ReactClass = __webpack_require__(48);
	var ReactElement = __webpack_require__(22);

	var invariant = __webpack_require__(18);

	/**
	 * Create a component that will throw an exception when unmounted.
	 *
	 * Components like <html> <head> and <body> can't be removed or added
	 * easily in a cross-browser way, however it's valuable to be able to
	 * take advantage of React's reconciliation for styling and <title>
	 * management. So we just document it and throw in dangerous cases.
	 *
	 * @param {string} tag The tag to wrap
	 * @return {function} convenience constructor of new component
	 */
	function createFullPageComponent(tag) {
	  var elementFactory = ReactElement.createFactory(tag);

	  var FullPageComponent = ReactClass.createClass({
	    tagName: tag.toUpperCase(),
	    displayName: 'ReactFullPageComponent' + tag,

	    componentWillUnmount: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        false,
	        '%s tried to unmount. Because of cross-browser quirks it is ' +
	        'impossible to unmount some top-level components (eg <html>, <head>, ' +
	        'and <body>) reliably and efficiently. To fix this, have a single ' +
	        'top-level component that never unmounts render these elements.',
	        this.constructor.displayName
	      ) : invariant(false));
	    },

	    render: function() {
	      return elementFactory(this.props);
	    }
	  });

	  return FullPageComponent;
	}

	module.exports = createFullPageComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(55);
	var ReactDefaultPerfAnalysis = __webpack_require__(162);
	var ReactMount = __webpack_require__(78);
	var ReactPerf = __webpack_require__(39);

	var performanceNow = __webpack_require__(163);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function() {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function() {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  getMeasurementsSummaryMap: function(measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
	      measurements,
	      true
	    );
	    return summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  printDOM: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function(item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result['type'] = item.type;
	      result['args'] = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  _recordWrite: function(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes =
	      ReactDefaultPerf
	        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
	        .writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function(moduleName, fnName, func) {
	    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' ||
	          fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' ||
	          moduleName === 'ReactDOMIDOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function(update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(
	              update.parentID,
	              update.type,
	              totalTime,
	              writeArgs
	            );
	          });
	        } else {
	          // basic format
	          ReactDefaultPerf._recordWrite(
	            args[0],
	            fnName,
	            totalTime,
	            Array.prototype.slice.call(args, 1)
	          );
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (
	        (// TODO: receiveComponent()?
	        (fnName === 'mountComponent' ||
	        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

	        if (typeof this._currentElement.type === 'string') {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ?
	          args[0] :
	          this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ?
	            this._currentElement._owner.getName() :
	            '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	var assign = __webpack_require__(24);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  TEXT_CONTENT: 'set textContent',
	  'updatePropertyByID': 'update attribute',
	  'deletePropertyByID': 'delete attribute',
	  'updateStylesByID': 'update styles',
	  'updateInnerHTMLByID': 'set innerHTML',
	  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var id;

	    for (id in measurement.writes) {
	      measurement.writes[id].forEach(function(write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    }
	  }
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	var performance = __webpack_require__(164);

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (!performance || !performance.now) {
	  performance = Date;
	}

	var performanceNow = performance.now.bind(performance);

	module.exports = performanceNow;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(62);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance =
	    window.performance ||
	    window.msPerformance ||
	    window.webkitPerformance;
	}

	module.exports = performance || {};


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactElement = __webpack_require__(22);
	var ReactInstanceHandles = __webpack_require__(30);
	var ReactMarkupChecksum = __webpack_require__(88);
	var ReactServerRenderingTransaction =
	  __webpack_require__(166);

	var emptyObject = __webpack_require__(25);
	var instantiateReactComponent = __webpack_require__(94);
	var invariant = __webpack_require__(18);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToString(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup =
	        componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToStaticMarkup(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(20);
	var CallbackQueue = __webpack_require__(38);
	var ReactPutListenerQueue = __webpack_require__(146);
	var Transaction = __webpack_require__(47);

	var assign = __webpack_require__(24);
	var emptyFunction = __webpack_require__(27);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap proceedures.
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(
	  ReactServerRenderingTransaction.prototype,
	  Transaction.Mixin,
	  Mixin
	);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(22);

	var invariant = __webpack_require__(18);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(children),
	    'onlyChild must be passed a children with exactly one child.'
	  ) : invariant(ReactElement.isValidElement(children)));
	  return children;
	}

	module.exports = onlyChild;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	var React = __webpack_require__(12);
	var Bootstrap = __webpack_require__(169);
	var InteractiveExpression = __webpack_require__(398);
	var InteractiveNfa = __webpack_require__(417);
	var InteractiveProgram = __webpack_require__(419);

	var App = React.createClass({displayName: "App",
	  render: function() {
	    return (
	      React.createElement(Bootstrap.Grid, null, 
		React.createElement(Bootstrap.Col, {lg: 6, md: 6, sm: 12, xs: 12}, 
		  React.createElement("h1", null, "Visualizing Regular Expressions"), 
		  React.createElement("p", null, "The first visualization is the parse tree view of regular" + " " + 
		  "expressions. This this visualizes the syntax of a regular expression" + " " +
		  "as a tree."), 
		  React.createElement(InteractiveExpression, {regex: "a+b+"}), 
		  React.createElement("p", null, "The second visualization is the NFA view of regular expressions." + " " +
		  "This visualizes the semantics of a regular expression as a graph." + " " +
		  "A string that matches the regular expression can be mapped to a path" + " " +
		  "through the graph starting at the start node and ending at the" + " " + 
		  "final bolded node."), 
		  React.createElement(InteractiveNfa, {regex: "a+b+"}), 
		  React.createElement("p", null, "The third visualization is the machine code view of regular" + " " + 
		  "expressions. This visualizes the semantics of a regular expression as" + " " +
		  "a sequence of instructions. A string that matches the regular" + " " + 
		  "expression can be mapped to an execution path through the machine" + " " + 
		  "code, terminating at the match instruction."), 
		  React.createElement(InteractiveProgram, {regex: "a+b+"})
		)
	      )
	    );
	  }
	});
	module.exports = App;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _Object$keys = __webpack_require__(170)['default'];

	var _Object$defineProperty = __webpack_require__(182)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	var _interopRequireWildcard = __webpack_require__(186)['default'];

	exports.__esModule = true;

	var _utilsDeprecationWarning = __webpack_require__(187);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	var _utilsDomUtils = __webpack_require__(198);

	var _utilsDomUtils2 = _interopRequireDefault(_utilsDomUtils);

	var _utilsChildrenValueInputValidation = __webpack_require__(218);

	var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

	var _utilsCreateChainedFunction = __webpack_require__(222);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _utilsValidComponentChildren = __webpack_require__(221);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var _Accordion2 = __webpack_require__(223);

	var _Accordion3 = _interopRequireDefault(_Accordion2);

	exports.Accordion = _Accordion3['default'];

	var _Affix2 = __webpack_require__(236);

	var _Affix3 = _interopRequireDefault(_Affix2);

	exports.Affix = _Affix3['default'];

	var _AffixMixin2 = __webpack_require__(237);

	var _AffixMixin3 = _interopRequireDefault(_AffixMixin2);

	exports.AffixMixin = _AffixMixin3['default'];

	var _Alert2 = __webpack_require__(239);

	var _Alert3 = _interopRequireDefault(_Alert2);

	exports.Alert = _Alert3['default'];

	var _Badge2 = __webpack_require__(240);

	var _Badge3 = _interopRequireDefault(_Badge2);

	exports.Badge = _Badge3['default'];

	var _BootstrapMixin2 = __webpack_require__(234);

	var _BootstrapMixin3 = _interopRequireDefault(_BootstrapMixin2);

	exports.BootstrapMixin = _BootstrapMixin3['default'];

	var _Button2 = __webpack_require__(241);

	var _Button3 = _interopRequireDefault(_Button2);

	exports.Button = _Button3['default'];

	var _ButtonGroup2 = __webpack_require__(246);

	var _ButtonGroup3 = _interopRequireDefault(_ButtonGroup2);

	exports.ButtonGroup = _ButtonGroup3['default'];

	var _ButtonInput2 = __webpack_require__(242);

	var _ButtonInput3 = _interopRequireDefault(_ButtonInput2);

	exports.ButtonInput = _ButtonInput3['default'];

	var _ButtonToolbar2 = __webpack_require__(247);

	var _ButtonToolbar3 = _interopRequireDefault(_ButtonToolbar2);

	exports.ButtonToolbar = _ButtonToolbar3['default'];

	var _Carousel2 = __webpack_require__(248);

	var _Carousel3 = _interopRequireDefault(_Carousel2);

	exports.Carousel = _Carousel3['default'];

	var _CarouselItem2 = __webpack_require__(249);

	var _CarouselItem3 = _interopRequireDefault(_CarouselItem2);

	exports.CarouselItem = _CarouselItem3['default'];

	var _Col2 = __webpack_require__(251);

	var _Col3 = _interopRequireDefault(_Col2);

	exports.Col = _Col3['default'];

	var _CollapsibleMixin2 = __webpack_require__(252);

	var _CollapsibleMixin3 = _interopRequireDefault(_CollapsibleMixin2);

	exports.CollapsibleMixin = _CollapsibleMixin3['default'];

	var _CollapsibleNav2 = __webpack_require__(253);

	var _CollapsibleNav3 = _interopRequireDefault(_CollapsibleNav2);

	exports.CollapsibleNav = _CollapsibleNav3['default'];

	var _Dropdown2 = __webpack_require__(258);

	var _Dropdown3 = _interopRequireDefault(_Dropdown2);

	exports.Dropdown = _Dropdown3['default'];

	var _DropdownButton2 = __webpack_require__(336);

	var _DropdownButton3 = _interopRequireDefault(_DropdownButton2);

	exports.DropdownButton = _DropdownButton3['default'];

	var _NavDropdown2 = __webpack_require__(337);

	var _NavDropdown3 = _interopRequireDefault(_NavDropdown2);

	exports.NavDropdown = _NavDropdown3['default'];

	var _SplitButton3 = __webpack_require__(338);

	var _SplitButton4 = _interopRequireDefault(_SplitButton3);

	exports.SplitButton = _SplitButton4['default'];

	var _FadeMixin2 = __webpack_require__(340);

	var _FadeMixin3 = _interopRequireDefault(_FadeMixin2);

	exports.FadeMixin = _FadeMixin3['default'];

	var _Glyphicon2 = __webpack_require__(245);

	var _Glyphicon3 = _interopRequireDefault(_Glyphicon2);

	exports.Glyphicon = _Glyphicon3['default'];

	var _Grid2 = __webpack_require__(341);

	var _Grid3 = _interopRequireDefault(_Grid2);

	exports.Grid = _Grid3['default'];

	var _Input2 = __webpack_require__(342);

	var _Input3 = _interopRequireDefault(_Input2);

	exports.Input = _Input3['default'];

	var _Interpolate2 = __webpack_require__(345);

	var _Interpolate3 = _interopRequireDefault(_Interpolate2);

	exports.Interpolate = _Interpolate3['default'];

	var _Jumbotron2 = __webpack_require__(346);

	var _Jumbotron3 = _interopRequireDefault(_Jumbotron2);

	exports.Jumbotron = _Jumbotron3['default'];

	var _Label2 = __webpack_require__(347);

	var _Label3 = _interopRequireDefault(_Label2);

	exports.Label = _Label3['default'];

	var _ListGroup2 = __webpack_require__(348);

	var _ListGroup3 = _interopRequireDefault(_ListGroup2);

	exports.ListGroup = _ListGroup3['default'];

	var _ListGroupItem2 = __webpack_require__(349);

	var _ListGroupItem3 = _interopRequireDefault(_ListGroupItem2);

	exports.ListGroupItem = _ListGroupItem3['default'];

	var _MenuItem2 = __webpack_require__(350);

	var _MenuItem3 = _interopRequireDefault(_MenuItem2);

	exports.MenuItem = _MenuItem3['default'];

	var _Modal2 = __webpack_require__(351);

	var _Modal3 = _interopRequireDefault(_Modal2);

	exports.Modal = _Modal3['default'];

	var _ModalHeader2 = __webpack_require__(363);

	var _ModalHeader3 = _interopRequireDefault(_ModalHeader2);

	exports.ModalHeader = _ModalHeader3['default'];

	var _ModalTitle2 = __webpack_require__(364);

	var _ModalTitle3 = _interopRequireDefault(_ModalTitle2);

	exports.ModalTitle = _ModalTitle3['default'];

	var _ModalBody2 = __webpack_require__(362);

	var _ModalBody3 = _interopRequireDefault(_ModalBody2);

	exports.ModalBody = _ModalBody3['default'];

	var _ModalFooter2 = __webpack_require__(365);

	var _ModalFooter3 = _interopRequireDefault(_ModalFooter2);

	exports.ModalFooter = _ModalFooter3['default'];

	var _Nav2 = __webpack_require__(366);

	var _Nav3 = _interopRequireDefault(_Nav2);

	exports.Nav = _Nav3['default'];

	var _Navbar2 = __webpack_require__(367);

	var _Navbar3 = _interopRequireDefault(_Navbar2);

	exports.Navbar = _Navbar3['default'];

	var _NavItem2 = __webpack_require__(368);

	var _NavItem3 = _interopRequireDefault(_NavItem2);

	exports.NavItem = _NavItem3['default'];

	var _Overlay2 = __webpack_require__(369);

	var _Overlay3 = _interopRequireDefault(_Overlay2);

	exports.Overlay = _Overlay3['default'];

	var _OverlayTrigger2 = __webpack_require__(374);

	var _OverlayTrigger3 = _interopRequireDefault(_OverlayTrigger2);

	exports.OverlayTrigger = _OverlayTrigger3['default'];

	var _PageHeader2 = __webpack_require__(377);

	var _PageHeader3 = _interopRequireDefault(_PageHeader2);

	exports.PageHeader = _PageHeader3['default'];

	var _PageItem2 = __webpack_require__(378);

	var _PageItem3 = _interopRequireDefault(_PageItem2);

	exports.PageItem = _PageItem3['default'];

	var _Pager2 = __webpack_require__(379);

	var _Pager3 = _interopRequireDefault(_Pager2);

	exports.Pager = _Pager3['default'];

	var _Pagination2 = __webpack_require__(380);

	var _Pagination3 = _interopRequireDefault(_Pagination2);

	exports.Pagination = _Pagination3['default'];

	var _Panel2 = __webpack_require__(383);

	var _Panel3 = _interopRequireDefault(_Panel2);

	exports.Panel = _Panel3['default'];

	var _PanelGroup2 = __webpack_require__(231);

	var _PanelGroup3 = _interopRequireDefault(_PanelGroup2);

	exports.PanelGroup = _PanelGroup3['default'];

	var _Popover2 = __webpack_require__(384);

	var _Popover3 = _interopRequireDefault(_Popover2);

	exports.Popover = _Popover3['default'];

	var _ProgressBar2 = __webpack_require__(385);

	var _ProgressBar3 = _interopRequireDefault(_ProgressBar2);

	exports.ProgressBar = _ProgressBar3['default'];

	var _Row2 = __webpack_require__(386);

	var _Row3 = _interopRequireDefault(_Row2);

	exports.Row = _Row3['default'];

	var _SafeAnchor2 = __webpack_require__(265);

	var _SafeAnchor3 = _interopRequireDefault(_SafeAnchor2);

	exports.SafeAnchor = _SafeAnchor3['default'];

	var _SplitButton5 = _interopRequireDefault(_SplitButton3);

	exports.SplitButton = _SplitButton5['default'];

	var _styleMaps2 = __webpack_require__(235);

	var _styleMaps3 = _interopRequireDefault(_styleMaps2);

	exports.styleMaps = _styleMaps3['default'];

	var _SubNav2 = __webpack_require__(387);

	var _SubNav3 = _interopRequireDefault(_SubNav2);

	exports.SubNav = _SubNav3['default'];

	var _Tab2 = __webpack_require__(388);

	var _Tab3 = _interopRequireDefault(_Tab2);

	exports.Tab = _Tab3['default'];

	var _TabbedArea2 = __webpack_require__(389);

	var _TabbedArea3 = _interopRequireDefault(_TabbedArea2);

	exports.TabbedArea = _TabbedArea3['default'];

	var _Table2 = __webpack_require__(392);

	var _Table3 = _interopRequireDefault(_Table2);

	exports.Table = _Table3['default'];

	var _TabPane2 = __webpack_require__(391);

	var _TabPane3 = _interopRequireDefault(_TabPane2);

	exports.TabPane = _TabPane3['default'];

	var _Tabs2 = __webpack_require__(390);

	var _Tabs3 = _interopRequireDefault(_Tabs2);

	exports.Tabs = _Tabs3['default'];

	var _Thumbnail2 = __webpack_require__(393);

	var _Thumbnail3 = _interopRequireDefault(_Thumbnail2);

	exports.Thumbnail = _Thumbnail3['default'];

	var _Tooltip2 = __webpack_require__(394);

	var _Tooltip3 = _interopRequireDefault(_Tooltip2);

	exports.Tooltip = _Tooltip3['default'];

	var _Well2 = __webpack_require__(395);

	var _Well3 = _interopRequireDefault(_Well2);

	exports.Well = _Well3['default'];

	var _Portal2 = __webpack_require__(396);

	var _Portal3 = _interopRequireDefault(_Portal2);

	exports.Portal = _Portal3['default'];

	var _Position2 = __webpack_require__(397);

	var _Position3 = _interopRequireDefault(_Position2);

	exports.Position = _Position3['default'];

	var _Collapse2 = __webpack_require__(254);

	var _Collapse3 = _interopRequireDefault(_Collapse2);

	exports.Collapse = _Collapse3['default'];

	var _Fade2 = __webpack_require__(360);

	var _Fade3 = _interopRequireDefault(_Fade2);

	exports.Fade = _Fade3['default'];

	var _FormControls2 = __webpack_require__(343);

	var _FormControls = _interopRequireWildcard(_FormControls2);

	exports.FormControls = _FormControls;

	function createDeprecationWrapper(obj, deprecated, instead, link) {
	  var wrapper = {};

	  if (process.env.NODE_ENV === 'production') {
	    return obj;
	  }

	  _Object$keys(obj).forEach(function (key) {
	    _Object$defineProperty(wrapper, key, {
	      get: function get() {
	        _utilsDeprecationWarning2['default'](deprecated, instead, link);
	        return obj[key];
	      },
	      set: function set(x) {
	        obj[key] = x;
	      }
	    });
	  });

	  return wrapper;
	}

	var utils = {
	  childrenValueInputValidation: _utilsChildrenValueInputValidation2['default'],
	  createChainedFunction: _utilsCreateChainedFunction2['default'],
	  ValidComponentChildren: _utilsValidComponentChildren2['default'],
	  CustomPropTypes: _utilsCustomPropTypes2['default'],
	  domUtils: createDeprecationWrapper(_utilsDomUtils2['default'], 'utils/domUtils', 'npm install dom-helpers')
	};
	exports.utils = utils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(171), __esModule: true };

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(172);
	module.exports = __webpack_require__(178).Object.keys;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(173);

	__webpack_require__(175)('keys', function($keys){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(174);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ }),
/* 174 */
/***/ (function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(176)
	  , core    = __webpack_require__(178)
	  , fails   = __webpack_require__(181);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(177)
	  , core      = __webpack_require__(178)
	  , ctx       = __webpack_require__(179)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;

/***/ }),
/* 177 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ }),
/* 178 */
/***/ (function(module, exports) {

	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(180);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ }),
/* 180 */
/***/ (function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ }),
/* 181 */
/***/ (function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(183), __esModule: true };

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(184);
	module.exports = function defineProperty(it, key, desc){
	  return $.setDesc(it, key, desc);
	};

/***/ }),
/* 184 */
/***/ (function(module, exports) {

	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};

/***/ }),
/* 185 */
/***/ (function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};

	exports.__esModule = true;

/***/ }),
/* 186 */
/***/ (function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};

	    if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }

	    newObj["default"] = obj;
	    return newObj;
	  }
	};

	exports.__esModule = true;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _reactLibWarning = __webpack_require__(26);

	var _reactLibWarning2 = _interopRequireDefault(_reactLibWarning);

	var warned = {};

	function deprecationWarning(oldname, newname, link) {
	  var message = undefined;

	  if (typeof oldname === 'object') {
	    message = oldname.message;
	  } else {
	    message = oldname + ' is deprecated. Use ' + newname + ' instead.';

	    if (link) {
	      message += '\nYou can read more about it at ' + link;
	    }
	  }

	  if (warned[message]) {
	    return;
	  }

	  _reactLibWarning2['default'](false, message);
	  warned[message] = true;
	}

	deprecationWarning.wrapper = function (Component) {
	  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  return (function (_Component) {
	    _inherits(DeprecatedComponent, _Component);

	    function DeprecatedComponent() {
	      _classCallCheck(this, DeprecatedComponent);

	      _Component.apply(this, arguments);
	    }

	    DeprecatedComponent.prototype.componentWillMount = function componentWillMount() {
	      deprecationWarning.apply(undefined, args);

	      if (_Component.prototype.componentWillMount) {
	        var _Component$prototype$componentWillMount;

	        for (var _len2 = arguments.length, methodArgs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	          methodArgs[_key2] = arguments[_key2];
	        }

	        (_Component$prototype$componentWillMount = _Component.prototype.componentWillMount).call.apply(_Component$prototype$componentWillMount, [this].concat(methodArgs));
	      }
	    };

	    return DeprecatedComponent;
	  })(Component);
	};

	exports['default'] = deprecationWarning;
	module.exports = exports['default'];

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$create = __webpack_require__(189)["default"];

	var _Object$setPrototypeOf = __webpack_require__(191)["default"];

	exports["default"] = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = _Object$create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	exports.__esModule = true;

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(190), __esModule: true };

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(184);
	module.exports = function create(P, D){
	  return $.create(P, D);
	};

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(192), __esModule: true };

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(193);
	module.exports = __webpack_require__(178).Object.setPrototypeOf;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(176);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(194).set});

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var getDesc  = __webpack_require__(184).getDesc
	  , isObject = __webpack_require__(195)
	  , anObject = __webpack_require__(196);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(179)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ }),
/* 195 */
/***/ (function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(195);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ }),
/* 197 */
/***/ (function(module, exports) {

	"use strict";

	exports["default"] = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	exports.__esModule = true;

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _domHelpersUtilInDOM = __webpack_require__(199);

	var _domHelpersUtilInDOM2 = _interopRequireDefault(_domHelpersUtilInDOM);

	var _domHelpersOwnerDocument = __webpack_require__(200);

	var _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);

	var _domHelpersOwnerWindow = __webpack_require__(201);

	var _domHelpersOwnerWindow2 = _interopRequireDefault(_domHelpersOwnerWindow);

	var _domHelpersQueryContains = __webpack_require__(203);

	var _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);

	var _domHelpersActiveElement = __webpack_require__(204);

	var _domHelpersActiveElement2 = _interopRequireDefault(_domHelpersActiveElement);

	var _domHelpersQueryOffset = __webpack_require__(205);

	var _domHelpersQueryOffset2 = _interopRequireDefault(_domHelpersQueryOffset);

	var _domHelpersQueryOffsetParent = __webpack_require__(207);

	var _domHelpersQueryOffsetParent2 = _interopRequireDefault(_domHelpersQueryOffsetParent);

	var _domHelpersQueryPosition = __webpack_require__(215);

	var _domHelpersQueryPosition2 = _interopRequireDefault(_domHelpersQueryPosition);

	var _domHelpersStyle = __webpack_require__(208);

	var _domHelpersStyle2 = _interopRequireDefault(_domHelpersStyle);

	function ownerDocument(componentOrElement) {
	  var elem = _react2['default'].findDOMNode(componentOrElement);
	  return _domHelpersOwnerDocument2['default'](elem && elem.ownerDocument || document);
	}

	function ownerWindow(componentOrElement) {
	  var doc = ownerDocument(componentOrElement);
	  return _domHelpersOwnerWindow2['default'](doc);
	}

	// TODO remove in 0.26
	function getComputedStyles(elem) {
	  return ownerDocument(elem).defaultView.getComputedStyle(elem, null);
	}

	/**
	 * Get the height of the document
	 *
	 * @returns {documentHeight: number}
	 */
	function getDocumentHeight() {
	  return Math.max(document.documentElement.offsetHeight, document.height, document.body.scrollHeight, document.body.offsetHeight);
	}

	/**
	 * Get an element's size
	 *
	 * @param {HTMLElement} elem
	 * @returns {{width: number, height: number}}
	 */
	function getSize(elem) {
	  var rect = {
	    width: elem.offsetWidth || 0,
	    height: elem.offsetHeight || 0
	  };
	  if (typeof elem.getBoundingClientRect !== 'undefined') {
	    var _elem$getBoundingClientRect = elem.getBoundingClientRect();

	    var width = _elem$getBoundingClientRect.width;
	    var height = _elem$getBoundingClientRect.height;

	    rect.width = width || rect.width;
	    rect.height = height || rect.height;
	  }
	  return rect;
	}

	exports['default'] = {
	  canUseDom: _domHelpersUtilInDOM2['default'],
	  css: _domHelpersStyle2['default'],
	  getComputedStyles: getComputedStyles,
	  contains: _domHelpersQueryContains2['default'],
	  ownerWindow: ownerWindow,
	  ownerDocument: ownerDocument,
	  getOffset: _domHelpersQueryOffset2['default'],
	  getDocumentHeight: getDocumentHeight,
	  getPosition: _domHelpersQueryPosition2['default'],
	  getSize: getSize,
	  activeElement: _domHelpersActiveElement2['default'],
	  offsetParent: _domHelpersQueryOffsetParent2['default']
	};
	module.exports = exports['default'];

/***/ }),
/* 199 */
/***/ (function(module, exports) {

	'use strict';
	module.exports = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/***/ }),
/* 200 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = ownerDocument;

	function ownerDocument(node) {
	  return node && node.ownerDocument || document;
	}

	module.exports = exports["default"];

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var babelHelpers = __webpack_require__(202);

	exports.__esModule = true;
	exports['default'] = ownerWindow;

	var _ownerDocument = __webpack_require__(200);

	var _ownerDocument2 = babelHelpers.interopRequireDefault(_ownerDocument);

	function ownerWindow(node) {
	  var doc = (0, _ownerDocument2['default'])(node);
	  return doc && doc.defaultView || doc.parentWindow;
	}

	module.exports = exports['default'];

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === "object") {
	    factory(exports);
	  } else {
	    factory(root.babelHelpers = {});
	  }
	})(this, function (global) {
	  var babelHelpers = global;

	  babelHelpers.interopRequireDefault = function (obj) {
	    return obj && obj.__esModule ? obj : {
	      "default": obj
	    };
	  };

	  babelHelpers._extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };
	})

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var canUseDOM = __webpack_require__(199);

	var contains = (function () {
	  var root = canUseDOM && document.documentElement;

	  return root && root.contains ? function (context, node) {
	    return context.contains(node);
	  } : root && root.compareDocumentPosition ? function (context, node) {
	    return context === node || !!(context.compareDocumentPosition(node) & 16);
	  } : function (context, node) {
	    if (node) do {
	      if (node === context) return true;
	    } while (node = node.parentNode);

	    return false;
	  };
	})();

	module.exports = contains;

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var babelHelpers = __webpack_require__(202);

	exports.__esModule = true;

	/**
	 * document.activeElement
	 */
	exports['default'] = activeElement;

	var _ownerDocument = __webpack_require__(200);

	var _ownerDocument2 = babelHelpers.interopRequireDefault(_ownerDocument);

	function activeElement() {
	  var doc = arguments[0] === undefined ? document : arguments[0];

	  try {
	    return doc.activeElement;
	  } catch (e) {}
	}

	module.exports = exports['default'];

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var contains = __webpack_require__(203),
	    getWindow = __webpack_require__(206),
	    ownerDocument = __webpack_require__(200);

	module.exports = function offset(node) {
	  var doc = ownerDocument(node),
	      win = getWindow(doc),
	      docElem = doc && doc.documentElement,
	      box = { top: 0, left: 0, height: 0, width: 0 };

	  if (!doc) return;

	  // Make sure it's not a disconnected DOM node
	  if (!contains(docElem, node)) return box;

	  if (node.getBoundingClientRect !== undefined) box = node.getBoundingClientRect();

	  if (box.width || box.height) {

	    box = {
	      top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
	      left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0),
	      width: (box.width == null ? node.offsetWidth : box.width) || 0,
	      height: (box.height == null ? node.offsetHeight : box.height) || 0
	    };
	  }

	  return box;
	};

/***/ }),
/* 206 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function getWindow(node) {
	  return node === node.window ? node : node.nodeType === 9 ? node.defaultView || node.parentWindow : false;
	};

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var babelHelpers = __webpack_require__(202);

	exports.__esModule = true;
	exports['default'] = offsetParent;

	var _ownerDocument = __webpack_require__(200);

	var _ownerDocument2 = babelHelpers.interopRequireDefault(_ownerDocument);

	var _style = __webpack_require__(208);

	var _style2 = babelHelpers.interopRequireDefault(_style);

	function nodeName(node) {
	  return node.nodeName && node.nodeName.toLowerCase();
	}

	function offsetParent(node) {
	  var doc = (0, _ownerDocument2['default'])(node),
	      offsetParent = node && node.offsetParent;

	  while (offsetParent && nodeName(node) !== 'html' && (0, _style2['default'])(offsetParent, 'position') === 'static') {
	    offsetParent = offsetParent.offsetParent;
	  }

	  return offsetParent || doc.documentElement;
	}

	module.exports = exports['default'];

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var camelize = __webpack_require__(209),
	    hyphenate = __webpack_require__(211),
	    _getComputedStyle = __webpack_require__(213),
	    removeStyle = __webpack_require__(214);

	var has = Object.prototype.hasOwnProperty;

	module.exports = function style(node, property, value) {
	  var css = '',
	      props = property;

	  if (typeof property === 'string') {

	    if (value === undefined) return node.style[camelize(property)] || _getComputedStyle(node).getPropertyValue(hyphenate(property));else (props = {})[property] = value;
	  }

	  for (var key in props) if (has.call(props, key)) {
	    !props[key] && props[key] !== 0 ? removeStyle(node, hyphenate(key)) : css += hyphenate(key) + ':' + props[key] + ';';
	  }

	  node.style.cssText += ';' + css;
	};

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/camelizeStyleName.js
	 */

	'use strict';
	var camelize = __webpack_require__(210);
	var msPattern = /^-ms-/;

	module.exports = function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	};

/***/ }),
/* 210 */
/***/ (function(module, exports) {

	"use strict";

	var rHyphen = /-(.)/g;

	module.exports = function camelize(string) {
	  return string.replace(rHyphen, function (_, chr) {
	    return chr.toUpperCase();
	  });
	};

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
	 */

	"use strict";

	var hyphenate = __webpack_require__(212);
	var msPattern = /^ms-/;

	module.exports = function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, "-ms-");
	};

/***/ }),
/* 212 */
/***/ (function(module, exports) {

	'use strict';

	var rUpper = /([A-Z])/g;

	module.exports = function hyphenate(string) {
	  return string.replace(rUpper, '-$1').toLowerCase();
	};

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var babelHelpers = __webpack_require__(202);

	var _utilCamelizeStyle = __webpack_require__(209);

	var _utilCamelizeStyle2 = babelHelpers.interopRequireDefault(_utilCamelizeStyle);

	var rposition = /^(top|right|bottom|left)$/;
	var rnumnonpx = /^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;

	module.exports = function _getComputedStyle(node) {
	  if (!node) throw new TypeError('No Element passed to `getComputedStyle()`');
	  var doc = node.ownerDocument;

	  return 'defaultView' in doc ? doc.defaultView.opener ? node.ownerDocument.defaultView.getComputedStyle(node, null) : window.getComputedStyle(node, null) : { //ie 8 "magic" from: https://github.com/jquery/jquery/blob/1.11-stable/src/css/curCSS.js#L72
	    getPropertyValue: function getPropertyValue(prop) {
	      var style = node.style;

	      prop = (0, _utilCamelizeStyle2['default'])(prop);

	      if (prop == 'float') prop = 'styleFloat';

	      var current = node.currentStyle[prop] || null;

	      if (current == null && style && style[prop]) current = style[prop];

	      if (rnumnonpx.test(current) && !rposition.test(prop)) {
	        // Remember the original values
	        var left = style.left;
	        var runStyle = node.runtimeStyle;
	        var rsLeft = runStyle && runStyle.left;

	        // Put in the new values to get a computed value out
	        if (rsLeft) runStyle.left = node.currentStyle.left;

	        style.left = prop === 'fontSize' ? '1em' : current;
	        current = style.pixelLeft + 'px';

	        // Revert the changed values
	        style.left = left;
	        if (rsLeft) runStyle.left = rsLeft;
	      }

	      return current;
	    }
	  };
	};

/***/ }),
/* 214 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function removeStyle(node, key) {
	  return 'removeProperty' in node.style ? node.style.removeProperty(key) : node.style.removeAttribute(key);
	};

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var babelHelpers = __webpack_require__(202);

	exports.__esModule = true;
	exports['default'] = position;

	var _offset = __webpack_require__(205);

	var _offset2 = babelHelpers.interopRequireDefault(_offset);

	var _offsetParent = __webpack_require__(207);

	var _offsetParent2 = babelHelpers.interopRequireDefault(_offsetParent);

	var _scrollTop = __webpack_require__(216);

	var _scrollTop2 = babelHelpers.interopRequireDefault(_scrollTop);

	var _scrollLeft = __webpack_require__(217);

	var _scrollLeft2 = babelHelpers.interopRequireDefault(_scrollLeft);

	var _style = __webpack_require__(208);

	var _style2 = babelHelpers.interopRequireDefault(_style);

	function nodeName(node) {
	  return node.nodeName && node.nodeName.toLowerCase();
	}

	function position(node, offsetParent) {
	  var parentOffset = { top: 0, left: 0 },
	      offset;

	  // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
	  // because it is its only offset parent
	  if ((0, _style2['default'])(node, 'position') === 'fixed') {
	    offset = node.getBoundingClientRect();
	  } else {
	    offsetParent = offsetParent || (0, _offsetParent2['default'])(node);
	    offset = (0, _offset2['default'])(node);

	    if (nodeName(offsetParent) !== 'html') parentOffset = (0, _offset2['default'])(offsetParent);

	    parentOffset.top += parseInt((0, _style2['default'])(offsetParent, 'borderTopWidth'), 10) - (0, _scrollTop2['default'])(offsetParent) || 0;
	    parentOffset.left += parseInt((0, _style2['default'])(offsetParent, 'borderLeftWidth'), 10) - (0, _scrollLeft2['default'])(offsetParent) || 0;
	  }

	  // Subtract parent offsets and node margins
	  return babelHelpers._extends({}, offset, {
	    top: offset.top - parentOffset.top - (parseInt((0, _style2['default'])(node, 'marginTop'), 10) || 0),
	    left: offset.left - parentOffset.left - (parseInt((0, _style2['default'])(node, 'marginLeft'), 10) || 0)
	  });
	}

	module.exports = exports['default'];

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var getWindow = __webpack_require__(206);

	module.exports = function scrollTop(node, val) {
	  var win = getWindow(node);

	  if (val === undefined) return win ? 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop : node.scrollTop;

	  if (win) win.scrollTo('pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft, val);else node.scrollTop = val;
	};

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var getWindow = __webpack_require__(206);

	module.exports = function scrollTop(node, val) {
	  var win = getWindow(node);

	  if (val === undefined) return win ? 'pageXOffset' in win ? win.pageXOffset : win.document.documentElement.scrollLeft : node.scrollLeft;

	  if (win) win.scrollTo(val, 'pageYOffset' in win ? win.pageYOffset : win.document.documentElement.scrollTop);else node.scrollLeft = val;
	};

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;
	exports['default'] = valueValidation;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _CustomPropTypes = __webpack_require__(219);

	var propList = ['children', 'value'];

	function valueValidation(props, propName, componentName) {
	  var error = _CustomPropTypes.singlePropFrom(propList)(props, propName, componentName);

	  if (!error) {
	    error = _react2['default'].PropTypes.node(props, propName, componentName);
	  }

	  return error;
	}

	module.exports = exports['default'];

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _Object$keys = __webpack_require__(170)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _reactLibWarning = __webpack_require__(26);

	var _reactLibWarning2 = _interopRequireDefault(_reactLibWarning);

	var _childrenToArray = __webpack_require__(220);

	var _childrenToArray2 = _interopRequireDefault(_childrenToArray);

	var ANONYMOUS = '<<anonymous>>';

	/**
	 * Create chain-able isRequired validator
	 *
	 * Largely copied directly from:
	 *  https://github.com/facebook/react/blob/0.11-stable/src/core/ReactPropTypes.js#L94
	 */
	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName) {
	    componentName = componentName || ANONYMOUS;
	    if (props[propName] == null) {
	      if (isRequired) {
	        return new Error('Required prop \'' + propName + '\' was not specified in \'' + componentName + '\'.');
	      }
	    } else {
	      return validate(props, propName, componentName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function errMsg(props, propName, componentName, msgContinuation) {
	  return 'Invalid prop \'' + propName + '\' of value \'' + props[propName] + '\'' + (' supplied to \'' + componentName + '\'' + msgContinuation);
	}

	function createMountableChecker() {
	  function validate(props, propName, componentName) {
	    if (typeof props[propName] !== 'object' || typeof props[propName].render !== 'function' && props[propName].nodeType !== 1) {
	      return new Error(errMsg(props, propName, componentName, ', expected a DOM element or an object that has a `render` method'));
	    }
	  }

	  return createChainableTypeChecker(validate);
	}

	function createKeyOfChecker(obj) {
	  function validate(props, propName, componentName) {
	    var propValue = props[propName];
	    if (!obj.hasOwnProperty(propValue)) {
	      var valuesString = JSON.stringify(_Object$keys(obj));
	      return new Error(errMsg(props, propName, componentName, ', expected one of ' + valuesString + '.'));
	    }
	  }
	  return createChainableTypeChecker(validate);
	}

	function createSinglePropFromChecker(arrOfProps) {
	  function validate(props, propName) {
	    var usedPropCount = arrOfProps.map(function (listedProp) {
	      return props[listedProp];
	    }).reduce(function (acc, curr) {
	      return acc + (curr !== undefined ? 1 : 0);
	    }, 0);

	    if (usedPropCount > 1) {
	      var first = arrOfProps[0];
	      var others = arrOfProps.slice(1);

	      var message = others.join(', ') + ' and ' + first;
	      return new Error('Invalid prop \'' + propName + '\', only one of the following ' + ('may be provided: ' + message));
	    }
	  }
	  return validate;
	}

	function all(propTypes) {
	  if (propTypes === undefined) {
	    throw new Error('No validations provided');
	  }

	  if (!(propTypes instanceof Array)) {
	    throw new Error('Invalid argument must be an array');
	  }

	  if (propTypes.length === 0) {
	    throw new Error('No validations provided');
	  }

	  return function (props, propName, componentName) {
	    for (var i = 0; i < propTypes.length; i++) {
	      var result = propTypes[i](props, propName, componentName);

	      if (result !== undefined && result !== null) {
	        return result;
	      }
	    }
	  };
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName) {
	    var errBeginning = errMsg(props, propName, componentName, '. Expected an Element `type`');

	    if (typeof props[propName] !== 'function') {
	      if (_react2['default'].isValidElement(props[propName])) {
	        return new Error(errBeginning + ', not an actual Element');
	      }

	      if (typeof props[propName] !== 'string') {
	        return new Error(errBeginning + ' such as a tag name or return value of React.createClass(...)');
	      }
	    }
	  }

	  return createChainableTypeChecker(validate);
	}

	exports['default'] = {

	  deprecated: function deprecated(propType, explanation) {
	    return function (props, propName, componentName) {
	      if (props[propName] != null) {
	        _reactLibWarning2['default'](false, '"' + propName + '" property of "' + componentName + '" has been deprecated.\n' + explanation);
	      }

	      return propType(props, propName, componentName);
	    };
	  },

	  isRequiredForA11y: function isRequiredForA11y(propType) {
	    return function (props, propName, componentName) {
	      if (props[propName] == null) {
	        return new Error('The prop `' + propName + '` is required to make ' + componentName + ' accessible ' + 'for users using assistive technologies such as screen readers `');
	      }

	      return propType(props, propName, componentName);
	    };
	  },

	  requiredRoles: function requiredRoles() {
	    for (var _len = arguments.length, roles = Array(_len), _key = 0; _key < _len; _key++) {
	      roles[_key] = arguments[_key];
	    }

	    return createChainableTypeChecker(function requiredRolesValidator(props, propName, component) {
	      var missing = undefined;
	      var children = _childrenToArray2['default'](props.children);

	      var inRole = function inRole(role, child) {
	        return role === child.props.bsRole;
	      };

	      roles.every(function (role) {
	        if (!children.some(function (child) {
	          return inRole(role, child);
	        })) {
	          missing = role;
	          return false;
	        }
	        return true;
	      });

	      if (missing) {
	        return new Error('(children) ' + component + ' - Missing a required child with bsRole: ' + missing + '. ' + (component + ' must have at least one child of each of the following bsRoles: ' + roles.join(', ')));
	      }
	    });
	  },

	  exclusiveRoles: function exclusiveRoles() {
	    for (var _len2 = arguments.length, roles = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      roles[_key2] = arguments[_key2];
	    }

	    return createChainableTypeChecker(function exclusiveRolesValidator(props, propName, component) {
	      var children = _childrenToArray2['default'](props.children);
	      var duplicate = undefined;

	      roles.every(function (role) {
	        var childrenWithRole = children.filter(function (child) {
	          return child.props.bsRole === role;
	        });

	        if (childrenWithRole.length > 1) {
	          duplicate = role;
	          return false;
	        }
	        return true;
	      });

	      if (duplicate) {
	        return new Error('(children) ' + component + ' - Duplicate children detected of bsRole: ' + duplicate + '. ' + ('Only one child each allowed with the following bsRoles: ' + roles.join(', ')));
	      }
	    });
	  },

	  /**
	   * Checks whether a prop provides a DOM element
	   *
	   * The element can be provided in two forms:
	   * - Directly passed
	   * - Or passed an object that has a `render` method
	   *
	   * @param props
	   * @param propName
	   * @param componentName
	   * @returns {Error|undefined}
	   */
	  mountable: createMountableChecker(),

	  /**
	   * Checks whether a prop provides a type of element.
	   *
	   * The type of element can be provided in two forms:
	   * - tag name (string)
	   * - a return value of React.createClass(...)
	   *
	   * @param props
	   * @param propName
	   * @param componentName
	   * @returns {Error|undefined}
	   */
	  elementType: createElementTypeChecker(),

	  /**
	   * Checks whether a prop matches a key of an associated object
	   *
	   * @param props
	   * @param propName
	   * @param componentName
	   * @returns {Error|undefined}
	   */
	  keyOf: createKeyOfChecker,
	  /**
	   * Checks if only one of the listed properties is in use. An error is given
	   * if multiple have a value
	   *
	   * @param props
	   * @param propName
	   * @param componentName
	   * @returns {Error|undefined}
	   */
	  singlePropFrom: createSinglePropFromChecker,

	  all: all
	};
	module.exports = exports['default'];

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;
	exports['default'] = childrenAsArray;

	var _ValidComponentChildren = __webpack_require__(221);

	var _ValidComponentChildren2 = _interopRequireDefault(_ValidComponentChildren);

	function childrenAsArray(children) {
	  var result = [];

	  if (children === undefined) {
	    return result;
	  }

	  _ValidComponentChildren2['default'].forEach(children, function (child) {
	    result.push(child);
	  });

	  return result;
	}

	module.exports = exports['default'];

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	/**
	 * Maps children that are typically specified as `props.children`,
	 * but only iterates over children that are "valid components".
	 *
	 * The mapFunction provided index will be normalised to the components mapped,
	 * so an invalid component would not increase the index.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapValidComponents(children, func, context) {
	  var index = 0;

	  return _react2['default'].Children.map(children, function (child) {
	    if (_react2['default'].isValidElement(child)) {
	      var lastIndex = index;
	      index++;
	      return func.call(context, child, lastIndex);
	    }

	    return child;
	  });
	}

	/**
	 * Iterates through children that are typically specified as `props.children`,
	 * but only iterates over children that are "valid components".
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child with the index reflecting the position relative to "valid components".
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachValidComponents(children, func, context) {
	  var index = 0;

	  return _react2['default'].Children.forEach(children, function (child) {
	    if (_react2['default'].isValidElement(child)) {
	      func.call(context, child, index);
	      index++;
	    }
	  });
	}

	/**
	 * Count the number of "valid components" in the Children container.
	 *
	 * @param {?*} children Children tree container.
	 * @returns {number}
	 */
	function numberOfValidComponents(children) {
	  var count = 0;

	  _react2['default'].Children.forEach(children, function (child) {
	    if (_react2['default'].isValidElement(child)) {
	      count++;
	    }
	  });

	  return count;
	}

	/**
	 * Determine if the Child container has one or more "valid components".
	 *
	 * @param {?*} children Children tree container.
	 * @returns {boolean}
	 */
	function hasValidComponent(children) {
	  var hasValid = false;

	  _react2['default'].Children.forEach(children, function (child) {
	    if (!hasValid && _react2['default'].isValidElement(child)) {
	      hasValid = true;
	    }
	  });

	  return hasValid;
	}

	function find(children, finder) {
	  var child = undefined;

	  forEachValidComponents(children, function (c, idx) {
	    if (!child && finder(c, idx, children)) {
	      child = c;
	    }
	  });

	  return child;
	}

	exports['default'] = {
	  map: mapValidComponents,
	  forEach: forEachValidComponents,
	  numberOf: numberOfValidComponents,
	  find: find,
	  hasValidComponent: hasValidComponent
	};
	module.exports = exports['default'];

/***/ }),
/* 222 */
/***/ (function(module, exports) {

	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @param {function} functions to chain
	 * @returns {function|null}
	 */
	'use strict';

	exports.__esModule = true;
	function createChainedFunction() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  return funcs.filter(function (f) {
	    return f != null;
	  }).reduce(function (acc, f) {
	    if (typeof f !== 'function') {
	      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
	    }

	    if (acc === null) {
	      return f;
	    }

	    return function chainedFunction() {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      acc.apply(this, args);
	      f.apply(this, args);
	    };
	  }, null);
	}

	exports['default'] = createChainedFunction;
	module.exports = exports['default'];

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _PanelGroup = __webpack_require__(231);

	var _PanelGroup2 = _interopRequireDefault(_PanelGroup);

	var Accordion = _react2['default'].createClass({
	  displayName: 'Accordion',

	  render: function render() {
	    return _react2['default'].createElement(
	      _PanelGroup2['default'],
	      _extends({}, this.props, { accordion: true }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Accordion;
	module.exports = exports['default'];

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$assign = __webpack_require__(225)["default"];

	exports["default"] = _Object$assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};

	exports.__esModule = true;

/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(226), __esModule: true };

/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(227);
	module.exports = __webpack_require__(178).Object.assign;

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(176);

	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(228)});

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.1 Object.assign(target, source, ...)
	var $        = __webpack_require__(184)
	  , toObject = __webpack_require__(173)
	  , IObject  = __webpack_require__(229);

	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = __webpack_require__(181)(function(){
	  var a = Object.assign
	    , A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , $$    = arguments
	    , $$len = $$.length
	    , index = 1
	    , getKeys    = $.getKeys
	    , getSymbols = $.getSymbols
	    , isEnum     = $.isEnum;
	  while($$len > index){
	    var S      = IObject($$[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  }
	  return T;
	} : Object.assign;

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(230);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ }),
/* 230 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	/* eslint react/prop-types: [2, {ignore: "bsStyle"}] */
	/* BootstrapMixin contains `bsStyle` type validation */

	'use strict';

	var _objectWithoutProperties = __webpack_require__(232)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _utilsValidComponentChildren = __webpack_require__(221);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var PanelGroup = _react2['default'].createClass({
	  displayName: 'PanelGroup',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    accordion: _react2['default'].PropTypes.bool,
	    activeKey: _react2['default'].PropTypes.any,
	    className: _react2['default'].PropTypes.string,
	    children: _react2['default'].PropTypes.node,
	    defaultActiveKey: _react2['default'].PropTypes.any,
	    onSelect: _react2['default'].PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      accordion: false,
	      bsClass: 'panel-group'
	    };
	  },

	  getInitialState: function getInitialState() {
	    var defaultActiveKey = this.props.defaultActiveKey;

	    return {
	      activeKey: defaultActiveKey
	    };
	  },

	  render: function render() {
	    var classes = this.getBsClassSet();
	    var _props = this.props;
	    var className = _props.className;

	    var props = _objectWithoutProperties(_props, ['className']);

	    if (this.props.accordion) {
	      props.role = 'tablist';
	    }
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, props, { className: _classnames2['default'](className, classes), onSelect: null }),
	      _utilsValidComponentChildren2['default'].map(props.children, this.renderPanel)
	    );
	  },

	  renderPanel: function renderPanel(child, index) {
	    var activeKey = this.props.activeKey != null ? this.props.activeKey : this.state.activeKey;

	    var props = {
	      bsStyle: child.props.bsStyle || this.props.bsStyle,
	      key: child.key ? child.key : index,
	      ref: child.ref
	    };

	    if (this.props.accordion) {
	      props.headerRole = 'tab';
	      props.panelRole = 'tabpanel';
	      props.collapsible = true;
	      props.expanded = child.props.eventKey === activeKey;
	      props.onSelect = this.handleSelect;
	    }

	    return _react.cloneElement(child, props);
	  },

	  shouldComponentUpdate: function shouldComponentUpdate() {
	    // Defer any updates to this component during the `onSelect` handler.
	    return !this._isChanging;
	  },

	  handleSelect: function handleSelect(e, key) {
	    e.preventDefault();

	    if (this.props.onSelect) {
	      this._isChanging = true;
	      this.props.onSelect(key);
	      this._isChanging = false;
	    }

	    if (this.state.activeKey === key) {
	      key = null;
	    }

	    this.setState({
	      activeKey: key
	    });
	  }
	});

	exports['default'] = PanelGroup;
	module.exports = exports['default'];

/***/ }),
/* 232 */
/***/ (function(module, exports) {

	"use strict";

	exports["default"] = function (obj, keys) {
	  var target = {};

	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }

	  return target;
	};

	exports.__esModule = true;

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _styleMaps = __webpack_require__(235);

	var _styleMaps2 = _interopRequireDefault(_styleMaps);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var BootstrapMixin = {
	  propTypes: {
	    /**
	     * bootstrap className
	     * @private
	     */
	    bsClass: _utilsCustomPropTypes2['default'].keyOf(_styleMaps2['default'].CLASSES),
	    /**
	     * Style variants
	     * @type {("default"|"primary"|"success"|"info"|"warning"|"danger"|"link")}
	     */
	    bsStyle: _react2['default'].PropTypes.oneOf(_styleMaps2['default'].STYLES),
	    /**
	     * Size variants
	     * @type {("xsmall"|"small"|"medium"|"large"|"xs"|"sm"|"md"|"lg")}
	     */
	    bsSize: _utilsCustomPropTypes2['default'].keyOf(_styleMaps2['default'].SIZES)
	  },

	  getBsClassSet: function getBsClassSet() {
	    var classes = {};

	    var bsClass = this.props.bsClass && _styleMaps2['default'].CLASSES[this.props.bsClass];
	    if (bsClass) {
	      classes[bsClass] = true;

	      var prefix = bsClass + '-';

	      var bsSize = this.props.bsSize && _styleMaps2['default'].SIZES[this.props.bsSize];
	      if (bsSize) {
	        classes[prefix + bsSize] = true;
	      }

	      if (this.props.bsStyle) {
	        if (_styleMaps2['default'].STYLES.indexOf(this.props.bsStyle) >= 0) {
	          classes[prefix + this.props.bsStyle] = true;
	        } else {
	          classes[this.props.bsStyle] = true;
	        }
	      }
	    }

	    return classes;
	  },

	  prefixClass: function prefixClass(subClass) {
	    return _styleMaps2['default'].CLASSES[this.props.bsClass] + '-' + subClass;
	  }
	};

	exports['default'] = BootstrapMixin;
	module.exports = exports['default'];

/***/ }),
/* 235 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var styleMaps = {
	  CLASSES: {
	    'alert': 'alert',
	    'button': 'btn',
	    'button-group': 'btn-group',
	    'button-toolbar': 'btn-toolbar',
	    'column': 'col',
	    'input-group': 'input-group',
	    'form': 'form',
	    'glyphicon': 'glyphicon',
	    'label': 'label',
	    'thumbnail': 'thumbnail',
	    'list-group-item': 'list-group-item',
	    'panel': 'panel',
	    'panel-group': 'panel-group',
	    'pagination': 'pagination',
	    'progress-bar': 'progress-bar',
	    'nav': 'nav',
	    'navbar': 'navbar',
	    'modal': 'modal',
	    'row': 'row',
	    'well': 'well'
	  },
	  STYLES: ['default', 'primary', 'success', 'info', 'warning', 'danger', 'link', 'inline', 'tabs', 'pills'],
	  addStyle: function addStyle(name) {
	    styleMaps.STYLES.push(name);
	  },
	  SIZES: {
	    'large': 'lg',
	    'medium': 'md',
	    'small': 'sm',
	    'xsmall': 'xs',
	    'lg': 'lg',
	    'md': 'md',
	    'sm': 'sm',
	    'xs': 'xs'
	  },
	  GRID_COLUMNS: 12
	};

	exports['default'] = styleMaps;
	module.exports = exports['default'];

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _AffixMixin = __webpack_require__(237);

	var _AffixMixin2 = _interopRequireDefault(_AffixMixin);

	var Affix = _react2['default'].createClass({
	  displayName: 'Affix',

	  mixins: [_AffixMixin2['default']],

	  render: function render() {
	    var holderStyle = _extends({
	      top: this.state.affixPositionTop
	    }, this.props.style);

	    // eslint-disable-line react/prop-types
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, this.state.affixClass),
	        style: holderStyle }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Affix;
	module.exports = exports['default'];
	// we don't want to expose the `style` property

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _utilsDomUtils = __webpack_require__(198);

	var _utilsDomUtils2 = _interopRequireDefault(_utilsDomUtils);

	var _utilsEventListener = __webpack_require__(238);

	var _utilsEventListener2 = _interopRequireDefault(_utilsEventListener);

	var AffixMixin = {
	  propTypes: {
	    offset: _react2['default'].PropTypes.number,
	    offsetTop: _react2['default'].PropTypes.number,
	    offsetBottom: _react2['default'].PropTypes.number
	  },

	  getInitialState: function getInitialState() {
	    return {
	      affixClass: 'affix-top'
	    };
	  },

	  getPinnedOffset: function getPinnedOffset(DOMNode) {
	    if (this.pinnedOffset) {
	      return this.pinnedOffset;
	    }

	    DOMNode.className = DOMNode.className.replace(/affix-top|affix-bottom|affix/, '');
	    DOMNode.className += DOMNode.className.length ? ' affix' : 'affix';

	    this.pinnedOffset = _utilsDomUtils2['default'].getOffset(DOMNode).top - window.pageYOffset;

	    return this.pinnedOffset;
	  },

	  checkPosition: function checkPosition() {
	    var DOMNode = undefined,
	        scrollHeight = undefined,
	        scrollTop = undefined,
	        position = undefined,
	        offsetTop = undefined,
	        offsetBottom = undefined,
	        affix = undefined,
	        affixType = undefined,
	        affixPositionTop = undefined;

	    // TODO: or not visible
	    if (!this.isMounted()) {
	      return;
	    }

	    DOMNode = _react2['default'].findDOMNode(this);
	    scrollHeight = _utilsDomUtils2['default'].getDocumentHeight();
	    scrollTop = window.pageYOffset;
	    position = _utilsDomUtils2['default'].getOffset(DOMNode);

	    if (this.affixed === 'top') {
	      position.top += scrollTop;
	    }

	    offsetTop = this.props.offsetTop != null ? this.props.offsetTop : this.props.offset;
	    offsetBottom = this.props.offsetBottom != null ? this.props.offsetBottom : this.props.offset;

	    if (offsetTop == null && offsetBottom == null) {
	      return;
	    }
	    if (offsetTop == null) {
	      offsetTop = 0;
	    }
	    if (offsetBottom == null) {
	      offsetBottom = 0;
	    }

	    if (this.unpin != null && scrollTop + this.unpin <= position.top) {
	      affix = false;
	    } else if (offsetBottom != null && position.top + DOMNode.offsetHeight >= scrollHeight - offsetBottom) {
	      affix = 'bottom';
	    } else if (offsetTop != null && scrollTop <= offsetTop) {
	      affix = 'top';
	    } else {
	      affix = false;
	    }

	    if (this.affixed === affix) {
	      return;
	    }

	    if (this.unpin != null) {
	      DOMNode.style.top = '';
	    }

	    affixType = 'affix' + (affix ? '-' + affix : '');

	    this.affixed = affix;
	    this.unpin = affix === 'bottom' ? this.getPinnedOffset(DOMNode) : null;

	    if (affix === 'bottom') {
	      DOMNode.className = DOMNode.className.replace(/affix-top|affix-bottom|affix/, 'affix-bottom');
	      affixPositionTop = scrollHeight - offsetBottom - DOMNode.offsetHeight - _utilsDomUtils2['default'].getOffset(DOMNode).top;
	    }

	    this.setState({
	      affixClass: affixType,
	      affixPositionTop: affixPositionTop
	    });
	  },

	  checkPositionWithEventLoop: function checkPositionWithEventLoop() {
	    setTimeout(this.checkPosition, 0);
	  },

	  componentDidMount: function componentDidMount() {
	    this._onWindowScrollListener = _utilsEventListener2['default'].listen(window, 'scroll', this.checkPosition);
	    this._onDocumentClickListener = _utilsEventListener2['default'].listen(_utilsDomUtils2['default'].ownerDocument(this), 'click', this.checkPositionWithEventLoop);
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this._onWindowScrollListener) {
	      this._onWindowScrollListener.remove();
	    }

	    if (this._onDocumentClickListener) {
	      this._onDocumentClickListener.remove();
	    }
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
	    if (prevState.affixClass === this.state.affixClass) {
	      this.checkPositionWithEventLoop();
	    }
	  }
	};

	exports['default'] = AffixMixin;
	module.exports = exports['default'];

/***/ }),
/* 238 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * This file contains a modified version of:
	 * https://github.com/facebook/react/blob/v0.12.0/src/vendor/stubs/EventListener.js
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * TODO: remove in favour of solution provided by:
	 *  https://github.com/facebook/react/issues/285
	 */

	/**
	 * Does not take into account specific nature of platform.
	 */
	'use strict';

	exports.__esModule = true;
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  }
	};

	exports['default'] = EventListener;
	module.exports = exports['default'];

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var Alert = _react2['default'].createClass({
	  displayName: 'Alert',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    onDismiss: _react2['default'].PropTypes.func,
	    dismissAfter: _react2['default'].PropTypes.number,
	    closeLabel: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'alert',
	      bsStyle: 'info',
	      closeLabel: 'Close Alert'
	    };
	  },

	  renderDismissButton: function renderDismissButton() {
	    return _react2['default'].createElement(
	      'button',
	      {
	        type: 'button',
	        className: 'close',
	        onClick: this.props.onDismiss,
	        'aria-hidden': 'true' },
	      _react2['default'].createElement(
	        'span',
	        null,
	        '×'
	      )
	    );
	  },

	  renderSrOnlyDismissButton: function renderSrOnlyDismissButton() {
	    return _react2['default'].createElement(
	      'button',
	      {
	        type: 'button',
	        className: 'close sr-only',
	        onClick: this.props.onDismiss },
	      this.props.closeLabel
	    );
	  },

	  render: function render() {
	    var classes = this.getBsClassSet();
	    var isDismissable = !!this.props.onDismiss;

	    classes['alert-dismissable'] = isDismissable;

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, { role: 'alert', className: _classnames2['default'](this.props.className, classes) }),
	      isDismissable ? this.renderDismissButton() : null,
	      this.props.children,
	      isDismissable ? this.renderSrOnlyDismissButton() : null
	    );
	  },

	  componentDidMount: function componentDidMount() {
	    if (this.props.dismissAfter && this.props.onDismiss) {
	      this.dismissTimer = setTimeout(this.props.onDismiss, this.props.dismissAfter);
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    clearTimeout(this.dismissTimer);
	  }
	});

	exports['default'] = Alert;
	module.exports = exports['default'];

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _utilsValidComponentChildren = __webpack_require__(221);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Badge = _react2['default'].createClass({
	  displayName: 'Badge',

	  propTypes: {
	    pullRight: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      pullRight: false
	    };
	  },

	  hasContent: function hasContent() {
	    return _utilsValidComponentChildren2['default'].hasValidComponent(this.props.children) || _react2['default'].Children.count(this.props.children) > 1 || typeof this.props.children === 'string' || typeof this.props.children === 'number';
	  },

	  render: function render() {
	    var classes = {
	      'pull-right': this.props.pullRight,
	      'badge': this.hasContent()
	    };
	    return _react2['default'].createElement(
	      'span',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Badge;
	module.exports = exports['default'];

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var _ButtonInput = __webpack_require__(242);

	var _ButtonInput2 = _interopRequireDefault(_ButtonInput);

	var Button = _react2['default'].createClass({
	  displayName: 'Button',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    active: _react2['default'].PropTypes.bool,
	    disabled: _react2['default'].PropTypes.bool,
	    block: _react2['default'].PropTypes.bool,
	    navItem: _react2['default'].PropTypes.bool,
	    navDropdown: _react2['default'].PropTypes.bool,
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _utilsCustomPropTypes2['default'].elementType,
	    href: _react2['default'].PropTypes.string,
	    target: _react2['default'].PropTypes.string,
	    /**
	     * Defines HTML button type Attribute
	     * @type {("button"|"reset"|"submit")}
	     * @defaultValue 'button'
	     */
	    type: _react2['default'].PropTypes.oneOf(_ButtonInput2['default'].types)
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      active: false,
	      block: false,
	      bsClass: 'button',
	      bsStyle: 'default',
	      disabled: false,
	      navItem: false,
	      navDropdown: false
	    };
	  },

	  render: function render() {
	    var classes = this.props.navDropdown ? {} : this.getBsClassSet();
	    var renderFuncName = undefined;

	    classes = _extends({
	      active: this.props.active,
	      'btn-block': this.props.block
	    }, classes);

	    if (this.props.navItem) {
	      return this.renderNavItem(classes);
	    }

	    renderFuncName = this.props.href || this.props.target || this.props.navDropdown ? 'renderAnchor' : 'renderButton';

	    return this[renderFuncName](classes);
	  },

	  renderAnchor: function renderAnchor(classes) {
	    var Component = this.props.componentClass || 'a';
	    var href = this.props.href || '#';
	    classes.disabled = this.props.disabled;

	    return _react2['default'].createElement(
	      Component,
	      _extends({}, this.props, {
	        href: href,
	        className: _classnames2['default'](this.props.className, classes),
	        role: 'button' }),
	      this.props.children
	    );
	  },

	  renderButton: function renderButton(classes) {
	    var Component = this.props.componentClass || 'button';

	    return _react2['default'].createElement(
	      Component,
	      _extends({}, this.props, {
	        type: this.props.type || 'button',
	        className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  },

	  renderNavItem: function renderNavItem(classes) {
	    var liClasses = {
	      active: this.props.active
	    };

	    return _react2['default'].createElement(
	      'li',
	      { className: _classnames2['default'](liClasses) },
	      this.renderAnchor(classes)
	    );
	  }
	});

	exports['default'] = Button;
	module.exports = exports['default'];

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _objectWithoutProperties = __webpack_require__(232)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _Button = __webpack_require__(241);

	var _Button2 = _interopRequireDefault(_Button);

	var _FormGroup = __webpack_require__(243);

	var _FormGroup2 = _interopRequireDefault(_FormGroup);

	var _InputBase2 = __webpack_require__(244);

	var _InputBase3 = _interopRequireDefault(_InputBase2);

	var _utilsChildrenValueInputValidation = __webpack_require__(218);

	var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

	var ButtonInput = (function (_InputBase) {
	  _inherits(ButtonInput, _InputBase);

	  function ButtonInput() {
	    _classCallCheck(this, ButtonInput);

	    _InputBase.apply(this, arguments);
	  }

	  ButtonInput.prototype.renderFormGroup = function renderFormGroup(children) {
	    var _props = this.props;
	    var bsStyle = _props.bsStyle;
	    var value = _props.value;

	    var other = _objectWithoutProperties(_props, ['bsStyle', 'value']);

	    return _react2['default'].createElement(
	      _FormGroup2['default'],
	      other,
	      children
	    );
	  };

	  ButtonInput.prototype.renderInput = function renderInput() {
	    var _props2 = this.props;
	    var children = _props2.children;
	    var value = _props2.value;

	    var other = _objectWithoutProperties(_props2, ['children', 'value']);

	    var val = children ? children : value;
	    return _react2['default'].createElement(_Button2['default'], _extends({}, other, { componentClass: 'input', ref: 'input', key: 'input', value: val }));
	  };

	  return ButtonInput;
	})(_InputBase3['default']);

	ButtonInput.types = ['button', 'reset', 'submit'];

	ButtonInput.defaultProps = {
	  type: 'button'
	};

	ButtonInput.propTypes = {
	  type: _react2['default'].PropTypes.oneOf(ButtonInput.types),
	  bsStyle: function bsStyle() {
	    // defer to Button propTypes of bsStyle
	    return null;
	  },
	  children: _utilsChildrenValueInputValidation2['default'],
	  value: _utilsChildrenValueInputValidation2['default']
	};

	exports['default'] = ButtonInput;
	module.exports = exports['default'];

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var FormGroup = (function (_React$Component) {
	  _inherits(FormGroup, _React$Component);

	  function FormGroup() {
	    _classCallCheck(this, FormGroup);

	    _React$Component.apply(this, arguments);
	  }

	  FormGroup.prototype.render = function render() {
	    var classes = {
	      'form-group': !this.props.standalone,
	      'form-group-lg': !this.props.standalone && this.props.bsSize === 'large',
	      'form-group-sm': !this.props.standalone && this.props.bsSize === 'small',
	      'has-feedback': this.props.hasFeedback,
	      'has-success': this.props.bsStyle === 'success',
	      'has-warning': this.props.bsStyle === 'warning',
	      'has-error': this.props.bsStyle === 'error'
	    };

	    return _react2['default'].createElement(
	      'div',
	      { className: _classnames2['default'](classes, this.props.groupClassName) },
	      this.props.children
	    );
	  };

	  return FormGroup;
	})(_react2['default'].Component);

	FormGroup.defaultProps = {
	  hasFeedback: false,
	  standalone: false
	};

	FormGroup.propTypes = {
	  standalone: _react2['default'].PropTypes.bool,
	  hasFeedback: _react2['default'].PropTypes.bool,
	  bsSize: function bsSize(props) {
	    if (props.standalone && props.bsSize !== undefined) {
	      return new Error('bsSize will not be used when `standalone` is set.');
	    }

	    return _react2['default'].PropTypes.oneOf(['small', 'medium', 'large']).apply(null, arguments);
	  },
	  bsStyle: _react2['default'].PropTypes.oneOf(['success', 'warning', 'error']),
	  groupClassName: _react2['default'].PropTypes.string
	};

	exports['default'] = FormGroup;
	module.exports = exports['default'];

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _FormGroup = __webpack_require__(243);

	var _FormGroup2 = _interopRequireDefault(_FormGroup);

	var _Glyphicon = __webpack_require__(245);

	var _Glyphicon2 = _interopRequireDefault(_Glyphicon);

	var InputBase = (function (_React$Component) {
	  _inherits(InputBase, _React$Component);

	  function InputBase() {
	    _classCallCheck(this, InputBase);

	    _React$Component.apply(this, arguments);
	  }

	  InputBase.prototype.getInputDOMNode = function getInputDOMNode() {
	    return _react2['default'].findDOMNode(this.refs.input);
	  };

	  InputBase.prototype.getValue = function getValue() {
	    if (this.props.type === 'static') {
	      return this.props.value;
	    } else if (this.props.type) {
	      if (this.props.type === 'select' && this.props.multiple) {
	        return this.getSelectedOptions();
	      } else {
	        return this.getInputDOMNode().value;
	      }
	    } else {
	      throw new Error('Cannot use getValue without specifying input type.');
	    }
	  };

	  InputBase.prototype.getChecked = function getChecked() {
	    return this.getInputDOMNode().checked;
	  };

	  InputBase.prototype.getSelectedOptions = function getSelectedOptions() {
	    var values = [];

	    Array.prototype.forEach.call(this.getInputDOMNode().getElementsByTagName('option'), function (option) {
	      if (option.selected) {
	        var value = option.getAttribute('value') || option.innerHtml;
	        values.push(value);
	      }
	    });

	    return values;
	  };

	  InputBase.prototype.isCheckboxOrRadio = function isCheckboxOrRadio() {
	    return this.props.type === 'checkbox' || this.props.type === 'radio';
	  };

	  InputBase.prototype.isFile = function isFile() {
	    return this.props.type === 'file';
	  };

	  InputBase.prototype.renderInputGroup = function renderInputGroup(children) {
	    var addonBefore = this.props.addonBefore ? _react2['default'].createElement(
	      'span',
	      { className: 'input-group-addon', key: 'addonBefore' },
	      this.props.addonBefore
	    ) : null;

	    var addonAfter = this.props.addonAfter ? _react2['default'].createElement(
	      'span',
	      { className: 'input-group-addon', key: 'addonAfter' },
	      this.props.addonAfter
	    ) : null;

	    var buttonBefore = this.props.buttonBefore ? _react2['default'].createElement(
	      'span',
	      { className: 'input-group-btn' },
	      this.props.buttonBefore
	    ) : null;

	    var buttonAfter = this.props.buttonAfter ? _react2['default'].createElement(
	      'span',
	      { className: 'input-group-btn' },
	      this.props.buttonAfter
	    ) : null;

	    var inputGroupClassName = undefined;
	    switch (this.props.bsSize) {
	      case 'small':
	        inputGroupClassName = 'input-group-sm';break;
	      case 'large':
	        inputGroupClassName = 'input-group-lg';break;
	      default:
	    }

	    return addonBefore || addonAfter || buttonBefore || buttonAfter ? _react2['default'].createElement(
	      'div',
	      { className: _classnames2['default'](inputGroupClassName, 'input-group'), key: 'input-group' },
	      addonBefore,
	      buttonBefore,
	      children,
	      addonAfter,
	      buttonAfter
	    ) : children;
	  };

	  InputBase.prototype.renderIcon = function renderIcon() {
	    if (this.props.hasFeedback) {
	      if (this.props.feedbackIcon) {
	        return _react2['default'].cloneElement(this.props.feedbackIcon, { formControlFeedback: true });
	      }

	      switch (this.props.bsStyle) {
	        case 'success':
	          return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'ok', key: 'icon' });
	        case 'warning':
	          return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'warning-sign', key: 'icon' });
	        case 'error':
	          return _react2['default'].createElement(_Glyphicon2['default'], { formControlFeedback: true, glyph: 'remove', key: 'icon' });
	        default:
	          return _react2['default'].createElement('span', { className: 'form-control-feedback', key: 'icon' });
	      }
	    } else {
	      return null;
	    }
	  };

	  InputBase.prototype.renderHelp = function renderHelp() {
	    return this.props.help ? _react2['default'].createElement(
	      'span',
	      { className: 'help-block', key: 'help' },
	      this.props.help
	    ) : null;
	  };

	  InputBase.prototype.renderCheckboxAndRadioWrapper = function renderCheckboxAndRadioWrapper(children) {
	    var classes = {
	      'checkbox': this.props.type === 'checkbox',
	      'radio': this.props.type === 'radio'
	    };

	    return _react2['default'].createElement(
	      'div',
	      { className: _classnames2['default'](classes), key: 'checkboxRadioWrapper' },
	      children
	    );
	  };

	  InputBase.prototype.renderWrapper = function renderWrapper(children) {
	    return this.props.wrapperClassName ? _react2['default'].createElement(
	      'div',
	      { className: this.props.wrapperClassName, key: 'wrapper' },
	      children
	    ) : children;
	  };

	  InputBase.prototype.renderLabel = function renderLabel(children) {
	    var classes = {
	      'control-label': !this.isCheckboxOrRadio()
	    };
	    classes[this.props.labelClassName] = this.props.labelClassName;

	    return this.props.label ? _react2['default'].createElement(
	      'label',
	      { htmlFor: this.props.id, className: _classnames2['default'](classes), key: 'label' },
	      children,
	      this.props.label
	    ) : children;
	  };

	  InputBase.prototype.renderInput = function renderInput() {
	    if (!this.props.type) {
	      return this.props.children;
	    }

	    switch (this.props.type) {
	      case 'select':
	        return _react2['default'].createElement(
	          'select',
	          _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control'), ref: 'input', key: 'input' }),
	          this.props.children
	        );
	      case 'textarea':
	        return _react2['default'].createElement('textarea', _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control'), ref: 'input', key: 'input' }));
	      case 'static':
	        return _react2['default'].createElement(
	          'p',
	          _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control-static'), ref: 'input', key: 'input' }),
	          this.props.value
	        );
	      default:
	        var className = this.isCheckboxOrRadio() || this.isFile() ? '' : 'form-control';
	        return _react2['default'].createElement('input', _extends({}, this.props, { className: _classnames2['default'](this.props.className, className), ref: 'input', key: 'input' }));
	    }
	  };

	  InputBase.prototype.renderFormGroup = function renderFormGroup(children) {
	    return _react2['default'].createElement(
	      _FormGroup2['default'],
	      this.props,
	      children
	    );
	  };

	  InputBase.prototype.renderChildren = function renderChildren() {
	    return !this.isCheckboxOrRadio() ? [this.renderLabel(), this.renderWrapper([this.renderInputGroup(this.renderInput()), this.renderIcon(), this.renderHelp()])] : this.renderWrapper([this.renderCheckboxAndRadioWrapper(this.renderLabel(this.renderInput())), this.renderHelp()]);
	  };

	  InputBase.prototype.render = function render() {
	    var children = this.renderChildren();
	    return this.renderFormGroup(children);
	  };

	  return InputBase;
	})(_react2['default'].Component);

	InputBase.propTypes = {
	  type: _react2['default'].PropTypes.string,
	  label: _react2['default'].PropTypes.node,
	  help: _react2['default'].PropTypes.node,
	  addonBefore: _react2['default'].PropTypes.node,
	  addonAfter: _react2['default'].PropTypes.node,
	  buttonBefore: _react2['default'].PropTypes.node,
	  buttonAfter: _react2['default'].PropTypes.node,
	  bsSize: _react2['default'].PropTypes.oneOf(['small', 'medium', 'large']),
	  bsStyle: _react2['default'].PropTypes.oneOf(['success', 'warning', 'error']),
	  hasFeedback: _react2['default'].PropTypes.bool,
	  feedbackIcon: _react2['default'].PropTypes.node,
	  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	  groupClassName: _react2['default'].PropTypes.string,
	  wrapperClassName: _react2['default'].PropTypes.string,
	  labelClassName: _react2['default'].PropTypes.string,
	  multiple: _react2['default'].PropTypes.bool,
	  disabled: _react2['default'].PropTypes.bool,
	  value: _react2['default'].PropTypes.any
	};

	InputBase.defaultProps = {
	  disabled: false,
	  hasFeedback: false,
	  multiple: false
	};

	exports['default'] = InputBase;
	module.exports = exports['default'];

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Glyphicon = _react2['default'].createClass({
	  displayName: 'Glyphicon',

	  propTypes: {
	    /**
	     * bootstrap className
	     * @private
	     */
	    bsClass: _react2['default'].PropTypes.string,
	    /**
	     * An icon name. See e.g. http://getbootstrap.com/components/#glyphicons
	     */
	    glyph: _react2['default'].PropTypes.string.isRequired,
	    /**
	     * Adds 'form-control-feedback' class
	     * @private
	     */
	    formControlFeedback: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'glyphicon',
	      formControlFeedback: false
	    };
	  },

	  render: function render() {
	    var _classNames;

	    var className = _classnames2['default'](this.props.className, (_classNames = {}, _classNames[this.props.bsClass] = true, _classNames['glyphicon-' + this.props.glyph] = true, _classNames['form-control-feedback'] = this.props.formControlFeedback, _classNames));

	    return _react2['default'].createElement(
	      'span',
	      _extends({}, this.props, { className: className }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Glyphicon;
	module.exports = exports['default'];

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var ButtonGroup = _react2['default'].createClass({
	  displayName: 'ButtonGroup',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    vertical: _react2['default'].PropTypes.bool,
	    justified: _react2['default'].PropTypes.bool,
	    /**
	     * Display block buttons, only useful when used with the "vertical" prop.
	     * @type {bool}
	     */
	    block: _utilsCustomPropTypes2['default'].all([_react2['default'].PropTypes.bool, function (props) {
	      if (props.block && !props.vertical) {
	        return new Error('The block property requires the vertical property to be set to have any effect');
	      }
	    }])
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      block: false,
	      bsClass: 'button-group',
	      justified: false,
	      vertical: false
	    };
	  },

	  render: function render() {
	    var classes = this.getBsClassSet();
	    classes['btn-group'] = !this.props.vertical;
	    classes['btn-group-vertical'] = this.props.vertical;
	    classes['btn-group-justified'] = this.props.justified;
	    classes['btn-block'] = this.props.block;

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = ButtonGroup;
	module.exports = exports['default'];

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var ButtonToolbar = _react2['default'].createClass({
	  displayName: 'ButtonToolbar',

	  mixins: [_BootstrapMixin2['default']],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'button-toolbar'
	    };
	  },

	  render: function render() {
	    var classes = this.getBsClassSet();

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        role: 'toolbar',
	        className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = ButtonToolbar;
	module.exports = exports['default'];

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _utilsValidComponentChildren = __webpack_require__(221);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _Glyphicon = __webpack_require__(245);

	var _Glyphicon2 = _interopRequireDefault(_Glyphicon);

	var Carousel = _react2['default'].createClass({
	  displayName: 'Carousel',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    slide: _react2['default'].PropTypes.bool,
	    indicators: _react2['default'].PropTypes.bool,
	    interval: _react2['default'].PropTypes.number,
	    controls: _react2['default'].PropTypes.bool,
	    pauseOnHover: _react2['default'].PropTypes.bool,
	    wrap: _react2['default'].PropTypes.bool,
	    onSelect: _react2['default'].PropTypes.func,
	    onSlideEnd: _react2['default'].PropTypes.func,
	    activeIndex: _react2['default'].PropTypes.number,
	    defaultActiveIndex: _react2['default'].PropTypes.number,
	    direction: _react2['default'].PropTypes.oneOf(['prev', 'next']),
	    prevIcon: _react2['default'].PropTypes.node,
	    nextIcon: _react2['default'].PropTypes.node
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      slide: true,
	      interval: 5000,
	      pauseOnHover: true,
	      wrap: true,
	      indicators: true,
	      controls: true,
	      prevIcon: _react2['default'].createElement(_Glyphicon2['default'], { glyph: 'chevron-left' }),
	      nextIcon: _react2['default'].createElement(_Glyphicon2['default'], { glyph: 'chevron-right' })
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      activeIndex: this.props.defaultActiveIndex == null ? 0 : this.props.defaultActiveIndex,
	      previousActiveIndex: null,
	      direction: null
	    };
	  },

	  getDirection: function getDirection(prevIndex, index) {
	    if (prevIndex === index) {
	      return null;
	    }

	    return prevIndex > index ? 'prev' : 'next';
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var activeIndex = this.getActiveIndex();

	    if (nextProps.activeIndex != null && nextProps.activeIndex !== activeIndex) {
	      clearTimeout(this.timeout);
	      this.setState({
	        previousActiveIndex: activeIndex,
	        direction: nextProps.direction != null ? nextProps.direction : this.getDirection(activeIndex, nextProps.activeIndex)
	      });
	    }
	  },

	  componentDidMount: function componentDidMount() {
	    this.waitForNext();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    clearTimeout(this.timeout);
	  },

	  next: function next(e) {
	    if (e) {
	      e.preventDefault();
	    }

	    var index = this.getActiveIndex() + 1;
	    var count = _utilsValidComponentChildren2['default'].numberOf(this.props.children);

	    if (index > count - 1) {
	      if (!this.props.wrap) {
	        return;
	      }
	      index = 0;
	    }

	    this.handleSelect(index, 'next');
	  },

	  prev: function prev(e) {
	    if (e) {
	      e.preventDefault();
	    }

	    var index = this.getActiveIndex() - 1;

	    if (index < 0) {
	      if (!this.props.wrap) {
	        return;
	      }
	      index = _utilsValidComponentChildren2['default'].numberOf(this.props.children) - 1;
	    }

	    this.handleSelect(index, 'prev');
	  },

	  pause: function pause() {
	    this.isPaused = true;
	    clearTimeout(this.timeout);
	  },

	  play: function play() {
	    this.isPaused = false;
	    this.waitForNext();
	  },

	  waitForNext: function waitForNext() {
	    if (!this.isPaused && this.props.slide && this.props.interval && this.props.activeIndex == null) {
	      this.timeout = setTimeout(this.next, this.props.interval);
	    }
	  },

	  handleMouseOver: function handleMouseOver() {
	    if (this.props.pauseOnHover) {
	      this.pause();
	    }
	  },

	  handleMouseOut: function handleMouseOut() {
	    if (this.isPaused) {
	      this.play();
	    }
	  },

	  render: function render() {
	    var classes = {
	      carousel: true,
	      slide: this.props.slide
	    };

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, classes),
	        onMouseOver: this.handleMouseOver,
	        onMouseOut: this.handleMouseOut }),
	      this.props.indicators ? this.renderIndicators() : null,
	      _react2['default'].createElement(
	        'div',
	        { className: 'carousel-inner', ref: 'inner' },
	        _utilsValidComponentChildren2['default'].map(this.props.children, this.renderItem)
	      ),
	      this.props.controls ? this.renderControls() : null
	    );
	  },

	  renderPrev: function renderPrev() {
	    return _react2['default'].createElement(
	      'a',
	      { className: 'left carousel-control', href: '#prev', key: 0, onClick: this.prev },
	      this.props.prevIcon
	    );
	  },

	  renderNext: function renderNext() {
	    return _react2['default'].createElement(
	      'a',
	      { className: 'right carousel-control', href: '#next', key: 1, onClick: this.next },
	      this.props.nextIcon
	    );
	  },

	  renderControls: function renderControls() {
	    if (!this.props.wrap) {
	      var activeIndex = this.getActiveIndex();
	      var count = _utilsValidComponentChildren2['default'].numberOf(this.props.children);

	      return [activeIndex !== 0 ? this.renderPrev() : null, activeIndex !== count - 1 ? this.renderNext() : null];
	    }

	    return [this.renderPrev(), this.renderNext()];
	  },

	  renderIndicator: function renderIndicator(child, index) {
	    var className = index === this.getActiveIndex() ? 'active' : null;

	    return _react2['default'].createElement('li', {
	      key: index,
	      className: className,
	      onClick: this.handleSelect.bind(this, index, null) });
	  },

	  renderIndicators: function renderIndicators() {
	    var indicators = [];
	    _utilsValidComponentChildren2['default'].forEach(this.props.children, function (child, index) {
	      indicators.push(this.renderIndicator(child, index),

	      // Force whitespace between indicator elements, bootstrap
	      // requires this for correct spacing of elements.
	      ' ');
	    }, this);

	    return _react2['default'].createElement(
	      'ol',
	      { className: 'carousel-indicators' },
	      indicators
	    );
	  },

	  getActiveIndex: function getActiveIndex() {
	    return this.props.activeIndex != null ? this.props.activeIndex : this.state.activeIndex;
	  },

	  handleItemAnimateOutEnd: function handleItemAnimateOutEnd() {
	    this.setState({
	      previousActiveIndex: null,
	      direction: null
	    }, function () {
	      this.waitForNext();

	      if (this.props.onSlideEnd) {
	        this.props.onSlideEnd();
	      }
	    });
	  },

	  renderItem: function renderItem(child, index) {
	    var activeIndex = this.getActiveIndex();
	    var isActive = index === activeIndex;
	    var isPreviousActive = this.state.previousActiveIndex != null && this.state.previousActiveIndex === index && this.props.slide;

	    return _react.cloneElement(child, {
	      active: isActive,
	      ref: child.ref,
	      key: child.key ? child.key : index,
	      index: index,
	      animateOut: isPreviousActive,
	      animateIn: isActive && this.state.previousActiveIndex != null && this.props.slide,
	      direction: this.state.direction,
	      onAnimateOutEnd: isPreviousActive ? this.handleItemAnimateOutEnd : null
	    });
	  },

	  handleSelect: function handleSelect(index, direction) {
	    clearTimeout(this.timeout);

	    if (this.isMounted()) {
	      var previousActiveIndex = this.getActiveIndex();
	      direction = direction || this.getDirection(previousActiveIndex, index);

	      if (this.props.onSelect) {
	        this.props.onSelect(index, direction);
	      }

	      if (this.props.activeIndex == null && index !== previousActiveIndex) {
	        if (this.state.previousActiveIndex != null) {
	          // If currently animating don't activate the new index.
	          // TODO: look into queuing this canceled call and
	          // animating after the current animation has ended.
	          return;
	        }

	        this.setState({
	          activeIndex: index,
	          previousActiveIndex: previousActiveIndex,
	          direction: direction
	        });
	      }
	    }
	  }
	});

	exports['default'] = Carousel;
	module.exports = exports['default'];

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsTransitionEvents = __webpack_require__(250);

	var _utilsTransitionEvents2 = _interopRequireDefault(_utilsTransitionEvents);

	var CarouselItem = _react2['default'].createClass({
	  displayName: 'CarouselItem',

	  propTypes: {
	    direction: _react2['default'].PropTypes.oneOf(['prev', 'next']),
	    onAnimateOutEnd: _react2['default'].PropTypes.func,
	    active: _react2['default'].PropTypes.bool,
	    animateIn: _react2['default'].PropTypes.bool,
	    animateOut: _react2['default'].PropTypes.bool,
	    caption: _react2['default'].PropTypes.node,
	    index: _react2['default'].PropTypes.number
	  },

	  getInitialState: function getInitialState() {
	    return {
	      direction: null
	    };
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      active: false,
	      animateIn: false,
	      animateOut: false
	    };
	  },

	  handleAnimateOutEnd: function handleAnimateOutEnd() {
	    if (this.props.onAnimateOutEnd && this.isMounted()) {
	      this.props.onAnimateOutEnd(this.props.index);
	    }
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (this.props.active !== nextProps.active) {
	      this.setState({
	        direction: null
	      });
	    }
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    if (!this.props.active && prevProps.active) {
	      _utilsTransitionEvents2['default'].addEndEventListener(_react2['default'].findDOMNode(this), this.handleAnimateOutEnd);
	    }

	    if (this.props.active !== prevProps.active) {
	      setTimeout(this.startAnimation, 20);
	    }
	  },

	  startAnimation: function startAnimation() {
	    if (!this.isMounted()) {
	      return;
	    }

	    this.setState({
	      direction: this.props.direction === 'prev' ? 'right' : 'left'
	    });
	  },

	  render: function render() {
	    var classes = {
	      item: true,
	      active: this.props.active && !this.props.animateIn || this.props.animateOut,
	      next: this.props.active && this.props.animateIn && this.props.direction === 'next',
	      prev: this.props.active && this.props.animateIn && this.props.direction === 'prev'
	    };

	    if (this.state.direction && (this.props.animateIn || this.props.animateOut)) {
	      classes[this.state.direction] = true;
	    }

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children,
	      this.props.caption ? this.renderCaption() : null
	    );
	  },

	  renderCaption: function renderCaption() {
	    return _react2['default'].createElement(
	      'div',
	      { className: 'carousel-caption' },
	      this.props.caption
	    );
	  }
	});

	exports['default'] = CarouselItem;
	module.exports = exports['default'];

/***/ }),
/* 250 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This file contains a modified version of:
	 * https://github.com/facebook/react/blob/v0.12.0/src/addons/transitions/ReactTransitionEvents.js
	 *
	 * This source code is licensed under the BSD-style license found here:
	 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
	 * An additional grant of patent rights can be found here:
	 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
	 */

	'use strict';

	exports.__esModule = true;
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * EVENT_NAME_MAP is used to determine which event fired when a
	 * transition/animation ends, based on the style property used to
	 * define that event.
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    'transition': 'transitionend',
	    'WebkitTransition': 'webkitTransitionEnd',
	    'MozTransition': 'mozTransitionEnd',
	    'OTransition': 'oTransitionEnd',
	    'msTransition': 'MSTransitionEnd'
	  },

	  animationend: {
	    'animation': 'animationend',
	    'WebkitAnimation': 'webkitAnimationEnd',
	    'MozAnimation': 'mozAnimationEnd',
	    'OAnimation': 'oAnimationEnd',
	    'msAnimation': 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are useable, and if not remove them
	  // from the map
	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    var baseEvents = EVENT_NAME_MAP[baseEventName];
	    for (var styleName in baseEvents) {
	      if (styleName in style) {
	        endEvents.push(baseEvents[styleName]);
	        break;
	      }
	    }
	  }
	}

	if (canUseDOM) {
	  detectEvents();
	}

	// We use the raw {add|remove}EventListener() call because EventListener
	// does not know how to remove event listeners and we really should
	// clean up. Also, these events are not triggered in older browsers
	// so we should be A-OK here.

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var ReactTransitionEvents = {
	  addEndEventListener: function addEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      // If CSS transitions are not supported, trigger an "end animation"
	      // event immediately.
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },

	  removeEndEventListener: function removeEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	exports['default'] = ReactTransitionEvents;
	module.exports = exports['default'];

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _Object$keys = __webpack_require__(170)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _styleMaps = __webpack_require__(235);

	var _styleMaps2 = _interopRequireDefault(_styleMaps);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var Col = _react2['default'].createClass({
	  displayName: 'Col',

	  propTypes: {
	    /**
	     * The number of columns you wish to span
	     *
	     * for Extra small devices Phones (<768px)
	     *
	     * class-prefix `col-xs-`
	     */
	    xs: _react2['default'].PropTypes.number,
	    /**
	     * The number of columns you wish to span
	     *
	     * for Small devices Tablets (≥768px)
	     *
	     * class-prefix `col-sm-`
	     */
	    sm: _react2['default'].PropTypes.number,
	    /**
	     * The number of columns you wish to span
	     *
	     * for Medium devices Desktops (≥992px)
	     *
	     * class-prefix `col-md-`
	     */
	    md: _react2['default'].PropTypes.number,
	    /**
	     * The number of columns you wish to span
	     *
	     * for Large devices Desktops (≥1200px)
	     *
	     * class-prefix `col-lg-`
	     */
	    lg: _react2['default'].PropTypes.number,
	    /**
	     * Move columns to the right
	     *
	     * for Extra small devices Phones
	     *
	     * class-prefix `col-xs-offset-`
	     */
	    xsOffset: _react2['default'].PropTypes.number,
	    /**
	     * Move columns to the right
	     *
	     * for Small devices Tablets
	     *
	     * class-prefix `col-sm-offset-`
	     */
	    smOffset: _react2['default'].PropTypes.number,
	    /**
	     * Move columns to the right
	     *
	     * for Medium devices Desktops
	     *
	     * class-prefix `col-md-offset-`
	     */
	    mdOffset: _react2['default'].PropTypes.number,
	    /**
	     * Move columns to the right
	     *
	     * for Large devices Desktops
	     *
	     * class-prefix `col-lg-offset-`
	     */
	    lgOffset: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the right
	     *
	     * for Extra small devices Phones
	     *
	     * class-prefix `col-xs-push-`
	     */
	    xsPush: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the right
	     *
	     * for Small devices Tablets
	     *
	     * class-prefix `col-sm-push-`
	     */
	    smPush: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the right
	     *
	     * for Medium devices Desktops
	     *
	     * class-prefix `col-md-push-`
	     */
	    mdPush: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the right
	     *
	     * for Large devices Desktops
	     *
	     * class-prefix `col-lg-push-`
	     */
	    lgPush: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the left
	     *
	     * for Extra small devices Phones
	     *
	     * class-prefix `col-xs-pull-`
	     */
	    xsPull: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the left
	     *
	     * for Small devices Tablets
	     *
	     * class-prefix `col-sm-pull-`
	     */
	    smPull: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the left
	     *
	     * for Medium devices Desktops
	     *
	     * class-prefix `col-md-pull-`
	     */
	    mdPull: _react2['default'].PropTypes.number,
	    /**
	     * Change the order of grid columns to the left
	     *
	     * for Large devices Desktops
	     *
	     * class-prefix `col-lg-pull-`
	     */
	    lgPull: _react2['default'].PropTypes.number,
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _utilsCustomPropTypes2['default'].elementType
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      componentClass: 'div'
	    };
	  },

	  render: function render() {
	    var ComponentClass = this.props.componentClass;
	    var classes = {};

	    _Object$keys(_styleMaps2['default'].SIZES).forEach(function (key) {
	      var size = _styleMaps2['default'].SIZES[key];
	      var prop = size;
	      var classPart = size + '-';

	      if (this.props[prop]) {
	        classes['col-' + classPart + this.props[prop]] = true;
	      }

	      prop = size + 'Offset';
	      classPart = size + '-offset-';
	      if (this.props[prop] >= 0) {
	        classes['col-' + classPart + this.props[prop]] = true;
	      }

	      prop = size + 'Push';
	      classPart = size + '-push-';
	      if (this.props[prop] >= 0) {
	        classes['col-' + classPart + this.props[prop]] = true;
	      }

	      prop = size + 'Pull';
	      classPart = size + '-pull-';
	      if (this.props[prop] >= 0) {
	        classes['col-' + classPart + this.props[prop]] = true;
	      }
	    }, this);

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Col;
	module.exports = exports['default'];

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _utilsTransitionEvents = __webpack_require__(250);

	var _utilsTransitionEvents2 = _interopRequireDefault(_utilsTransitionEvents);

	var _utilsDeprecationWarning = __webpack_require__(187);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	var CollapsibleMixin = {

	  propTypes: {
	    defaultExpanded: _react2['default'].PropTypes.bool,
	    expanded: _react2['default'].PropTypes.bool
	  },

	  getInitialState: function getInitialState() {
	    var defaultExpanded = this.props.defaultExpanded != null ? this.props.defaultExpanded : !!this.props.expanded;

	    return {
	      expanded: defaultExpanded,
	      collapsing: false
	    };
	  },

	  componentWillMount: function componentWillMount() {
	    _utilsDeprecationWarning2['default']('CollapsibleMixin', 'Collapse Component');
	  },

	  componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
	    var willExpanded = nextProps.expanded != null ? nextProps.expanded : nextState.expanded;
	    if (willExpanded === this.isExpanded()) {
	      return;
	    }

	    // if the expanded state is being toggled, ensure node has a dimension value
	    // this is needed for the animation to work and needs to be set before
	    // the collapsing class is applied (after collapsing is applied the in class
	    // is removed and the node's dimension will be wrong)

	    var node = this.getCollapsibleDOMNode();
	    var dimension = this.dimension();
	    var value = '0';

	    if (!willExpanded) {
	      value = this.getCollapsibleDimensionValue();
	    }

	    node.style[dimension] = value + 'px';

	    this._afterWillUpdate();
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
	    // check if expanded is being toggled; if so, set collapsing
	    this._checkToggleCollapsing(prevProps, prevState);

	    // check if collapsing was turned on; if so, start animation
	    this._checkStartAnimation();
	  },

	  // helps enable test stubs
	  _afterWillUpdate: function _afterWillUpdate() {},

	  _checkStartAnimation: function _checkStartAnimation() {
	    if (!this.state.collapsing) {
	      return;
	    }

	    var node = this.getCollapsibleDOMNode();
	    var dimension = this.dimension();
	    var value = this.getCollapsibleDimensionValue();

	    // setting the dimension here starts the transition animation
	    var result = undefined;
	    if (this.isExpanded()) {
	      result = value + 'px';
	    } else {
	      result = '0px';
	    }
	    node.style[dimension] = result;
	  },

	  _checkToggleCollapsing: function _checkToggleCollapsing(prevProps, prevState) {
	    var wasExpanded = prevProps.expanded != null ? prevProps.expanded : prevState.expanded;
	    var isExpanded = this.isExpanded();
	    if (wasExpanded !== isExpanded) {
	      if (wasExpanded) {
	        this._handleCollapse();
	      } else {
	        this._handleExpand();
	      }
	    }
	  },

	  _handleExpand: function _handleExpand() {
	    var _this = this;

	    var node = this.getCollapsibleDOMNode();
	    var dimension = this.dimension();

	    var complete = function complete() {
	      _this._removeEndEventListener(node, complete);
	      // remove dimension value - this ensures the collapsible item can grow
	      // in dimension after initial display (such as an image loading)
	      node.style[dimension] = '';
	      _this.setState({
	        collapsing: false
	      });
	    };

	    this._addEndEventListener(node, complete);

	    this.setState({
	      collapsing: true
	    });
	  },

	  _handleCollapse: function _handleCollapse() {
	    var _this2 = this;

	    var node = this.getCollapsibleDOMNode();

	    var complete = function complete() {
	      _this2._removeEndEventListener(node, complete);
	      _this2.setState({
	        collapsing: false
	      });
	    };

	    this._addEndEventListener(node, complete);

	    this.setState({
	      collapsing: true
	    });
	  },

	  // helps enable test stubs
	  _addEndEventListener: function _addEndEventListener(node, complete) {
	    _utilsTransitionEvents2['default'].addEndEventListener(node, complete);
	  },

	  // helps enable test stubs
	  _removeEndEventListener: function _removeEndEventListener(node, complete) {
	    _utilsTransitionEvents2['default'].removeEndEventListener(node, complete);
	  },

	  dimension: function dimension() {
	    return typeof this.getCollapsibleDimension === 'function' ? this.getCollapsibleDimension() : 'height';
	  },

	  isExpanded: function isExpanded() {
	    return this.props.expanded != null ? this.props.expanded : this.state.expanded;
	  },

	  getCollapsibleClassSet: function getCollapsibleClassSet(className) {
	    var classes = {};

	    if (typeof className === 'string') {
	      className.split(' ').forEach(function (subClasses) {
	        if (subClasses) {
	          classes[subClasses] = true;
	        }
	      });
	    }

	    classes.collapsing = this.state.collapsing;
	    classes.collapse = !this.state.collapsing;
	    classes['in'] = this.isExpanded() && !this.state.collapsing;

	    return classes;
	  }
	};

	exports['default'] = CollapsibleMixin;
	module.exports = exports['default'];

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _Collapse = __webpack_require__(254);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(221);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsCreateChainedFunction = __webpack_require__(222);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var CollapsibleNav = _react2['default'].createClass({
	  displayName: 'CollapsibleNav',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    onSelect: _react2['default'].PropTypes.func,
	    activeHref: _react2['default'].PropTypes.string,
	    activeKey: _react2['default'].PropTypes.any,
	    collapsible: _react2['default'].PropTypes.bool,
	    expanded: _react2['default'].PropTypes.bool,
	    eventKey: _react2['default'].PropTypes.any
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      collapsible: false,
	      expanded: false
	    };
	  },

	  render: function render() {
	    /*
	     * this.props.collapsible is set in NavBar when an eventKey is supplied.
	     */
	    var classes = this.props.collapsible ? 'navbar-collapse' : null;
	    var renderChildren = this.props.collapsible ? this.renderCollapsibleNavChildren : this.renderChildren;

	    var nav = _react2['default'].createElement(
	      'div',
	      { eventKey: this.props.eventKey, className: _classnames2['default'](this.props.className, classes) },
	      _utilsValidComponentChildren2['default'].map(this.props.children, renderChildren)
	    );

	    if (this.props.collapsible) {
	      return _react2['default'].createElement(
	        _Collapse2['default'],
	        { 'in': this.props.expanded },
	        nav
	      );
	    } else {
	      return nav;
	    }
	  },

	  getChildActiveProp: function getChildActiveProp(child) {
	    if (child.props.active) {
	      return true;
	    }
	    if (this.props.activeKey != null) {
	      if (child.props.eventKey === this.props.activeKey) {
	        return true;
	      }
	    }
	    if (this.props.activeHref != null) {
	      if (child.props.href === this.props.activeHref) {
	        return true;
	      }
	    }

	    return child.props.active;
	  },

	  renderChildren: function renderChildren(child, index) {
	    var key = child.key ? child.key : index;
	    return _react.cloneElement(child, {
	      activeKey: this.props.activeKey,
	      activeHref: this.props.activeHref,
	      ref: 'nocollapse_' + key,
	      key: key,
	      navItem: true
	    });
	  },

	  renderCollapsibleNavChildren: function renderCollapsibleNavChildren(child, index) {
	    var key = child.key ? child.key : index;
	    return _react.cloneElement(child, {
	      active: this.getChildActiveProp(child),
	      activeKey: this.props.activeKey,
	      activeHref: this.props.activeHref,
	      onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
	      ref: 'collapsible_' + key,
	      key: key,
	      navItem: true
	    });
	  }
	});

	exports['default'] = CollapsibleNav;
	module.exports = exports['default'];

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _reactOverlaysLibTransition = __webpack_require__(255);

	var _reactOverlaysLibTransition2 = _interopRequireDefault(_reactOverlaysLibTransition);

	var _utilsDomUtils = __webpack_require__(198);

	var _utilsDomUtils2 = _interopRequireDefault(_utilsDomUtils);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var _utilsDeprecationWarning = __webpack_require__(187);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	var _utilsCreateChainedFunction = __webpack_require__(222);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var capitalize = function capitalize(str) {
	  return str[0].toUpperCase() + str.substr(1);
	};

	// reading a dimension prop will cause the browser to recalculate,
	// which will let our animations work
	var triggerBrowserReflow = function triggerBrowserReflow(node) {
	  return node.offsetHeight;
	};

	var MARGINS = {
	  height: ['marginTop', 'marginBottom'],
	  width: ['marginLeft', 'marginRight']
	};

	function getDimensionValue(dimension, elem) {
	  var value = elem['offset' + capitalize(dimension)];
	  var margins = MARGINS[dimension];

	  return value + parseInt(_utilsDomUtils2['default'].css(elem, margins[0]), 10) + parseInt(_utilsDomUtils2['default'].css(elem, margins[1]), 10);
	}

	var Collapse = (function (_React$Component) {
	  _inherits(Collapse, _React$Component);

	  function Collapse(props, context) {
	    _classCallCheck(this, Collapse);

	    _React$Component.call(this, props, context);

	    this.onEnterListener = this.handleEnter.bind(this);
	    this.onEnteringListener = this.handleEntering.bind(this);
	    this.onEnteredListener = this.handleEntered.bind(this);
	    this.onExitListener = this.handleExit.bind(this);
	    this.onExitingListener = this.handleExiting.bind(this);
	  }

	  // Explicitly copied from Transition for doc generation.
	  // TODO: Remove duplication once #977 is resolved.

	  Collapse.prototype.render = function render() {
	    var enter = _utilsCreateChainedFunction2['default'](this.onEnterListener, this.props.onEnter);
	    var entering = _utilsCreateChainedFunction2['default'](this.onEnteringListener, this.props.onEntering);
	    var entered = _utilsCreateChainedFunction2['default'](this.onEnteredListener, this.props.onEntered);
	    var exit = _utilsCreateChainedFunction2['default'](this.onExitListener, this.props.onExit);
	    var exiting = _utilsCreateChainedFunction2['default'](this.onExitingListener, this.props.onExiting);

	    return _react2['default'].createElement(
	      _reactOverlaysLibTransition2['default'],
	      _extends({
	        ref: 'transition'
	      }, this.props, {
	        'aria-expanded': this.props.role ? this.props['in'] : null,
	        className: this._dimension() === 'width' ? 'width' : '',
	        exitedClassName: 'collapse',
	        exitingClassName: 'collapsing',
	        enteredClassName: 'collapse in',
	        enteringClassName: 'collapsing',
	        onEnter: enter,
	        onEntering: entering,
	        onEntered: entered,
	        onExit: exit,
	        onExiting: exiting,
	        onExited: this.props.onExited
	      }),
	      this.props.children
	    );
	  };

	  /* -- Expanding -- */

	  Collapse.prototype.handleEnter = function handleEnter(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = '0';
	  };

	  Collapse.prototype.handleEntering = function handleEntering(elem) {
	    var dimension = this._dimension();

	    elem.style[dimension] = this._getScrollDimensionValue(elem, dimension);
	  };

	  Collapse.prototype.handleEntered = function handleEntered(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = null;
	  };

	  /* -- Collapsing -- */

	  Collapse.prototype.handleExit = function handleExit(elem) {
	    var dimension = this._dimension();

	    elem.style[dimension] = this.props.getDimensionValue(dimension, elem) + 'px';
	  };

	  Collapse.prototype.handleExiting = function handleExiting(elem) {
	    var dimension = this._dimension();

	    triggerBrowserReflow(elem);
	    elem.style[dimension] = '0';
	  };

	  Collapse.prototype._dimension = function _dimension() {
	    return typeof this.props.dimension === 'function' ? this.props.dimension() : this.props.dimension;
	  };

	  // for testing

	  Collapse.prototype._getTransitionInstance = function _getTransitionInstance() {
	    return this.refs.transition;
	  };

	  Collapse.prototype._getScrollDimensionValue = function _getScrollDimensionValue(elem, dimension) {
	    return elem['scroll' + capitalize(dimension)] + 'px';
	  };

	  return Collapse;
	})(_react2['default'].Component);

	Collapse.propTypes = {
	  /**
	   * Show the component; triggers the expand or collapse animation
	   */
	  'in': _react2['default'].PropTypes.bool,

	  /**
	   * Unmount the component (remove it from the DOM) when it is collapsed
	   */
	  unmountOnExit: _react2['default'].PropTypes.bool,

	  /**
	   * Run the expand animation when the component mounts, if it is initially
	   * shown
	   */
	  transitionAppear: _react2['default'].PropTypes.bool,

	  /**
	   * Duration of the collapse animation in milliseconds, to ensure that
	   * finishing callbacks are fired even if the original browser transition end
	   * events are canceled
	   */
	  timeout: _react2['default'].PropTypes.number,

	  /**
	   * duration
	   * @private
	   */
	  duration: _utilsCustomPropTypes2['default'].all([_react2['default'].PropTypes.number, function (props) {
	    if (props.duration != null) {
	      _utilsDeprecationWarning2['default']('Collapse `duration`', 'the `timeout` prop');
	    }
	    return null;
	  }]),

	  /**
	   * Callback fired before the component expands
	   */
	  onEnter: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component starts to expand
	   */
	  onEntering: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component has expanded
	   */
	  onEntered: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired before the component collapses
	   */
	  onExit: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component starts to collapse
	   */
	  onExiting: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component has collapsed
	   */
	  onExited: _react2['default'].PropTypes.func,

	  /**
	   * The dimension used when collapsing, or a function that returns the
	   * dimension
	   *
	   * _Note: Bootstrap only partially supports 'width'!
	   * You will need to supply your own CSS animation for the `.width` CSS class._
	   */
	  dimension: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.oneOf(['height', 'width']), _react2['default'].PropTypes.func]),

	  /**
	   * Function that returns the height or width of the animating DOM node
	   *
	   * Allows for providing some custom logic for how much the Collapse component
	   * should animate in its specified dimension. Called with the current
	   * dimension prop value and the DOM node.
	   */
	  getDimensionValue: _react2['default'].PropTypes.func,

	  /**
	   * ARIA role of collapsible element
	   */
	  role: _react2['default'].PropTypes.string
	};

	Collapse.defaultProps = {
	  'in': false,
	  timeout: 300,
	  unmountOnExit: false,
	  transitionAppear: false,

	  dimension: 'height',
	  getDimensionValue: getDimensionValue
	};

	exports['default'] = Collapse;
	module.exports = exports['default'];

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _domHelpersTransitionProperties = __webpack_require__(256);

	var _domHelpersTransitionProperties2 = _interopRequireDefault(_domHelpersTransitionProperties);

	var _domHelpersEventsOn = __webpack_require__(257);

	var _domHelpersEventsOn2 = _interopRequireDefault(_domHelpersEventsOn);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var transitionEndEvent = _domHelpersTransitionProperties2['default'].end;

	var UNMOUNTED = 0;
	exports.UNMOUNTED = UNMOUNTED;
	var EXITED = 1;
	exports.EXITED = EXITED;
	var ENTERING = 2;
	exports.ENTERING = ENTERING;
	var ENTERED = 3;
	exports.ENTERED = ENTERED;
	var EXITING = 4;

	exports.EXITING = EXITING;
	/**
	 * The Transition component lets you define and run css transitions with a simple declarative api.
	 * It works similar to React's own [CSSTransitionGroup](http://facebook.github.io/react/docs/animation.html#high-level-api-reactcsstransitiongroup)
	 * but is specifically optimized for transitioning a single child "in" or "out".
	 *
	 * You don't even need to use class based css transitions if you don't want to (but it is easiest).
	 * The extensive set of lifecyle callbacks means you have control over
	 * the transitioning now at each step of the way.
	 */

	var Transition = (function (_React$Component) {
	  function Transition(props, context) {
	    _classCallCheck(this, Transition);

	    _React$Component.call(this, props, context);

	    var initialStatus = undefined;
	    if (props['in']) {
	      // Start enter transition in componentDidMount.
	      initialStatus = props.transitionAppear ? EXITED : ENTERED;
	    } else {
	      initialStatus = props.unmountOnExit ? UNMOUNTED : EXITED;
	    }
	    this.state = { status: initialStatus };

	    this.nextCallback = null;
	  }

	  _inherits(Transition, _React$Component);

	  Transition.prototype.componentDidMount = function componentDidMount() {
	    if (this.props.transitionAppear && this.props['in']) {
	      this.performEnter(this.props);
	    }
	  };

	  Transition.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var status = this.state.status;
	    if (nextProps['in']) {
	      if (status === EXITING) {
	        this.performEnter(nextProps);
	      } else if (this.props.unmountOnExit) {
	        if (status === UNMOUNTED) {
	          // Start enter transition in componentDidUpdate.
	          this.setState({ status: EXITED });
	        }
	      } else if (status === EXITED) {
	        this.performEnter(nextProps);
	      }

	      // Otherwise we're already entering or entered.
	    } else {
	      if (status === ENTERING || status === ENTERED) {
	        this.performExit(nextProps);
	      }

	      // Otherwise we're already exited or exiting.
	    }
	  };

	  Transition.prototype.componentDidUpdate = function componentDidUpdate() {
	    if (this.props.unmountOnExit && this.state.status === EXITED) {
	      // EXITED is always a transitional state to either ENTERING or UNMOUNTED
	      // when using unmountOnExit.
	      if (this.props['in']) {
	        this.performEnter(this.props);
	      } else {
	        this.setState({ status: UNMOUNTED });
	      }
	    }
	  };

	  Transition.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  Transition.prototype.performEnter = function performEnter(props) {
	    var _this = this;

	    this.cancelNextCallback();
	    var node = _react2['default'].findDOMNode(this);

	    // Not this.props, because we might be about to receive new props.
	    props.onEnter(node);

	    this.safeSetState({ status: ENTERING }, function () {
	      _this.props.onEntering(node);

	      _this.onTransitionEnd(node, function () {
	        _this.safeSetState({ status: ENTERED }, function () {
	          _this.props.onEntered(node);
	        });
	      });
	    });
	  };

	  Transition.prototype.performExit = function performExit(props) {
	    var _this2 = this;

	    this.cancelNextCallback();
	    var node = _react2['default'].findDOMNode(this);

	    // Not this.props, because we might be about to receive new props.
	    props.onExit(node);

	    this.safeSetState({ status: EXITING }, function () {
	      _this2.props.onExiting(node);

	      _this2.onTransitionEnd(node, function () {
	        _this2.safeSetState({ status: EXITED }, function () {
	          _this2.props.onExited(node);
	        });
	      });
	    });
	  };

	  Transition.prototype.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  Transition.prototype.safeSetState = function safeSetState(nextState, callback) {
	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    this.setState(nextState, this.setNextCallback(callback));
	  };

	  Transition.prototype.setNextCallback = function setNextCallback(callback) {
	    var _this3 = this;

	    var active = true;

	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this3.nextCallback = null;

	        callback(event);
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  Transition.prototype.onTransitionEnd = function onTransitionEnd(node, handler) {
	    this.setNextCallback(handler);

	    if (node) {
	      _domHelpersEventsOn2['default'](node, transitionEndEvent, this.nextCallback);
	      setTimeout(this.nextCallback, this.props.timeout);
	    } else {
	      setTimeout(this.nextCallback, 0);
	    }
	  };

	  Transition.prototype.render = function render() {
	    var status = this.state.status;
	    if (status === UNMOUNTED) {
	      return null;
	    }

	    var _props = this.props;
	    var children = _props.children;
	    var className = _props.className;

	    var childProps = _objectWithoutProperties(_props, ['children', 'className']);

	    Object.keys(Transition.propTypes).forEach(function (key) {
	      return delete childProps[key];
	    });

	    var transitionClassName = undefined;
	    if (status === EXITED) {
	      transitionClassName = this.props.exitedClassName;
	    } else if (status === ENTERING) {
	      transitionClassName = this.props.enteringClassName;
	    } else if (status === ENTERED) {
	      transitionClassName = this.props.enteredClassName;
	    } else if (status === EXITING) {
	      transitionClassName = this.props.exitingClassName;
	    }

	    var child = _react2['default'].Children.only(children);
	    return _react2['default'].cloneElement(child, _extends({}, childProps, {
	      className: _classnames2['default'](child.props.className, className, transitionClassName)
	    }));
	  };

	  return Transition;
	})(_react2['default'].Component);

	Transition.propTypes = {
	  /**
	   * Show the component; triggers the enter or exit animation
	   */
	  'in': _react2['default'].PropTypes.bool,

	  /**
	   * Unmount the component (remove it from the DOM) when it is not shown
	   */
	  unmountOnExit: _react2['default'].PropTypes.bool,

	  /**
	   * Run the enter animation when the component mounts, if it is initially
	   * shown
	   */
	  transitionAppear: _react2['default'].PropTypes.bool,

	  /**
	   * A Timeout for the animation, in milliseconds, to ensure that a node doesn't
	   * transition indefinately if the browser transitionEnd events are
	   * canceled or interrupted.
	   *
	   * By default this is set to a high number (5 seconds) as a failsafe. You should consider
	   * setting this to the duration of your animation (or a bit above it).
	   */
	  timeout: _react2['default'].PropTypes.number,

	  /**
	   * CSS class or classes applied when the component is exited
	   */
	  exitedClassName: _react2['default'].PropTypes.string,
	  /**
	   * CSS class or classes applied while the component is exiting
	   */
	  exitingClassName: _react2['default'].PropTypes.string,
	  /**
	   * CSS class or classes applied when the component is entered
	   */
	  enteredClassName: _react2['default'].PropTypes.string,
	  /**
	   * CSS class or classes applied while the component is entering
	   */
	  enteringClassName: _react2['default'].PropTypes.string,

	  /**
	   * Callback fired before the "entering" classes are applied
	   */
	  onEnter: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the "entering" classes are applied
	   */
	  onEntering: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the "enter" classes are applied
	   */
	  onEntered: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired before the "exiting" classes are applied
	   */
	  onExit: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the "exiting" classes are applied
	   */
	  onExiting: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the "exited" classes are applied
	   */
	  onExited: _react2['default'].PropTypes.func
	};

	// Name the function so it is clearer in the documentation
	function noop() {}

	Transition.displayName = 'Transition';

	Transition.defaultProps = {
	  'in': false,
	  unmountOnExit: false,
	  transitionAppear: false,

	  timeout: 5000,

	  onEnter: noop,
	  onEntering: noop,
	  onEntered: noop,

	  onExit: noop,
	  onExiting: noop,
	  onExited: noop
	};

	exports['default'] = Transition;

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var canUseDOM = __webpack_require__(199);

	var has = Object.prototype.hasOwnProperty,
	    transform = 'transform',
	    transition = {},
	    transitionTiming,
	    transitionDuration,
	    transitionProperty,
	    transitionDelay;

	if (canUseDOM) {
	  transition = getTransitionProperties();

	  transform = transition.prefix + transform;

	  transitionProperty = transition.prefix + 'transition-property';
	  transitionDuration = transition.prefix + 'transition-duration';
	  transitionDelay = transition.prefix + 'transition-delay';
	  transitionTiming = transition.prefix + 'transition-timing-function';
	}

	module.exports = {
	  transform: transform,
	  end: transition.end,
	  property: transitionProperty,
	  timing: transitionTiming,
	  delay: transitionDelay,
	  duration: transitionDuration
	};

	function getTransitionProperties() {
	  var endEvent,
	      prefix = '',
	      transitions = {
	    O: 'otransitionend',
	    Moz: 'transitionend',
	    Webkit: 'webkitTransitionEnd',
	    ms: 'MSTransitionEnd'
	  };

	  var element = document.createElement('div');

	  for (var vendor in transitions) if (has.call(transitions, vendor)) {
	    if (element.style[vendor + 'TransitionProperty'] !== undefined) {
	      prefix = '-' + vendor.toLowerCase() + '-';
	      endEvent = transitions[vendor];
	      break;
	    }
	  }

	  if (!endEvent && element.style.transitionProperty !== undefined) endEvent = 'transitionend';

	  return { end: endEvent, prefix: prefix };
	}

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var canUseDOM = __webpack_require__(199);
	var on = function on() {};

	if (canUseDOM) {
	  on = (function () {

	    if (document.addEventListener) return function (node, eventName, handler, capture) {
	      return node.addEventListener(eventName, handler, capture || false);
	    };else if (document.attachEvent) return function (node, eventName, handler) {
	      return node.attachEvent('on' + eventName, handler);
	    };
	  })();
	}

	module.exports = on;

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _keycode = __webpack_require__(259);

	var _keycode2 = _interopRequireDefault(_keycode);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _uncontrollable = __webpack_require__(260);

	var _uncontrollable2 = _interopRequireDefault(_uncontrollable);

	var _ButtonGroup = __webpack_require__(246);

	var _ButtonGroup2 = _interopRequireDefault(_ButtonGroup);

	var _DropdownToggle = __webpack_require__(264);

	var _DropdownToggle2 = _interopRequireDefault(_DropdownToggle);

	var _DropdownMenu = __webpack_require__(266);

	var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var _utilsValidComponentChildren = __webpack_require__(221);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsCreateChainedFunction = __webpack_require__(222);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _lodashCollectionFind = __webpack_require__(272);

	var _lodashCollectionFind2 = _interopRequireDefault(_lodashCollectionFind);

	var _lodashObjectOmit = __webpack_require__(321);

	var _lodashObjectOmit2 = _interopRequireDefault(_lodashObjectOmit);

	var _domHelpersActiveElement = __webpack_require__(204);

	var _domHelpersActiveElement2 = _interopRequireDefault(_domHelpersActiveElement);

	var _domHelpersQueryContains = __webpack_require__(203);

	var _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);

	var TOGGLE_REF = 'toggle-btn';

	var TOGGLE_ROLE = _DropdownToggle2['default'].defaultProps.bsRole;
	exports.TOGGLE_ROLE = TOGGLE_ROLE;
	var MENU_ROLE = _DropdownMenu2['default'].defaultProps.bsRole;

	exports.MENU_ROLE = MENU_ROLE;

	var Dropdown = (function (_React$Component) {
	  _inherits(Dropdown, _React$Component);

	  function Dropdown(props) {
	    _classCallCheck(this, Dropdown);

	    _React$Component.call(this, props);

	    this.Toggle = _DropdownToggle2['default'];

	    this.toggleOpen = this.toggleOpen.bind(this);
	    this.handleClick = this.handleClick.bind(this);
	    this.handleKeyDown = this.handleKeyDown.bind(this);
	    this.handleClose = this.handleClose.bind(this);
	    this.extractChildren = this.extractChildren.bind(this);

	    this.refineMenu = this.refineMenu.bind(this);
	    this.refineToggle = this.refineToggle.bind(this);

	    this.childExtractors = [{
	      key: 'toggle',
	      matches: function matches(child) {
	        return child.props.bsRole === TOGGLE_ROLE;
	      },
	      refine: this.refineToggle
	    }, {
	      key: 'menu',
	      exclusive: true,
	      matches: function matches(child) {
	        return child.props.bsRole === MENU_ROLE;
	      },
	      refine: this.refineMenu
	    }];

	    this.state = {};
	  }

	  Dropdown.prototype.componentDidMount = function componentDidMount() {
	    var menu = this.refs.menu;
	    if (this.props.open && menu.focusNext) {
	      menu.focusNext();
	    }
	  };

	  Dropdown.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
	    if (!nextProps.open && this.props.open) {
	      this._focusInDropdown = _domHelpersQueryContains2['default'](_react2['default'].findDOMNode(this.refs.menu), _domHelpersActiveElement2['default'](document));
	    }
	  };

	  Dropdown.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var menu = this.refs.menu;

	    if (this.props.open && !prevProps.open && menu.focusNext) {
	      menu.focusNext();
	    }

	    if (!this.props.open && prevProps.open) {
	      // if focus hasn't already moved from the menu lets return it
	      // to the toggle
	      if (this._focusInDropdown) {
	        this._focusInDropdown = false;
	        this.focus();
	      }
	    }
	  };

	  Dropdown.prototype.render = function render() {
	    var children = this.extractChildren();
	    var Component = this.props.componentClass;

	    var props = _lodashObjectOmit2['default'](this.props, ['id']);

	    var rootClasses = {
	      open: this.props.open,
	      dropdown: !this.props.dropup,
	      dropup: this.props.dropup
	    };

	    return _react2['default'].createElement(
	      Component,
	      _extends({}, props, {
	        tabIndex: '-1',
	        className: _classnames2['default'](this.props.className, rootClasses)
	      }),
	      children
	    );
	  };

	  Dropdown.prototype.toggleOpen = function toggleOpen() {
	    var open = !this.props.open;

	    if (this.props.onToggle) {
	      this.props.onToggle(open);
	    }
	  };

	  Dropdown.prototype.handleClick = function handleClick() {
	    if (this.props.disabled) {
	      return;
	    }

	    this.toggleOpen();
	  };

	  Dropdown.prototype.handleKeyDown = function handleKeyDown(event) {
	    var _this = this;

	    var focusNext = function focusNext() {
	      if (_this.refs.menu.focusNext) {
	        _this.refs.menu.focusNext();
	      }
	    };

	    switch (event.keyCode) {
	      case _keycode2['default'].codes.down:
	        if (!this.props.open) {
	          this.toggleOpen();
	        } else {
	          focusNext();
	        }
	        event.preventDefault();
	        break;
	      case _keycode2['default'].codes.esc:
	      case _keycode2['default'].codes.tab:
	        this.handleClose(event);
	        break;
	      default:
	    }
	  };

	  Dropdown.prototype.handleClose = function handleClose() {
	    if (!this.props.open) {
	      return;
	    }

	    this.toggleOpen();
	  };

	  Dropdown.prototype.focus = function focus() {
	    var toggle = _react2['default'].findDOMNode(this.refs[TOGGLE_REF]);

	    if (toggle && toggle.focus) {
	      toggle.focus();
	    }
	  };

	  Dropdown.prototype.extractChildren = function extractChildren() {
	    var _this2 = this;

	    var open = !!this.props.open;
	    var seen = {};

	    return _utilsValidComponentChildren2['default'].map(this.props.children, function (child) {
	      var extractor = _lodashCollectionFind2['default'](_this2.childExtractors, function (x) {
	        return x.matches(child);
	      });

	      if (extractor) {
	        if (seen[extractor.key]) {
	          return false;
	        }

	        seen[extractor.key] = extractor.exclusive;
	        child = extractor.refine(child, open);
	      }

	      return child;
	    });
	  };

	  Dropdown.prototype.refineMenu = function refineMenu(menu, open) {
	    var menuProps = {
	      ref: 'menu',
	      open: open,
	      labelledBy: this.props.id,
	      pullRight: this.props.pullRight
	    };

	    menuProps.onClose = _utilsCreateChainedFunction2['default'](menu.props.onClose, this.props.onClose, this.handleClose);

	    menuProps.onSelect = _utilsCreateChainedFunction2['default'](menu.props.onSelect, this.props.onSelect, this.handleClose);

	    return _react.cloneElement(menu, menuProps, menu.props.children);
	  };

	  Dropdown.prototype.refineToggle = function refineToggle(toggle, open) {
	    var toggleProps = {
	      open: open,
	      id: this.props.id,
	      ref: TOGGLE_REF
	    };

	    toggleProps.onClick = _utilsCreateChainedFunction2['default'](toggle.props.onClick, this.handleClick);

	    toggleProps.onKeyDown = _utilsCreateChainedFunction2['default'](toggle.props.onKeyDown, this.handleKeyDown);

	    return _react.cloneElement(toggle, toggleProps, toggle.props.children);
	  };

	  return Dropdown;
	})(_react2['default'].Component);

	Dropdown.Toggle = _DropdownToggle2['default'];

	Dropdown.TOGGLE_REF = TOGGLE_REF;

	Dropdown.defaultProps = {
	  componentClass: _ButtonGroup2['default']
	};

	Dropdown.propTypes = {
	  /**
	   * The menu will open above the dropdown button, instead of below it.
	   */
	  dropup: _react2['default'].PropTypes.bool,

	  /**
	   * An html id attribute, necessary for assistive technologies, such as screen readers.
	   * @type {string|number}
	   * @required
	   */
	  id: _utilsCustomPropTypes2['default'].isRequiredForA11y(_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

	  componentClass: _utilsCustomPropTypes2['default'].elementType,

	  /**
	   * The children of a Dropdown may be a `<Dropdown.Toggle/>` or a `<Dropdown.Menu/>`.
	   * @type {node}
	   */
	  children: _utilsCustomPropTypes2['default'].all([_utilsCustomPropTypes2['default'].requiredRoles(TOGGLE_ROLE, MENU_ROLE), _utilsCustomPropTypes2['default'].exclusiveRoles(MENU_ROLE)]),

	  /**
	   * Whether or not component is disabled.
	   */
	  disabled: _react2['default'].PropTypes.bool,

	  /**
	   * Align the menu to the right  side of the Dropdown toggle
	   */
	  pullRight: _react2['default'].PropTypes.bool,

	  /**
	   * Whether or not the Dropdown is visible.
	   *
	   * @controllable onToggle
	   */
	  open: _react2['default'].PropTypes.bool,

	  /**
	   * A callback fired when the Dropdown closes.
	   */
	  onClose: _react2['default'].PropTypes.func,

	  /**
	   * A callback fired when the Dropdown wishes to change visibility. Called with the requested
	   * `open` value.
	   *
	   * ```js
	   * function(Boolean isOpen) {}
	   * ```
	   * @controllable open
	   */
	  onToggle: _react2['default'].PropTypes.func,

	  /**
	   * A callback fired when a menu item is selected.
	   *
	   * ```js
	   * function(Object event, Any eventKey)
	   * ```
	   */
	  onSelect: _react2['default'].PropTypes.func
	};

	Dropdown = _uncontrollable2['default'](Dropdown, { open: 'onToggle' });

	Dropdown.Toggle = _DropdownToggle2['default'];
	Dropdown.Menu = _DropdownMenu2['default'];

	exports['default'] = Dropdown;

/***/ }),
/* 259 */
/***/ (function(module, exports) {

	// Source: http://jsfiddle.net/vWx8V/
	// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes

	/**
	 * Conenience method returns corresponding value for given keyName or keyCode.
	 *
	 * @param {Mixed} keyCode {Number} or keyName {String}
	 * @return {Mixed}
	 * @api public
	 */

	exports = module.exports = function(searchInput) {
	  // Keyboard Events
	  if (searchInput && 'object' === typeof searchInput) {
	    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode
	    if (hasKeyCode) searchInput = hasKeyCode
	  }

	  // Numbers
	  if ('number' === typeof searchInput) return names[searchInput]

	  // Everything else (cast to string)
	  var search = String(searchInput)

	  // check codes
	  var foundNamedKey = codes[search.toLowerCase()]
	  if (foundNamedKey) return foundNamedKey

	  // check aliases
	  var foundNamedKey = aliases[search.toLowerCase()]
	  if (foundNamedKey) return foundNamedKey

	  // weird character?
	  if (search.length === 1) return search.charCodeAt(0)

	  return undefined
	}

	/**
	 * Get by name
	 *
	 *   exports.code['enter'] // => 13
	 */

	var codes = exports.code = exports.codes = {
	  'backspace': 8,
	  'tab': 9,
	  'enter': 13,
	  'shift': 16,
	  'ctrl': 17,
	  'alt': 18,
	  'pause/break': 19,
	  'caps lock': 20,
	  'esc': 27,
	  'space': 32,
	  'page up': 33,
	  'page down': 34,
	  'end': 35,
	  'home': 36,
	  'left': 37,
	  'up': 38,
	  'right': 39,
	  'down': 40,
	  'insert': 45,
	  'delete': 46,
	  'command': 91,
	  'left command': 91,
	  'right command': 93,
	  'numpad *': 106,
	  'numpad +': 107,
	  'numpad -': 109,
	  'numpad .': 110,
	  'numpad /': 111,
	  'num lock': 144,
	  'scroll lock': 145,
	  'my computer': 182,
	  'my calculator': 183,
	  ';': 186,
	  '=': 187,
	  ',': 188,
	  '-': 189,
	  '.': 190,
	  '/': 191,
	  '`': 192,
	  '[': 219,
	  '\\': 220,
	  ']': 221,
	  "'": 222
	}

	// Helper aliases

	var aliases = exports.aliases = {
	  'windows': 91,
	  '⇧': 16,
	  '⌥': 18,
	  '⌃': 17,
	  '⌘': 91,
	  'ctl': 17,
	  'control': 17,
	  'option': 18,
	  'pause': 19,
	  'break': 19,
	  'caps': 20,
	  'return': 13,
	  'escape': 27,
	  'spc': 32,
	  'pgup': 33,
	  'pgdn': 34,
	  'ins': 45,
	  'del': 46,
	  'cmd': 91
	}


	/*!
	 * Programatically add the following
	 */

	// lower case chars
	for (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32

	// numbers
	for (var i = 48; i < 58; i++) codes[i - 48] = i

	// function keys
	for (i = 1; i < 13; i++) codes['f'+i] = i + 111

	// numpad keys
	for (i = 0; i < 10; i++) codes['numpad '+i] = i + 96

	/**
	 * Get by code
	 *
	 *   exports.name[13] // => 'Enter'
	 */

	var names = exports.names = exports.title = {} // title for backward compat

	// Create reverse mapping
	for (i in codes) names[codes[i]] = i

	// Add aliases
	for (var alias in aliases) {
	  codes[alias] = aliases[alias]
	}


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createUncontrollable = __webpack_require__(261);

	var _createUncontrollable2 = _interopRequireDefault(_createUncontrollable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var mixin = {
	  shouldComponentUpdate: function shouldComponentUpdate() {
	    //let the forceUpdate trigger the update
	    return !this._notifying;
	  }
	};

	function set(component, propName, handler, value, args) {
	  if (handler) {
	    component._notifying = true;
	    handler.call.apply(handler, [component, value].concat(args));
	    component._notifying = false;
	  }

	  component._values[propName] = value;

	  if (component.isMounted()) component.forceUpdate();
	}

	exports.default = (0, _createUncontrollable2.default)([mixin], set);
	module.exports = exports['default'];

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = createUncontrollable;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(262);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _utils = __webpack_require__(263);

	var utils = _interopRequireWildcard(_utils);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function createUncontrollable(mixins, set) {

	  return uncontrollable;

	  function uncontrollable(Component, controlledValues) {
	    var methods = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

	    var displayName = Component.displayName || Component.name || 'Component',
	        basePropTypes = utils.getType(Component).propTypes,
	        isCompositeComponent = utils.isReactComponent(Component),
	        propTypes;

	    propTypes = utils.uncontrolledPropTypes(controlledValues, basePropTypes, displayName);

	    (0, _invariant2.default)(isCompositeComponent || !methods.length, '[uncontrollable] stateless function components cannot pass through methods ' + 'becasue they have no associated instances. Check component: ' + displayName + ', ' + 'attempting to pass through methods: ' + methods.join(', '));
	    methods = utils.transform(methods, function (obj, method) {
	      obj[method] = function () {
	        var _refs$inner;

	        return (_refs$inner = this.refs.inner)[method].apply(_refs$inner, arguments);
	      };
	    }, {});

	    var component = _react2.default.createClass(_extends({

	      displayName: 'Uncontrolled(' + displayName + ')',

	      mixins: mixins,

	      propTypes: propTypes

	    }, methods, {
	      componentWillMount: function componentWillMount() {
	        var props = this.props,
	            keys = Object.keys(controlledValues);

	        this._values = utils.transform(keys, function (values, key) {
	          values[key] = props[utils.defaultKey(key)];
	        }, {});
	      },


	      /**
	       * If a prop switches from controlled to Uncontrolled
	       * reset its value to the defaultValue
	       */
	      componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	        var _this = this;

	        var props = this.props,
	            keys = Object.keys(controlledValues);

	        keys.forEach(function (key) {
	          if (utils.getValue(nextProps, key) === undefined && utils.getValue(props, key) !== undefined) {
	            _this._values[key] = nextProps[utils.defaultKey(key)];
	          }
	        });
	      },
	      render: function render() {
	        var _this2 = this;

	        var newProps = {};
	        var _props = this.props;
	        var valueLink = _props.valueLink;
	        var checkedLink = _props.checkedLink;

	        var props = _objectWithoutProperties(_props, ['valueLink', 'checkedLink']);

	        utils.each(controlledValues, function (handle, propName) {
	          var linkPropName = utils.getLinkName(propName),
	              prop = _this2.props[propName];

	          if (linkPropName && !isProp(_this2.props, propName) && isProp(_this2.props, linkPropName)) {
	            prop = _this2.props[linkPropName].value;
	          }

	          newProps[propName] = prop !== undefined ? prop : _this2._values[propName];

	          newProps[handle] = setAndNotify.bind(_this2, propName);
	        });

	        newProps = _extends({}, props, newProps, {
	          ref: isCompositeComponent ? 'inner' : null
	        });

	        return _react2.default.createElement(Component, newProps);
	      }
	    }));

	    component.ControlledComponent = Component;

	    /**
	     * useful when wrapping a Component and you want to control
	     * everything
	     */
	    component.deferControlTo = function (newComponent) {
	      var additions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	      var nextMethods = arguments[2];

	      return uncontrollable(newComponent, _extends({}, controlledValues, additions), nextMethods);
	    };

	    return component;

	    function setAndNotify(propName, value) {
	      var linkName = utils.getLinkName(propName),
	          handler = this.props[controlledValues[propName]];

	      if (linkName && isProp(this.props, linkName) && !handler) {
	        handler = this.props[linkName].requestChange;
	      }

	      for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	        args[_key - 2] = arguments[_key];
	      }

	      set(this, propName, handler, value, args);
	    }

	    function isProp(props, prop) {
	      return props[prop] !== undefined;
	    }
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.version = undefined;
	exports.customPropType = customPropType;
	exports.uncontrolledPropTypes = uncontrolledPropTypes;
	exports.getType = getType;
	exports.getValue = getValue;
	exports.getLinkName = getLinkName;
	exports.defaultKey = defaultKey;
	exports.chain = chain;
	exports.transform = transform;
	exports.each = each;
	exports.isReactComponent = isReactComponent;
	exports.has = has;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(262);

	var _invariant2 = _interopRequireDefault(_invariant);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function customPropType(handler, propType, name) {

	  return function (props, propName) {

	    if (props[propName] !== undefined) {
	      if (!props[handler]) {
	        return new Error('You have provided a `' + propName + '` prop to ' + '`' + name + '` without an `' + handler + '` handler. This will render a read-only field. ' + 'If the field should be mutable use `' + defaultKey(propName) + '`. Otherwise, set `' + handler + '`');
	      }

	      return propType && propType(props, propName, name);
	    }
	  };
	}

	function uncontrolledPropTypes(controlledValues, basePropTypes, displayName) {
	  var propTypes = {};

	  if (process.env.NODE_ENV !== 'production' && basePropTypes) {
	    transform(controlledValues, function (obj, handler, prop) {
	      var type = basePropTypes[prop];

	      (0, _invariant2.default)(typeof handler === 'string' && handler.trim().length, 'Uncontrollable - [%s]: the prop `%s` needs a valid handler key name in order to make it uncontrollable', displayName, prop);

	      obj[prop] = customPropType(handler, type, displayName);

	      if (type !== undefined) obj[defaultKey(prop)] = type;
	    }, propTypes);
	  }

	  return propTypes;
	}

	var version = exports.version = _react2.default.version.split('.').map(parseFloat);

	function getType(component) {
	  if (version[0] >= 15 || version[0] === 0 && version[1] >= 13) return component;

	  return component.type;
	}

	function getValue(props, name) {
	  var linkPropName = getLinkName(name);

	  if (linkPropName && !isProp(props, name) && isProp(props, linkPropName)) return props[linkPropName].value;

	  return props[name];
	}

	function isProp(props, prop) {
	  return props[prop] !== undefined;
	}

	function getLinkName(name) {
	  return name === 'value' ? 'valueLink' : name === 'checked' ? 'checkedLink' : null;
	}

	function defaultKey(key) {
	  return 'default' + key.charAt(0).toUpperCase() + key.substr(1);
	}

	function chain(thisArg, a, b) {
	  return function chainedFunction() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    a && a.call.apply(a, [thisArg].concat(args));
	    b && b.call.apply(b, [thisArg].concat(args));
	  };
	}

	function transform(obj, cb, seed) {
	  each(obj, cb.bind(null, seed = seed || (Array.isArray(obj) ? [] : {})));
	  return seed;
	}

	function each(obj, cb, thisArg) {
	  if (Array.isArray(obj)) return obj.forEach(cb, thisArg);

	  for (var key in obj) {
	    if (has(obj, key)) cb.call(thisArg, obj[key], key, obj);
	  }
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	function isReactComponent(component) {
	  return !!(component && component.prototype && component.prototype.isReactComponent);
	}

	function has(o, k) {
	  return o ? Object.prototype.hasOwnProperty.call(o, k) : false;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _Button = __webpack_require__(241);

	var _Button2 = _interopRequireDefault(_Button);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var _SafeAnchor = __webpack_require__(265);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var CARET = _react2['default'].createElement(
	  'span',
	  null,
	  ' ',
	  _react2['default'].createElement('span', { className: 'caret' })
	);

	var DropdownToggle = (function (_React$Component) {
	  _inherits(DropdownToggle, _React$Component);

	  function DropdownToggle() {
	    _classCallCheck(this, DropdownToggle);

	    _React$Component.apply(this, arguments);
	  }

	  DropdownToggle.prototype.render = function render() {
	    var caret = this.props.noCaret ? null : CARET;

	    var classes = {
	      'dropdown-toggle': true
	    };

	    var Component = this.props.useAnchor ? _SafeAnchor2['default'] : _Button2['default'];

	    return _react2['default'].createElement(
	      Component,
	      _extends({}, this.props, {
	        className: _classnames2['default'](classes, this.props.className),
	        type: 'button',
	        'aria-haspopup': true,
	        'aria-expanded': this.props.open }),
	      this.props.title || this.props.children,
	      caret
	    );
	  };

	  return DropdownToggle;
	})(_react2['default'].Component);

	exports['default'] = DropdownToggle;

	var titleAndChildrenValidation = _utilsCustomPropTypes2['default'].singlePropFrom(['title', 'children']);

	DropdownToggle.defaultProps = {
	  open: false,
	  useAnchor: false,
	  bsRole: 'toggle'
	};

	DropdownToggle.propTypes = {
	  bsRole: _react2['default'].PropTypes.string,
	  children: titleAndChildrenValidation,
	  noCaret: _react2['default'].PropTypes.bool,
	  open: _react2['default'].PropTypes.bool,
	  title: titleAndChildrenValidation,
	  useAnchor: _react2['default'].PropTypes.bool
	};

	DropdownToggle.isToggle = true;
	DropdownToggle.titleProp = 'title';
	DropdownToggle.onClickProp = 'onClick';
	module.exports = exports['default'];

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _utilsCreateChainedFunction = __webpack_require__(222);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	/**
	 * Note: This is intended as a stop-gap for accessibility concerns that the
	 * Bootstrap CSS does not address as they have styled anchors and not buttons
	 * in many cases.
	 */

	var SafeAnchor = (function (_React$Component) {
	  _inherits(SafeAnchor, _React$Component);

	  function SafeAnchor(props) {
	    _classCallCheck(this, SafeAnchor);

	    _React$Component.call(this, props);

	    this.handleClick = this.handleClick.bind(this);
	  }

	  SafeAnchor.prototype.handleClick = function handleClick(event) {
	    if (this.props.href === undefined) {
	      event.preventDefault();
	    }
	  };

	  SafeAnchor.prototype.render = function render() {
	    return _react2['default'].createElement('a', _extends({ role: this.props.href ? undefined : 'button'
	    }, this.props, {
	      onClick: _utilsCreateChainedFunction2['default'](this.props.onClick, this.handleClick),
	      href: this.props.href || '' }));
	  };

	  return SafeAnchor;
	})(_react2['default'].Component);

	exports['default'] = SafeAnchor;

	SafeAnchor.propTypes = {
	  href: _react2['default'].PropTypes.string,
	  onClick: _react2['default'].PropTypes.func
	};
	module.exports = exports['default'];

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _keycode = __webpack_require__(259);

	var _keycode2 = _interopRequireDefault(_keycode);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _reactOverlaysLibRootCloseWrapper = __webpack_require__(267);

	var _reactOverlaysLibRootCloseWrapper2 = _interopRequireDefault(_reactOverlaysLibRootCloseWrapper);

	var _utilsValidComponentChildren = __webpack_require__(221);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsCreateChainedFunction = __webpack_require__(222);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var DropdownMenu = (function (_React$Component) {
	  _inherits(DropdownMenu, _React$Component);

	  function DropdownMenu(props) {
	    _classCallCheck(this, DropdownMenu);

	    _React$Component.call(this, props);

	    this.focusNext = this.focusNext.bind(this);
	    this.focusPrevious = this.focusPrevious.bind(this);
	    this.getFocusableMenuItems = this.getFocusableMenuItems.bind(this);
	    this.getItemsAndActiveIndex = this.getItemsAndActiveIndex.bind(this);

	    this.handleKeyDown = this.handleKeyDown.bind(this);
	  }

	  DropdownMenu.prototype.handleKeyDown = function handleKeyDown(event) {
	    switch (event.keyCode) {
	      case _keycode2['default'].codes.down:
	        this.focusNext();
	        event.preventDefault();
	        break;
	      case _keycode2['default'].codes.up:
	        this.focusPrevious();
	        event.preventDefault();
	        break;
	      case _keycode2['default'].codes.esc:
	      case _keycode2['default'].codes.tab:
	        this.props.onClose(event);
	        break;
	      default:
	    }
	  };

	  DropdownMenu.prototype.focusNext = function focusNext() {
	    var _getItemsAndActiveIndex = this.getItemsAndActiveIndex();

	    var items = _getItemsAndActiveIndex.items;
	    var activeItemIndex = _getItemsAndActiveIndex.activeItemIndex;

	    if (items.length === 0) {
	      return;
	    }

	    if (activeItemIndex === items.length - 1) {
	      items[0].focus();
	      return;
	    }

	    items[activeItemIndex + 1].focus();
	  };

	  DropdownMenu.prototype.focusPrevious = function focusPrevious() {
	    var _getItemsAndActiveIndex2 = this.getItemsAndActiveIndex();

	    var items = _getItemsAndActiveIndex2.items;
	    var activeItemIndex = _getItemsAndActiveIndex2.activeItemIndex;

	    if (activeItemIndex === 0) {
	      items[items.length - 1].focus();
	      return;
	    }

	    items[activeItemIndex - 1].focus();
	  };

	  DropdownMenu.prototype.getItemsAndActiveIndex = function getItemsAndActiveIndex() {
	    var items = this.getFocusableMenuItems();
	    var activeElement = document.activeElement;
	    var activeItemIndex = items.indexOf(activeElement);

	    return { items: items, activeItemIndex: activeItemIndex };
	  };

	  DropdownMenu.prototype.getFocusableMenuItems = function getFocusableMenuItems() {
	    var menuNode = _react2['default'].findDOMNode(this);

	    if (menuNode === undefined) {
	      return [];
	    }

	    return [].slice.call(menuNode.querySelectorAll('[tabIndex="-1"]'), 0);
	  };

	  DropdownMenu.prototype.render = function render() {
	    var _this = this;

	    var items = _utilsValidComponentChildren2['default'].map(this.props.children, function (child) {
	      var _ref = child.props || {};

	      var children = _ref.children;
	      var onKeyDown = _ref.onKeyDown;
	      var onSelect = _ref.onSelect;

	      return _react2['default'].cloneElement(child, {
	        onKeyDown: _utilsCreateChainedFunction2['default'](onKeyDown, _this.handleKeyDown),
	        onSelect: _utilsCreateChainedFunction2['default'](onSelect, _this.props.onSelect)
	      }, children);
	    });

	    var classes = {
	      'dropdown-menu': true,
	      'dropdown-menu-right': this.props.pullRight
	    };

	    var list = _react2['default'].createElement(
	      'ul',
	      {
	        className: _classnames2['default'](this.props.className, classes),
	        role: 'menu',
	        'aria-labelledby': this.props.labelledBy
	      },
	      items
	    );

	    if (this.props.open) {
	      list = _react2['default'].createElement(
	        _reactOverlaysLibRootCloseWrapper2['default'],
	        { noWrap: true, onRootClose: this.props.onClose },
	        list
	      );
	    }

	    return list;
	  };

	  return DropdownMenu;
	})(_react2['default'].Component);

	DropdownMenu.defaultProps = {
	  bsRole: 'menu',
	  pullRight: false
	};

	DropdownMenu.propTypes = {
	  open: _react2['default'].PropTypes.bool,
	  pullRight: _react2['default'].PropTypes.bool,
	  onClose: _react2['default'].PropTypes.func,
	  labelledBy: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	  onSelect: _react2['default'].PropTypes.func
	};

	exports['default'] = DropdownMenu;
	module.exports = exports['default'];

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _utilsAddEventListener = __webpack_require__(268);

	var _utilsAddEventListener2 = _interopRequireDefault(_utilsAddEventListener);

	var _utilsCreateChainedFunction = __webpack_require__(270);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _utilsOwnerDocument = __webpack_require__(271);

	var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

	// TODO: Consider using an ES6 symbol here, once we use babel-runtime.
	var CLICK_WAS_INSIDE = '__click_was_inside';

	function suppressRootClose(event) {
	  // Tag the native event to prevent the root close logic on document click.
	  // This seems safer than using event.nativeEvent.stopImmediatePropagation(),
	  // which is only supported in IE >= 9.
	  event.nativeEvent[CLICK_WAS_INSIDE] = true;
	}

	var RootCloseWrapper = (function (_React$Component) {
	  function RootCloseWrapper(props) {
	    _classCallCheck(this, RootCloseWrapper);

	    _React$Component.call(this, props);

	    this.handleDocumentClick = this.handleDocumentClick.bind(this);
	    this.handleDocumentKeyUp = this.handleDocumentKeyUp.bind(this);
	  }

	  _inherits(RootCloseWrapper, _React$Component);

	  RootCloseWrapper.prototype.bindRootCloseHandlers = function bindRootCloseHandlers() {
	    var doc = _utilsOwnerDocument2['default'](this);

	    this._onDocumentClickListener = _utilsAddEventListener2['default'](doc, 'click', this.handleDocumentClick);

	    this._onDocumentKeyupListener = _utilsAddEventListener2['default'](doc, 'keyup', this.handleDocumentKeyUp);
	  };

	  RootCloseWrapper.prototype.handleDocumentClick = function handleDocumentClick(e) {
	    // This is now the native event.
	    if (e[CLICK_WAS_INSIDE]) {
	      return;
	    }

	    this.props.onRootClose();
	  };

	  RootCloseWrapper.prototype.handleDocumentKeyUp = function handleDocumentKeyUp(e) {
	    if (e.keyCode === 27) {
	      this.props.onRootClose();
	    }
	  };

	  RootCloseWrapper.prototype.unbindRootCloseHandlers = function unbindRootCloseHandlers() {
	    if (this._onDocumentClickListener) {
	      this._onDocumentClickListener.remove();
	    }

	    if (this._onDocumentKeyupListener) {
	      this._onDocumentKeyupListener.remove();
	    }
	  };

	  RootCloseWrapper.prototype.componentDidMount = function componentDidMount() {
	    this.bindRootCloseHandlers();
	  };

	  RootCloseWrapper.prototype.render = function render() {
	    var _props = this.props;
	    var noWrap = _props.noWrap;
	    var children = _props.children;

	    var child = _react2['default'].Children.only(children);

	    if (noWrap) {
	      return _react2['default'].cloneElement(child, {
	        onClick: _utilsCreateChainedFunction2['default'](suppressRootClose, child.props.onClick)
	      });
	    }

	    // Wrap the child in a new element, so the child won't have to handle
	    // potentially combining multiple onClick listeners.
	    return _react2['default'].createElement(
	      'div',
	      { onClick: suppressRootClose },
	      child
	    );
	  };

	  RootCloseWrapper.prototype.getWrappedDOMNode = function getWrappedDOMNode() {
	    // We can't use a ref to identify the wrapped child, since we might be
	    // stealing the ref from the owner, but we know exactly the DOM structure
	    // that will be rendered, so we can just do this to get the child's DOM
	    // node for doing size calculations in OverlayMixin.
	    var node = _react2['default'].findDOMNode(this);
	    return this.props.noWrap ? node : node.firstChild;
	  };

	  RootCloseWrapper.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unbindRootCloseHandlers();
	  };

	  return RootCloseWrapper;
	})(_react2['default'].Component);

	exports['default'] = RootCloseWrapper;

	RootCloseWrapper.displayName = 'RootCloseWrapper';

	RootCloseWrapper.propTypes = {
	  onRootClose: _react2['default'].PropTypes.func.isRequired,

	  /**
	   * Passes the suppress click handler directly to the child component instead
	   * of placing it on a wrapping div. Only use when you can be sure the child
	   * properly handle the click event.
	   */
	  noWrap: _react2['default'].PropTypes.bool
	};
	module.exports = exports['default'];

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _domHelpersEventsOn = __webpack_require__(257);

	var _domHelpersEventsOn2 = _interopRequireDefault(_domHelpersEventsOn);

	var _domHelpersEventsOff = __webpack_require__(269);

	var _domHelpersEventsOff2 = _interopRequireDefault(_domHelpersEventsOff);

	exports['default'] = function (node, event, handler) {
	  _domHelpersEventsOn2['default'](node, event, handler);
	  return {
	    remove: function remove() {
	      _domHelpersEventsOff2['default'](node, event, handler);
	    }
	  };
	};

	module.exports = exports['default'];

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var canUseDOM = __webpack_require__(199);
	var off = function off() {};

	if (canUseDOM) {

	  off = (function () {

	    if (document.addEventListener) return function (node, eventName, handler, capture) {
	      return node.removeEventListener(eventName, handler, capture || false);
	    };else if (document.attachEvent) return function (node, eventName, handler) {
	      return node.detachEvent('on' + eventName, handler);
	    };
	  })();
	}

	module.exports = off;

/***/ }),
/* 270 */
/***/ (function(module, exports) {

	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @param {function} functions to chain
	 * @returns {function|null}
	 */
	'use strict';

	exports.__esModule = true;
	function createChainedFunction() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  return funcs.filter(function (f) {
	    return f != null;
	  }).reduce(function (acc, f) {
	    if (typeof f !== 'function') {
	      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
	    }

	    if (acc === null) {
	      return f;
	    }

	    return function chainedFunction() {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      acc.apply(this, args);
	      f.apply(this, args);
	    };
	  }, null);
	}

	exports['default'] = createChainedFunction;
	module.exports = exports['default'];

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _domHelpersOwnerDocument = __webpack_require__(200);

	var _domHelpersOwnerDocument2 = _interopRequireDefault(_domHelpersOwnerDocument);

	exports['default'] = function (componentOrElement) {
	  return _domHelpersOwnerDocument2['default'](_react2['default'].findDOMNode(componentOrElement));
	};

	module.exports = exports['default'];

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(273),
	    createFind = __webpack_require__(294);

	/**
	 * Iterates over elements of `collection`, returning the first element
	 * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	 * invoked with three arguments: (value, index|key, collection).
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @alias detect
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36, 'active': true },
	 *   { 'user': 'fred',    'age': 40, 'active': false },
	 *   { 'user': 'pebbles', 'age': 1,  'active': true }
	 * ];
	 *
	 * _.result(_.find(users, function(chr) {
	 *   return chr.age < 40;
	 * }), 'user');
	 * // => 'barney'
	 *
	 * // using the `_.matches` callback shorthand
	 * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	 * // => 'pebbles'
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.result(_.find(users, 'active', false), 'user');
	 * // => 'fred'
	 *
	 * // using the `_.property` callback shorthand
	 * _.result(_.find(users, 'active'), 'user');
	 * // => 'barney'
	 */
	var find = createFind(baseEach);

	module.exports = find;


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(274),
	    createBaseEach = __webpack_require__(293);

	/**
	 * The base implementation of `_.forEach` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object|string} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	module.exports = baseEach;


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(275),
	    keys = __webpack_require__(279);

	/**
	 * The base implementation of `_.forOwn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return baseFor(object, iteratee, keys);
	}

	module.exports = baseForOwn;


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(276);

	/**
	 * The base implementation of `baseForIn` and `baseForOwn` which iterates
	 * over `object` properties returned by `keysFunc` invoking `iteratee` for
	 * each property. Iteratee functions may exit iteration early by explicitly
	 * returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(277);

	/**
	 * Creates a base function for `_.forIn` or `_.forInRight`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var iterable = toObject(object),
	        props = keysFunc(object),
	        length = props.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      var key = props[index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(278);

	/**
	 * Converts `value` to an object if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Object} Returns the object.
	 */
	function toObject(value) {
	  return isObject(value) ? value : Object(value);
	}

	module.exports = toObject;


/***/ }),
/* 278 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(280),
	    isArrayLike = __webpack_require__(284),
	    isObject = __webpack_require__(278),
	    shimKeys = __webpack_require__(288);

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeKeys = getNative(Object, 'keys');

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	var keys = !nativeKeys ? shimKeys : function(object) {
	  var Ctor = object == null ? undefined : object.constructor;
	  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	      (typeof object != 'function' && isArrayLike(object))) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};

	module.exports = keys;


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

	var isNative = __webpack_require__(281);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	module.exports = getNative;


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(282),
	    isObjectLike = __webpack_require__(283);

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

	module.exports = isNative;


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(278);

	/** `Object#toString` result references. */
	var funcTag = '[object Function]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 which returns 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	module.exports = isFunction;


/***/ }),
/* 283 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

	var getLength = __webpack_require__(285),
	    isLength = __webpack_require__(287);

	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}

	module.exports = isArrayLike;


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(286);

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	module.exports = getLength;


/***/ }),
/* 286 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = baseProperty;


/***/ }),
/* 287 */
/***/ (function(module, exports) {

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

	var isArguments = __webpack_require__(289),
	    isArray = __webpack_require__(290),
	    isIndex = __webpack_require__(291),
	    isLength = __webpack_require__(287),
	    keysIn = __webpack_require__(292);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A fallback implementation of `Object.keys` which creates an array of the
	 * own enumerable property names of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;

	  var allowIndexes = !!length && isLength(length) &&
	    (isArray(object) || isArguments(object));

	  var index = -1,
	      result = [];

	  while (++index < propsLength) {
	    var key = props[index];
	    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = shimKeys;


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(284),
	    isObjectLike = __webpack_require__(283);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Native method references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is classified as an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  return isObjectLike(value) && isArrayLike(value) &&
	    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	}

	module.exports = isArguments;


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(280),
	    isLength = __webpack_require__(287),
	    isObjectLike = __webpack_require__(283);

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function(value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};

	module.exports = isArray;


/***/ }),
/* 291 */
/***/ (function(module, exports) {

	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	module.exports = isIndex;


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

	var isArguments = __webpack_require__(289),
	    isArray = __webpack_require__(290),
	    isIndex = __webpack_require__(291),
	    isLength = __webpack_require__(287),
	    isObject = __webpack_require__(278);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;
	  length = (length && isLength(length) &&
	    (isArray(object) || isArguments(object)) && length) || 0;

	  var Ctor = object.constructor,
	      index = -1,
	      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	      result = Array(length),
	      skipIndexes = length > 0;

	  while (++index < length) {
	    result[index] = (index + '');
	  }
	  for (var key in object) {
	    if (!(skipIndexes && isIndex(key, length)) &&
	        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = keysIn;


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

	var getLength = __webpack_require__(285),
	    isLength = __webpack_require__(287),
	    toObject = __webpack_require__(277);

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    var length = collection ? getLength(collection) : 0;
	    if (!isLength(length)) {
	      return eachFunc(collection, iteratee);
	    }
	    var index = fromRight ? length : -1,
	        iterable = toObject(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	module.exports = createBaseEach;


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(295),
	    baseFind = __webpack_require__(319),
	    baseFindIndex = __webpack_require__(320),
	    isArray = __webpack_require__(290);

	/**
	 * Creates a `_.find` or `_.findLast` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new find function.
	 */
	function createFind(eachFunc, fromRight) {
	  return function(collection, predicate, thisArg) {
	    predicate = baseCallback(predicate, thisArg, 3);
	    if (isArray(collection)) {
	      var index = baseFindIndex(collection, predicate, fromRight);
	      return index > -1 ? collection[index] : undefined;
	    }
	    return baseFind(collection, predicate, eachFunc);
	  };
	}

	module.exports = createFind;


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

	var baseMatches = __webpack_require__(296),
	    baseMatchesProperty = __webpack_require__(308),
	    bindCallback = __webpack_require__(315),
	    identity = __webpack_require__(316),
	    property = __webpack_require__(317);

	/**
	 * The base implementation of `_.callback` which supports specifying the
	 * number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {*} [func=_.identity] The value to convert to a callback.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function baseCallback(func, thisArg, argCount) {
	  var type = typeof func;
	  if (type == 'function') {
	    return thisArg === undefined
	      ? func
	      : bindCallback(func, thisArg, argCount);
	  }
	  if (func == null) {
	    return identity;
	  }
	  if (type == 'object') {
	    return baseMatches(func);
	  }
	  return thisArg === undefined
	    ? property(func)
	    : baseMatchesProperty(func, thisArg);
	}

	module.exports = baseCallback;


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(297),
	    getMatchData = __webpack_require__(305),
	    toObject = __webpack_require__(277);

	/**
	 * The base implementation of `_.matches` which does not clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    var key = matchData[0][0],
	        value = matchData[0][1];

	    return function(object) {
	      if (object == null) {
	        return false;
	      }
	      return object[key] === value && (value !== undefined || (key in toObject(object)));
	    };
	  }
	  return function(object) {
	    return baseIsMatch(object, matchData);
	  };
	}

	module.exports = baseMatches;


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(298),
	    toObject = __webpack_require__(277);

	/**
	 * The base implementation of `_.isMatch` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Array} matchData The propery names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparing objects.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = toObject(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	      if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	module.exports = baseIsMatch;


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(299),
	    isObject = __webpack_require__(278),
	    isObjectLike = __webpack_require__(283);

	/**
	 * The base implementation of `_.isEqual` without support for `this` binding
	 * `customizer` functions.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparing values.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	}

	module.exports = baseIsEqual;


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	var equalArrays = __webpack_require__(300),
	    equalByTag = __webpack_require__(302),
	    equalObjects = __webpack_require__(303),
	    isArray = __webpack_require__(290),
	    isTypedArray = __webpack_require__(304);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing objects.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	 * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;

	  if (!objIsArr) {
	    objTag = objToString.call(object);
	    if (objTag == argsTag) {
	      objTag = objectTag;
	    } else if (objTag != objectTag) {
	      objIsArr = isTypedArray(object);
	    }
	  }
	  if (!othIsArr) {
	    othTag = objToString.call(other);
	    if (othTag == argsTag) {
	      othTag = objectTag;
	    } else if (othTag != objectTag) {
	      othIsArr = isTypedArray(other);
	    }
	  }
	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;

	  if (isSameTag && !(objIsArr || objIsObj)) {
	    return equalByTag(object, other, objTag);
	  }
	  if (!isLoose) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  // For more information on detecting circular references see https://es5.github.io/#JO.
	  stackA || (stackA = []);
	  stackB || (stackB = []);

	  var length = stackA.length;
	  while (length--) {
	    if (stackA[length] == object) {
	      return stackB[length] == other;
	    }
	  }
	  // Add `object` and `other` to the stack of traversed objects.
	  stackA.push(object);
	  stackB.push(other);

	  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	  stackA.pop();
	  stackB.pop();

	  return result;
	}

	module.exports = baseIsEqualDeep;


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	var arraySome = __webpack_require__(301);

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing arrays.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var index = -1,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	    return false;
	  }
	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index],
	        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

	    if (result !== undefined) {
	      if (result) {
	        continue;
	      }
	      return false;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (isLoose) {
	      if (!arraySome(other, function(othValue) {
	            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	          })) {
	        return false;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = equalArrays;


/***/ }),
/* 301 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;


/***/ }),
/* 302 */
/***/ (function(module, exports) {

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag) {
	  switch (tag) {
	    case boolTag:
	    case dateTag:
	      // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	      return +object == +other;

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case numberTag:
	      // Treat `NaN` vs. `NaN` as equal.
	      return (object != +object)
	        ? other != +other
	        : object == +other;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings primitives and string
	      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	      return object == (other + '');
	  }
	  return false;
	}

	module.exports = equalByTag;


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(279);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing values.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isLoose) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  var skipCtor = isLoose;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key],
	        result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	      return false;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (!skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = equalObjects;


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

	var isLength = __webpack_require__(287),
	    isObjectLike = __webpack_require__(283);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	function isTypedArray(value) {
	  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	}

	module.exports = isTypedArray;


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	var isStrictComparable = __webpack_require__(306),
	    pairs = __webpack_require__(307);

	/**
	 * Gets the propery names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = pairs(object),
	      length = result.length;

	  while (length--) {
	    result[length][2] = isStrictComparable(result[length][1]);
	  }
	  return result;
	}

	module.exports = getMatchData;


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(278);

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	module.exports = isStrictComparable;


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(279),
	    toObject = __webpack_require__(277);

	/**
	 * Creates a two dimensional array of the key-value pairs for `object`,
	 * e.g. `[[key1, value1], [key2, value2]]`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the new array of key-value pairs.
	 * @example
	 *
	 * _.pairs({ 'barney': 36, 'fred': 40 });
	 * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	 */
	function pairs(object) {
	  object = toObject(object);

	  var index = -1,
	      props = keys(object),
	      length = props.length,
	      result = Array(length);

	  while (++index < length) {
	    var key = props[index];
	    result[index] = [key, object[key]];
	  }
	  return result;
	}

	module.exports = pairs;


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(309),
	    baseIsEqual = __webpack_require__(298),
	    baseSlice = __webpack_require__(310),
	    isArray = __webpack_require__(290),
	    isKey = __webpack_require__(311),
	    isStrictComparable = __webpack_require__(306),
	    last = __webpack_require__(312),
	    toObject = __webpack_require__(277),
	    toPath = __webpack_require__(313);

	/**
	 * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to compare.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  var isArr = isArray(path),
	      isCommon = isKey(path) && isStrictComparable(srcValue),
	      pathKey = (path + '');

	  path = toPath(path);
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    var key = pathKey;
	    object = toObject(object);
	    if ((isArr || !isCommon) && !(key in object)) {
	      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	      if (object == null) {
	        return false;
	      }
	      key = last(path);
	      object = toObject(object);
	    }
	    return object[key] === srcValue
	      ? (srcValue !== undefined || (key in object))
	      : baseIsEqual(srcValue, object[key], undefined, true);
	  };
	}

	module.exports = baseMatchesProperty;


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(277);

	/**
	 * The base implementation of `get` without support for string paths
	 * and default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} path The path of the property to get.
	 * @param {string} [pathKey] The key representation of path.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path, pathKey) {
	  if (object == null) {
	    return;
	  }
	  if (pathKey !== undefined && pathKey in toObject(object)) {
	    path = [pathKey];
	  }
	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[path[index++]];
	  }
	  return (index && index == length) ? object : undefined;
	}

	module.exports = baseGet;


/***/ }),
/* 310 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  start = start == null ? 0 : (+start || 0);
	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = (end === undefined || end > length) ? length : (+end || 0);
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	module.exports = baseSlice;


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(290),
	    toObject = __webpack_require__(277);

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  var type = typeof value;
	  if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	    return true;
	  }
	  if (isArray(value)) {
	    return false;
	  }
	  var result = !reIsDeepProp.test(value);
	  return result || (object != null && value in toObject(object));
	}

	module.exports = isKey;


/***/ }),
/* 312 */
/***/ (function(module, exports) {

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last(array) {
	  var length = array ? array.length : 0;
	  return length ? array[length - 1] : undefined;
	}

	module.exports = last;


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(314),
	    isArray = __webpack_require__(290);

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `value` to property path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Array} Returns the property path array.
	 */
	function toPath(value) {
	  if (isArray(value)) {
	    return value;
	  }
	  var result = [];
	  baseToString(value).replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	}

	module.exports = toPath;


/***/ }),
/* 314 */
/***/ (function(module, exports) {

	/**
	 * Converts `value` to a string if it's not one. An empty string is returned
	 * for `null` or `undefined` values.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  return value == null ? '' : (value + '');
	}

	module.exports = baseToString;


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(316);

	/**
	 * A specialized version of `baseCallback` which only supports `this` binding
	 * and specifying the number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function bindCallback(func, thisArg, argCount) {
	  if (typeof func != 'function') {
	    return identity;
	  }
	  if (thisArg === undefined) {
	    return func;
	  }
	  switch (argCount) {
	    case 1: return function(value) {
	      return func.call(thisArg, value);
	    };
	    case 3: return function(value, index, collection) {
	      return func.call(thisArg, value, index, collection);
	    };
	    case 4: return function(accumulator, value, index, collection) {
	      return func.call(thisArg, accumulator, value, index, collection);
	    };
	    case 5: return function(value, other, key, object, source) {
	      return func.call(thisArg, value, other, key, object, source);
	    };
	  }
	  return function() {
	    return func.apply(thisArg, arguments);
	  };
	}

	module.exports = bindCallback;


/***/ }),
/* 316 */
/***/ (function(module, exports) {

	/**
	 * This method returns the first argument provided to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.identity(object) === object;
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(286),
	    basePropertyDeep = __webpack_require__(318),
	    isKey = __webpack_require__(311);

	/**
	 * Creates a function that returns the property value at `path` on a
	 * given object.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': { 'c': 2 } } },
	 *   { 'a': { 'b': { 'c': 1 } } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b.c'));
	 * // => [2, 1]
	 *
	 * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	}

	module.exports = property;


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(309),
	    toPath = __webpack_require__(313);

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function basePropertyDeep(path) {
	  var pathKey = (path + '');
	  path = toPath(path);
	  return function(object) {
	    return baseGet(object, path, pathKey);
	  };
	}

	module.exports = basePropertyDeep;


/***/ }),
/* 319 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	 * without support for callback shorthands and `this` binding, which iterates
	 * over `collection` using the provided `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @param {boolean} [retKey] Specify returning the key of the found element
	 *  instead of the element itself.
	 * @returns {*} Returns the found element or its key, else `undefined`.
	 */
	function baseFind(collection, predicate, eachFunc, retKey) {
	  var result;
	  eachFunc(collection, function(value, key, collection) {
	    if (predicate(value, key, collection)) {
	      result = retKey ? key : value;
	      return false;
	    }
	  });
	  return result;
	}

	module.exports = baseFind;


/***/ }),
/* 320 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for callback shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromRight) {
	  var length = array.length,
	      index = fromRight ? length : -1;

	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseFindIndex;


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(322),
	    baseDifference = __webpack_require__(323),
	    baseFlatten = __webpack_require__(330),
	    bindCallback = __webpack_require__(315),
	    keysIn = __webpack_require__(292),
	    pickByArray = __webpack_require__(332),
	    pickByCallback = __webpack_require__(333),
	    restParam = __webpack_require__(335);

	/**
	 * The opposite of `_.pick`; this method creates an object composed of the
	 * own and inherited enumerable properties of `object` that are not omitted.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {Function|...(string|string[])} [predicate] The function invoked per
	 *  iteration or property names to omit, specified as individual property
	 *  names or arrays of property names.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'user': 'fred', 'age': 40 };
	 *
	 * _.omit(object, 'age');
	 * // => { 'user': 'fred' }
	 *
	 * _.omit(object, _.isNumber);
	 * // => { 'user': 'fred' }
	 */
	var omit = restParam(function(object, props) {
	  if (object == null) {
	    return {};
	  }
	  if (typeof props[0] != 'function') {
	    var props = arrayMap(baseFlatten(props), String);
	    return pickByArray(object, baseDifference(keysIn(object), props));
	  }
	  var predicate = bindCallback(props[0], props[1], 3);
	  return pickByCallback(object, function(value, key, object) {
	    return !predicate(value, key, object);
	  });
	});

	module.exports = omit;


/***/ }),
/* 322 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	module.exports = arrayMap;


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(324),
	    cacheIndexOf = __webpack_require__(326),
	    createCache = __webpack_require__(327);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of `_.difference` which accepts a single array
	 * of values to exclude.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Array} values The values to exclude.
	 * @returns {Array} Returns the new array of filtered values.
	 */
	function baseDifference(array, values) {
	  var length = array ? array.length : 0,
	      result = [];

	  if (!length) {
	    return result;
	  }
	  var index = -1,
	      indexOf = baseIndexOf,
	      isCommon = true,
	      cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
	      valuesLength = values.length;

	  if (cache) {
	    indexOf = cacheIndexOf;
	    isCommon = false;
	    values = cache;
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index];

	    if (isCommon && value === value) {
	      var valuesIndex = valuesLength;
	      while (valuesIndex--) {
	        if (values[valuesIndex] === value) {
	          continue outer;
	        }
	      }
	      result.push(value);
	    }
	    else if (indexOf(values, value, 0) < 0) {
	      result.push(value);
	    }
	  }
	  return result;
	}

	module.exports = baseDifference;


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	var indexOfNaN = __webpack_require__(325);

	/**
	 * The base implementation of `_.indexOf` without support for binary searches.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  if (value !== value) {
	    return indexOfNaN(array, fromIndex);
	  }
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseIndexOf;


/***/ }),
/* 325 */
/***/ (function(module, exports) {

	/**
	 * Gets the index at which the first occurrence of `NaN` is found in `array`.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	 */
	function indexOfNaN(array, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 0 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    var other = array[index];
	    if (other !== other) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = indexOfNaN;


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(278);

	/**
	 * Checks if `value` is in `cache` mimicking the return signature of
	 * `_.indexOf` by returning `0` if the value is found, else `-1`.
	 *
	 * @private
	 * @param {Object} cache The cache to search.
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `0` if `value` is found, else `-1`.
	 */
	function cacheIndexOf(cache, value) {
	  var data = cache.data,
	      result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	  return result ? 0 : -1;
	}

	module.exports = cacheIndexOf;


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var SetCache = __webpack_require__(328),
	    getNative = __webpack_require__(280);

	/** Native method references. */
	var Set = getNative(global, 'Set');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCreate = getNative(Object, 'create');

	/**
	 * Creates a `Set` cache object to optimize linear searches of large arrays.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	 */
	function createCache(values) {
	  return (nativeCreate && Set) ? new SetCache(values) : null;
	}

	module.exports = createCache;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var cachePush = __webpack_require__(329),
	    getNative = __webpack_require__(280);

	/** Native method references. */
	var Set = getNative(global, 'Set');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCreate = getNative(Object, 'create');

	/**
	 *
	 * Creates a cache object to store unique values.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var length = values ? values.length : 0;

	  this.data = { 'hash': nativeCreate(null), 'set': new Set };
	  while (length--) {
	    this.push(values[length]);
	  }
	}

	// Add functions to the `Set` cache.
	SetCache.prototype.push = cachePush;

	module.exports = SetCache;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(278);

	/**
	 * Adds `value` to the cache.
	 *
	 * @private
	 * @name push
	 * @memberOf SetCache
	 * @param {*} value The value to cache.
	 */
	function cachePush(value) {
	  var data = this.data;
	  if (typeof value == 'string' || isObject(value)) {
	    data.set.add(value);
	  } else {
	    data.hash[value] = true;
	  }
	}

	module.exports = cachePush;


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(331),
	    isArguments = __webpack_require__(289),
	    isArray = __webpack_require__(290),
	    isArrayLike = __webpack_require__(284),
	    isObjectLike = __webpack_require__(283);

	/**
	 * The base implementation of `_.flatten` with added support for restricting
	 * flattening and specifying the start index.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {boolean} [isDeep] Specify a deep flatten.
	 * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, isDeep, isStrict, result) {
	  result || (result = []);

	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    var value = array[index];
	    if (isObjectLike(value) && isArrayLike(value) &&
	        (isStrict || isArray(value) || isArguments(value))) {
	      if (isDeep) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, isDeep, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	module.exports = baseFlatten;


/***/ }),
/* 331 */
/***/ (function(module, exports) {

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	module.exports = arrayPush;


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

	var toObject = __webpack_require__(277);

	/**
	 * A specialized version of `_.pick` which picks `object` properties specified
	 * by `props`.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} props The property names to pick.
	 * @returns {Object} Returns the new object.
	 */
	function pickByArray(object, props) {
	  object = toObject(object);

	  var index = -1,
	      length = props.length,
	      result = {};

	  while (++index < length) {
	    var key = props[index];
	    if (key in object) {
	      result[key] = object[key];
	    }
	  }
	  return result;
	}

	module.exports = pickByArray;


/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

	var baseForIn = __webpack_require__(334);

	/**
	 * A specialized version of `_.pick` which picks `object` properties `predicate`
	 * returns truthy for.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Object} Returns the new object.
	 */
	function pickByCallback(object, predicate) {
	  var result = {};
	  baseForIn(object, function(value, key, object) {
	    if (predicate(value, key, object)) {
	      result[key] = value;
	    }
	  });
	  return result;
	}

	module.exports = pickByCallback;


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(275),
	    keysIn = __webpack_require__(292);

	/**
	 * The base implementation of `_.forIn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForIn(object, iteratee) {
	  return baseFor(object, iteratee, keysIn);
	}

	module.exports = baseForIn;


/***/ }),
/* 335 */
/***/ (function(module, exports) {

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as an array.
	 *
	 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.restParam(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */
	function restParam(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        rest = Array(length);

	    while (++index < length) {
	      rest[index] = args[start + index];
	    }
	    switch (start) {
	      case 0: return func.call(this, rest);
	      case 1: return func.call(this, args[0], rest);
	      case 2: return func.call(this, args[0], args[1], rest);
	    }
	    var otherArgs = Array(start + 1);
	    index = -1;
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = rest;
	    return func.apply(this, otherArgs);
	  };
	}

	module.exports = restParam;


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _objectWithoutProperties = __webpack_require__(232)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _Dropdown = __webpack_require__(258);

	var _Dropdown2 = _interopRequireDefault(_Dropdown);

	var _NavDropdown = __webpack_require__(337);

	var _NavDropdown2 = _interopRequireDefault(_NavDropdown);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var _utilsDeprecationWarning = __webpack_require__(187);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	var _lodashObjectOmit = __webpack_require__(321);

	var _lodashObjectOmit2 = _interopRequireDefault(_lodashObjectOmit);

	var DropdownButton = (function (_React$Component) {
	  _inherits(DropdownButton, _React$Component);

	  function DropdownButton(props) {
	    _classCallCheck(this, DropdownButton);

	    _React$Component.call(this, props);
	  }

	  DropdownButton.prototype.render = function render() {
	    var _props = this.props;
	    var title = _props.title;
	    var navItem = _props.navItem;

	    var props = _objectWithoutProperties(_props, ['title', 'navItem']);

	    var toggleProps = _lodashObjectOmit2['default'](props, _Dropdown2['default'].ControlledComponent.propTypes);

	    if (navItem) {
	      return _react2['default'].createElement(_NavDropdown2['default'], this.props);
	    }

	    return _react2['default'].createElement(
	      _Dropdown2['default'],
	      props,
	      _react2['default'].createElement(
	        _Dropdown2['default'].Toggle,
	        toggleProps,
	        title
	      ),
	      _react2['default'].createElement(
	        _Dropdown2['default'].Menu,
	        null,
	        this.props.children
	      )
	    );
	  };

	  return DropdownButton;
	})(_react2['default'].Component);

	DropdownButton.propTypes = _extends({
	  /**
	   * When used with the `title` prop, the noCaret option will not render a caret icon, in the toggle element.
	   */
	  noCaret: _react2['default'].PropTypes.bool,

	  /**
	   * Specify whether this Dropdown is part of a Nav component
	   *
	   * @type {bool}
	   * @deprecated Use the `NavDropdown` instead.
	   */
	  navItem: _utilsCustomPropTypes2['default'].all([_react2['default'].PropTypes.bool, function (props) {
	    if (props.navItem) {
	      _utilsDeprecationWarning2['default']('navItem', 'NavDropdown component', 'https://github.com/react-bootstrap/react-bootstrap/issues/526');
	    }
	  }]),
	  title: _react2['default'].PropTypes.node.isRequired
	}, _Dropdown2['default'].propTypes, _BootstrapMixin2['default'].propTypes);

	DropdownButton.defaultProps = {
	  pullRight: false,
	  dropup: false,
	  navItem: false,
	  noCaret: false
	};

	exports['default'] = DropdownButton;
	module.exports = exports['default'];

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _objectWithoutProperties = __webpack_require__(232)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _Dropdown = __webpack_require__(258);

	var _Dropdown2 = _interopRequireDefault(_Dropdown);

	var NavDropdown = (function (_React$Component) {
	  _inherits(NavDropdown, _React$Component);

	  function NavDropdown() {
	    _classCallCheck(this, NavDropdown);

	    _React$Component.apply(this, arguments);
	  }

	  NavDropdown.prototype.render = function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var title = _props.title;
	    var noCaret = _props.noCaret;

	    var props = _objectWithoutProperties(_props, ['children', 'title', 'noCaret']);

	    return _react2['default'].createElement(
	      _Dropdown2['default'],
	      _extends({}, props, { componentClass: 'li' }),
	      _react2['default'].createElement(
	        _Dropdown2['default'].Toggle,
	        {
	          useAnchor: true,
	          disabled: props.disabled,
	          noCaret: noCaret
	        },
	        title
	      ),
	      _react2['default'].createElement(
	        _Dropdown2['default'].Menu,
	        null,
	        children
	      )
	    );
	  };

	  return NavDropdown;
	})(_react2['default'].Component);

	NavDropdown.propTypes = _extends({
	  noCaret: _react2['default'].PropTypes.bool,
	  title: _react2['default'].PropTypes.node.isRequired
	}, _Dropdown2['default'].propTypes);

	exports['default'] = NavDropdown;
	module.exports = exports['default'];

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _objectWithoutProperties = __webpack_require__(232)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _Button = __webpack_require__(241);

	var _Button2 = _interopRequireDefault(_Button);

	var _Dropdown = __webpack_require__(258);

	var _Dropdown2 = _interopRequireDefault(_Dropdown);

	var _SplitToggle = __webpack_require__(339);

	var _SplitToggle2 = _interopRequireDefault(_SplitToggle);

	var SplitButton = (function (_React$Component) {
	  _inherits(SplitButton, _React$Component);

	  function SplitButton() {
	    _classCallCheck(this, SplitButton);

	    _React$Component.apply(this, arguments);
	  }

	  SplitButton.prototype.render = function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var title = _props.title;
	    var onClick = _props.onClick;
	    var target = _props.target;
	    var href = _props.href;
	    var
	    // bsStyle is validated by 'Button' component
	    bsStyle = _props.bsStyle;

	    var props = _objectWithoutProperties(_props, ['children', 'title', 'onClick', 'target', 'href', 'bsStyle']);

	    var disabled = props.disabled;

	    var button = _react2['default'].createElement(
	      _Button2['default'],
	      {
	        onClick: onClick,
	        bsStyle: bsStyle,
	        disabled: disabled,
	        target: target,
	        href: href
	      },
	      title
	    );

	    return _react2['default'].createElement(
	      _Dropdown2['default'],
	      props,
	      button,
	      _react2['default'].createElement(_SplitToggle2['default'], {
	        'aria-label': title,
	        bsStyle: bsStyle,
	        disabled: disabled
	      }),
	      _react2['default'].createElement(
	        _Dropdown2['default'].Menu,
	        null,
	        children
	      )
	    );
	  };

	  return SplitButton;
	})(_react2['default'].Component);

	SplitButton.propTypes = _extends({}, _Dropdown2['default'].propTypes, _BootstrapMixin2['default'].propTypes, {

	  /**
	   * @private
	   */
	  onClick: function onClick() {},
	  target: _react2['default'].PropTypes.string,
	  href: _react2['default'].PropTypes.string,
	  /**
	   * The content of the split button.
	   */
	  title: _react2['default'].PropTypes.node.isRequired
	});

	SplitButton.defaultProps = {
	  disabled: false,
	  dropup: false,
	  pullRight: false
	};

	SplitButton.Toggle = _SplitToggle2['default'];

	exports['default'] = SplitButton;
	module.exports = exports['default'];
	// eslint-disable-line

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _DropdownToggle = __webpack_require__(264);

	var _DropdownToggle2 = _interopRequireDefault(_DropdownToggle);

	var SplitToggle = (function (_React$Component) {
	  _inherits(SplitToggle, _React$Component);

	  function SplitToggle() {
	    _classCallCheck(this, SplitToggle);

	    _React$Component.apply(this, arguments);
	  }

	  SplitToggle.prototype.render = function render() {
	    return _react2['default'].createElement(_DropdownToggle2['default'], _extends({}, this.props, {
	      useAnchor: false,
	      noCaret: false
	    }));
	  };

	  return SplitToggle;
	})(_react2['default'].Component);

	exports['default'] = SplitToggle;

	SplitToggle.defaultProps = _DropdownToggle2['default'].defaultProps;
	module.exports = exports['default'];

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _utilsDomUtils = __webpack_require__(198);

	var _utilsDomUtils2 = _interopRequireDefault(_utilsDomUtils);

	var _utilsDeprecationWarning = __webpack_require__(187);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	// TODO: listen for onTransitionEnd to remove el
	function getElementsAndSelf(root, classes) {
	  var els = root.querySelectorAll('.' + classes.join('.'));

	  els = [].map.call(els, function (e) {
	    return e;
	  });

	  for (var i = 0; i < classes.length; i++) {
	    if (!root.className.match(new RegExp('\\b' + classes[i] + '\\b'))) {
	      return els;
	    }
	  }
	  els.unshift(root);
	  return els;
	}

	exports['default'] = {
	  componentWillMount: function componentWillMount() {
	    _utilsDeprecationWarning2['default']('FadeMixin', 'Fade Component');
	  },

	  _fadeIn: function _fadeIn() {
	    var els = undefined;

	    if (this.isMounted()) {
	      els = getElementsAndSelf(_react2['default'].findDOMNode(this), ['fade']);

	      if (els.length) {
	        els.forEach(function (el) {
	          el.className += ' in';
	        });
	      }
	    }
	  },

	  _fadeOut: function _fadeOut() {
	    var els = getElementsAndSelf(this._fadeOutEl, ['fade', 'in']);

	    if (els.length) {
	      els.forEach(function (el) {
	        el.className = el.className.replace(/\bin\b/, '');
	      });
	    }

	    setTimeout(this._handleFadeOutEnd, 300);
	  },

	  _handleFadeOutEnd: function _handleFadeOutEnd() {
	    if (this._fadeOutEl && this._fadeOutEl.parentNode) {
	      this._fadeOutEl.parentNode.removeChild(this._fadeOutEl);
	    }
	  },

	  componentDidMount: function componentDidMount() {
	    if (document.querySelectorAll) {
	      // Firefox needs delay for transition to be triggered
	      setTimeout(this._fadeIn, 20);
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    var els = getElementsAndSelf(_react2['default'].findDOMNode(this), ['fade']);
	    var container = this.props.container && _react2['default'].findDOMNode(this.props.container) || _utilsDomUtils2['default'].ownerDocument(this).body;

	    if (els.length) {
	      this._fadeOutEl = document.createElement('div');
	      container.appendChild(this._fadeOutEl);
	      this._fadeOutEl.appendChild(_react2['default'].findDOMNode(this).cloneNode(true));
	      // Firefox needs delay for transition to be triggered
	      setTimeout(this._fadeOut, 20);
	    }
	  }
	};
	module.exports = exports['default'];

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var Grid = _react2['default'].createClass({
	  displayName: 'Grid',

	  propTypes: {
	    /**
	     * Turn any fixed-width grid layout into a full-width layout by this property.
	     *
	     * Adds `container-fluid` class.
	     */
	    fluid: _react2['default'].PropTypes.bool,
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _utilsCustomPropTypes2['default'].elementType
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      componentClass: 'div',
	      fluid: false
	    };
	  },

	  render: function render() {
	    var ComponentClass = this.props.componentClass;
	    var className = this.props.fluid ? 'container-fluid' : 'container';

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, className) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Grid;
	module.exports = exports['default'];

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	var _interopRequireWildcard = __webpack_require__(186)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _InputBase2 = __webpack_require__(244);

	var _InputBase3 = _interopRequireDefault(_InputBase2);

	var _FormControls = __webpack_require__(343);

	var FormControls = _interopRequireWildcard(_FormControls);

	var _utilsDeprecationWarning = __webpack_require__(187);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	var Input = (function (_InputBase) {
	  _inherits(Input, _InputBase);

	  function Input() {
	    _classCallCheck(this, Input);

	    _InputBase.apply(this, arguments);
	  }

	  Input.prototype.render = function render() {
	    if (this.props.type === 'static') {
	      _utilsDeprecationWarning2['default']('Input type=static', 'StaticText');
	      return _react2['default'].createElement(FormControls.Static, this.props);
	    }

	    return _InputBase.prototype.render.call(this);
	  };

	  return Input;
	})(_InputBase3['default']);

	Input.propTypes = {
	  type: _react2['default'].PropTypes.string
	};

	exports['default'] = Input;
	module.exports = exports['default'];

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _Static2 = __webpack_require__(344);

	var _Static3 = _interopRequireDefault(_Static2);

	exports.Static = _Static3['default'];

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _InputBase2 = __webpack_require__(244);

	var _InputBase3 = _interopRequireDefault(_InputBase2);

	var _utilsChildrenValueInputValidation = __webpack_require__(218);

	var _utilsChildrenValueInputValidation2 = _interopRequireDefault(_utilsChildrenValueInputValidation);

	var Static = (function (_InputBase) {
	  _inherits(Static, _InputBase);

	  function Static() {
	    _classCallCheck(this, Static);

	    _InputBase.apply(this, arguments);
	  }

	  Static.prototype.getValue = function getValue() {
	    var _props = this.props;
	    var children = _props.children;
	    var value = _props.value;

	    return children ? children : value;
	  };

	  Static.prototype.renderInput = function renderInput() {
	    return _react2['default'].createElement(
	      'p',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'form-control-static'), ref: 'input', key: 'input' }),
	      this.getValue()
	    );
	  };

	  return Static;
	})(_InputBase3['default']);

	Static.propTypes = {
	  value: _utilsChildrenValueInputValidation2['default'],
	  children: _utilsChildrenValueInputValidation2['default']
	};

	exports['default'] = Static;
	module.exports = exports['default'];

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

	// https://www.npmjs.org/package/react-interpolate-component
	// TODO: Drop this in favor of es6 string interpolation

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _utilsValidComponentChildren = __webpack_require__(221);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var REGEXP = /\%\((.+?)\)s/;

	var Interpolate = _react2['default'].createClass({
	  displayName: 'Interpolate',

	  propTypes: {
	    component: _react2['default'].PropTypes.node,
	    format: _react2['default'].PropTypes.string,
	    unsafe: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      component: 'span',
	      unsafe: false
	    };
	  },

	  render: function render() {
	    var format = _utilsValidComponentChildren2['default'].hasValidComponent(this.props.children) || typeof this.props.children === 'string' ? this.props.children : this.props.format;
	    var parent = this.props.component;
	    var unsafe = this.props.unsafe === true;
	    var props = _extends({}, this.props);

	    delete props.children;
	    delete props.format;
	    delete props.component;
	    delete props.unsafe;

	    if (unsafe) {
	      var content = format.split(REGEXP).reduce(function (memo, match, index) {
	        var html = undefined;

	        if (index % 2 === 0) {
	          html = match;
	        } else {
	          html = props[match];
	          delete props[match];
	        }

	        if (_react2['default'].isValidElement(html)) {
	          throw new Error('cannot interpolate a React component into unsafe text');
	        }

	        memo += html;

	        return memo;
	      }, '');

	      props.dangerouslySetInnerHTML = { __html: content };

	      return _react2['default'].createElement(parent, props);
	    } else {
	      var kids = format.split(REGEXP).reduce(function (memo, match, index) {
	        var child = undefined;

	        if (index % 2 === 0) {
	          if (match.length === 0) {
	            return memo;
	          }

	          child = match;
	        } else {
	          child = props[match];
	          delete props[match];
	        }

	        memo.push(child);

	        return memo;
	      }, []);

	      return _react2['default'].createElement(parent, props, kids);
	    }
	  }
	});

	exports['default'] = Interpolate;
	module.exports = exports['default'];

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var Jumbotron = _react2['default'].createClass({
	  displayName: 'Jumbotron',

	  propTypes: {
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _utilsCustomPropTypes2['default'].elementType
	  },

	  getDefaultProps: function getDefaultProps() {
	    return { componentClass: 'div' };
	  },

	  render: function render() {
	    var ComponentClass = this.props.componentClass;

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'jumbotron') }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Jumbotron;
	module.exports = exports['default'];

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var Label = _react2['default'].createClass({
	  displayName: 'Label',

	  mixins: [_BootstrapMixin2['default']],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'label',
	      bsStyle: 'default'
	    };
	  },

	  render: function render() {
	    var classes = this.getBsClassSet();

	    return _react2['default'].createElement(
	      'span',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Label;
	module.exports = exports['default'];

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(221);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var ListGroup = (function (_React$Component) {
	  _inherits(ListGroup, _React$Component);

	  function ListGroup() {
	    _classCallCheck(this, ListGroup);

	    _React$Component.apply(this, arguments);
	  }

	  ListGroup.prototype.render = function render() {
	    var _this = this;

	    var items = _utilsValidComponentChildren2['default'].map(this.props.children, function (item, index) {
	      return _react.cloneElement(item, { key: item.key ? item.key : index });
	    });

	    var shouldRenderDiv = false;

	    if (!this.props.children) {
	      shouldRenderDiv = true;
	    } else {
	      _utilsValidComponentChildren2['default'].forEach(this.props.children, function (child) {
	        if (_this.isAnchorOrButton(child.props)) {
	          shouldRenderDiv = true;
	        }
	      });
	    }

	    if (shouldRenderDiv) {
	      return this.renderDiv(items);
	    } else {
	      return this.renderUL(items);
	    }
	  };

	  ListGroup.prototype.isAnchorOrButton = function isAnchorOrButton(props) {
	    return props.href || props.onClick;
	  };

	  ListGroup.prototype.renderUL = function renderUL(items) {
	    var listItems = _utilsValidComponentChildren2['default'].map(items, function (item) {
	      return _react.cloneElement(item, { listItem: true });
	    });

	    return _react2['default'].createElement(
	      'ul',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, 'list-group') }),
	      listItems
	    );
	  };

	  ListGroup.prototype.renderDiv = function renderDiv(items) {
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, 'list-group') }),
	      items
	    );
	  };

	  return ListGroup;
	})(_react2['default'].Component);

	ListGroup.propTypes = {
	  className: _react2['default'].PropTypes.string,
	  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])
	};

	exports['default'] = ListGroup;
	module.exports = exports['default'];

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var ListGroupItem = _react2['default'].createClass({
	  displayName: 'ListGroupItem',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    bsStyle: _react2['default'].PropTypes.oneOf(['danger', 'info', 'success', 'warning']),
	    className: _react2['default'].PropTypes.string,
	    active: _react2['default'].PropTypes.any,
	    disabled: _react2['default'].PropTypes.any,
	    header: _react2['default'].PropTypes.node,
	    listItem: _react2['default'].PropTypes.bool,
	    onClick: _react2['default'].PropTypes.func,
	    eventKey: _react2['default'].PropTypes.any,
	    href: _react2['default'].PropTypes.string,
	    target: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'list-group-item',
	      listItem: false
	    };
	  },

	  render: function render() {
	    var classes = this.getBsClassSet();

	    classes.active = this.props.active;
	    classes.disabled = this.props.disabled;

	    if (this.props.href) {
	      return this.renderAnchor(classes);
	    } else if (this.props.onClick) {
	      return this.renderButton(classes);
	    } else if (this.props.listItem) {
	      return this.renderLi(classes);
	    } else {
	      return this.renderSpan(classes);
	    }
	  },

	  renderLi: function renderLi(classes) {
	    return _react2['default'].createElement(
	      'li',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.header ? this.renderStructuredContent() : this.props.children
	    );
	  },

	  renderAnchor: function renderAnchor(classes) {
	    return _react2['default'].createElement(
	      'a',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, classes)
	      }),
	      this.props.header ? this.renderStructuredContent() : this.props.children
	    );
	  },

	  renderButton: function renderButton(classes) {
	    return _react2['default'].createElement(
	      'button',
	      _extends({
	        type: 'button'
	      }, this.props, {
	        className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  },

	  renderSpan: function renderSpan(classes) {
	    return _react2['default'].createElement(
	      'span',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.header ? this.renderStructuredContent() : this.props.children
	    );
	  },

	  renderStructuredContent: function renderStructuredContent() {
	    var header = undefined;
	    if (_react2['default'].isValidElement(this.props.header)) {
	      header = _react.cloneElement(this.props.header, {
	        key: 'header',
	        className: _classnames2['default'](this.props.header.props.className, 'list-group-item-heading')
	      });
	    } else {
	      header = _react2['default'].createElement(
	        'h4',
	        { key: 'header', className: 'list-group-item-heading' },
	        this.props.header
	      );
	    }

	    var content = _react2['default'].createElement(
	      'p',
	      { key: 'content', className: 'list-group-item-text' },
	      this.props.children
	    );

	    return [header, content];
	  }
	});

	exports['default'] = ListGroupItem;
	module.exports = exports['default'];

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var _SafeAnchor = __webpack_require__(265);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var MenuItem = (function (_React$Component) {
	  _inherits(MenuItem, _React$Component);

	  function MenuItem(props) {
	    _classCallCheck(this, MenuItem);

	    _React$Component.call(this, props);

	    this.handleClick = this.handleClick.bind(this);
	  }

	  MenuItem.prototype.handleClick = function handleClick(event) {
	    if (!this.props.href || this.props.disabled) {
	      event.preventDefault();
	    }

	    if (this.props.disabled) {
	      return;
	    }

	    if (this.props.onSelect) {
	      this.props.onSelect(event, this.props.eventKey);
	    }
	  };

	  MenuItem.prototype.render = function render() {
	    if (this.props.divider) {
	      return _react2['default'].createElement('li', { role: 'separator', className: 'divider' });
	    }

	    if (this.props.header) {
	      return _react2['default'].createElement(
	        'li',
	        { role: 'heading', className: 'dropdown-header' },
	        this.props.children
	      );
	    }

	    var classes = {
	      disabled: this.props.disabled,
	      active: this.props.active
	    };

	    return _react2['default'].createElement(
	      'li',
	      { role: 'presentation',
	        className: _classnames2['default'](this.props.className, classes),
	        style: this.props.style
	      },
	      _react2['default'].createElement(
	        _SafeAnchor2['default'],
	        {
	          role: 'menuitem',
	          tabIndex: '-1',
	          id: this.props.id,
	          target: this.props.target,
	          title: this.props.title,
	          href: this.props.href || '',
	          onKeyDown: this.props.onKeyDown,
	          onClick: this.handleClick },
	        this.props.children
	      )
	    );
	  };

	  return MenuItem;
	})(_react2['default'].Component);

	exports['default'] = MenuItem;

	MenuItem.propTypes = {
	  disabled: _react2['default'].PropTypes.bool,
	  active: _react2['default'].PropTypes.bool,
	  divider: _utilsCustomPropTypes2['default'].all([_react2['default'].PropTypes.bool, function (props) {
	    if (props.divider && props.children) {
	      return new Error('Children will not be rendered for dividers');
	    }
	  }]),
	  eventKey: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
	  header: _react2['default'].PropTypes.bool,
	  href: _react2['default'].PropTypes.string,
	  target: _react2['default'].PropTypes.string,
	  title: _react2['default'].PropTypes.string,
	  onKeyDown: _react2['default'].PropTypes.func,
	  onSelect: _react2['default'].PropTypes.func,
	  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])
	};

	MenuItem.defaultProps = {
	  divider: false,
	  disabled: false,
	  header: false
	};
	module.exports = exports['default'];

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

	/* eslint-disable react/prop-types */
	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _objectWithoutProperties = __webpack_require__(232)['default'];

	var _Object$isFrozen = __webpack_require__(352)['default'];

	var _Object$keys = __webpack_require__(170)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsDomUtils = __webpack_require__(198);

	var _utilsDomUtils2 = _interopRequireDefault(_utilsDomUtils);

	var _domHelpersUtilScrollbarSize = __webpack_require__(355);

	var _domHelpersUtilScrollbarSize2 = _interopRequireDefault(_domHelpersUtilScrollbarSize);

	var _utilsEventListener = __webpack_require__(238);

	var _utilsEventListener2 = _interopRequireDefault(_utilsEventListener);

	var _utilsCreateChainedFunction = __webpack_require__(222);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var _reactOverlaysLibPortal = __webpack_require__(356);

	var _reactOverlaysLibPortal2 = _interopRequireDefault(_reactOverlaysLibPortal);

	var _Fade = __webpack_require__(360);

	var _Fade2 = _interopRequireDefault(_Fade);

	var _ModalDialog = __webpack_require__(361);

	var _ModalDialog2 = _interopRequireDefault(_ModalDialog);

	var _ModalBody = __webpack_require__(362);

	var _ModalBody2 = _interopRequireDefault(_ModalBody);

	var _ModalHeader = __webpack_require__(363);

	var _ModalHeader2 = _interopRequireDefault(_ModalHeader);

	var _ModalTitle = __webpack_require__(364);

	var _ModalTitle2 = _interopRequireDefault(_ModalTitle);

	var _ModalFooter = __webpack_require__(365);

	var _ModalFooter2 = _interopRequireDefault(_ModalFooter);

	/**
	 * Gets the correct clientHeight of the modal container
	 * when the body/window/document you need to use the docElement clientHeight
	 * @param  {HTMLElement} container
	 * @param  {ReactElement|HTMLElement} context
	 * @return {Number}
	 */
	function containerClientHeight(container, context) {
	  var doc = _utilsDomUtils2['default'].ownerDocument(context);

	  return container === doc.body || container === doc.documentElement ? doc.documentElement.clientHeight : container.clientHeight;
	}

	function getContainer(context) {
	  return context.props.container && _react2['default'].findDOMNode(context.props.container) || _utilsDomUtils2['default'].ownerDocument(context).body;
	}

	var currentFocusListener = undefined;

	/**
	 * Firefox doesn't have a focusin event so using capture is easiest way to get bubbling
	 * IE8 can't do addEventListener, but does have onfocusin, so we use that in ie8
	 *
	 * We only allow one Listener at a time to avoid stack overflows
	 *
	 * @param  {ReactElement|HTMLElement} context
	 * @param  {Function} handler
	 */
	function onFocus(context, handler) {
	  var doc = _utilsDomUtils2['default'].ownerDocument(context);
	  var useFocusin = !doc.addEventListener;
	  var remove = undefined;

	  if (currentFocusListener) {
	    currentFocusListener.remove();
	  }

	  if (useFocusin) {
	    document.attachEvent('onfocusin', handler);
	    remove = function () {
	      return document.detachEvent('onfocusin', handler);
	    };
	  } else {
	    document.addEventListener('focus', handler, true);
	    remove = function () {
	      return document.removeEventListener('focus', handler, true);
	    };
	  }

	  currentFocusListener = { remove: remove };

	  return currentFocusListener;
	}

	var Modal = _react2['default'].createClass({
	  displayName: 'Modal',

	  propTypes: _extends({}, _reactOverlaysLibPortal2['default'].propTypes, _ModalDialog2['default'].propTypes, {

	    /**
	     * Include a backdrop component. Specify 'static' for a backdrop that doesn't trigger an "onHide" when clicked.
	     */
	    backdrop: _react2['default'].PropTypes.oneOf(['static', true, false]),

	    /**
	     * Close the modal when escape key is pressed
	     */
	    keyboard: _react2['default'].PropTypes.bool,

	    /**
	     * Open and close the Modal with a slide and fade animation.
	     */
	    animation: _react2['default'].PropTypes.bool,

	    /**
	     * A Component type that provides the modal content Markup. This is a useful prop when you want to use your own
	     * styles and markup to create a custom modal component.
	     */
	    dialogComponent: _utilsCustomPropTypes2['default'].elementType,

	    /**
	     * When `true` The modal will automatically shift focus to itself when it opens, and replace it to the last focused element when it closes.
	     * Generally this should never be set to false as it makes the Modal less accessible to assistive technologies, like screen-readers.
	     */
	    autoFocus: _react2['default'].PropTypes.bool,

	    /**
	     * When `true` The modal will prevent focus from leaving the Modal while open.
	     * Consider leaving the default value here, as it is necessary to make the Modal work well with assistive technologies,
	     * such as screen readers.
	     */
	    enforceFocus: _react2['default'].PropTypes.bool,

	    /**
	     * Hide this from automatic props documentation generation.
	     * @private
	     */
	    bsStyle: _react2['default'].PropTypes.string,

	    /**
	     * When `true` The modal will show itself.
	     */
	    show: _react2['default'].PropTypes.bool
	  }),

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'modal',
	      dialogComponent: _ModalDialog2['default'],
	      show: false,
	      animation: true,
	      backdrop: true,
	      keyboard: true,
	      autoFocus: true,
	      enforceFocus: true
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      exited: !this.props.show
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var animation = _props.animation;
	    var backdrop = _props.backdrop;

	    var props = _objectWithoutProperties(_props, ['children', 'animation', 'backdrop']);

	    var onExit = props.onExit;
	    var onExiting = props.onExiting;
	    var onEnter = props.onEnter;
	    var onEntering = props.onEntering;
	    var onEntered = props.onEntered;

	    var show = !!props.show;
	    var Dialog = props.dialogComponent;

	    var mountModal = show || animation && !this.state.exited;
	    if (!mountModal) {
	      return null;
	    }

	    var modal = _react2['default'].createElement(
	      Dialog,
	      _extends({}, props, {
	        ref: this._setDialogRef,
	        className: _classnames2['default'](this.props.className, { 'in': show && !animation }),
	        onClick: backdrop === true ? this.handleBackdropClick : null }),
	      this.renderContent()
	    );

	    if (animation) {
	      modal = _react2['default'].createElement(
	        _Fade2['default'],
	        {
	          transitionAppear: true,
	          unmountOnExit: true,
	          'in': show,
	          timeout: Modal.TRANSITION_DURATION,
	          onExit: onExit,
	          onExiting: onExiting,
	          onExited: this.handleHidden,
	          onEnter: onEnter,
	          onEntering: onEntering,
	          onEntered: onEntered },
	        modal
	      );
	    }

	    if (backdrop) {
	      modal = this.renderBackdrop(modal);
	    }

	    return _react2['default'].createElement(
	      _reactOverlaysLibPortal2['default'],
	      { container: props.container },
	      modal
	    );
	  },

	  renderContent: function renderContent() {
	    var _this = this;

	    return _react2['default'].Children.map(this.props.children, function (child) {
	      // TODO: use context in 0.14
	      if (child && child.type && child.type.__isModalHeader) {
	        return _react.cloneElement(child, {
	          onHide: _utilsCreateChainedFunction2['default'](_this.props.onHide, child.props.onHide)
	        });
	      }
	      return child;
	    });
	  },

	  renderBackdrop: function renderBackdrop(modal) {
	    var _props2 = this.props;
	    var animation = _props2.animation;
	    var bsClass = _props2.bsClass;

	    var duration = Modal.BACKDROP_TRANSITION_DURATION;

	    // Don't handle clicks for "static" backdrops
	    var onClick = this.props.backdrop === true ? this.handleBackdropClick : null;

	    var backdrop = _react2['default'].createElement('div', {
	      ref: 'backdrop',
	      className: _classnames2['default'](bsClass + '-backdrop', { 'in': this.props.show && !animation }),
	      onClick: onClick });

	    return _react2['default'].createElement(
	      'div',
	      {
	        ref: 'modal' },
	      animation ? _react2['default'].createElement(
	        _Fade2['default'],
	        { transitionAppear: true, 'in': this.props.show, timeout: duration },
	        backdrop
	      ) : backdrop,
	      modal
	    );
	  },

	  _setDialogRef: function _setDialogRef(ref) {
	    // issue #1074
	    // due to: https://github.com/facebook/react/blob/v0.13.3/src/core/ReactCompositeComponent.js#L842
	    //
	    // when backdrop is `false` react hasn't had a chance to reassign the refs to a usable object, b/c there are no other
	    // "classic" refs on the component (or they haven't been processed yet)
	    // TODO: Remove the need for this in next breaking release
	    if (_Object$isFrozen(this.refs) && !_Object$keys(this.refs).length) {
	      this.refs = {};
	    }

	    this.refs.dialog = ref;

	    // maintains backwards compat with older component breakdown
	    if (!this.props.backdrop) {
	      this.refs.modal = ref;
	    }
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (nextProps.show) {
	      this.setState({ exited: false });
	    } else if (!nextProps.animation) {
	      // Otherwise let handleHidden take care of marking exited.
	      this.setState({ exited: true });
	    }
	  },

	  componentWillUpdate: function componentWillUpdate(nextProps) {
	    if (nextProps.show) {
	      this.checkForFocus();
	    }
	  },

	  componentDidMount: function componentDidMount() {
	    if (this.props.show) {
	      this.onShow();
	    }
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    var animation = this.props.animation;

	    if (prevProps.show && !this.props.show && !animation) {
	      // otherwise handleHidden will call this.
	      this.onHide();
	    } else if (!prevProps.show && this.props.show) {
	      this.onShow();
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this.props.show) {
	      this.onHide();
	    }
	  },

	  onShow: function onShow() {
	    var _this2 = this;

	    var doc = _utilsDomUtils2['default'].ownerDocument(this);
	    var win = _utilsDomUtils2['default'].ownerWindow(this);

	    this._onDocumentKeyupListener = _utilsEventListener2['default'].listen(doc, 'keyup', this.handleDocumentKeyUp);

	    this._onWindowResizeListener = _utilsEventListener2['default'].listen(win, 'resize', this.handleWindowResize);

	    if (this.props.enforceFocus) {
	      this._onFocusinListener = onFocus(this, this.enforceFocus);
	    }

	    var container = getContainer(this);

	    container.className += container.className.length ? ' modal-open' : 'modal-open';

	    this._containerIsOverflowing = container.scrollHeight > containerClientHeight(container, this);

	    this._originalPadding = container.style.paddingRight;

	    if (this._containerIsOverflowing) {
	      container.style.paddingRight = parseInt(this._originalPadding || 0, 10) + _domHelpersUtilScrollbarSize2['default']() + 'px';
	    }

	    if (this.props.backdrop) {
	      this.iosClickHack();
	    }

	    this.setState(this._getStyles(), function () {
	      return _this2.focusModalContent();
	    });
	  },

	  onHide: function onHide() {
	    this._onDocumentKeyupListener.remove();
	    this._onWindowResizeListener.remove();

	    if (this._onFocusinListener) {
	      this._onFocusinListener.remove();
	    }

	    var container = getContainer(this);

	    container.style.paddingRight = this._originalPadding;

	    container.className = container.className.replace(/ ?modal-open/, '');

	    this.restoreLastFocus();
	  },

	  handleHidden: function handleHidden() {
	    this.setState({ exited: true });

	    this.onHide();

	    if (this.props.onExited) {
	      var _props3;

	      (_props3 = this.props).onExited.apply(_props3, arguments);
	    }
	  },

	  handleBackdropClick: function handleBackdropClick(e) {
	    if (e.target !== e.currentTarget) {
	      return;
	    }

	    this.props.onHide();
	  },

	  handleDocumentKeyUp: function handleDocumentKeyUp(e) {
	    if (this.props.keyboard && e.keyCode === 27) {
	      this.props.onHide();
	    }
	  },

	  handleWindowResize: function handleWindowResize() {
	    this.setState(this._getStyles());
	  },

	  checkForFocus: function checkForFocus() {
	    if (_utilsDomUtils2['default'].canUseDom) {
	      this.lastFocus = _utilsDomUtils2['default'].activeElement(document);
	    }
	  },

	  focusModalContent: function focusModalContent() {
	    var modalContent = _react2['default'].findDOMNode(this.refs.dialog);
	    var current = _utilsDomUtils2['default'].activeElement(_utilsDomUtils2['default'].ownerDocument(this));
	    var focusInModal = current && _utilsDomUtils2['default'].contains(modalContent, current);

	    if (modalContent && this.props.autoFocus && !focusInModal) {
	      this.lastFocus = current;
	      modalContent.focus();
	    }
	  },

	  restoreLastFocus: function restoreLastFocus() {
	    if (this.lastFocus && this.lastFocus.focus) {
	      this.lastFocus.focus();
	      this.lastFocus = null;
	    }
	  },

	  enforceFocus: function enforceFocus() {
	    if (!this.isMounted()) {
	      return;
	    }

	    var active = _utilsDomUtils2['default'].activeElement(_utilsDomUtils2['default'].ownerDocument(this));
	    var modal = _react2['default'].findDOMNode(this.refs.dialog);

	    if (modal && modal !== active && !_utilsDomUtils2['default'].contains(modal, active)) {
	      modal.focus();
	    }
	  },

	  iosClickHack: function iosClickHack() {
	    // IOS only allows click events to be delegated to the document on elements
	    // it considers 'clickable' - anchors, buttons, etc. We fake a click handler on the
	    // DOM nodes themselves. Remove if handled by React: https://github.com/facebook/react/issues/1169
	    _react2['default'].findDOMNode(this.refs.modal).onclick = function () {};
	    _react2['default'].findDOMNode(this.refs.backdrop).onclick = function () {};
	  },

	  _getStyles: function _getStyles() {
	    if (!_utilsDomUtils2['default'].canUseDom) {
	      return {};
	    }

	    var node = _react2['default'].findDOMNode(this.refs.modal);
	    var scrollHt = node.scrollHeight;
	    var container = getContainer(this);
	    var containerIsOverflowing = this._containerIsOverflowing;
	    var modalIsOverflowing = scrollHt > containerClientHeight(container, this);

	    return {
	      dialogStyles: {
	        paddingRight: containerIsOverflowing && !modalIsOverflowing ? _domHelpersUtilScrollbarSize2['default']() : void 0,
	        paddingLeft: !containerIsOverflowing && modalIsOverflowing ? _domHelpersUtilScrollbarSize2['default']() : void 0
	      }
	    };
	  }

	});

	Modal.Body = _ModalBody2['default'];
	Modal.Header = _ModalHeader2['default'];
	Modal.Title = _ModalTitle2['default'];
	Modal.Footer = _ModalFooter2['default'];

	Modal.Dialog = _ModalDialog2['default'];

	Modal.TRANSITION_DURATION = 300;
	Modal.BACKDROP_TRANSITION_DURATION = 150;

	exports['default'] = Modal;
	module.exports = exports['default'];

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(353), __esModule: true };

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(354);
	module.exports = __webpack_require__(178).Object.isFrozen;

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.12 Object.isFrozen(O)
	var isObject = __webpack_require__(195);

	__webpack_require__(175)('isFrozen', function($isFrozen){
	  return function isFrozen(it){
	    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var canUseDOM = __webpack_require__(199);

	var size;

	module.exports = function (recalc) {
	  if (!size || recalc) {
	    if (canUseDOM) {
	      var scrollDiv = document.createElement('div');

	      scrollDiv.style.position = 'absolute';
	      scrollDiv.style.top = '-9999px';
	      scrollDiv.style.width = '50px';
	      scrollDiv.style.height = '50px';
	      scrollDiv.style.overflow = 'scroll';

	      document.body.appendChild(scrollDiv);
	      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	      document.body.removeChild(scrollDiv);
	    }
	  }

	  return size;
	};

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _reactPropTypesLibMountable = __webpack_require__(357);

	var _reactPropTypesLibMountable2 = _interopRequireDefault(_reactPropTypesLibMountable);

	var _utilsOwnerDocument = __webpack_require__(271);

	var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

	var _utilsGetContainer = __webpack_require__(359);

	var _utilsGetContainer2 = _interopRequireDefault(_utilsGetContainer);

	/**
	 * The `<Portal/>` component renders its children into a new "subtree" outside of current component hierarchy.
	 * You can think of it as a declarative `appendChild()`, or jQuery's `$.fn.appendTo()`.
	 * The children of `<Portal/>` component will be appended to the `container` specified.
	 */
	var Portal = _react2['default'].createClass({

	  displayName: 'Portal',

	  propTypes: {
	    /**
	     * A Node, Component instance, or function that returns either. The `container` will have the Portal children
	     * appended to it.
	     */
	    container: _react2['default'].PropTypes.oneOfType([_reactPropTypesLibMountable2['default'], _react2['default'].PropTypes.func])
	  },

	  componentDidMount: function componentDidMount() {
	    this._renderOverlay();
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this._renderOverlay();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this._unrenderOverlay();
	    this._unmountOverlayTarget();
	  },

	  _mountOverlayTarget: function _mountOverlayTarget() {
	    if (!this._overlayTarget) {
	      this._overlayTarget = document.createElement('div');
	      this.getContainerDOMNode().appendChild(this._overlayTarget);
	    }
	  },

	  _unmountOverlayTarget: function _unmountOverlayTarget() {
	    if (this._overlayTarget) {
	      this.getContainerDOMNode().removeChild(this._overlayTarget);
	      this._overlayTarget = null;
	    }
	  },

	  _renderOverlay: function _renderOverlay() {

	    var overlay = !this.props.children ? null : _react2['default'].Children.only(this.props.children);

	    // Save reference for future access.
	    if (overlay !== null) {
	      this._mountOverlayTarget();
	      this._overlayInstance = _react2['default'].render(overlay, this._overlayTarget);
	    } else {
	      // Unrender if the component is null for transitions to null
	      this._unrenderOverlay();
	      this._unmountOverlayTarget();
	    }
	  },

	  _unrenderOverlay: function _unrenderOverlay() {
	    if (this._overlayTarget) {
	      _react2['default'].unmountComponentAtNode(this._overlayTarget);
	      this._overlayInstance = null;
	    }
	  },

	  render: function render() {
	    return null;
	  },

	  getOverlayDOMNode: function getOverlayDOMNode() {
	    if (!this.isMounted()) {
	      throw new Error('getOverlayDOMNode(): A component must be mounted to have a DOM node.');
	    }

	    if (this._overlayInstance) {
	      if (this._overlayInstance.getWrappedDOMNode) {
	        return this._overlayInstance.getWrappedDOMNode();
	      } else {
	        return _react2['default'].findDOMNode(this._overlayInstance);
	      }
	    }

	    return null;
	  },

	  getContainerDOMNode: function getContainerDOMNode() {
	    return _utilsGetContainer2['default'](this.props.container, _utilsOwnerDocument2['default'](this).body);
	  }
	});

	exports['default'] = Portal;
	module.exports = exports['default'];

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _common = __webpack_require__(358);

	/**
	 * Checks whether a prop provides a DOM element
	 *
	 * The element can be provided in two forms:
	 * - Directly passed
	 * - Or passed an object that has a `render` method
	 *
	 * @param props
	 * @param propName
	 * @param componentName
	 * @returns {Error|undefined}
	 */

	function validate(props, propName, componentName) {
	  if (typeof props[propName] !== 'object' || typeof props[propName].render !== 'function' && props[propName].nodeType !== 1) {
	    return new Error(_common.errMsg(props, propName, componentName, ', expected a DOM element or an object that has a `render` method'));
	  }
	}

	exports['default'] = _common.createChainableTypeChecker(validate);
	module.exports = exports['default'];

/***/ }),
/* 358 */
/***/ (function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.errMsg = errMsg;
	exports.createChainableTypeChecker = createChainableTypeChecker;

	function errMsg(props, propName, componentName, msgContinuation) {
	  return 'Invalid prop \'' + propName + '\' of value \'' + props[propName] + '\'' + (' supplied to \'' + componentName + '\'' + msgContinuation);
	}

	/**
	 * Create chain-able isRequired validator
	 *
	 * Largely copied directly from:
	 *  https://github.com/facebook/react/blob/0.11-stable/src/core/ReactPropTypes.js#L94
	 */

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName) {
	    componentName = componentName || '<<anonymous>>';
	    if (props[propName] == null) {
	      if (isRequired) {
	        return new Error('Required prop \'' + propName + '\' was not specified in \'' + componentName + '\'.');
	      }
	    } else {
	      return validate(props, propName, componentName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = getContainer;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	function getContainer(container, defaultContainer) {
	  container = typeof container === 'function' ? container() : container;
	  return _react2['default'].findDOMNode(container) || defaultContainer;
	}

	module.exports = exports['default'];

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _reactOverlaysLibTransition = __webpack_require__(255);

	var _reactOverlaysLibTransition2 = _interopRequireDefault(_reactOverlaysLibTransition);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var _utilsDeprecationWarning = __webpack_require__(187);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	var Fade = (function (_React$Component) {
	  _inherits(Fade, _React$Component);

	  function Fade() {
	    _classCallCheck(this, Fade);

	    _React$Component.apply(this, arguments);
	  }

	  // Explicitly copied from Transition for doc generation.
	  // TODO: Remove duplication once #977 is resolved.

	  Fade.prototype.render = function render() {
	    var timeout = this.props.timeout || this.props.duration;

	    return _react2['default'].createElement(
	      _reactOverlaysLibTransition2['default'],
	      _extends({}, this.props, {
	        timeout: timeout,
	        className: 'fade',
	        enteredClassName: 'in',
	        enteringClassName: 'in'
	      }),
	      this.props.children
	    );
	  };

	  return Fade;
	})(_react2['default'].Component);

	Fade.propTypes = {
	  /**
	   * Show the component; triggers the fade in or fade out animation
	   */
	  'in': _react2['default'].PropTypes.bool,

	  /**
	   * Unmount the component (remove it from the DOM) when it is faded out
	   */
	  unmountOnExit: _react2['default'].PropTypes.bool,

	  /**
	   * Run the fade in animation when the component mounts, if it is initially
	   * shown
	   */
	  transitionAppear: _react2['default'].PropTypes.bool,

	  /**
	   * Duration of the fade animation in milliseconds, to ensure that finishing
	   * callbacks are fired even if the original browser transition end events are
	   * canceled
	   */
	  timeout: _react2['default'].PropTypes.number,

	  /**
	   * duration
	   * @private
	   */
	  duration: _utilsCustomPropTypes2['default'].all([_react2['default'].PropTypes.number, function (props) {
	    if (props.duration != null) {
	      _utilsDeprecationWarning2['default']('Fade `duration`', 'the `timeout` prop');
	    }
	    return null;
	  }]),

	  /**
	   * Callback fired before the component fades in
	   */
	  onEnter: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component starts to fade in
	   */
	  onEntering: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the has component faded in
	   */
	  onEntered: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired before the component fades out
	   */
	  onExit: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component starts to fade out
	   */
	  onExiting: _react2['default'].PropTypes.func,
	  /**
	   * Callback fired after the component has faded out
	   */
	  onExited: _react2['default'].PropTypes.func
	};

	Fade.defaultProps = {
	  'in': false,
	  timeout: 300,
	  unmountOnExit: false,
	  transitionAppear: false
	};

	exports['default'] = Fade;
	module.exports = exports['default'];

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

	/* eslint-disable react/prop-types */
	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var ModalDialog = _react2['default'].createClass({
	  displayName: 'ModalDialog',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    /**
	     * A Callback fired when the header closeButton or non-static backdrop is clicked.
	     * @type {function}
	     * @required
	     */
	    onHide: _react2['default'].PropTypes.func.isRequired,

	    /**
	     * A css class to apply to the Modal dialog DOM node.
	     */
	    dialogClassName: _react2['default'].PropTypes.string

	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'modal',
	      closeButton: true
	    };
	  },

	  render: function render() {
	    var modalStyle = _extends({
	      display: 'block'
	    }, this.props.style);
	    var bsClass = this.props.bsClass;
	    var dialogClasses = this.getBsClassSet();

	    delete dialogClasses.modal;
	    dialogClasses[bsClass + '-dialog'] = true;

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        title: null,
	        tabIndex: '-1',
	        role: 'dialog',
	        style: modalStyle,
	        className: _classnames2['default'](this.props.className, bsClass) }),
	      _react2['default'].createElement(
	        'div',
	        { className: _classnames2['default'](this.props.dialogClassName, dialogClasses) },
	        _react2['default'].createElement(
	          'div',
	          { className: bsClass + '-content', role: 'document' },
	          this.props.children
	        )
	      )
	    );
	  }
	});

	exports['default'] = ModalDialog;
	module.exports = exports['default'];

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var ModalBody = (function (_React$Component) {
	  _inherits(ModalBody, _React$Component);

	  function ModalBody() {
	    _classCallCheck(this, ModalBody);

	    _React$Component.apply(this, arguments);
	  }

	  ModalBody.prototype.render = function render() {
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, this.props.modalClassName) }),
	      this.props.children
	    );
	  };

	  return ModalBody;
	})(_react2['default'].Component);

	ModalBody.propTypes = {
	  /**
	   * A css class applied to the Component
	   */
	  modalClassName: _react2['default'].PropTypes.string
	};

	ModalBody.defaultProps = {
	  modalClassName: 'modal-body'
	};

	exports['default'] = ModalBody;
	module.exports = exports['default'];

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var ModalHeader = (function (_React$Component) {
	  _inherits(ModalHeader, _React$Component);

	  function ModalHeader() {
	    _classCallCheck(this, ModalHeader);

	    _React$Component.apply(this, arguments);
	  }

	  // used in liue of parent contexts right now to auto wire the close button

	  ModalHeader.prototype.render = function render() {
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, this.props.modalClassName) }),
	      this.props.closeButton && _react2['default'].createElement(
	        'button',
	        {
	          className: 'close',
	          onClick: this.props.onHide },
	        _react2['default'].createElement(
	          'span',
	          { 'aria-hidden': 'true' },
	          '×'
	        )
	      ),
	      this.props.children
	    );
	  };

	  return ModalHeader;
	})(_react2['default'].Component);

	ModalHeader.__isModalHeader = true;

	ModalHeader.propTypes = {
	  /**
	   * The 'aria-label' attribute is used to define a string that labels the current element.
	   * It is used for Assistive Technology when the label text is not visible on screen.
	   */
	  'aria-label': _react2['default'].PropTypes.string,

	  /**
	   * A css class applied to the Component
	   */
	  modalClassName: _react2['default'].PropTypes.string,

	  /**
	   * Specify whether the Component should contain a close button
	   */
	  closeButton: _react2['default'].PropTypes.bool,

	  /**
	   * A Callback fired when the close button is clicked. If used directly inside a Modal component, the onHide will automatically
	   * be propagated up to the parent Modal `onHide`.
	   */
	  onHide: _react2['default'].PropTypes.func
	};

	ModalHeader.defaultProps = {
	  'aria-label': 'Close',
	  modalClassName: 'modal-header',
	  closeButton: false
	};

	exports['default'] = ModalHeader;
	module.exports = exports['default'];

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var ModalTitle = (function (_React$Component) {
	  _inherits(ModalTitle, _React$Component);

	  function ModalTitle() {
	    _classCallCheck(this, ModalTitle);

	    _React$Component.apply(this, arguments);
	  }

	  ModalTitle.prototype.render = function render() {
	    return _react2['default'].createElement(
	      'h4',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, this.props.modalClassName) }),
	      this.props.children
	    );
	  };

	  return ModalTitle;
	})(_react2['default'].Component);

	ModalTitle.propTypes = {
	  /**
	   * A css class applied to the Component
	   */
	  modalClassName: _react2['default'].PropTypes.string
	};

	ModalTitle.defaultProps = {
	  modalClassName: 'modal-title'
	};

	exports['default'] = ModalTitle;
	module.exports = exports['default'];

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var ModalFooter = (function (_React$Component) {
	  _inherits(ModalFooter, _React$Component);

	  function ModalFooter() {
	    _classCallCheck(this, ModalFooter);

	    _React$Component.apply(this, arguments);
	  }

	  ModalFooter.prototype.render = function render() {
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, this.props.modalClassName) }),
	      this.props.children
	    );
	  };

	  return ModalFooter;
	})(_react2['default'].Component);

	ModalFooter.propTypes = {
	  /**
	   * A css class applied to the Component
	   */
	  modalClassName: _react2['default'].PropTypes.string
	};

	ModalFooter.defaultProps = {
	  modalClassName: 'modal-footer'
	};

	exports['default'] = ModalFooter;
	module.exports = exports['default'];

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _Collapse = __webpack_require__(254);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(221);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsCreateChainedFunction = __webpack_require__(222);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var Nav = _react2['default'].createClass({
	  displayName: 'Nav',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    activeHref: _react2['default'].PropTypes.string,
	    activeKey: _react2['default'].PropTypes.any,
	    bsStyle: _react2['default'].PropTypes.oneOf(['tabs', 'pills']),
	    stacked: _react2['default'].PropTypes.bool,
	    justified: _react2['default'].PropTypes.bool,
	    onSelect: _react2['default'].PropTypes.func,
	    collapsible: _react2['default'].PropTypes.bool,
	    /**
	     * CSS classes for the wrapper `nav` element
	     */
	    className: _react2['default'].PropTypes.string,
	    /**
	     * HTML id for the wrapper `nav` element
	     */
	    id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    /**
	     * CSS classes for the inner `ul` element
	     */
	    ulClassName: _react2['default'].PropTypes.string,
	    /**
	     * HTML id for the inner `ul` element
	     */
	    ulId: _react2['default'].PropTypes.string,
	    expanded: _react2['default'].PropTypes.bool,
	    navbar: _react2['default'].PropTypes.bool,
	    eventKey: _react2['default'].PropTypes.any,
	    pullRight: _react2['default'].PropTypes.bool,
	    right: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'nav',
	      collapsible: false,
	      expanded: true,
	      justified: false,
	      navbar: false,
	      pullRight: false,
	      right: false,
	      stacked: false
	    };
	  },

	  render: function render() {
	    var classes = this.props.collapsible ? 'navbar-collapse' : null;

	    if (this.props.navbar && !this.props.collapsible) {
	      return this.renderUl();
	    }

	    return _react2['default'].createElement(
	      _Collapse2['default'],
	      { 'in': this.props.expanded },
	      _react2['default'].createElement(
	        'nav',
	        _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	        this.renderUl()
	      )
	    );
	  },

	  renderUl: function renderUl() {
	    var classes = this.getBsClassSet();

	    classes['nav-stacked'] = this.props.stacked;
	    classes['nav-justified'] = this.props.justified;
	    classes['navbar-nav'] = this.props.navbar;
	    classes['pull-right'] = this.props.pullRight;
	    classes['navbar-right'] = this.props.right;

	    return _react2['default'].createElement(
	      'ul',
	      _extends({}, this.props, {
	        role: this.props.bsStyle === 'tabs' ? 'tablist' : null,
	        className: _classnames2['default'](this.props.ulClassName, classes),
	        id: this.props.ulId,
	        ref: 'ul'
	      }),
	      _utilsValidComponentChildren2['default'].map(this.props.children, this.renderNavItem)
	    );
	  },

	  getChildActiveProp: function getChildActiveProp(child) {
	    if (child.props.active) {
	      return true;
	    }
	    if (this.props.activeKey != null) {
	      if (child.props.eventKey === this.props.activeKey) {
	        return true;
	      }
	    }
	    if (this.props.activeHref != null) {
	      if (child.props.href === this.props.activeHref) {
	        return true;
	      }
	    }

	    return child.props.active;
	  },

	  renderNavItem: function renderNavItem(child, index) {
	    return _react.cloneElement(child, {
	      role: this.props.bsStyle === 'tabs' ? 'tab' : null,
	      active: this.getChildActiveProp(child),
	      activeKey: this.props.activeKey,
	      activeHref: this.props.activeHref,
	      onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
	      key: child.key ? child.key : index,
	      navItem: true
	    });
	  }
	});

	exports['default'] = Nav;
	module.exports = exports['default'];

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(221);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsCreateChainedFunction = __webpack_require__(222);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var Navbar = _react2['default'].createClass({
	  displayName: 'Navbar',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    fixedTop: _react2['default'].PropTypes.bool,
	    fixedBottom: _react2['default'].PropTypes.bool,
	    staticTop: _react2['default'].PropTypes.bool,
	    inverse: _react2['default'].PropTypes.bool,
	    fluid: _react2['default'].PropTypes.bool,
	    role: _react2['default'].PropTypes.string,
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _utilsCustomPropTypes2['default'].elementType,
	    brand: _react2['default'].PropTypes.node,
	    toggleButton: _react2['default'].PropTypes.node,
	    toggleNavKey: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    onToggle: _react2['default'].PropTypes.func,
	    navExpanded: _react2['default'].PropTypes.bool,
	    defaultNavExpanded: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'navbar',
	      bsStyle: 'default',
	      role: 'navigation',
	      componentClass: 'nav',
	      fixedTop: false,
	      fixedBottom: false,
	      staticTop: false,
	      inverse: false,
	      fluid: false,
	      defaultNavExpanded: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      navExpanded: this.props.defaultNavExpanded
	    };
	  },

	  shouldComponentUpdate: function shouldComponentUpdate() {
	    // Defer any updates to this component during the `onSelect` handler.
	    return !this._isChanging;
	  },

	  handleToggle: function handleToggle() {
	    if (this.props.onToggle) {
	      this._isChanging = true;
	      this.props.onToggle();
	      this._isChanging = false;
	    }

	    this.setState({
	      navExpanded: !this.state.navExpanded
	    });
	  },

	  isNavExpanded: function isNavExpanded() {
	    return this.props.navExpanded != null ? this.props.navExpanded : this.state.navExpanded;
	  },

	  render: function render() {
	    var classes = this.getBsClassSet();
	    var ComponentClass = this.props.componentClass;

	    classes['navbar-fixed-top'] = this.props.fixedTop;
	    classes['navbar-fixed-bottom'] = this.props.fixedBottom;
	    classes['navbar-static-top'] = this.props.staticTop;
	    classes['navbar-inverse'] = this.props.inverse;

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      _react2['default'].createElement(
	        'div',
	        { className: this.props.fluid ? 'container-fluid' : 'container' },
	        this.props.brand || this.props.toggleButton || this.props.toggleNavKey != null ? this.renderHeader() : null,
	        _utilsValidComponentChildren2['default'].map(this.props.children, this.renderChild)
	      )
	    );
	  },

	  renderChild: function renderChild(child, index) {
	    return _react.cloneElement(child, {
	      navbar: true,
	      collapsible: this.props.toggleNavKey != null && this.props.toggleNavKey === child.props.eventKey,
	      expanded: this.props.toggleNavKey != null && this.props.toggleNavKey === child.props.eventKey && this.isNavExpanded(),
	      key: child.key ? child.key : index
	    });
	  },

	  renderHeader: function renderHeader() {
	    var brand = undefined;

	    if (this.props.brand) {
	      if (_react2['default'].isValidElement(this.props.brand)) {
	        brand = _react.cloneElement(this.props.brand, {
	          className: _classnames2['default'](this.props.brand.props.className, 'navbar-brand')
	        });
	      } else {
	        brand = _react2['default'].createElement(
	          'span',
	          { className: 'navbar-brand' },
	          this.props.brand
	        );
	      }
	    }

	    return _react2['default'].createElement(
	      'div',
	      { className: 'navbar-header' },
	      brand,
	      this.props.toggleButton || this.props.toggleNavKey != null ? this.renderToggleButton() : null
	    );
	  },

	  renderToggleButton: function renderToggleButton() {
	    var children = undefined;

	    if (_react2['default'].isValidElement(this.props.toggleButton)) {
	      return _react.cloneElement(this.props.toggleButton, {
	        className: _classnames2['default'](this.props.toggleButton.props.className, 'navbar-toggle'),
	        onClick: _utilsCreateChainedFunction2['default'](this.handleToggle, this.props.toggleButton.props.onClick)
	      });
	    }

	    children = this.props.toggleButton != null ? this.props.toggleButton : [_react2['default'].createElement(
	      'span',
	      { className: 'sr-only', key: 0 },
	      'Toggle navigation'
	    ), _react2['default'].createElement('span', { className: 'icon-bar', key: 1 }), _react2['default'].createElement('span', { className: 'icon-bar', key: 2 }), _react2['default'].createElement('span', { className: 'icon-bar', key: 3 })];

	    return _react2['default'].createElement(
	      'button',
	      { className: 'navbar-toggle', type: 'button', onClick: this.handleToggle },
	      children
	    );
	  }
	});

	exports['default'] = Navbar;
	module.exports = exports['default'];

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(232)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _SafeAnchor = __webpack_require__(265);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var NavItem = _react2['default'].createClass({
	  displayName: 'NavItem',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    linkId: _react2['default'].PropTypes.string,
	    onSelect: _react2['default'].PropTypes.func,
	    active: _react2['default'].PropTypes.bool,
	    disabled: _react2['default'].PropTypes.bool,
	    href: _react2['default'].PropTypes.string,
	    role: _react2['default'].PropTypes.string,
	    title: _react2['default'].PropTypes.node,
	    eventKey: _react2['default'].PropTypes.any,
	    target: _react2['default'].PropTypes.string,
	    'aria-controls': _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      active: false,
	      disabled: false
	    };
	  },

	  render: function render() {
	    var _props = this.props;
	    var role = _props.role;
	    var linkId = _props.linkId;
	    var disabled = _props.disabled;
	    var active = _props.active;
	    var href = _props.href;
	    var title = _props.title;
	    var target = _props.target;
	    var children = _props.children;
	    var tabIndex = _props.tabIndex;
	    var ariaControls = _props['aria-controls'];

	    var props = _objectWithoutProperties(_props, ['role', 'linkId', 'disabled', 'active', 'href', 'title', 'target', 'children', 'tabIndex', 'aria-controls']);

	    var classes = {
	      active: active,
	      disabled: disabled
	    };
	    var linkProps = {
	      role: role,
	      href: href,
	      title: title,
	      target: target,
	      tabIndex: tabIndex,
	      id: linkId,
	      onClick: this.handleClick
	    };

	    if (!role && href === '#') {
	      linkProps.role = 'button';
	    }

	    return _react2['default'].createElement(
	      'li',
	      _extends({}, props, { role: 'presentation', className: _classnames2['default'](props.className, classes) }),
	      _react2['default'].createElement(
	        _SafeAnchor2['default'],
	        _extends({}, linkProps, { 'aria-selected': active, 'aria-controls': ariaControls }),
	        children
	      )
	    );
	  },

	  handleClick: function handleClick(e) {
	    if (this.props.onSelect) {
	      e.preventDefault();

	      if (!this.props.disabled) {
	        this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
	      }
	    }
	  }
	});

	exports['default'] = NavItem;
	module.exports = exports['default'];
	//eslint-disable-line

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

	/* eslint react/prop-types: [2, {ignore: ["container", "containerPadding", "target", "placement", "children"] }] */
	/* These properties are validated in 'Portal' and 'Position' components */

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _objectWithoutProperties = __webpack_require__(232)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _reactOverlaysLibOverlay = __webpack_require__(370);

	var _reactOverlaysLibOverlay2 = _interopRequireDefault(_reactOverlaysLibOverlay);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var _Fade = __webpack_require__(360);

	var _Fade2 = _interopRequireDefault(_Fade);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Overlay = (function (_React$Component) {
	  _inherits(Overlay, _React$Component);

	  function Overlay() {
	    _classCallCheck(this, Overlay);

	    _React$Component.apply(this, arguments);
	  }

	  Overlay.prototype.render = function render() {
	    var _props = this.props;
	    var child = _props.children;
	    var transition = _props.animation;

	    var props = _objectWithoutProperties(_props, ['children', 'animation']);

	    if (transition === true) {
	      transition = _Fade2['default'];
	    }

	    if (!transition) {
	      child = _react.cloneElement(child, {
	        className: _classnames2['default']('in', child.props.className)
	      });
	    }

	    return _react2['default'].createElement(
	      _reactOverlaysLibOverlay2['default'],
	      _extends({}, props, {
	        transition: transition
	      }),
	      child
	    );
	  };

	  return Overlay;
	})(_react2['default'].Component);

	Overlay.propTypes = _extends({}, _reactOverlaysLibOverlay2['default'].propTypes, {

	  /**
	   * Set the visibility of the Overlay
	   */
	  show: _react2['default'].PropTypes.bool,
	  /**
	   * Specify whether the overlay should trigger onHide when the user clicks outside the overlay
	   */
	  rootClose: _react2['default'].PropTypes.bool,
	  /**
	   * A Callback fired by the Overlay when it wishes to be hidden.
	   */
	  onHide: _react2['default'].PropTypes.func,

	  /**
	   * Use animation
	   */
	  animation: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.bool, _utilsCustomPropTypes2['default'].elementType]),

	  /**
	   * Callback fired before the Overlay transitions in
	   */
	  onEnter: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired as the Overlay begins to transition in
	   */
	  onEntering: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired after the Overlay finishes transitioning in
	   */
	  onEntered: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired right before the Overlay transitions out
	   */
	  onExit: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired as the Overlay begins to transition out
	   */
	  onExiting: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired after the Overlay finishes transitioning out
	   */
	  onExited: _react2['default'].PropTypes.func
	});

	Overlay.defaultProps = {
	  animation: _Fade2['default'],
	  rootClose: false,
	  show: false
	};

	exports['default'] = Overlay;
	module.exports = exports['default'];

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _Portal = __webpack_require__(356);

	var _Portal2 = _interopRequireDefault(_Portal);

	var _Position = __webpack_require__(371);

	var _Position2 = _interopRequireDefault(_Position);

	var _RootCloseWrapper = __webpack_require__(267);

	var _RootCloseWrapper2 = _interopRequireDefault(_RootCloseWrapper);

	var _reactPropTypesLibElementType = __webpack_require__(373);

	var _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);

	/**
	 * Built on top of `<Position/>` and `<Portal/>`, the overlay component is great for custom tooltip overlays.
	 */

	var Overlay = (function (_React$Component) {
	  function Overlay(props, context) {
	    _classCallCheck(this, Overlay);

	    _React$Component.call(this, props, context);

	    this.state = { exited: !props.show };
	    this.onHiddenListener = this.handleHidden.bind(this);
	  }

	  _inherits(Overlay, _React$Component);

	  Overlay.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.show) {
	      this.setState({ exited: false });
	    } else if (!nextProps.transition) {
	      // Otherwise let handleHidden take care of marking exited.
	      this.setState({ exited: true });
	    }
	  };

	  Overlay.prototype.render = function render() {
	    var _props = this.props;
	    var container = _props.container;
	    var containerPadding = _props.containerPadding;
	    var target = _props.target;
	    var placement = _props.placement;
	    var rootClose = _props.rootClose;
	    var children = _props.children;
	    var Transition = _props.transition;

	    var props = _objectWithoutProperties(_props, ['container', 'containerPadding', 'target', 'placement', 'rootClose', 'children', 'transition']);

	    // Don't un-render the overlay while it's transitioning out.
	    var mountOverlay = props.show || Transition && !this.state.exited;
	    if (!mountOverlay) {
	      // Don't bother showing anything if we don't have to.
	      return null;
	    }

	    var child = children;

	    // Position is be inner-most because it adds inline styles into the child,
	    // which the other wrappers don't forward correctly.
	    child = _react2['default'].createElement(
	      _Position2['default'],
	      { container: container, containerPadding: containerPadding, target: target, placement: placement },
	      child
	    );

	    if (Transition) {
	      var onExit = props.onExit;
	      var onExiting = props.onExiting;
	      var onEnter = props.onEnter;
	      var onEntering = props.onEntering;
	      var onEntered = props.onEntered;

	      // This animates the child node by injecting props, so it must precede
	      // anything that adds a wrapping div.
	      child = _react2['default'].createElement(
	        Transition,
	        {
	          'in': props.show,
	          transitionAppear: true,
	          onExit: onExit,
	          onExiting: onExiting,
	          onExited: this.onHiddenListener,
	          onEnter: onEnter,
	          onEntering: onEntering,
	          onEntered: onEntered
	        },
	        child
	      );
	    }

	    // This goes after everything else because it adds a wrapping div.
	    if (rootClose) {
	      child = _react2['default'].createElement(
	        _RootCloseWrapper2['default'],
	        { onRootClose: props.onHide },
	        child
	      );
	    }

	    return _react2['default'].createElement(
	      _Portal2['default'],
	      { container: container },
	      child
	    );
	  };

	  Overlay.prototype.handleHidden = function handleHidden() {
	    this.setState({ exited: true });

	    if (this.props.onExited) {
	      var _props2;

	      (_props2 = this.props).onExited.apply(_props2, arguments);
	    }
	  };

	  return Overlay;
	})(_react2['default'].Component);

	Overlay.propTypes = _extends({}, _Portal2['default'].propTypes, _Position2['default'].propTypes, {
	  /**
	   * Set the visibility of the Overlay
	   */
	  show: _react2['default'].PropTypes.bool,
	  /**
	   * Specify whether the overlay should trigger onHide when the user clicks outside the overlay
	   */
	  rootClose: _react2['default'].PropTypes.bool,
	  /**
	   * A Callback fired by the Overlay when it wishes to be hidden.
	   */
	  onHide: _react2['default'].PropTypes.func,

	  /**
	   * A `<Transition/>` component used to animate the overlay changes visibility.
	   */
	  transition: _reactPropTypesLibElementType2['default'],

	  /**
	   * Callback fired before the Overlay transitions in
	   */
	  onEnter: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired as the Overlay begins to transition in
	   */
	  onEntering: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired after the Overlay finishes transitioning in
	   */
	  onEntered: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired right before the Overlay transitions out
	   */
	  onExit: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired as the Overlay begins to transition out
	   */
	  onExiting: _react2['default'].PropTypes.func,

	  /**
	   * Callback fired after the Overlay finishes transitioning out
	   */
	  onExited: _react2['default'].PropTypes.func
	});

	exports['default'] = Overlay;
	module.exports = exports['default'];

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsOwnerDocument = __webpack_require__(271);

	var _utilsOwnerDocument2 = _interopRequireDefault(_utilsOwnerDocument);

	var _utilsGetContainer = __webpack_require__(359);

	var _utilsGetContainer2 = _interopRequireDefault(_utilsGetContainer);

	var _utilsOverlayPositionUtils = __webpack_require__(372);

	var _reactPropTypesLibMountable = __webpack_require__(357);

	var _reactPropTypesLibMountable2 = _interopRequireDefault(_reactPropTypesLibMountable);

	/**
	 * The Position component calulates the corrdinates for its child, to
	 * position it relative to a `target` component or node. Useful for creating callouts and tooltips,
	 * the Position component injects a `style` props with `left` and `top` values for positioning your component.
	 *
	 * It also injects "arrow" `left`, and `top` values for styling callout arrows for giving your components
	 * a sense of directionality.
	 */

	var Position = (function (_React$Component) {
	  function Position(props, context) {
	    _classCallCheck(this, Position);

	    _React$Component.call(this, props, context);

	    this.state = {
	      positionLeft: null,
	      positionTop: null,
	      arrowOffsetLeft: null,
	      arrowOffsetTop: null
	    };

	    this._needsFlush = false;
	    this._lastTarget = null;
	  }

	  _inherits(Position, _React$Component);

	  Position.prototype.componentDidMount = function componentDidMount() {
	    this.updatePosition();
	  };

	  Position.prototype.componentWillReceiveProps = function componentWillReceiveProps() {
	    this._needsFlush = true;
	  };

	  Position.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    if (this._needsFlush) {
	      this._needsFlush = false;
	      this.updatePosition(prevProps.placement !== this.props.placement);
	    }
	  };

	  Position.prototype.componentWillUnmount = function componentWillUnmount() {
	    // Probably not necessary, but just in case holding a reference to the
	    // target causes problems somewhere.
	    this._lastTarget = null;
	  };

	  Position.prototype.render = function render() {
	    var _props = this.props;
	    var children = _props.children;
	    var className = _props.className;

	    var props = _objectWithoutProperties(_props, ['children', 'className']);

	    var _state = this.state;
	    var positionLeft = _state.positionLeft;
	    var positionTop = _state.positionTop;

	    var arrowPosition = _objectWithoutProperties(_state, ['positionLeft', 'positionTop']);

	    var child = _react2['default'].Children.only(children);
	    return _react.cloneElement(child, _extends({}, props, arrowPosition, {
	      //do we need to also forward positionLeft and positionTop if they are set to style?
	      positionLeft: positionLeft,
	      positionTop: positionTop,
	      className: _classnames2['default'](className, child.props.className),
	      style: _extends({}, child.props.style, {
	        left: positionLeft,
	        top: positionTop
	      })
	    }));
	  };

	  Position.prototype.getTargetSafe = function getTargetSafe() {
	    if (!this.props.target) {
	      return null;
	    }

	    var target = this.props.target(this.props);
	    if (!target) {
	      // This is so we can just use === check below on all falsy targets.
	      return null;
	    }

	    return target;
	  };

	  Position.prototype.updatePosition = function updatePosition(placementChanged) {
	    var target = this.getTargetSafe();

	    if (target === this._lastTarget && !placementChanged) {
	      return;
	    }

	    this._lastTarget = target;

	    if (!target) {
	      this.setState({
	        positionLeft: null,
	        positionTop: null,
	        arrowOffsetLeft: null,
	        arrowOffsetTop: null
	      });

	      return;
	    }

	    var overlay = _react2['default'].findDOMNode(this);
	    var container = _utilsGetContainer2['default'](this.props.container, _utilsOwnerDocument2['default'](this).body);

	    this.setState(_utilsOverlayPositionUtils.calcOverlayPosition(this.props.placement, overlay, target, container, this.props.containerPadding));
	  };

	  return Position;
	})(_react2['default'].Component);

	Position.propTypes = {
	  /**
	   * Function mapping props to a DOM node the component is positioned next to
	   */
	  target: _react2['default'].PropTypes.func,
	  /**
	   * "offsetParent" of the component
	   */
	  container: _reactPropTypesLibMountable2['default'],
	  /**
	   * Minimum spacing in pixels between container border and component border
	   */
	  containerPadding: _react2['default'].PropTypes.number,
	  /**
	   * How to position the component relative to the target
	   */
	  placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left'])
	};

	Position.displayName = 'Position';

	Position.defaultProps = {
	  containerPadding: 0,
	  placement: 'right'
	};

	exports['default'] = Position;
	module.exports = exports['default'];

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _ownerDocument = __webpack_require__(271);

	var _ownerDocument2 = _interopRequireDefault(_ownerDocument);

	var _domHelpersQueryOffset = __webpack_require__(205);

	var _domHelpersQueryOffset2 = _interopRequireDefault(_domHelpersQueryOffset);

	var _domHelpersQueryPosition = __webpack_require__(215);

	var _domHelpersQueryPosition2 = _interopRequireDefault(_domHelpersQueryPosition);

	var _domHelpersQueryScrollTop = __webpack_require__(216);

	var _domHelpersQueryScrollTop2 = _interopRequireDefault(_domHelpersQueryScrollTop);

	var utils = {

	  getContainerDimensions: function getContainerDimensions(containerNode) {
	    var width = undefined,
	        height = undefined,
	        scroll = undefined;

	    if (containerNode.tagName === 'BODY') {
	      width = window.innerWidth;
	      height = window.innerHeight;

	      scroll = _domHelpersQueryScrollTop2['default'](_ownerDocument2['default'](containerNode).documentElement) || _domHelpersQueryScrollTop2['default'](containerNode);
	    } else {
	      var _getOffset = _domHelpersQueryOffset2['default'](containerNode);

	      width = _getOffset.width;
	      height = _getOffset.height;

	      scroll = _domHelpersQueryScrollTop2['default'](containerNode);
	    }

	    return { width: width, height: height, scroll: scroll };
	  },

	  getPosition: function getPosition(target, container) {
	    var offset = container.tagName === 'BODY' ? _domHelpersQueryOffset2['default'](target) : _domHelpersQueryPosition2['default'](target, container);

	    return offset;
	  },

	  calcOverlayPosition: function calcOverlayPosition(placement, overlayNode, target, container, padding) {
	    var childOffset = utils.getPosition(target, container);

	    var _getOffset2 = _domHelpersQueryOffset2['default'](overlayNode);

	    var overlayHeight = _getOffset2.height;
	    var overlayWidth = _getOffset2.width;

	    var positionLeft = undefined,
	        positionTop = undefined,
	        arrowOffsetLeft = undefined,
	        arrowOffsetTop = undefined;

	    if (placement === 'left' || placement === 'right') {
	      positionTop = childOffset.top + (childOffset.height - overlayHeight) / 2;

	      if (placement === 'left') {
	        positionLeft = childOffset.left - overlayWidth;
	      } else {
	        positionLeft = childOffset.left + childOffset.width;
	      }

	      var topDelta = getTopDelta(positionTop, overlayHeight, container, padding);

	      positionTop += topDelta;
	      arrowOffsetTop = 50 * (1 - 2 * topDelta / overlayHeight) + '%';
	      arrowOffsetLeft = void 0;
	    } else if (placement === 'top' || placement === 'bottom') {
	      positionLeft = childOffset.left + (childOffset.width - overlayWidth) / 2;

	      if (placement === 'top') {
	        positionTop = childOffset.top - overlayHeight;
	      } else {
	        positionTop = childOffset.top + childOffset.height;
	      }

	      var leftDelta = getLeftDelta(positionLeft, overlayWidth, container, padding);
	      positionLeft += leftDelta;
	      arrowOffsetLeft = 50 * (1 - 2 * leftDelta / overlayWidth) + '%';
	      arrowOffsetTop = void 0;
	    } else {
	      throw new Error('calcOverlayPosition(): No such placement of "' + placement + '" found.');
	    }

	    return { positionLeft: positionLeft, positionTop: positionTop, arrowOffsetLeft: arrowOffsetLeft, arrowOffsetTop: arrowOffsetTop };
	  }
	};

	function getTopDelta(top, overlayHeight, container, padding) {
	  var containerDimensions = utils.getContainerDimensions(container);
	  var containerScroll = containerDimensions.scroll;
	  var containerHeight = containerDimensions.height;

	  var topEdgeOffset = top - padding - containerScroll;
	  var bottomEdgeOffset = top + padding - containerScroll + overlayHeight;

	  if (topEdgeOffset < 0) {
	    return -topEdgeOffset;
	  } else if (bottomEdgeOffset > containerHeight) {
	    return containerHeight - bottomEdgeOffset;
	  } else {
	    return 0;
	  }
	}

	function getLeftDelta(left, overlayWidth, container, padding) {
	  var containerDimensions = utils.getContainerDimensions(container);
	  var containerWidth = containerDimensions.width;

	  var leftEdgeOffset = left - padding;
	  var rightEdgeOffset = left + padding + overlayWidth;

	  if (leftEdgeOffset < 0) {
	    return -leftEdgeOffset;
	  } else if (rightEdgeOffset > containerWidth) {
	    return containerWidth - rightEdgeOffset;
	  } else {
	    return 0;
	  }
	}
	exports['default'] = utils;
	module.exports = exports['default'];

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _common = __webpack_require__(358);

	/**
	 * Checks whether a prop provides a type of element.
	 *
	 * The type of element can be provided in two forms:
	 * - tag name (string)
	 * - a return value of React.createClass(...)
	 *
	 * @param props
	 * @param propName
	 * @param componentName
	 * @returns {Error|undefined}
	 */

	function validate(props, propName, componentName) {
	  var errBeginning = _common.errMsg(props, propName, componentName, '. Expected an Element `type`');

	  if (typeof props[propName] !== 'function') {
	    if (_react2['default'].isValidElement(props[propName])) {
	      return new Error(errBeginning + ', not an actual Element');
	    }

	    if (typeof props[propName] !== 'string') {
	      return new Error(errBeginning + ' such as a tag name or return value of React.createClass(...)');
	    }
	  }
	}

	exports['default'] = _common.createChainableTypeChecker(validate);
	module.exports = exports['default'];

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

	/* eslint-disable react/prop-types */
	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _Object$keys = __webpack_require__(170)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _domHelpersQueryContains = __webpack_require__(203);

	var _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);

	var _utilsCreateChainedFunction = __webpack_require__(222);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _utilsCreateContextWrapper = __webpack_require__(375);

	var _utilsCreateContextWrapper2 = _interopRequireDefault(_utilsCreateContextWrapper);

	var _Overlay = __webpack_require__(369);

	var _Overlay2 = _interopRequireDefault(_Overlay);

	var _reactLibWarning = __webpack_require__(26);

	var _reactLibWarning2 = _interopRequireDefault(_reactLibWarning);

	var _lodashObjectPick = __webpack_require__(376);

	var _lodashObjectPick2 = _interopRequireDefault(_lodashObjectPick);

	/**
	 * Check if value one is inside or equal to the of value
	 *
	 * @param {string} one
	 * @param {string|array} of
	 * @returns {boolean}
	 */
	function isOneOf(one, of) {
	  if (Array.isArray(of)) {
	    return of.indexOf(one) >= 0;
	  }
	  return one === of;
	}

	var OverlayTrigger = _react2['default'].createClass({
	  displayName: 'OverlayTrigger',

	  propTypes: _extends({}, _Overlay2['default'].propTypes, {

	    /**
	    * Specify which action or actions trigger Overlay visibility
	    */
	    trigger: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.oneOf(['click', 'hover', 'focus']), _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.oneOf(['click', 'hover', 'focus']))]),

	    /**
	     * A millisecond delay amount to show and hide the Overlay once triggered
	     */
	    delay: _react2['default'].PropTypes.number,
	    /**
	     * A millisecond delay amount before showing the Overlay once triggered.
	     */
	    delayShow: _react2['default'].PropTypes.number,
	    /**
	     * A millisecond delay amount before hiding the Overlay once triggered.
	     */
	    delayHide: _react2['default'].PropTypes.number,

	    /**
	     * The initial visibility state of the Overlay, for more nuanced visibility controll consider
	     * using the Overlay component directly.
	     */
	    defaultOverlayShown: _react2['default'].PropTypes.bool,

	    /**
	     * An element or text to overlay next to the target.
	     */
	    overlay: _react2['default'].PropTypes.node.isRequired,

	    /**
	     * @private
	     */
	    onBlur: _react2['default'].PropTypes.func,
	    /**
	     * @private
	     */
	    onClick: _react2['default'].PropTypes.func,
	    /**
	     * @private
	     */
	    onFocus: _react2['default'].PropTypes.func,
	    /**
	     * @private
	     */
	    onMouseEnter: _react2['default'].PropTypes.func,
	    /**
	     * @private
	     */
	    onMouseLeave: _react2['default'].PropTypes.func,

	    // override specific overlay props
	    /**
	     * @private
	     */
	    target: function target() {},
	    /**
	    * @private
	    */
	    onHide: function onHide() {},
	    /**
	     * @private
	     */
	    show: function show() {}
	  }),

	  getDefaultProps: function getDefaultProps() {
	    return {
	      defaultOverlayShown: false,
	      trigger: ['hover', 'focus']
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      isOverlayShown: this.props.defaultOverlayShown
	    };
	  },

	  show: function show() {
	    this.setState({
	      isOverlayShown: true
	    });
	  },

	  hide: function hide() {
	    this.setState({
	      isOverlayShown: false
	    });
	  },

	  toggle: function toggle() {
	    if (this.state.isOverlayShown) {
	      this.hide();
	    } else {
	      this.show();
	    }
	  },

	  componentWillMount: function componentWillMount() {
	    this.handleMouseOver = this.handleMouseOverOut.bind(null, this.handleDelayedShow);
	    this.handleMouseOut = this.handleMouseOverOut.bind(null, this.handleDelayedHide);
	  },

	  componentDidMount: function componentDidMount() {
	    this._mountNode = document.createElement('div');
	    _react2['default'].render(this._overlay, this._mountNode);
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    _react2['default'].unmountComponentAtNode(this._mountNode);
	    this._mountNode = null;
	    clearTimeout(this._hoverDelay);
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this._mountNode) {
	      _react2['default'].render(this._overlay, this._mountNode);
	    }
	  },

	  getOverlayTarget: function getOverlayTarget() {
	    return _react2['default'].findDOMNode(this);
	  },

	  getOverlay: function getOverlay() {
	    var overlayProps = _extends({}, _lodashObjectPick2['default'](this.props, _Object$keys(_Overlay2['default'].propTypes)), {
	      show: this.state.isOverlayShown,
	      onHide: this.hide,
	      target: this.getOverlayTarget,
	      onExit: this.props.onExit,
	      onExiting: this.props.onExiting,
	      onExited: this.props.onExited,
	      onEnter: this.props.onEnter,
	      onEntering: this.props.onEntering,
	      onEntered: this.props.onEntered
	    });

	    var overlay = _react.cloneElement(this.props.overlay, {
	      placement: overlayProps.placement,
	      container: overlayProps.container
	    });

	    return _react2['default'].createElement(
	      _Overlay2['default'],
	      overlayProps,
	      overlay
	    );
	  },

	  render: function render() {
	    var trigger = _react2['default'].Children.only(this.props.children);
	    var triggerProps = trigger.props;

	    var props = {
	      'aria-describedby': this.props.overlay.props.id
	    };

	    // create in render otherwise owner is lost...
	    this._overlay = this.getOverlay();

	    props.onClick = _utilsCreateChainedFunction2['default'](triggerProps.onClick, this.props.onClick);

	    if (isOneOf('click', this.props.trigger)) {
	      props.onClick = _utilsCreateChainedFunction2['default'](this.toggle, props.onClick);
	    }

	    if (isOneOf('hover', this.props.trigger)) {
	      _reactLibWarning2['default'](!(this.props.trigger === 'hover'), '[react-bootstrap] Specifying only the `"hover"` trigger limits the visibilty of the overlay to just mouse users. ' + 'Consider also including the `"focus"` trigger so that touch and keyboard only users can see the overlay as well.');

	      props.onMouseOver = _utilsCreateChainedFunction2['default'](this.handleMouseOver, this.props.onMouseOver, triggerProps.onMouseOver);
	      props.onMouseOut = _utilsCreateChainedFunction2['default'](this.handleMouseOut, this.props.onMouseOut, triggerProps.onMouseOut);
	    }

	    if (isOneOf('focus', this.props.trigger)) {
	      props.onFocus = _utilsCreateChainedFunction2['default'](this.handleDelayedShow, this.props.onFocus, triggerProps.onFocus);
	      props.onBlur = _utilsCreateChainedFunction2['default'](this.handleDelayedHide, this.props.onBlur, triggerProps.onBlur);
	    }

	    return _react.cloneElement(trigger, props);
	  },

	  handleDelayedShow: function handleDelayedShow() {
	    var _this = this;

	    if (this._hoverDelay != null) {
	      clearTimeout(this._hoverDelay);
	      this._hoverDelay = null;
	      return;
	    }

	    var delay = this.props.delayShow != null ? this.props.delayShow : this.props.delay;

	    if (!delay) {
	      this.show();
	      return;
	    }

	    this._hoverDelay = setTimeout(function () {
	      _this._hoverDelay = null;
	      _this.show();
	    }, delay);
	  },

	  handleDelayedHide: function handleDelayedHide() {
	    var _this2 = this;

	    if (this._hoverDelay != null) {
	      clearTimeout(this._hoverDelay);
	      this._hoverDelay = null;
	      return;
	    }

	    var delay = this.props.delayHide != null ? this.props.delayHide : this.props.delay;

	    if (!delay) {
	      this.hide();
	      return;
	    }

	    this._hoverDelay = setTimeout(function () {
	      _this2._hoverDelay = null;
	      _this2.hide();
	    }, delay);
	  },

	  // Simple implementation of mouseEnter and mouseLeave.
	  // React's built version is broken: https://github.com/facebook/react/issues/4251
	  // for cases when the trigger is disabled and mouseOut/Over can cause flicker moving
	  // from one child element to another.
	  handleMouseOverOut: function handleMouseOverOut(handler, e) {
	    var target = e.currentTarget;
	    var related = e.relatedTarget || e.nativeEvent.toElement;

	    if (!related || related !== target && !_domHelpersQueryContains2['default'](target, related)) {
	      handler(e);
	    }
	  }

	});

	/**
	 * Creates a new OverlayTrigger class that forwards the relevant context
	 *
	 * This static method should only be called at the module level, instead of in
	 * e.g. a render() method, because it's expensive to create new classes.
	 *
	 * For example, you would want to have:
	 *
	 * > export default OverlayTrigger.withContext({
	 * >   myContextKey: React.PropTypes.object
	 * > });
	 *
	 * and import this when needed.
	 */
	OverlayTrigger.withContext = _utilsCreateContextWrapper2['default'](OverlayTrigger, 'overlay');

	exports['default'] = OverlayTrigger;
	module.exports = exports['default'];

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _objectWithoutProperties = __webpack_require__(232)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;
	exports['default'] = createContextWrapper;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	/**
	 * Creates new trigger class that injects context into overlay.
	 */

	function createContextWrapper(Trigger, propName) {
	  return function (contextTypes) {
	    var ContextWrapper = (function (_React$Component) {
	      _inherits(ContextWrapper, _React$Component);

	      function ContextWrapper() {
	        _classCallCheck(this, ContextWrapper);

	        _React$Component.apply(this, arguments);
	      }

	      ContextWrapper.prototype.getChildContext = function getChildContext() {
	        return this.props.context;
	      };

	      ContextWrapper.prototype.render = function render() {
	        // Strip injected props from below.
	        var _props = this.props;
	        var wrapped = _props.wrapped;
	        var context = _props.context;

	        var props = _objectWithoutProperties(_props, ['wrapped', 'context']);

	        return _react2['default'].cloneElement(wrapped, props);
	      };

	      return ContextWrapper;
	    })(_react2['default'].Component);

	    ContextWrapper.childContextTypes = contextTypes;

	    var TriggerWithContext = (function () {
	      function TriggerWithContext() {
	        _classCallCheck(this, TriggerWithContext);
	      }

	      TriggerWithContext.prototype.render = function render() {
	        var props = _extends({}, this.props);
	        props[propName] = this.getWrappedOverlay();

	        return _react2['default'].createElement(
	          Trigger,
	          props,
	          this.props.children
	        );
	      };

	      TriggerWithContext.prototype.getWrappedOverlay = function getWrappedOverlay() {
	        return _react2['default'].createElement(ContextWrapper, {
	          context: this.context,
	          wrapped: this.props[propName]
	        });
	      };

	      return TriggerWithContext;
	    })();

	    TriggerWithContext.contextTypes = contextTypes;

	    return TriggerWithContext;
	  };
	}

	module.exports = exports['default'];

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(330),
	    bindCallback = __webpack_require__(315),
	    pickByArray = __webpack_require__(332),
	    pickByCallback = __webpack_require__(333),
	    restParam = __webpack_require__(335);

	/**
	 * Creates an object composed of the picked `object` properties. Property
	 * names may be specified as individual arguments or as arrays of property
	 * names. If `predicate` is provided it's invoked for each property of `object`
	 * picking the properties `predicate` returns truthy for. The predicate is
	 * bound to `thisArg` and invoked with three arguments: (value, key, object).
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {Function|...(string|string[])} [predicate] The function invoked per
	 *  iteration or property names to pick, specified as individual property
	 *  names or arrays of property names.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'user': 'fred', 'age': 40 };
	 *
	 * _.pick(object, 'user');
	 * // => { 'user': 'fred' }
	 *
	 * _.pick(object, _.isString);
	 * // => { 'user': 'fred' }
	 */
	var pick = restParam(function(object, props) {
	  if (object == null) {
	    return {};
	  }
	  return typeof props[0] == 'function'
	    ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	    : pickByArray(object, baseFlatten(props));
	});

	module.exports = pick;


/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var PageHeader = _react2['default'].createClass({
	  displayName: 'PageHeader',

	  render: function render() {
	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'page-header') }),
	      _react2['default'].createElement(
	        'h1',
	        null,
	        this.props.children
	      )
	    );
	  }
	});

	exports['default'] = PageHeader;
	module.exports = exports['default'];

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _SafeAnchor = __webpack_require__(265);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var PageItem = _react2['default'].createClass({
	  displayName: 'PageItem',

	  propTypes: {
	    href: _react2['default'].PropTypes.string,
	    target: _react2['default'].PropTypes.string,
	    title: _react2['default'].PropTypes.string,
	    disabled: _react2['default'].PropTypes.bool,
	    previous: _react2['default'].PropTypes.bool,
	    next: _react2['default'].PropTypes.bool,
	    onSelect: _react2['default'].PropTypes.func,
	    eventKey: _react2['default'].PropTypes.any
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      disabled: false,
	      previous: false,
	      next: false
	    };
	  },

	  render: function render() {
	    var classes = {
	      'disabled': this.props.disabled,
	      'previous': this.props.previous,
	      'next': this.props.next
	    };

	    return _react2['default'].createElement(
	      'li',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, classes) }),
	      _react2['default'].createElement(
	        _SafeAnchor2['default'],
	        {
	          href: this.props.href,
	          title: this.props.title,
	          target: this.props.target,
	          onClick: this.handleSelect },
	        this.props.children
	      )
	    );
	  },

	  handleSelect: function handleSelect(e) {
	    if (this.props.onSelect || this.props.disabled) {
	      e.preventDefault();

	      if (!this.props.disabled) {
	        this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
	      }
	    }
	  }
	});

	exports['default'] = PageItem;
	module.exports = exports['default'];

/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(221);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsCreateChainedFunction = __webpack_require__(222);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var Pager = _react2['default'].createClass({
	  displayName: 'Pager',

	  propTypes: {
	    onSelect: _react2['default'].PropTypes.func
	  },

	  render: function render() {
	    return _react2['default'].createElement(
	      'ul',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, 'pager') }),
	      _utilsValidComponentChildren2['default'].map(this.props.children, this.renderPageItem)
	    );
	  },

	  renderPageItem: function renderPageItem(child, index) {
	    return _react.cloneElement(child, {
	      onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
	      key: child.key ? child.key : index
	    });
	  }
	});

	exports['default'] = Pager;
	module.exports = exports['default'];

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _PaginationButton = __webpack_require__(381);

	var _PaginationButton2 = _interopRequireDefault(_PaginationButton);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var _SafeAnchor = __webpack_require__(265);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var Pagination = _react2['default'].createClass({
	  displayName: 'Pagination',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    activePage: _react2['default'].PropTypes.number,
	    items: _react2['default'].PropTypes.number,
	    maxButtons: _react2['default'].PropTypes.number,
	    ellipsis: _react2['default'].PropTypes.bool,
	    first: _react2['default'].PropTypes.bool,
	    last: _react2['default'].PropTypes.bool,
	    prev: _react2['default'].PropTypes.bool,
	    next: _react2['default'].PropTypes.bool,
	    onSelect: _react2['default'].PropTypes.func,
	    /**
	     * You can use a custom element for the buttons
	     */
	    buttonComponentClass: _utilsCustomPropTypes2['default'].elementType
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      activePage: 1,
	      items: 1,
	      maxButtons: 0,
	      first: false,
	      last: false,
	      prev: false,
	      next: false,
	      ellipsis: true,
	      buttonComponentClass: _SafeAnchor2['default'],
	      bsClass: 'pagination'
	    };
	  },

	  renderPageButtons: function renderPageButtons() {
	    var pageButtons = [];
	    var startPage = undefined,
	        endPage = undefined,
	        hasHiddenPagesAfter = undefined;
	    var _props = this.props;
	    var maxButtons = _props.maxButtons;
	    var activePage = _props.activePage;
	    var items = _props.items;
	    var onSelect = _props.onSelect;
	    var ellipsis = _props.ellipsis;
	    var buttonComponentClass = _props.buttonComponentClass;

	    if (maxButtons) {
	      var hiddenPagesBefore = activePage - parseInt(maxButtons / 2, 10);
	      startPage = hiddenPagesBefore > 1 ? hiddenPagesBefore : 1;
	      hasHiddenPagesAfter = startPage + maxButtons <= items;

	      if (!hasHiddenPagesAfter) {
	        endPage = items;
	        startPage = items - maxButtons + 1;
	        if (startPage < 1) {
	          startPage = 1;
	        }
	      } else {
	        endPage = startPage + maxButtons - 1;
	      }
	    } else {
	      startPage = 1;
	      endPage = items;
	    }

	    for (var pagenumber = startPage; pagenumber <= endPage; pagenumber++) {
	      pageButtons.push(_react2['default'].createElement(
	        _PaginationButton2['default'],
	        {
	          key: pagenumber,
	          eventKey: pagenumber,
	          active: pagenumber === activePage,
	          onSelect: onSelect,
	          buttonComponentClass: buttonComponentClass },
	        pagenumber
	      ));
	    }

	    if (maxButtons && hasHiddenPagesAfter && ellipsis) {
	      pageButtons.push(_react2['default'].createElement(
	        _PaginationButton2['default'],
	        {
	          key: 'ellipsis',
	          disabled: true,
	          buttonComponentClass: buttonComponentClass },
	        _react2['default'].createElement(
	          'span',
	          { 'aria-label': 'More' },
	          '...'
	        )
	      ));
	    }

	    return pageButtons;
	  },

	  renderPrev: function renderPrev() {
	    if (!this.props.prev) {
	      return null;
	    }

	    return _react2['default'].createElement(
	      _PaginationButton2['default'],
	      {
	        key: 'prev',
	        eventKey: this.props.activePage - 1,
	        disabled: this.props.activePage === 1,
	        onSelect: this.props.onSelect,
	        buttonComponentClass: this.props.buttonComponentClass },
	      _react2['default'].createElement(
	        'span',
	        { 'aria-label': 'Previous' },
	        '‹'
	      )
	    );
	  },

	  renderNext: function renderNext() {
	    if (!this.props.next) {
	      return null;
	    }

	    return _react2['default'].createElement(
	      _PaginationButton2['default'],
	      {
	        key: 'next',
	        eventKey: this.props.activePage + 1,
	        disabled: this.props.activePage >= this.props.items,
	        onSelect: this.props.onSelect,
	        buttonComponentClass: this.props.buttonComponentClass },
	      _react2['default'].createElement(
	        'span',
	        { 'aria-label': 'Next' },
	        '›'
	      )
	    );
	  },

	  renderFirst: function renderFirst() {
	    if (!this.props.first) {
	      return null;
	    }

	    return _react2['default'].createElement(
	      _PaginationButton2['default'],
	      {
	        key: 'first',
	        eventKey: 1,
	        disabled: this.props.activePage === 1,
	        onSelect: this.props.onSelect,
	        buttonComponentClass: this.props.buttonComponentClass },
	      _react2['default'].createElement(
	        'span',
	        { 'aria-label': 'First' },
	        '«'
	      )
	    );
	  },

	  renderLast: function renderLast() {
	    if (!this.props.last) {
	      return null;
	    }

	    return _react2['default'].createElement(
	      _PaginationButton2['default'],
	      {
	        key: 'last',
	        eventKey: this.props.items,
	        disabled: this.props.activePage >= this.props.items,
	        onSelect: this.props.onSelect,
	        buttonComponentClass: this.props.buttonComponentClass },
	      _react2['default'].createElement(
	        'span',
	        { 'aria-label': 'Last' },
	        '»'
	      )
	    );
	  },

	  render: function render() {
	    return _react2['default'].createElement(
	      'ul',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, this.getBsClassSet()) }),
	      this.renderFirst(),
	      this.renderPrev(),
	      this.renderPageButtons(),
	      this.renderNext(),
	      this.renderLast()
	    );
	  }
	});

	exports['default'] = Pagination;
	module.exports = exports['default'];

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _objectWithoutProperties = __webpack_require__(232)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _utilsCreateSelectedEvent = __webpack_require__(382);

	var _utilsCreateSelectedEvent2 = _interopRequireDefault(_utilsCreateSelectedEvent);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var PaginationButton = _react2['default'].createClass({
	  displayName: 'PaginationButton',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    className: _react2['default'].PropTypes.string,
	    eventKey: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    onSelect: _react2['default'].PropTypes.func,
	    disabled: _react2['default'].PropTypes.bool,
	    active: _react2['default'].PropTypes.bool,
	    /**
	     * You can use a custom element for this component
	     */
	    buttonComponentClass: _utilsCustomPropTypes2['default'].elementType
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      active: false,
	      disabled: false
	    };
	  },

	  handleClick: function handleClick(event) {
	    if (this.props.disabled) {
	      return;
	    }

	    if (this.props.onSelect) {
	      var selectedEvent = _utilsCreateSelectedEvent2['default'](this.props.eventKey);
	      this.props.onSelect(event, selectedEvent);
	    }
	  },

	  render: function render() {
	    var classes = _extends({
	      active: this.props.active,
	      disabled: this.props.disabled
	    }, this.getBsClassSet());

	    var _props = this.props;
	    var className = _props.className;

	    var anchorProps = _objectWithoutProperties(_props, ['className']);

	    var ButtonComponentClass = this.props.buttonComponentClass;

	    return _react2['default'].createElement(
	      'li',
	      { className: _classnames2['default'](className, classes) },
	      _react2['default'].createElement(ButtonComponentClass, _extends({}, anchorProps, {
	        onClick: this.handleClick }))
	    );
	  }
	});

	exports['default'] = PaginationButton;
	module.exports = exports['default'];

/***/ }),
/* 382 */
/***/ (function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = createSelectedEvent;

	function createSelectedEvent(eventKey) {
	  var selectionPrevented = false;

	  return {
	    eventKey: eventKey,

	    preventSelection: function preventSelection() {
	      selectionPrevented = true;
	    },

	    isSelectionPrevented: function isSelectionPrevented() {
	      return selectionPrevented;
	    }
	  };
	}

	module.exports = exports["default"];

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(232)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _Collapse = __webpack_require__(254);

	var _Collapse2 = _interopRequireDefault(_Collapse);

	var Panel = _react2['default'].createClass({
	  displayName: 'Panel',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    collapsible: _react2['default'].PropTypes.bool,
	    onSelect: _react2['default'].PropTypes.func,
	    header: _react2['default'].PropTypes.node,
	    id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    footer: _react2['default'].PropTypes.node,
	    defaultExpanded: _react2['default'].PropTypes.bool,
	    expanded: _react2['default'].PropTypes.bool,
	    eventKey: _react2['default'].PropTypes.any,
	    headerRole: _react2['default'].PropTypes.string,
	    panelRole: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'panel',
	      bsStyle: 'default',
	      defaultExpanded: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      expanded: this.props.defaultExpanded
	    };
	  },

	  handleSelect: function handleSelect(e) {
	    e.selected = true;

	    if (this.props.onSelect) {
	      this.props.onSelect(e, this.props.eventKey);
	    } else {
	      e.preventDefault();
	    }

	    if (e.selected) {
	      this.handleToggle();
	    }
	  },

	  handleToggle: function handleToggle() {
	    this.setState({ expanded: !this.state.expanded });
	  },

	  isExpanded: function isExpanded() {
	    return this.props.expanded != null ? this.props.expanded : this.state.expanded;
	  },

	  render: function render() {
	    var _props = this.props;
	    var headerRole = _props.headerRole;
	    var panelRole = _props.panelRole;

	    var props = _objectWithoutProperties(_props, ['headerRole', 'panelRole']);

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, props, {
	        className: _classnames2['default'](this.props.className, this.getBsClassSet()),
	        id: this.props.collapsible ? null : this.props.id, onSelect: null }),
	      this.renderHeading(headerRole),
	      this.props.collapsible ? this.renderCollapsibleBody(panelRole) : this.renderBody(),
	      this.renderFooter()
	    );
	  },

	  renderCollapsibleBody: function renderCollapsibleBody(panelRole) {
	    var props = {
	      className: this.prefixClass('collapse'),
	      id: this.props.id,
	      ref: 'panel',
	      'aria-hidden': !this.isExpanded()
	    };
	    if (panelRole) {
	      props.role = panelRole;
	    }

	    return _react2['default'].createElement(
	      _Collapse2['default'],
	      { 'in': this.isExpanded() },
	      _react2['default'].createElement(
	        'div',
	        props,
	        this.renderBody()
	      )
	    );
	  },

	  renderBody: function renderBody() {
	    var allChildren = this.props.children;
	    var bodyElements = [];
	    var panelBodyChildren = [];
	    var bodyClass = this.prefixClass('body');

	    function getProps() {
	      return { key: bodyElements.length };
	    }

	    function addPanelChild(child) {
	      bodyElements.push(_react.cloneElement(child, getProps()));
	    }

	    function addPanelBody(children) {
	      bodyElements.push(_react2['default'].createElement(
	        'div',
	        _extends({ className: bodyClass }, getProps()),
	        children
	      ));
	    }

	    function maybeRenderPanelBody() {
	      if (panelBodyChildren.length === 0) {
	        return;
	      }

	      addPanelBody(panelBodyChildren);
	      panelBodyChildren = [];
	    }

	    // Handle edge cases where we should not iterate through children.
	    if (!Array.isArray(allChildren) || allChildren.length === 0) {
	      if (this.shouldRenderFill(allChildren)) {
	        addPanelChild(allChildren);
	      } else {
	        addPanelBody(allChildren);
	      }
	    } else {
	      allChildren.forEach((function (child) {
	        if (this.shouldRenderFill(child)) {
	          maybeRenderPanelBody();

	          // Separately add the filled element.
	          addPanelChild(child);
	        } else {
	          panelBodyChildren.push(child);
	        }
	      }).bind(this));

	      maybeRenderPanelBody();
	    }

	    return bodyElements;
	  },

	  shouldRenderFill: function shouldRenderFill(child) {
	    return _react2['default'].isValidElement(child) && child.props.fill != null;
	  },

	  renderHeading: function renderHeading(headerRole) {
	    var header = this.props.header;

	    if (!header) {
	      return null;
	    }

	    if (!_react2['default'].isValidElement(header) || Array.isArray(header)) {
	      header = this.props.collapsible ? this.renderCollapsibleTitle(header, headerRole) : header;
	    } else {
	      var className = _classnames2['default'](this.prefixClass('title'), header.props.className);

	      if (this.props.collapsible) {
	        header = _react.cloneElement(header, {
	          className: className,
	          children: this.renderAnchor(header.props.children, headerRole)
	        });
	      } else {
	        header = _react.cloneElement(header, { className: className });
	      }
	    }

	    return _react2['default'].createElement(
	      'div',
	      { className: this.prefixClass('heading') },
	      header
	    );
	  },

	  renderAnchor: function renderAnchor(header, headerRole) {
	    return _react2['default'].createElement(
	      'a',
	      {
	        href: '#' + (this.props.id || ''),
	        'aria-controls': this.props.collapsible ? this.props.id : null,
	        className: this.isExpanded() ? null : 'collapsed',
	        'aria-expanded': this.isExpanded(),
	        'aria-selected': this.isExpanded(),
	        onClick: this.handleSelect,
	        role: headerRole },
	      header
	    );
	  },

	  renderCollapsibleTitle: function renderCollapsibleTitle(header, headerRole) {
	    return _react2['default'].createElement(
	      'h4',
	      { className: this.prefixClass('title'), role: 'presentation' },
	      this.renderAnchor(header, headerRole)
	    );
	  },

	  renderFooter: function renderFooter() {
	    if (!this.props.footer) {
	      return null;
	    }

	    return _react2['default'].createElement(
	      'div',
	      { className: this.prefixClass('footer') },
	      this.props.footer
	    );
	  }
	});

	exports['default'] = Panel;
	module.exports = exports['default'];

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var Popover = _react2['default'].createClass({
	  displayName: 'Popover',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    /**
	     * An html id attribute, necessary for accessibility
	     * @type {string}
	     * @required
	     */
	    id: _utilsCustomPropTypes2['default'].isRequiredForA11y(_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

	    /**
	     * Sets the direction the Popover is positioned towards.
	     */
	    placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

	    /**
	     * The "left" position value for the Popover.
	     */
	    positionLeft: _react2['default'].PropTypes.number,
	    /**
	     * The "top" position value for the Popover.
	     */
	    positionTop: _react2['default'].PropTypes.number,
	    /**
	     * The "left" position value for the Popover arrow.
	     */
	    arrowOffsetLeft: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
	    /**
	     * The "top" position value for the Popover arrow.
	     */
	    arrowOffsetTop: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
	    /**
	     * Title text
	     */
	    title: _react2['default'].PropTypes.node
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      placement: 'right'
	    };
	  },

	  render: function render() {
	    var _classes;

	    var classes = (_classes = {
	      'popover': true
	    }, _classes[this.props.placement] = true, _classes);

	    var style = _extends({
	      'left': this.props.positionLeft,
	      'top': this.props.positionTop,
	      'display': 'block'
	    }, this.props.style);

	    // eslint-disable-line react/prop-types
	    var arrowStyle = {
	      'left': this.props.arrowOffsetLeft,
	      'top': this.props.arrowOffsetTop
	    };

	    return _react2['default'].createElement(
	      'div',
	      _extends({ role: 'tooltip' }, this.props, { className: _classnames2['default'](this.props.className, classes), style: style, title: null }),
	      _react2['default'].createElement('div', { className: 'arrow', style: arrowStyle }),
	      this.props.title ? this.renderTitle() : null,
	      _react2['default'].createElement(
	        'div',
	        { className: 'popover-content' },
	        this.props.children
	      )
	    );
	  },

	  renderTitle: function renderTitle() {
	    return _react2['default'].createElement(
	      'h3',
	      { className: 'popover-title' },
	      this.props.title
	    );
	  }
	});

	exports['default'] = Popover;
	module.exports = exports['default'];
	// we don't want to expose the `style` property

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	/* eslint react/prop-types: [2, {ignore: "bsStyle"}] */
	/* BootstrapMixin contains `bsStyle` type validation */

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _objectWithoutProperties = __webpack_require__(232)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _Interpolate = __webpack_require__(345);

	var _Interpolate2 = _interopRequireDefault(_Interpolate);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(221);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var ProgressBar = _react2['default'].createClass({
	  displayName: 'ProgressBar',

	  propTypes: {
	    min: _react.PropTypes.number,
	    now: _react.PropTypes.number,
	    max: _react.PropTypes.number,
	    label: _react.PropTypes.node,
	    srOnly: _react.PropTypes.bool,
	    striped: _react.PropTypes.bool,
	    active: _react.PropTypes.bool,
	    children: onlyProgressBar, // eslint-disable-line no-use-before-define
	    className: _react2['default'].PropTypes.string,
	    interpolateClass: _react.PropTypes.node,
	    /**
	     * @private
	     */
	    isChild: _react.PropTypes.bool
	  },

	  mixins: [_BootstrapMixin2['default']],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'progress-bar',
	      min: 0,
	      max: 100,
	      active: false,
	      isChild: false,
	      srOnly: false,
	      striped: false
	    };
	  },

	  getPercentage: function getPercentage(now, min, max) {
	    var roundPrecision = 1000;
	    return Math.round((now - min) / (max - min) * 100 * roundPrecision) / roundPrecision;
	  },

	  render: function render() {
	    if (this.props.isChild) {
	      return this.renderProgressBar();
	    }

	    var content = undefined;

	    if (this.props.children) {
	      content = _utilsValidComponentChildren2['default'].map(this.props.children, this.renderChildBar);
	    } else {
	      content = this.renderProgressBar();
	    }

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        className: _classnames2['default'](this.props.className, 'progress'),
	        min: null,
	        max: null,
	        label: null,
	        'aria-valuetext': null
	      }),
	      content
	    );
	  },

	  renderChildBar: function renderChildBar(child, index) {
	    return _react.cloneElement(child, {
	      isChild: true,
	      key: child.key ? child.key : index
	    });
	  },

	  renderProgressBar: function renderProgressBar() {
	    var _props = this.props;
	    var className = _props.className;
	    var label = _props.label;
	    var now = _props.now;
	    var min = _props.min;
	    var max = _props.max;

	    var props = _objectWithoutProperties(_props, ['className', 'label', 'now', 'min', 'max']);

	    var percentage = this.getPercentage(now, min, max);

	    if (typeof label === 'string') {
	      label = this.renderLabel(percentage);
	    }

	    if (this.props.srOnly) {
	      label = _react2['default'].createElement(
	        'span',
	        { className: 'sr-only' },
	        label
	      );
	    }

	    var classes = _classnames2['default'](className, this.getBsClassSet(), {
	      active: this.props.active,
	      'progress-bar-striped': this.props.active || this.props.striped
	    });

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, props, {
	        className: classes,
	        role: 'progressbar',
	        style: { width: percentage + '%' },
	        'aria-valuenow': this.props.now,
	        'aria-valuemin': this.props.min,
	        'aria-valuemax': this.props.max }),
	      label
	    );
	  },

	  renderLabel: function renderLabel(percentage) {
	    var InterpolateClass = this.props.interpolateClass || _Interpolate2['default'];

	    return _react2['default'].createElement(
	      InterpolateClass,
	      {
	        now: this.props.now,
	        min: this.props.min,
	        max: this.props.max,
	        percent: percentage,
	        bsStyle: this.props.bsStyle },
	      this.props.label
	    );
	  }
	});

	/**
	 * Custom propTypes checker
	 */
	function onlyProgressBar(props, propName, componentName) {
	  if (props[propName]) {
	    var _ret = (function () {
	      var error = undefined,
	          childIdentifier = undefined;

	      _react2['default'].Children.forEach(props[propName], function (child) {
	        if (child.type !== ProgressBar) {
	          childIdentifier = child.type.displayName ? child.type.displayName : child.type;
	          error = new Error('Children of ' + componentName + ' can contain only ProgressBar components. Found ' + childIdentifier);
	        }
	      });

	      return {
	        v: error
	      };
	    })();

	    if (typeof _ret === 'object') return _ret.v;
	  }
	}

	exports['default'] = ProgressBar;
	module.exports = exports['default'];

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var Row = _react2['default'].createClass({
	  displayName: 'Row',

	  propTypes: {
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: _utilsCustomPropTypes2['default'].elementType
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      componentClass: 'div'
	    };
	  },

	  render: function render() {
	    var ComponentClass = this.props.componentClass;

	    return _react2['default'].createElement(
	      ComponentClass,
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, 'row') }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Row;
	module.exports = exports['default'];

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsValidComponentChildren = __webpack_require__(221);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsCreateChainedFunction = __webpack_require__(222);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _SafeAnchor = __webpack_require__(265);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var SubNav = _react2['default'].createClass({
	  displayName: 'SubNav',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    onSelect: _react2['default'].PropTypes.func,
	    active: _react2['default'].PropTypes.bool,
	    activeHref: _react2['default'].PropTypes.string,
	    activeKey: _react2['default'].PropTypes.any,
	    disabled: _react2['default'].PropTypes.bool,
	    eventKey: _react2['default'].PropTypes.any,
	    href: _react2['default'].PropTypes.string,
	    title: _react2['default'].PropTypes.string,
	    text: _react2['default'].PropTypes.node,
	    target: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'nav',
	      active: false,
	      disabled: false
	    };
	  },

	  handleClick: function handleClick(e) {
	    if (this.props.onSelect) {
	      e.preventDefault();

	      if (!this.props.disabled) {
	        this.props.onSelect(this.props.eventKey, this.props.href, this.props.target);
	      }
	    }
	  },

	  isActive: function isActive() {
	    return this.isChildActive(this);
	  },

	  isChildActive: function isChildActive(child) {
	    if (child.props.active) {
	      return true;
	    }

	    if (this.props.activeKey != null && this.props.activeKey === child.props.eventKey) {
	      return true;
	    }

	    if (this.props.activeHref != null && this.props.activeHref === child.props.href) {
	      return true;
	    }

	    if (child.props.children) {
	      var isActive = false;

	      _utilsValidComponentChildren2['default'].forEach(child.props.children, function (grandchild) {
	        if (this.isChildActive(grandchild)) {
	          isActive = true;
	        }
	      }, this);

	      return isActive;
	    }

	    return false;
	  },

	  getChildActiveProp: function getChildActiveProp(child) {
	    if (child.props.active) {
	      return true;
	    }
	    if (this.props.activeKey != null) {
	      if (child.props.eventKey === this.props.activeKey) {
	        return true;
	      }
	    }
	    if (this.props.activeHref != null) {
	      if (child.props.href === this.props.activeHref) {
	        return true;
	      }
	    }

	    return child.props.active;
	  },

	  render: function render() {
	    var classes = {
	      'active': this.isActive(),
	      'disabled': this.props.disabled
	    };

	    return _react2['default'].createElement(
	      'li',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      _react2['default'].createElement(
	        _SafeAnchor2['default'],
	        {
	          href: this.props.href,
	          title: this.props.title,
	          target: this.props.target,
	          onClick: this.handleClick },
	        this.props.text
	      ),
	      _react2['default'].createElement(
	        'ul',
	        { className: 'nav' },
	        _utilsValidComponentChildren2['default'].map(this.props.children, this.renderNavItem)
	      )
	    );
	  },

	  renderNavItem: function renderNavItem(child, index) {
	    return _react.cloneElement(child, {
	      active: this.getChildActiveProp(child),
	      onSelect: _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect),
	      key: child.key ? child.key : index
	    });
	  }
	});

	exports['default'] = SubNav;
	module.exports = exports['default'];

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsTransitionEvents = __webpack_require__(250);

	var _utilsTransitionEvents2 = _interopRequireDefault(_utilsTransitionEvents);

	var Tab = _react2['default'].createClass({
	  displayName: 'Tab',

	  propTypes: {
	    /**
	     * @private
	     */
	    active: _react2['default'].PropTypes.bool,
	    animation: _react2['default'].PropTypes.bool,
	    /**
	     * It is used by 'Tabs' - parent component
	     * @private
	     */
	    onAnimateOutEnd: _react2['default'].PropTypes.func,
	    disabled: _react2['default'].PropTypes.bool,
	    title: _react2['default'].PropTypes.node
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      animation: true
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      animateIn: false,
	      animateOut: false
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if (this.props.animation) {
	      if (!this.state.animateIn && nextProps.active && !this.props.active) {
	        this.setState({
	          animateIn: true
	        });
	      } else if (!this.state.animateOut && !nextProps.active && this.props.active) {
	        this.setState({
	          animateOut: true
	        });
	      }
	    }
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this.state.animateIn) {
	      setTimeout(this.startAnimateIn, 0);
	    }
	    if (this.state.animateOut) {
	      _utilsTransitionEvents2['default'].addEndEventListener(_react2['default'].findDOMNode(this), this.stopAnimateOut);
	    }
	  },

	  startAnimateIn: function startAnimateIn() {
	    if (this.isMounted()) {
	      this.setState({
	        animateIn: false
	      });
	    }
	  },

	  stopAnimateOut: function stopAnimateOut() {
	    if (this.isMounted()) {
	      this.setState({
	        animateOut: false
	      });

	      if (this.props.onAnimateOutEnd) {
	        this.props.onAnimateOutEnd();
	      }
	    }
	  },

	  render: function render() {
	    var classes = {
	      'tab-pane': true,
	      'fade': true,
	      'active': this.props.active || this.state.animateOut,
	      'in': this.props.active && !this.state.animateIn
	    };

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, {
	        title: undefined,
	        role: 'tabpanel',
	        'aria-hidden': !this.props.active,
	        className: _classnames2['default'](this.props.className, classes)
	      }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Tab;
	module.exports = exports['default'];

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _objectWithoutProperties = __webpack_require__(232)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _Tabs = __webpack_require__(390);

	var _Tabs2 = _interopRequireDefault(_Tabs);

	var _TabPane = __webpack_require__(391);

	var _TabPane2 = _interopRequireDefault(_TabPane);

	var _utilsValidComponentChildren = __webpack_require__(221);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var _utilsDeprecationWarning = __webpack_require__(187);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	var TabbedArea = _react2['default'].createClass({
	  displayName: 'TabbedArea',

	  componentWillMount: function componentWillMount() {
	    _utilsDeprecationWarning2['default']('TabbedArea', 'Tabs', 'https://github.com/react-bootstrap/react-bootstrap/pull/1091');
	  },

	  render: function render() {
	    var _props = this.props;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['children']);

	    var tabs = _utilsValidComponentChildren2['default'].map(children, function (child) {
	      var _child$props = child.props;
	      var title = _child$props.tab;

	      var others = _objectWithoutProperties(_child$props, ['tab']);

	      return _react2['default'].createElement(_TabPane2['default'], _extends({ title: title }, others));
	    });

	    return _react2['default'].createElement(
	      _Tabs2['default'],
	      props,
	      tabs
	    );
	  }
	});

	exports['default'] = TabbedArea;
	module.exports = exports['default'];

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _objectWithoutProperties = __webpack_require__(232)['default'];

	var _Object$keys = __webpack_require__(170)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _Col = __webpack_require__(251);

	var _Col2 = _interopRequireDefault(_Col);

	var _Nav = __webpack_require__(366);

	var _Nav2 = _interopRequireDefault(_Nav);

	var _NavItem = __webpack_require__(368);

	var _NavItem2 = _interopRequireDefault(_NavItem);

	var _styleMaps = __webpack_require__(235);

	var _styleMaps2 = _interopRequireDefault(_styleMaps);

	var _keycode = __webpack_require__(259);

	var _keycode2 = _interopRequireDefault(_keycode);

	var _utilsCreateChainedFunction = __webpack_require__(222);

	var _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);

	var _utilsValidComponentChildren = __webpack_require__(221);

	var _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);

	var paneId = function paneId(props, child) {
	  return child.props.id ? child.props.id : props.id && props.id + '___pane___' + child.props.eventKey;
	};
	var tabId = function tabId(props, child) {
	  return child.props.id ? child.props.id + '___tab' : props.id && props.id + '___tab___' + child.props.eventKey;
	};

	var findChild = _utilsValidComponentChildren2['default'].find;

	function getDefaultActiveKeyFromChildren(children) {
	  var defaultActiveKey = undefined;

	  _utilsValidComponentChildren2['default'].forEach(children, function (child) {
	    if (defaultActiveKey == null) {
	      defaultActiveKey = child.props.eventKey;
	    }
	  });

	  return defaultActiveKey;
	}

	function move(children, currentKey, keys, moveNext) {
	  var lastIdx = keys.length - 1;
	  var stopAt = keys[moveNext ? Math.max(lastIdx, 0) : 0];
	  var nextKey = currentKey;

	  function getNext() {
	    var idx = keys.indexOf(nextKey);
	    nextKey = moveNext ? keys[Math.min(lastIdx, idx + 1)] : keys[Math.max(0, idx - 1)];

	    return findChild(children, function (_child) {
	      return _child.props.eventKey === nextKey;
	    });
	  }

	  var next = getNext();

	  while (next.props.eventKey !== stopAt && next.props.disabled) {
	    next = getNext();
	  }

	  return next.props.disabled ? currentKey : next.props.eventKey;
	}

	var Tabs = _react2['default'].createClass({
	  displayName: 'Tabs',

	  propTypes: {
	    activeKey: _react2['default'].PropTypes.any,
	    defaultActiveKey: _react2['default'].PropTypes.any,
	    /**
	     * Navigation style for tabs
	     *
	     * If not specified, it will be treated as `'tabs'` when vertically
	     * positioned and `'pills'` when horizontally positioned.
	     */
	    bsStyle: _react2['default'].PropTypes.oneOf(['tabs', 'pills']),
	    animation: _react2['default'].PropTypes.bool,
	    id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),
	    onSelect: _react2['default'].PropTypes.func,
	    position: _react2['default'].PropTypes.oneOf(['top', 'left', 'right']),
	    /**
	     * Number of grid columns for the tabs if horizontally positioned
	     *
	     * This accepts either a single width or a mapping of size to width.
	     */
	    tabWidth: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.object]),
	    /**
	     * Number of grid columns for the panes if horizontally positioned
	     *
	     * This accepts either a single width or a mapping of size to width. If not
	     * specified, it will be treated as `styleMaps.GRID_COLUMNS` minus
	     * `tabWidth`.
	     */
	    paneWidth: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.object]),
	    /**
	     * Render without clearfix if horizontally positioned
	     */
	    standalone: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      animation: true,
	      tabWidth: 2,
	      position: 'top',
	      standalone: false
	    };
	  },

	  getInitialState: function getInitialState() {
	    var defaultActiveKey = this.props.defaultActiveKey != null ? this.props.defaultActiveKey : getDefaultActiveKeyFromChildren(this.props.children);

	    return {
	      activeKey: defaultActiveKey,
	      previousActiveKey: null
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var _this = this;

	    if (nextProps.activeKey != null && nextProps.activeKey !== this.props.activeKey) {
	      (function () {
	        // check if the 'previousActiveKey' child still exists
	        var previousActiveKey = _this.props.activeKey;
	        _react2['default'].Children.forEach(nextProps.children, function (child) {
	          if (_react2['default'].isValidElement(child)) {
	            if (child.props.eventKey === previousActiveKey) {
	              _this.setState({
	                previousActiveKey: previousActiveKey
	              });
	              return;
	            }
	          }
	        });
	      })();
	    }
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    var tabs = this._tabs;
	    var tabIdx = this._eventKeys().indexOf(this.getActiveKey());

	    if (this._needsRefocus) {
	      this._needsRefocus = false;
	      if (tabs && tabIdx !== -1) {
	        var tabNode = _react.findDOMNode(tabs[tabIdx]);

	        if (tabNode) {
	          tabNode.firstChild.focus();
	        }
	      }
	    }
	  },

	  handlePaneAnimateOutEnd: function handlePaneAnimateOutEnd() {
	    this.setState({
	      previousActiveKey: null
	    });
	  },

	  render: function render() {
	    var _props = this.props;
	    var id = _props.id;
	    var className = _props.className;
	    var style = _props.style;
	    var position = _props.position;
	    var bsStyle = _props.bsStyle;
	    var tabWidth = _props.tabWidth;
	    var paneWidth = _props.paneWidth;
	    var standalone = _props.standalone;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['id', 'className', 'style', 'position', 'bsStyle', 'tabWidth', 'paneWidth', 'standalone', 'children']);

	    var isHorizontal = position === 'left' || position === 'right';

	    if (bsStyle == null) {
	      bsStyle = isHorizontal ? 'pills' : 'tabs';
	    }

	    var containerProps = { id: id, className: className, style: style };

	    var tabsProps = _extends({}, props, {
	      bsStyle: bsStyle,
	      stacked: isHorizontal,
	      activeKey: this.getActiveKey(),
	      onSelect: this.handleSelect,
	      ref: 'tabs',
	      role: 'tablist'
	    });
	    var childTabs = _utilsValidComponentChildren2['default'].map(children, this.renderTab);

	    var panesProps = {
	      className: 'tab-content',
	      ref: 'panes'
	    };
	    var childPanes = _utilsValidComponentChildren2['default'].map(children, this.renderPane);

	    if (isHorizontal) {
	      if (!standalone) {
	        containerProps.className = _classnames2['default'](containerProps.className, 'clearfix');
	      }

	      var _getColProps = this.getColProps({ tabWidth: tabWidth, paneWidth: paneWidth });

	      var tabsColProps = _getColProps.tabsColProps;
	      var panesColProps = _getColProps.panesColProps;

	      var tabs = _react2['default'].createElement(
	        _Col2['default'],
	        _extends({ componentClass: _Nav2['default'] }, tabsProps, tabsColProps),
	        childTabs
	      );
	      var panes = _react2['default'].createElement(
	        _Col2['default'],
	        _extends({}, panesProps, panesColProps),
	        childPanes
	      );

	      if (position === 'left') {
	        return _react2['default'].createElement(
	          'div',
	          containerProps,
	          tabs,
	          panes
	        );
	      } else {
	        return _react2['default'].createElement(
	          'div',
	          containerProps,
	          panes,
	          tabs
	        );
	      }
	    } else {
	      return _react2['default'].createElement(
	        'div',
	        containerProps,
	        _react2['default'].createElement(
	          _Nav2['default'],
	          tabsProps,
	          childTabs
	        ),
	        _react2['default'].createElement(
	          'div',
	          panesProps,
	          childPanes
	        )
	      );
	    }
	  },

	  getActiveKey: function getActiveKey() {
	    return this.props.activeKey !== undefined ? this.props.activeKey : this.state.activeKey;
	  },

	  renderPane: function renderPane(child, index) {
	    var previousActiveKey = this.state.previousActiveKey;

	    var shouldPaneBeSetActive = child.props.eventKey === this.getActiveKey();
	    var thereIsNoActivePane = previousActiveKey == null;

	    var paneIsAlreadyActive = previousActiveKey != null && child.props.eventKey === previousActiveKey;

	    return _react.cloneElement(child, {
	      active: shouldPaneBeSetActive && (thereIsNoActivePane || !this.props.animation),
	      id: paneId(this.props, child),
	      'aria-labelledby': tabId(this.props, child),
	      key: child.key ? child.key : index,
	      animation: this.props.animation,
	      onAnimateOutEnd: paneIsAlreadyActive ? this.handlePaneAnimateOutEnd : null
	    });
	  },

	  renderTab: function renderTab(child, index) {
	    var _this2 = this;

	    if (child.props.title == null) {
	      return null;
	    }

	    var _child$props = child.props;
	    var eventKey = _child$props.eventKey;
	    var title = _child$props.title;
	    var disabled = _child$props.disabled;
	    var onKeyDown = _child$props.onKeyDown;
	    var _child$props$tabIndex = _child$props.tabIndex;
	    var tabIndex = _child$props$tabIndex === undefined ? 0 : _child$props$tabIndex;

	    var isActive = this.getActiveKey() === eventKey;

	    return _react2['default'].createElement(
	      _NavItem2['default'],
	      {
	        linkId: tabId(this.props, child),
	        ref: function (ref) {
	          return (_this2._tabs || (_this2._tabs = []))[index] = ref;
	        },
	        'aria-controls': paneId(this.props, child),
	        onKeyDown: _utilsCreateChainedFunction2['default'](this.handleKeyDown, onKeyDown),
	        eventKey: eventKey,
	        tabIndex: isActive ? tabIndex : -1,
	        disabled: disabled },
	      title
	    );
	  },

	  getColProps: function getColProps(_ref) {
	    var tabWidth = _ref.tabWidth;
	    var paneWidth = _ref.paneWidth;

	    var tabsColProps = undefined;
	    if (tabWidth instanceof Object) {
	      tabsColProps = tabWidth;
	    } else {
	      tabsColProps = { xs: tabWidth };
	    }

	    var panesColProps = undefined;
	    if (paneWidth == null) {
	      panesColProps = {};
	      _Object$keys(tabsColProps).forEach(function (size) {
	        panesColProps[size] = _styleMaps2['default'].GRID_COLUMNS - tabsColProps[size];
	      });
	    } else if (paneWidth instanceof Object) {
	      panesColProps = paneWidth;
	    } else {
	      panesColProps = { xs: paneWidth };
	    }

	    return { tabsColProps: tabsColProps, panesColProps: panesColProps };
	  },

	  shouldComponentUpdate: function shouldComponentUpdate() {
	    // Defer any updates to this component during the `onSelect` handler.
	    return !this._isChanging;
	  },

	  handleSelect: function handleSelect(selectedKey) {
	    if (this.props.onSelect) {
	      this._isChanging = true;
	      this.props.onSelect(selectedKey);
	      this._isChanging = false;
	      return;
	    }

	    // if there is no external handler, then use embedded one
	    var previousActiveKey = this.getActiveKey();
	    if (selectedKey !== previousActiveKey) {
	      this.setState({
	        activeKey: selectedKey,
	        previousActiveKey: previousActiveKey
	      });
	    }
	  },

	  handleKeyDown: function handleKeyDown(event) {
	    var keys = this._eventKeys();
	    var currentKey = this.getActiveKey() || keys[0];
	    var next = undefined;

	    switch (event.keyCode) {

	      case _keycode2['default'].codes.left:
	      case _keycode2['default'].codes.up:
	        next = move(this.props.children, currentKey, keys, false);

	        if (next && next !== currentKey) {
	          event.preventDefault();
	          this.handleSelect(next);
	          this._needsRefocus = true;
	        }
	        break;
	      case _keycode2['default'].codes.right:
	      case _keycode2['default'].codes.down:
	        next = move(this.props.children, currentKey, keys, true);

	        if (next && next !== currentKey) {
	          event.preventDefault();
	          this.handleSelect(next);
	          this._needsRefocus = true;
	        }
	        break;
	      default:
	    }
	  },

	  _eventKeys: function _eventKeys() {
	    var keys = [];

	    _utilsValidComponentChildren2['default'].forEach(this.props.children, function (_ref2) {
	      var eventKey = _ref2.props.eventKey;
	      return keys.push(eventKey);
	    });

	    return keys;
	  }
	});

	exports['default'] = Tabs;
	module.exports = exports['default'];

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _utilsDeprecationWarning = __webpack_require__(187);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	var _Tab = __webpack_require__(388);

	var _Tab2 = _interopRequireDefault(_Tab);

	var TabPane = _react2['default'].createClass({
	  displayName: 'TabPane',

	  componentWillMount: function componentWillMount() {
	    _utilsDeprecationWarning2['default']('TabPane', 'Tab', 'https://github.com/react-bootstrap/react-bootstrap/pull/1091');
	  },

	  render: function render() {
	    return _react2['default'].createElement(_Tab2['default'], this.props);
	  }
	});

	exports['default'] = TabPane;
	module.exports = exports['default'];

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Table = _react2['default'].createClass({
	  displayName: 'Table',

	  propTypes: {
	    striped: _react2['default'].PropTypes.bool,
	    bordered: _react2['default'].PropTypes.bool,
	    condensed: _react2['default'].PropTypes.bool,
	    hover: _react2['default'].PropTypes.bool,
	    responsive: _react2['default'].PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bordered: false,
	      condensed: false,
	      hover: false,
	      responsive: false,
	      striped: false
	    };
	  },

	  render: function render() {
	    var classes = {
	      'table': true,
	      'table-striped': this.props.striped,
	      'table-bordered': this.props.bordered,
	      'table-condensed': this.props.condensed,
	      'table-hover': this.props.hover
	    };
	    var table = _react2['default'].createElement(
	      'table',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );

	    return this.props.responsive ? _react2['default'].createElement(
	      'div',
	      { className: 'table-responsive' },
	      table
	    ) : table;
	  }
	});

	exports['default'] = Table;
	module.exports = exports['default'];

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var _SafeAnchor = __webpack_require__(265);

	var _SafeAnchor2 = _interopRequireDefault(_SafeAnchor);

	var Thumbnail = _react2['default'].createClass({
	  displayName: 'Thumbnail',

	  mixins: [_BootstrapMixin2['default']],

	  propTypes: {
	    alt: _react2['default'].PropTypes.string,
	    href: _react2['default'].PropTypes.string,
	    src: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'thumbnail'
	    };
	  },

	  render: function render() {
	    var classes = this.getBsClassSet();

	    if (this.props.href) {
	      return _react2['default'].createElement(
	        _SafeAnchor2['default'],
	        _extends({}, this.props, { href: this.props.href, className: _classnames2['default'](this.props.className, classes) }),
	        _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt })
	      );
	    } else {
	      if (this.props.children) {
	        return _react2['default'].createElement(
	          'div',
	          _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	          _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt }),
	          _react2['default'].createElement(
	            'div',
	            { className: 'caption' },
	            this.props.children
	          )
	        );
	      } else {
	        return _react2['default'].createElement(
	          'div',
	          _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	          _react2['default'].createElement('img', { src: this.props.src, alt: this.props.alt })
	        );
	      }
	    }
	  }
	});

	exports['default'] = Thumbnail;
	module.exports = exports['default'];

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _inherits = __webpack_require__(188)['default'];

	var _classCallCheck = __webpack_require__(197)['default'];

	var _extends = __webpack_require__(224)['default'];

	var _objectWithoutProperties = __webpack_require__(232)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _utilsCustomPropTypes = __webpack_require__(219);

	var _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);

	var Tooltip = (function (_React$Component) {
	  _inherits(Tooltip, _React$Component);

	  function Tooltip() {
	    _classCallCheck(this, Tooltip);

	    _React$Component.apply(this, arguments);
	  }

	  Tooltip.prototype.render = function render() {
	    var _props = this.props;
	    var placement = _props.placement;
	    var positionLeft = _props.positionLeft;
	    var positionTop = _props.positionTop;
	    var arrowOffsetLeft = _props.arrowOffsetLeft;
	    var arrowOffsetTop = _props.arrowOffsetTop;
	    var className = _props.className;
	    var style = _props.style;
	    var children = _props.children;

	    var props = _objectWithoutProperties(_props, ['placement', 'positionLeft', 'positionTop', 'arrowOffsetLeft', 'arrowOffsetTop', 'className', 'style', 'children']);

	    return _react2['default'].createElement(
	      'div',
	      _extends({
	        role: 'tooltip'
	      }, props, {
	        className: _classnames2['default'](className, 'tooltip', placement),
	        style: _extends({ left: positionLeft, top: positionTop }, style)
	      }),
	      _react2['default'].createElement('div', {
	        className: 'tooltip-arrow',
	        style: { left: arrowOffsetLeft, top: arrowOffsetTop }
	      }),
	      _react2['default'].createElement(
	        'div',
	        { className: 'tooltip-inner' },
	        children
	      )
	    );
	  };

	  return Tooltip;
	})(_react2['default'].Component);

	exports['default'] = Tooltip;

	Tooltip.propTypes = {
	  /**
	   * An html id attribute, necessary for accessibility
	   * @type {string}
	   * @required
	   */
	  id: _utilsCustomPropTypes2['default'].isRequiredForA11y(_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),

	  /**
	   * The direction the tooltip is positioned towards
	   */
	  placement: _react2['default'].PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

	  /**
	   * The `left` position value for the tooltip
	   */
	  positionLeft: _react2['default'].PropTypes.number,
	  /**
	   * The `top` position value for the tooltip
	   */
	  positionTop: _react2['default'].PropTypes.number,
	  /**
	   * The `left` position value for the tooltip arrow
	   */
	  arrowOffsetLeft: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),
	  /**
	   * The `top` position value for the tooltip arrow
	   */
	  arrowOffsetTop: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string])
	};

	Tooltip.defaultProps = {
	  placement: 'right'
	};
	module.exports = exports['default'];

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = __webpack_require__(224)['default'];

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _react = __webpack_require__(12);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(233);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _BootstrapMixin = __webpack_require__(234);

	var _BootstrapMixin2 = _interopRequireDefault(_BootstrapMixin);

	var Well = _react2['default'].createClass({
	  displayName: 'Well',

	  mixins: [_BootstrapMixin2['default']],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      bsClass: 'well'
	    };
	  },

	  render: function render() {
	    var classes = this.getBsClassSet();

	    return _react2['default'].createElement(
	      'div',
	      _extends({}, this.props, { className: _classnames2['default'](this.props.className, classes) }),
	      this.props.children
	    );
	  }
	});

	exports['default'] = Well;
	module.exports = exports['default'];

/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _utilsDeprecationWarning = __webpack_require__(187);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	var _reactOverlaysLibPortal = __webpack_require__(356);

	var _reactOverlaysLibPortal2 = _interopRequireDefault(_reactOverlaysLibPortal);

	exports['default'] = _utilsDeprecationWarning2['default'].wrapper(_reactOverlaysLibPortal2['default'], {
	  message: 'The Portal component is deprecated in react-bootstrap. It has been moved to a more generic library: react-overlays. ' + 'You can read more at: ' + 'http://react-bootstrap.github.io/react-overlays/examples/#portal and ' + 'https://github.com/react-bootstrap/react-bootstrap/issues/1084'
	});
	module.exports = exports['default'];

/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _interopRequireDefault = __webpack_require__(185)['default'];

	exports.__esModule = true;

	var _utilsDeprecationWarning = __webpack_require__(187);

	var _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);

	var _reactOverlaysLibPosition = __webpack_require__(371);

	var _reactOverlaysLibPosition2 = _interopRequireDefault(_reactOverlaysLibPosition);

	exports['default'] = _utilsDeprecationWarning2['default'].wrapper(_reactOverlaysLibPosition2['default'], {
	  message: 'The Position component is deprecated in react-bootstrap. It has been moved to a more generic library: react-overlays. ' + 'You can read more at: ' + 'http://react-bootstrap.github.io/react-overlays/examples/#position and ' + 'https://github.com/react-bootstrap/react-bootstrap/issues/1084'
	});
	module.exports = exports['default'];

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

	var React = __webpack_require__(12);
	var ExpressionViewer = __webpack_require__(399);
	var InteractiveFigure = __webpack_require__(415);
	module.exports = InteractiveFigure(ExpressionViewer, 'regex');


/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

	var React = __webpack_require__(12);
	var Bootstrap = __webpack_require__(169);
	var vis = __webpack_require__(400);
	var visualization = __webpack_require__(401);
	var CharRegex = __webpack_require__(402);
	var ExpressionViewer = React.createClass({displayName: "ExpressionViewer",
	  drawGraph: function() {
	    var cont = React.findDOMNode(this.refs.container);
	    var data = visualization.expressionGraph(this.regex.expression);
	    var net = new vis.Network(cont, data, visualization.config.expression);
	    var parentHeight = React.findDOMNode(this).offsetHeight;
	    net.setOptions({height: String(parentHeight)});
	  },
	  componentDidMount: function() {
	    if (this.didCompile) this.drawGraph();
	  },
	  componentDidUpdate: function() {
	    if (this.didCompile) this.drawGraph();
	  },
	  render: function() {
	    try {
	      this.regex = new CharRegex(this.props.regex);
	      this.didCompile = true;
	      return React.createElement("div", {ref: "container"});
	    } catch(err) {
	      this.didCompile = false;
	      return React.createElement(Bootstrap.Alert, {bsStyle: "danger"}, err);
	    }
	  }
	});
	module.exports = ExpressionViewer;


/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * vis.js
	 * https://github.com/almende/vis
	 *
	 * A dynamic, browser-based visualization library.
	 *
	 * @version 4.21.0
	 * @date    2017-10-12
	 *
	 * @license
	 * Copyright (C) 2011-2017 Almende B.V, http://almende.com
	 *
	 * Vis.js is dual licensed under both
	 *
	 * * The Apache 2.0 License
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * and
	 *
	 * * The MIT License
	 *   http://opensource.org/licenses/MIT
	 *
	 * Vis.js may be distributed under either license.
	 */

	"use strict";

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["vis"] = factory();
		else
			root["vis"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 123);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	exports.__esModule = true;

	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	exports.__esModule = true;

	var _defineProperty = __webpack_require__(169);

	var _defineProperty2 = _interopRequireDefault(_defineProperty);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _getIterator2 = __webpack_require__(77);

	var _getIterator3 = _interopRequireDefault(_getIterator2);

	var _create = __webpack_require__(29);

	var _create2 = _interopRequireDefault(_create);

	var _keys = __webpack_require__(8);

	var _keys2 = _interopRequireDefault(_keys);

	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	// utility functions

	// first check if moment.js is already loaded in the browser window, if so,
	// use this instance. Else, load via commonjs.


	var moment = __webpack_require__(9);
	var uuid = __webpack_require__(157);

	/**
	 * Test whether given object is a number
	 * @param {*} object
	 * @return {Boolean} isNumber
	 */
	exports.isNumber = function (object) {
	  return object instanceof Number || typeof object == 'number';
	};

	/**
	 * Remove everything in the DOM object
	 * @param {Element} DOMobject
	 */
	exports.recursiveDOMDelete = function (DOMobject) {
	  if (DOMobject) {
	    while (DOMobject.hasChildNodes() === true) {
	      exports.recursiveDOMDelete(DOMobject.firstChild);
	      DOMobject.removeChild(DOMobject.firstChild);
	    }
	  }
	};

	/**
	 * this function gives you a range between 0 and 1 based on the min and max values in the set, the total sum of all values and the current value.
	 *
	 * @param {number} min
	 * @param {number} max
	 * @param {number} total
	 * @param {number} value
	 * @returns {number}
	 */
	exports.giveRange = function (min, max, total, value) {
	  if (max == min) {
	    return 0.5;
	  } else {
	    var scale = 1 / (max - min);
	    return Math.max(0, (value - min) * scale);
	  }
	};

	/**
	 * Test whether given object is a string
	 * @param {*} object
	 * @return {Boolean} isString
	 */
	exports.isString = function (object) {
	  return object instanceof String || typeof object == 'string';
	};

	/**
	 * Test whether given object is a Date, or a String containing a Date
	 * @param {Date | String} object
	 * @return {Boolean} isDate
	 */
	exports.isDate = function (object) {
	  if (object instanceof Date) {
	    return true;
	  } else if (exports.isString(object)) {
	    // test whether this string contains a date
	    var match = ASPDateRegex.exec(object);
	    if (match) {
	      return true;
	    } else if (!isNaN(Date.parse(object))) {
	      return true;
	    }
	  }

	  return false;
	};

	/**
	 * Create a semi UUID
	 * source: http://stackoverflow.com/a/105074/1262753
	 * @return {string} uuid
	 */
	exports.randomUUID = function () {
	  return uuid.v4();
	};

	/**
	 * assign all keys of an object that are not nested objects to a certain value (used for color objects).
	 * @param {object} obj
	 * @param {number} value
	 */
	exports.assignAllKeys = function (obj, value) {
	  for (var prop in obj) {
	    if (obj.hasOwnProperty(prop)) {
	      if ((0, _typeof3['default'])(obj[prop]) !== 'object') {
	        obj[prop] = value;
	      }
	    }
	  }
	};

	/**
	 * Copy property from b to a if property present in a.
	 * If property in b explicitly set to null, delete it if `allowDeletion` set.
	 *
	 * Internal helper routine, should not be exported. Not added to `exports` for that reason.
	 *
	 * @param {object} a  target object
	 * @param {object} b  source object
	 * @param {string} prop  name of property to copy to a
	 * @param {boolean} allowDeletion  if true, delete property in a if explicitly set to null in b 
	 * @private
	 */
	function copyOrDelete(a, b, prop, allowDeletion) {
	  var doDeletion = false;
	  if (allowDeletion === true) {
	    doDeletion = b[prop] === null && a[prop] !== undefined;
	  }

	  if (doDeletion) {
	    delete a[prop];
	  } else {
	    a[prop] = b[prop]; // Remember, this is a reference copy!
	  }
	}

	/**
	 * Fill an object with a possibly partially defined other object.
	 *
	 * Only copies values for the properties already present in a.
	 * That means an object is not created on a property if only the b object has it.
	 *
	 * @param {object} a
	 * @param {object} b
	 * @param {boolean} [allowDeletion=false]  if true, delete properties in a that are explicitly set to null in b 
	 */
	exports.fillIfDefined = function (a, b) {
	  var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	  // NOTE: iteration of properties of a
	  // NOTE: prototype properties iterated over as well
	  for (var prop in a) {
	    if (b[prop] !== undefined) {
	      if (b[prop] === null || (0, _typeof3['default'])(b[prop]) !== 'object') {
	        // Note: typeof null === 'object'
	        copyOrDelete(a, b, prop, allowDeletion);
	      } else {
	        if ((0, _typeof3['default'])(a[prop]) === 'object') {
	          exports.fillIfDefined(a[prop], b[prop], allowDeletion);
	        }
	      }
	    }
	  }
	};

	/**
	 * Extend object a with the properties of object b or a series of objects
	 * Only properties with defined values are copied
	 * @param {Object} a
	 * @param {...Object} b
	 * @return {Object} a
	 */
	exports.extend = function (a, b) {
	  // eslint-disable-line no-unused-vars
	  for (var i = 1; i < arguments.length; i++) {
	    var other = arguments[i];
	    for (var prop in other) {
	      if (other.hasOwnProperty(prop)) {
	        a[prop] = other[prop];
	      }
	    }
	  }
	  return a;
	};

	/**
	 * Extend object a with selected properties of object b or a series of objects
	 * Only properties with defined values are copied
	 * @param {Array.<string>} props
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 */
	exports.selectiveExtend = function (props, a, b) {
	  // eslint-disable-line no-unused-vars
	  if (!Array.isArray(props)) {
	    throw new Error('Array with property names expected as first argument');
	  }

	  for (var i = 2; i < arguments.length; i++) {
	    var other = arguments[i];

	    for (var p = 0; p < props.length; p++) {
	      var prop = props[p];
	      if (other && other.hasOwnProperty(prop)) {
	        a[prop] = other[prop];
	      }
	    }
	  }
	  return a;
	};

	/**
	 * Extend object a with selected properties of object b.
	 * Only properties with defined values are copied.
	 *
	 * **Note:** Previous version of this routine implied that multiple source objects
	 *           could be used; however, the implementation was **wrong**.
	 *           Since multiple (>1) sources weren't used anywhere in the `vis.js` code,
	 *           this has been removed
	 *
	 * @param {Array.<string>} props names of first-level properties to copy over
	 * @param {object} a  target object
	 * @param {object} b  source object
	 * @param {boolean} [allowDeletion=false]  if true, delete property in a if explicitly set to null in b 
	 * @returns {Object} a
	 */
	exports.selectiveDeepExtend = function (props, a, b) {
	  var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

	  // TODO: add support for Arrays to deepExtend
	  if (Array.isArray(b)) {
	    throw new TypeError('Arrays are not supported by deepExtend');
	  }

	  for (var p = 0; p < props.length; p++) {
	    var prop = props[p];
	    if (b.hasOwnProperty(prop)) {
	      if (b[prop] && b[prop].constructor === Object) {
	        if (a[prop] === undefined) {
	          a[prop] = {};
	        }
	        if (a[prop].constructor === Object) {
	          exports.deepExtend(a[prop], b[prop], false, allowDeletion);
	        } else {
	          copyOrDelete(a, b, prop, allowDeletion);
	        }
	      } else if (Array.isArray(b[prop])) {
	        throw new TypeError('Arrays are not supported by deepExtend');
	      } else {
	        copyOrDelete(a, b, prop, allowDeletion);
	      }
	    }
	  }
	  return a;
	};

	/**
	 * Extend object `a` with properties of object `b`, ignoring properties which are explicitly 
	 * specified to be excluded.
	 * 
	 * The properties of `b` are considered for copying.
	 * Properties which are themselves objects are are also extended.
	 * Only properties with defined values are copied
	 *
	 * @param {Array.<string>} propsToExclude  names of properties which should *not* be copied
	 * @param {Object}                      a  object to extend
	 * @param {Object}                      b  object to take properties from for extension
	 * @param {boolean} [allowDeletion=false]  if true, delete properties in a that are explicitly set to null in b 
	 * @return {Object} a
	 */
	exports.selectiveNotDeepExtend = function (propsToExclude, a, b) {
	  var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

	  // TODO: add support for Arrays to deepExtend
	  // NOTE: array properties have an else-below; apparently, there is a problem here. 
	  if (Array.isArray(b)) {
	    throw new TypeError('Arrays are not supported by deepExtend');
	  }

	  for (var prop in b) {
	    if (!b.hasOwnProperty(prop)) continue; // Handle local properties only 
	    if (propsToExclude.indexOf(prop) !== -1) continue; // In exclusion list, skip

	    if (b[prop] && b[prop].constructor === Object) {
	      if (a[prop] === undefined) {
	        a[prop] = {};
	      }
	      if (a[prop].constructor === Object) {
	        exports.deepExtend(a[prop], b[prop]); // NOTE: allowDeletion not propagated!
	      } else {
	        copyOrDelete(a, b, prop, allowDeletion);
	      }
	    } else if (Array.isArray(b[prop])) {
	      a[prop] = [];
	      for (var i = 0; i < b[prop].length; i++) {
	        a[prop].push(b[prop][i]);
	      }
	    } else {
	      copyOrDelete(a, b, prop, allowDeletion);
	    }
	  }

	  return a;
	};

	/**
	 * Deep extend an object a with the properties of object b
	 *
	 * @param {Object} a
	 * @param {Object} b
	 * @param {boolean} [protoExtend=false]  If true, the prototype values will also be extended.
	 *                          (ie. the options objects that inherit from others will also get the inherited options)
	 * @param {boolean} [allowDeletion=false] If true, the values of fields that are null will be deleted
	 * @returns {Object}
	 */
	exports.deepExtend = function (a, b) {
	  var protoExtend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	  var allowDeletion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

	  for (var prop in b) {
	    if (b.hasOwnProperty(prop) || protoExtend === true) {
	      if (b[prop] && b[prop].constructor === Object) {
	        if (a[prop] === undefined) {
	          a[prop] = {};
	        }
	        if (a[prop].constructor === Object) {
	          exports.deepExtend(a[prop], b[prop], protoExtend); // NOTE: allowDeletion not propagated!
	        } else {
	          copyOrDelete(a, b, prop, allowDeletion);
	        }
	      } else if (Array.isArray(b[prop])) {
	        a[prop] = [];
	        for (var i = 0; i < b[prop].length; i++) {
	          a[prop].push(b[prop][i]);
	        }
	      } else {
	        copyOrDelete(a, b, prop, allowDeletion);
	      }
	    }
	  }
	  return a;
	};

	/**
	 * Test whether all elements in two arrays are equal.
	 * @param {Array} a
	 * @param {Array} b
	 * @return {boolean} Returns true if both arrays have the same length and same
	 *                   elements.
	 */
	exports.equalArray = function (a, b) {
	  if (a.length != b.length) return false;

	  for (var i = 0, len = a.length; i < len; i++) {
	    if (a[i] != b[i]) return false;
	  }

	  return true;
	};

	/**
	 * Convert an object to another type
	 * @param {boolean | number | string | Date | Moment | Null | undefined} object
	 * @param {string | undefined} type   Name of the type. Available types:
	 *                                    'Boolean', 'Number', 'String',
	 *                                    'Date', 'Moment', ISODate', 'ASPDate'.
	 * @return {*} object
	 * @throws Error
	 */
	exports.convert = function (object, type) {
	  var match;

	  if (object === undefined) {
	    return undefined;
	  }
	  if (object === null) {
	    return null;
	  }

	  if (!type) {
	    return object;
	  }
	  if (!(typeof type === 'string') && !(type instanceof String)) {
	    throw new Error('Type must be a string');
	  }

	  //noinspection FallthroughInSwitchStatementJS
	  switch (type) {
	    case 'boolean':
	    case 'Boolean':
	      return Boolean(object);

	    case 'number':
	    case 'Number':
	      if (exports.isString(object) && !isNaN(Date.parse(object))) {
	        return moment(object).valueOf();
	      } else {
	        return Number(object.valueOf());
	      }
	    case 'string':
	    case 'String':
	      return String(object);

	    case 'Date':
	      if (exports.isNumber(object)) {
	        return new Date(object);
	      }
	      if (object instanceof Date) {
	        return new Date(object.valueOf());
	      } else if (moment.isMoment(object)) {
	        return new Date(object.valueOf());
	      }
	      if (exports.isString(object)) {
	        match = ASPDateRegex.exec(object);
	        if (match) {
	          // object is an ASP date
	          return new Date(Number(match[1])); // parse number
	        } else {
	          return moment(new Date(object)).toDate(); // parse string
	        }
	      } else {
	        throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type Date');
	      }

	    case 'Moment':
	      if (exports.isNumber(object)) {
	        return moment(object);
	      }
	      if (object instanceof Date) {
	        return moment(object.valueOf());
	      } else if (moment.isMoment(object)) {
	        return moment(object);
	      }
	      if (exports.isString(object)) {
	        match = ASPDateRegex.exec(object);
	        if (match) {
	          // object is an ASP date
	          return moment(Number(match[1])); // parse number
	        } else {
	          return moment(object); // parse string
	        }
	      } else {
	        throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type Date');
	      }

	    case 'ISODate':
	      if (exports.isNumber(object)) {
	        return new Date(object);
	      } else if (object instanceof Date) {
	        return object.toISOString();
	      } else if (moment.isMoment(object)) {
	        return object.toDate().toISOString();
	      } else if (exports.isString(object)) {
	        match = ASPDateRegex.exec(object);
	        if (match) {
	          // object is an ASP date
	          return new Date(Number(match[1])).toISOString(); // parse number
	        } else {
	          return moment(object).format(); // ISO 8601
	        }
	      } else {
	        throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type ISODate');
	      }

	    case 'ASPDate':
	      if (exports.isNumber(object)) {
	        return '/Date(' + object + ')/';
	      } else if (object instanceof Date) {
	        return '/Date(' + object.valueOf() + ')/';
	      } else if (exports.isString(object)) {
	        match = ASPDateRegex.exec(object);
	        var value;
	        if (match) {
	          // object is an ASP date
	          value = new Date(Number(match[1])).valueOf(); // parse number
	        } else {
	          value = new Date(object).valueOf(); // parse string
	        }
	        return '/Date(' + value + ')/';
	      } else {
	        throw new Error('Cannot convert object of type ' + exports.getType(object) + ' to type ASPDate');
	      }

	    default:
	      throw new Error('Unknown type "' + type + '"');
	  }
	};

	// parse ASP.Net Date pattern,
	// for example '/Date(1198908717056)/' or '/Date(1198908717056-0700)/'
	// code from http://momentjs.com/
	var ASPDateRegex = /^\/?Date\((\-?\d+)/i;

	/**
	 * Get the type of an object, for example exports.getType([]) returns 'Array'
	 * @param {*} object
	 * @return {string} type
	 */
	exports.getType = function (object) {
	  var type = typeof object === 'undefined' ? 'undefined' : (0, _typeof3['default'])(object);

	  if (type == 'object') {
	    if (object === null) {
	      return 'null';
	    }
	    if (object instanceof Boolean) {
	      return 'Boolean';
	    }
	    if (object instanceof Number) {
	      return 'Number';
	    }
	    if (object instanceof String) {
	      return 'String';
	    }
	    if (Array.isArray(object)) {
	      return 'Array';
	    }
	    if (object instanceof Date) {
	      return 'Date';
	    }
	    return 'Object';
	  } else if (type == 'number') {
	    return 'Number';
	  } else if (type == 'boolean') {
	    return 'Boolean';
	  } else if (type == 'string') {
	    return 'String';
	  } else if (type === undefined) {
	    return 'undefined';
	  }

	  return type;
	};

	/**
	 * Used to extend an array and copy it. This is used to propagate paths recursively.
	 *
	 * @param {Array} arr
	 * @param {*} newValue
	 * @returns {Array}
	 */
	exports.copyAndExtendArray = function (arr, newValue) {
	  var newArr = [];
	  for (var i = 0; i < arr.length; i++) {
	    newArr.push(arr[i]);
	  }
	  newArr.push(newValue);
	  return newArr;
	};

	/**
	 * Used to extend an array and copy it. This is used to propagate paths recursively.
	 *
	 * @param {Array} arr
	 * @returns {Array}
	 */
	exports.copyArray = function (arr) {
	  var newArr = [];
	  for (var i = 0; i < arr.length; i++) {
	    newArr.push(arr[i]);
	  }
	  return newArr;
	};

	/**
	 * Retrieve the absolute left value of a DOM element
	 * @param {Element} elem        A dom element, for example a div
	 * @return {number} left        The absolute left position of this element
	 *                              in the browser page.
	 */
	exports.getAbsoluteLeft = function (elem) {
	  return elem.getBoundingClientRect().left;
	};

	exports.getAbsoluteRight = function (elem) {
	  return elem.getBoundingClientRect().right;
	};

	/**
	 * Retrieve the absolute top value of a DOM element
	 * @param {Element} elem        A dom element, for example a div
	 * @return {number} top        The absolute top position of this element
	 *                              in the browser page.
	 */
	exports.getAbsoluteTop = function (elem) {
	  return elem.getBoundingClientRect().top;
	};

	/**
	 * add a className to the given elements style
	 * @param {Element} elem
	 * @param {string} classNames
	 */
	exports.addClassName = function (elem, classNames) {
	  var classes = elem.className.split(' ');
	  var newClasses = classNames.split(' ');
	  classes = classes.concat(newClasses.filter(function (className) {
	    return classes.indexOf(className) < 0;
	  }));
	  elem.className = classes.join(' ');
	};

	/**
	 * add a className to the given elements style
	 * @param {Element} elem
	 * @param {string} classNames
	 */
	exports.removeClassName = function (elem, classNames) {
	  var classes = elem.className.split(' ');
	  var oldClasses = classNames.split(' ');
	  classes = classes.filter(function (className) {
	    return oldClasses.indexOf(className) < 0;
	  });
	  elem.className = classes.join(' ');
	};

	/**
	 * For each method for both arrays and objects.
	 * In case of an array, the built-in Array.forEach() is applied. (**No, it's not!**)
	 * In case of an Object, the method loops over all properties of the object.
	 * @param {Object | Array} object   An Object or Array
	 * @param {function} callback       Callback method, called for each item in
	 *                                  the object or array with three parameters:
	 *                                  callback(value, index, object)
	 */
	exports.forEach = function (object, callback) {
	  var i, len;
	  if (Array.isArray(object)) {
	    // array
	    for (i = 0, len = object.length; i < len; i++) {
	      callback(object[i], i, object);
	    }
	  } else {
	    // object
	    for (i in object) {
	      if (object.hasOwnProperty(i)) {
	        callback(object[i], i, object);
	      }
	    }
	  }
	};

	/**
	 * Convert an object into an array: all objects properties are put into the
	 * array. The resulting array is unordered.
	 * @param {Object} object
	 * @returns {Array} array
	 */
	exports.toArray = function (object) {
	  var array = [];

	  for (var prop in object) {
	    if (object.hasOwnProperty(prop)) array.push(object[prop]);
	  }

	  return array;
	};

	/**
	 * Update a property in an object
	 * @param {Object} object
	 * @param {string} key
	 * @param {*} value
	 * @return {Boolean} changed
	 */
	exports.updateProperty = function (object, key, value) {
	  if (object[key] !== value) {
	    object[key] = value;
	    return true;
	  } else {
	    return false;
	  }
	};

	/**
	 * Throttle the given function to be only executed once per animation frame
	 * @param {function} fn
	 * @returns {function} Returns the throttled function
	 */
	exports.throttle = function (fn) {
	  var scheduled = false;

	  return function throttled() {
	    if (!scheduled) {
	      scheduled = true;
	      requestAnimationFrame(function () {
	        scheduled = false;
	        fn();
	      });
	    }
	  };
	};

	/**
	 * Add and event listener. Works for all browsers
	 * @param {Element}     element    An html element
	 * @param {string}      action     The action, for example "click",
	 *                                 without the prefix "on"
	 * @param {function}    listener   The callback function to be executed
	 * @param {boolean}     [useCapture]
	 */
	exports.addEventListener = function (element, action, listener, useCapture) {
	  if (element.addEventListener) {
	    if (useCapture === undefined) useCapture = false;

	    if (action === "mousewheel" && navigator.userAgent.indexOf("Firefox") >= 0) {
	      action = "DOMMouseScroll"; // For Firefox
	    }

	    element.addEventListener(action, listener, useCapture);
	  } else {
	    element.attachEvent("on" + action, listener); // IE browsers
	  }
	};

	/**
	 * Remove an event listener from an element
	 * @param {Element}     element         An html dom element
	 * @param {string}      action          The name of the event, for example "mousedown"
	 * @param {function}    listener        The listener function
	 * @param {boolean}     [useCapture]
	 */
	exports.removeEventListener = function (element, action, listener, useCapture) {
	  if (element.removeEventListener) {
	    // non-IE browsers
	    if (useCapture === undefined) useCapture = false;

	    if (action === "mousewheel" && navigator.userAgent.indexOf("Firefox") >= 0) {
	      action = "DOMMouseScroll"; // For Firefox
	    }

	    element.removeEventListener(action, listener, useCapture);
	  } else {
	    // IE browsers
	    element.detachEvent("on" + action, listener);
	  }
	};

	/**
	 * Cancels the event if it is cancelable, without stopping further propagation of the event.
	 * @param {Event} event
	 */
	exports.preventDefault = function (event) {
	  if (!event) event = window.event;

	  if (event.preventDefault) {
	    event.preventDefault(); // non-IE browsers
	  } else {
	    event.returnValue = false; // IE browsers
	  }
	};

	/**
	 * Get HTML element which is the target of the event
	 * @param {Event} event
	 * @return {Element} target element
	 */
	exports.getTarget = function (event) {
	  // code from http://www.quirksmode.org/js/events_properties.html
	  if (!event) {
	    event = window.event;
	  }

	  var target;

	  if (event.target) {
	    target = event.target;
	  } else if (event.srcElement) {
	    target = event.srcElement;
	  }

	  if (target.nodeType != undefined && target.nodeType == 3) {
	    // defeat Safari bug
	    target = target.parentNode;
	  }

	  return target;
	};

	/**
	 * Check if given element contains given parent somewhere in the DOM tree
	 * @param {Element} element
	 * @param {Element} parent
	 * @returns {boolean}
	 */
	exports.hasParent = function (element, parent) {
	  var e = element;

	  while (e) {
	    if (e === parent) {
	      return true;
	    }
	    e = e.parentNode;
	  }

	  return false;
	};

	exports.option = {};

	/**
	 * Convert a value into a boolean
	 * @param {Boolean | function | undefined} value
	 * @param {boolean} [defaultValue]
	 * @returns {Boolean} bool
	 */
	exports.option.asBoolean = function (value, defaultValue) {
	  if (typeof value == 'function') {
	    value = value();
	  }

	  if (value != null) {
	    return value != false;
	  }

	  return defaultValue || null;
	};

	/**
	 * Convert a value into a number
	 * @param {Boolean | function | undefined} value
	 * @param {number} [defaultValue]
	 * @returns {number} number
	 */
	exports.option.asNumber = function (value, defaultValue) {
	  if (typeof value == 'function') {
	    value = value();
	  }

	  if (value != null) {
	    return Number(value) || defaultValue || null;
	  }

	  return defaultValue || null;
	};

	/**
	 * Convert a value into a string
	 * @param {string | function | undefined} value
	 * @param {string} [defaultValue]
	 * @returns {String} str
	 */
	exports.option.asString = function (value, defaultValue) {
	  if (typeof value == 'function') {
	    value = value();
	  }

	  if (value != null) {
	    return String(value);
	  }

	  return defaultValue || null;
	};

	/**
	 * Convert a size or location into a string with pixels or a percentage
	 * @param {string | number | function | undefined} value
	 * @param {string} [defaultValue]
	 * @returns {String} size
	 */
	exports.option.asSize = function (value, defaultValue) {
	  if (typeof value == 'function') {
	    value = value();
	  }

	  if (exports.isString(value)) {
	    return value;
	  } else if (exports.isNumber(value)) {
	    return value + 'px';
	  } else {
	    return defaultValue || null;
	  }
	};

	/**
	 * Convert a value into a DOM element
	 * @param {HTMLElement | function | undefined} value
	 * @param {HTMLElement} [defaultValue]
	 * @returns {HTMLElement | null} dom
	 */
	exports.option.asElement = function (value, defaultValue) {
	  if (typeof value == 'function') {
	    value = value();
	  }

	  return value || defaultValue || null;
	};

	/**
	 * http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
	 *
	 * @param {string} hex
	 * @returns {{r: *, g: *, b: *}} | 255 range
	 */
	exports.hexToRGB = function (hex) {
	  // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
	  var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
	  hex = hex.replace(shorthandRegex, function (m, r, g, b) {
	    return r + r + g + g + b + b;
	  });
	  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	  return result ? {
	    r: parseInt(result[1], 16),
	    g: parseInt(result[2], 16),
	    b: parseInt(result[3], 16)
	  } : null;
	};

	/**
	 * This function takes color in hex format or rgb() or rgba() format and overrides the opacity. Returns rgba() string.
	 * @param {string} color
	 * @param {number} opacity
	 * @returns {String}
	 */
	exports.overrideOpacity = function (color, opacity) {
	  var rgb;
	  if (color.indexOf("rgba") != -1) {
	    return color;
	  } else if (color.indexOf("rgb") != -1) {
	    rgb = color.substr(color.indexOf("(") + 1).replace(")", "").split(",");
	    return "rgba(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + "," + opacity + ")";
	  } else {
	    rgb = exports.hexToRGB(color);
	    if (rgb == null) {
	      return color;
	    } else {
	      return "rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + "," + opacity + ")";
	    }
	  }
	};

	/**
	 *
	 * @param {number} red     0 -- 255
	 * @param {number} green   0 -- 255
	 * @param {number} blue    0 -- 255
	 * @returns {String}
	 * @constructor
	 */
	exports.RGBToHex = function (red, green, blue) {
	  return "#" + ((1 << 24) + (red << 16) + (green << 8) + blue).toString(16).slice(1);
	};

	/**
	 * Parse a color property into an object with border, background, and
	 * highlight colors
	 * @param {Object | String} color
	 * @return {Object} colorObject
	 */
	exports.parseColor = function (color) {
	  var c;
	  if (exports.isString(color) === true) {
	    if (exports.isValidRGB(color) === true) {
	      var rgb = color.substr(4).substr(0, color.length - 5).split(',').map(function (value) {
	        return parseInt(value);
	      });
	      color = exports.RGBToHex(rgb[0], rgb[1], rgb[2]);
	    }
	    if (exports.isValidHex(color) === true) {
	      var hsv = exports.hexToHSV(color);
	      var lighterColorHSV = { h: hsv.h, s: hsv.s * 0.8, v: Math.min(1, hsv.v * 1.02) };
	      var darkerColorHSV = { h: hsv.h, s: Math.min(1, hsv.s * 1.25), v: hsv.v * 0.8 };
	      var darkerColorHex = exports.HSVToHex(darkerColorHSV.h, darkerColorHSV.s, darkerColorHSV.v);
	      var lighterColorHex = exports.HSVToHex(lighterColorHSV.h, lighterColorHSV.s, lighterColorHSV.v);
	      c = {
	        background: color,
	        border: darkerColorHex,
	        highlight: {
	          background: lighterColorHex,
	          border: darkerColorHex
	        },
	        hover: {
	          background: lighterColorHex,
	          border: darkerColorHex
	        }
	      };
	    } else {
	      c = {
	        background: color,
	        border: color,
	        highlight: {
	          background: color,
	          border: color
	        },
	        hover: {
	          background: color,
	          border: color
	        }
	      };
	    }
	  } else {
	    c = {};
	    c.background = color.background || undefined;
	    c.border = color.border || undefined;

	    if (exports.isString(color.highlight)) {
	      c.highlight = {
	        border: color.highlight,
	        background: color.highlight
	      };
	    } else {
	      c.highlight = {};
	      c.highlight.background = color.highlight && color.highlight.background || undefined;
	      c.highlight.border = color.highlight && color.highlight.border || undefined;
	    }

	    if (exports.isString(color.hover)) {
	      c.hover = {
	        border: color.hover,
	        background: color.hover
	      };
	    } else {
	      c.hover = {};
	      c.hover.background = color.hover && color.hover.background || undefined;
	      c.hover.border = color.hover && color.hover.border || undefined;
	    }
	  }

	  return c;
	};

	/**
	 * http://www.javascripter.net/faq/rgb2hsv.htm
	 *
	 * @param {number} red
	 * @param {number} green
	 * @param {number} blue
	 * @returns {{h: number, s: number, v: number}}
	 * @constructor
	 */
	exports.RGBToHSV = function (red, green, blue) {
	  red = red / 255;green = green / 255;blue = blue / 255;
	  var minRGB = Math.min(red, Math.min(green, blue));
	  var maxRGB = Math.max(red, Math.max(green, blue));

	  // Black-gray-white
	  if (minRGB == maxRGB) {
	    return { h: 0, s: 0, v: minRGB };
	  }

	  // Colors other than black-gray-white:
	  var d = red == minRGB ? green - blue : blue == minRGB ? red - green : blue - red;
	  var h = red == minRGB ? 3 : blue == minRGB ? 1 : 5;
	  var hue = 60 * (h - d / (maxRGB - minRGB)) / 360;
	  var saturation = (maxRGB - minRGB) / maxRGB;
	  var value = maxRGB;
	  return { h: hue, s: saturation, v: value };
	};

	var cssUtil = {
	  // split a string with css styles into an object with key/values
	  split: function split(cssText) {
	    var styles = {};

	    cssText.split(';').forEach(function (style) {
	      if (style.trim() != '') {
	        var parts = style.split(':');
	        var key = parts[0].trim();
	        var value = parts[1].trim();
	        styles[key] = value;
	      }
	    });

	    return styles;
	  },

	  // build a css text string from an object with key/values
	  join: function join(styles) {
	    return (0, _keys2['default'])(styles).map(function (key) {
	      return key + ': ' + styles[key];
	    }).join('; ');
	  }
	};

	/**
	 * Append a string with css styles to an element
	 * @param {Element} element
	 * @param {string} cssText
	 */
	exports.addCssText = function (element, cssText) {
	  var currentStyles = cssUtil.split(element.style.cssText);
	  var newStyles = cssUtil.split(cssText);
	  var styles = exports.extend(currentStyles, newStyles);

	  element.style.cssText = cssUtil.join(styles);
	};

	/**
	 * Remove a string with css styles from an element
	 * @param {Element} element
	 * @param {string} cssText
	 */
	exports.removeCssText = function (element, cssText) {
	  var styles = cssUtil.split(element.style.cssText);
	  var removeStyles = cssUtil.split(cssText);

	  for (var key in removeStyles) {
	    if (removeStyles.hasOwnProperty(key)) {
	      delete styles[key];
	    }
	  }

	  element.style.cssText = cssUtil.join(styles);
	};

	/**
	 * https://gist.github.com/mjijackson/5311256
	 * @param {number} h
	 * @param {number} s
	 * @param {number} v
	 * @returns {{r: number, g: number, b: number}}
	 * @constructor
	 */
	exports.HSVToRGB = function (h, s, v) {
	  var r, g, b;

	  var i = Math.floor(h * 6);
	  var f = h * 6 - i;
	  var p = v * (1 - s);
	  var q = v * (1 - f * s);
	  var t = v * (1 - (1 - f) * s);

	  switch (i % 6) {
	    case 0:
	      r = v, g = t, b = p;break;
	    case 1:
	      r = q, g = v, b = p;break;
	    case 2:
	      r = p, g = v, b = t;break;
	    case 3:
	      r = p, g = q, b = v;break;
	    case 4:
	      r = t, g = p, b = v;break;
	    case 5:
	      r = v, g = p, b = q;break;
	  }

	  return { r: Math.floor(r * 255), g: Math.floor(g * 255), b: Math.floor(b * 255) };
	};

	exports.HSVToHex = function (h, s, v) {
	  var rgb = exports.HSVToRGB(h, s, v);
	  return exports.RGBToHex(rgb.r, rgb.g, rgb.b);
	};

	exports.hexToHSV = function (hex) {
	  var rgb = exports.hexToRGB(hex);
	  return exports.RGBToHSV(rgb.r, rgb.g, rgb.b);
	};

	exports.isValidHex = function (hex) {
	  var isOk = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);
	  return isOk;
	};

	exports.isValidRGB = function (rgb) {
	  rgb = rgb.replace(" ", "");
	  var isOk = /rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/i.test(rgb);
	  return isOk;
	};
	exports.isValidRGBA = function (rgba) {
	  rgba = rgba.replace(" ", "");
	  var isOk = /rgba\((\d{1,3}),(\d{1,3}),(\d{1,3}),(.{1,3})\)/i.test(rgba);
	  return isOk;
	};

	/**
	 * This recursively redirects the prototype of JSON objects to the referenceObject
	 * This is used for default options.
	 *
	 * @param {Array.<string>} fields
	 * @param {Object} referenceObject
	 * @returns {*}
	 */
	exports.selectiveBridgeObject = function (fields, referenceObject) {
	  if (referenceObject !== null && (typeof referenceObject === 'undefined' ? 'undefined' : (0, _typeof3['default'])(referenceObject)) === "object") {
	    // !!! typeof null === 'object'
	    var objectTo = (0, _create2['default'])(referenceObject);
	    for (var i = 0; i < fields.length; i++) {
	      if (referenceObject.hasOwnProperty(fields[i])) {
	        if ((0, _typeof3['default'])(referenceObject[fields[i]]) == "object") {
	          objectTo[fields[i]] = exports.bridgeObject(referenceObject[fields[i]]);
	        }
	      }
	    }
	    return objectTo;
	  } else {
	    return null;
	  }
	};

	/**
	 * This recursively redirects the prototype of JSON objects to the referenceObject
	 * This is used for default options.
	 *
	 * @param {Object} referenceObject
	 * @returns {*}
	 */
	exports.bridgeObject = function (referenceObject) {
	  if (referenceObject !== null && (typeof referenceObject === 'undefined' ? 'undefined' : (0, _typeof3['default'])(referenceObject)) === "object") {
	    // !!! typeof null === 'object'
	    var objectTo = (0, _create2['default'])(referenceObject);
	    if (referenceObject instanceof Element) {
	      // Avoid bridging DOM objects
	      objectTo = referenceObject;
	    } else {
	      objectTo = (0, _create2['default'])(referenceObject);
	      for (var i in referenceObject) {
	        if (referenceObject.hasOwnProperty(i)) {
	          if ((0, _typeof3['default'])(referenceObject[i]) == "object") {
	            objectTo[i] = exports.bridgeObject(referenceObject[i]);
	          }
	        }
	      }
	    }
	    return objectTo;
	  } else {
	    return null;
	  }
	};

	/**
	 * This method provides a stable sort implementation, very fast for presorted data
	 *
	 * @param {Array} a the array
	 * @param {function} compare an order comparator
	 * @returns {Array}
	 */
	exports.insertSort = function (a, compare) {
	  for (var i = 0; i < a.length; i++) {
	    var k = a[i];
	    for (var j = i; j > 0 && compare(k, a[j - 1]) < 0; j--) {
	      a[j] = a[j - 1];
	    }
	    a[j] = k;
	  }
	  return a;
	};

	/**
	 * This is used to set the options of subobjects in the options object.
	 *
	 * A requirement of these subobjects is that they have an 'enabled' element
	 * which is optional for the user but mandatory for the program.
	 *
	 * The added value here of the merge is that option 'enabled' is set as required.
	 *
	 *
	 * @param {object} mergeTarget   | either this.options or the options used for the groups.
	 * @param {object} options       | options
	 * @param {string} option        | option key in the options argument
	 * @param {object} globalOptions | global options, passed in to determine value of option 'enabled'
	 */
	exports.mergeOptions = function (mergeTarget, options, option) {
	  var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

	  // Local helpers
	  var isPresent = function isPresent(obj) {
	    return obj !== null && obj !== undefined;
	  };

	  var isObject = function isObject(obj) {
	    return obj !== null && (typeof obj === 'undefined' ? 'undefined' : (0, _typeof3['default'])(obj)) === 'object';
	  };

	  // https://stackoverflow.com/a/34491287/1223531
	  var isEmpty = function isEmpty(obj) {
	    for (var x in obj) {
	      if (obj.hasOwnProperty(x)) return false;
	    }
	    return true;
	  };

	  // Guards
	  if (!isObject(mergeTarget)) {
	    throw new Error('Parameter mergeTarget must be an object');
	  }

	  if (!isObject(options)) {
	    throw new Error('Parameter options must be an object');
	  }

	  if (!isPresent(option)) {
	    throw new Error('Parameter option must have a value');
	  }

	  if (!isObject(globalOptions)) {
	    throw new Error('Parameter globalOptions must be an object');
	  }

	  //
	  // Actual merge routine, separated from main logic
	  // Only a single level of options is merged. Deeper levels are ref'd. This may actually be an issue.
	  //
	  var doMerge = function doMerge(target, options, option) {
	    if (!isObject(target[option])) {
	      target[option] = {};
	    }

	    var src = options[option];
	    var dst = target[option];
	    for (var prop in src) {
	      if (src.hasOwnProperty(prop)) {
	        dst[prop] = src[prop];
	      }
	    }
	  };

	  // Local initialization
	  var srcOption = options[option];
	  var globalPassed = isObject(globalOptions) && !isEmpty(globalOptions);
	  var globalOption = globalPassed ? globalOptions[option] : undefined;
	  var globalEnabled = globalOption ? globalOption.enabled : undefined;

	  /////////////////////////////////////////
	  // Main routine
	  /////////////////////////////////////////
	  if (srcOption === undefined) {
	    return; // Nothing to do
	  }

	  if (typeof srcOption === 'boolean') {
	    if (!isObject(mergeTarget[option])) {
	      mergeTarget[option] = {};
	    }

	    mergeTarget[option].enabled = srcOption;
	    return;
	  }

	  if (srcOption === null && !isObject(mergeTarget[option])) {
	    // If possible, explicit copy from globals
	    if (isPresent(globalOption)) {
	      mergeTarget[option] = (0, _create2['default'])(globalOption);
	    } else {
	      return; // Nothing to do
	    }
	  }

	  if (!isObject(srcOption)) {
	    return;
	  }

	  //
	  // Ensure that 'enabled' is properly set. It is required internally
	  // Note that the value from options will always overwrite the existing value
	  //
	  var enabled = true; // default value

	  if (srcOption.enabled !== undefined) {
	    enabled = srcOption.enabled;
	  } else {
	    // Take from globals, if present
	    if (globalEnabled !== undefined) {
	      enabled = globalOption.enabled;
	    }
	  }

	  doMerge(mergeTarget, options, option);
	  mergeTarget[option].enabled = enabled;
	};

	/**
	 * This function does a binary search for a visible item in a sorted list. If we find a visible item, the code that uses
	 * this function will then iterate in both directions over this sorted list to find all visible items.
	 *
	 * @param {Item[]} orderedItems       | Items ordered by start
	 * @param {function} comparator       | -1 is lower, 0 is equal, 1 is higher
	 * @param {string} field
	 * @param {string} field2
	 * @returns {number}
	 * @private
	 */
	exports.binarySearchCustom = function (orderedItems, comparator, field, field2) {
	  var maxIterations = 10000;
	  var iteration = 0;
	  var low = 0;
	  var high = orderedItems.length - 1;

	  while (low <= high && iteration < maxIterations) {
	    var middle = Math.floor((low + high) / 2);

	    var item = orderedItems[middle];
	    var value = field2 === undefined ? item[field] : item[field][field2];

	    var searchResult = comparator(value);
	    if (searchResult == 0) {
	      // jihaa, found a visible item!
	      return middle;
	    } else if (searchResult == -1) {
	      // it is too small --> increase low
	      low = middle + 1;
	    } else {
	      // it is too big --> decrease high
	      high = middle - 1;
	    }

	    iteration++;
	  }

	  return -1;
	};

	/**
	 * This function does a binary search for a specific value in a sorted array. If it does not exist but is in between of
	 * two values, we return either the one before or the one after, depending on user input
	 * If it is found, we return the index, else -1.
	 *
	 * @param {Array} orderedItems
	 * @param {{start: number, end: number}} target
	 * @param {string} field
	 * @param {string} sidePreference   'before' or 'after'
	 * @param {function} comparator an optional comparator, returning -1,0,1 for <,==,>.
	 * @returns {number}
	 * @private
	 */
	exports.binarySearchValue = function (orderedItems, target, field, sidePreference, comparator) {
	  var maxIterations = 10000;
	  var iteration = 0;
	  var low = 0;
	  var high = orderedItems.length - 1;
	  var prevValue, value, nextValue, middle;

	  comparator = comparator != undefined ? comparator : function (a, b) {
	    return a == b ? 0 : a < b ? -1 : 1;
	  };

	  while (low <= high && iteration < maxIterations) {
	    // get a new guess
	    middle = Math.floor(0.5 * (high + low));
	    prevValue = orderedItems[Math.max(0, middle - 1)][field];
	    value = orderedItems[middle][field];
	    nextValue = orderedItems[Math.min(orderedItems.length - 1, middle + 1)][field];

	    if (comparator(value, target) == 0) {
	      // we found the target
	      return middle;
	    } else if (comparator(prevValue, target) < 0 && comparator(value, target) > 0) {
	      // target is in between of the previous and the current
	      return sidePreference == 'before' ? Math.max(0, middle - 1) : middle;
	    } else if (comparator(value, target) < 0 && comparator(nextValue, target) > 0) {
	      // target is in between of the current and the next
	      return sidePreference == 'before' ? middle : Math.min(orderedItems.length - 1, middle + 1);
	    } else {
	      // didnt find the target, we need to change our boundaries.
	      if (comparator(value, target) < 0) {
	        // it is too small --> increase low
	        low = middle + 1;
	      } else {
	        // it is too big --> decrease high
	        high = middle - 1;
	      }
	    }
	    iteration++;
	  }

	  // didnt find anything. Return -1.
	  return -1;
	};

	/*
	 * Easing Functions - inspired from http://gizma.com/easing/
	 * only considering the t value for the range [0, 1] => [0, 1]
	 * https://gist.github.com/gre/1650294
	 */
	exports.easingFunctions = {
	  // no easing, no acceleration
	  linear: function linear(t) {
	    return t;
	  },
	  // accelerating from zero velocity
	  easeInQuad: function easeInQuad(t) {
	    return t * t;
	  },
	  // decelerating to zero velocity
	  easeOutQuad: function easeOutQuad(t) {
	    return t * (2 - t);
	  },
	  // acceleration until halfway, then deceleration
	  easeInOutQuad: function easeInOutQuad(t) {
	    return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
	  },
	  // accelerating from zero velocity
	  easeInCubic: function easeInCubic(t) {
	    return t * t * t;
	  },
	  // decelerating to zero velocity
	  easeOutCubic: function easeOutCubic(t) {
	    return --t * t * t + 1;
	  },
	  // acceleration until halfway, then deceleration
	  easeInOutCubic: function easeInOutCubic(t) {
	    return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
	  },
	  // accelerating from zero velocity
	  easeInQuart: function easeInQuart(t) {
	    return t * t * t * t;
	  },
	  // decelerating to zero velocity
	  easeOutQuart: function easeOutQuart(t) {
	    return 1 - --t * t * t * t;
	  },
	  // acceleration until halfway, then deceleration
	  easeInOutQuart: function easeInOutQuart(t) {
	    return t < .5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
	  },
	  // accelerating from zero velocity
	  easeInQuint: function easeInQuint(t) {
	    return t * t * t * t * t;
	  },
	  // decelerating to zero velocity
	  easeOutQuint: function easeOutQuint(t) {
	    return 1 + --t * t * t * t * t;
	  },
	  // acceleration until halfway, then deceleration
	  easeInOutQuint: function easeInOutQuint(t) {
	    return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
	  }
	};

	exports.getScrollBarWidth = function () {
	  var inner = document.createElement('p');
	  inner.style.width = "100%";
	  inner.style.height = "200px";

	  var outer = document.createElement('div');
	  outer.style.position = "absolute";
	  outer.style.top = "0px";
	  outer.style.left = "0px";
	  outer.style.visibility = "hidden";
	  outer.style.width = "200px";
	  outer.style.height = "150px";
	  outer.style.overflow = "hidden";
	  outer.appendChild(inner);

	  document.body.appendChild(outer);
	  var w1 = inner.offsetWidth;
	  outer.style.overflow = 'scroll';
	  var w2 = inner.offsetWidth;
	  if (w1 == w2) w2 = outer.clientWidth;

	  document.body.removeChild(outer);

	  return w1 - w2;
	};

	exports.topMost = function (pile, accessors) {
	  var candidate = void 0;
	  if (!Array.isArray(accessors)) {
	    accessors = [accessors];
	  }
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    for (var _iterator = (0, _getIterator3['default'])(pile), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var member = _step.value;

	      if (member) {
	        candidate = member[accessors[0]];
	        for (var i = 1; i < accessors.length; i++) {
	          if (candidate) {
	            candidate = candidate[accessors[i]];
	          } else {
	            continue;
	          }
	        }
	        if (typeof candidate != 'undefined') {
	          break;
	        }
	      }
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator['return']) {
	        _iterator['return']();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }

	  return candidate;
	};

	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(194), __esModule: true };

	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	exports.__esModule = true;

	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	exports.__esModule = true;

	var _setPrototypeOf = __webpack_require__(196);

	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

	var _create = __webpack_require__(29);

	var _create2 = _interopRequireDefault(_create);

	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }

	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	exports.__esModule = true;

	var _iterator = __webpack_require__(142);

	var _iterator2 = _interopRequireDefault(_iterator);

	var _symbol = __webpack_require__(144);

	var _symbol2 = _interopRequireDefault(_symbol);

	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

	/***/ }),
	/* 7 */
	/***/ (function(module, exports) {

	var core = module.exports = { version: '2.5.1' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(140), __esModule: true };

	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	// first check if moment.js is already loaded in the browser window, if so,
	// use this instance. Else, load via commonjs.
	module.exports = typeof window !== 'undefined' && window['moment'] || __webpack_require__(154);

	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/**
	 * Setup a mock hammer.js object, for unit testing.
	 *
	 * Inspiration: https://github.com/uber/deck.gl/pull/658
	 *
	 * @returns {{on: noop, off: noop, destroy: noop, emit: noop, get: get}}
	 */
	function hammerMock() {
	  var noop = function noop() {};

	  return {
	    on: noop,
	    off: noop,
	    destroy: noop,
	    emit: noop,

	    get: function get(m) {
	      //eslint-disable-line no-unused-vars
	      return {
	        set: noop
	      };
	    }
	  };
	}

	if (typeof window !== 'undefined') {
	  var propagating = __webpack_require__(175);
	  var Hammer = window['Hammer'] || __webpack_require__(176);
	  module.exports = propagating(Hammer, {
	    preventDefault: 'mouse'
	  });
	} else {
	  module.exports = function () {
	    // hammer.js is only available in a browser, not in node.js. Replacing it with a mock object.
	    return hammerMock();
	  };
	}

	/***/ }),
	/* 11 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _stringify = __webpack_require__(19);

	var _stringify2 = _interopRequireDefault(_stringify);

	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	var _keys = __webpack_require__(8);

	var _keys2 = _interopRequireDefault(_keys);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);
	var Queue = __webpack_require__(43);

	/**
	 * DataSet
	 * // TODO: add a DataSet constructor DataSet(data, options)
	 *
	 * Usage:
	 *     var dataSet = new DataSet({
	 *         fieldId: '_id',
	 *         type: {
	 *             // ...
	 *         }
	 *     });
	 *
	 *     dataSet.add(item);
	 *     dataSet.add(data);
	 *     dataSet.update(item);
	 *     dataSet.update(data);
	 *     dataSet.remove(id);
	 *     dataSet.remove(ids);
	 *     var data = dataSet.get();
	 *     var data = dataSet.get(id);
	 *     var data = dataSet.get(ids);
	 *     var data = dataSet.get(ids, options, data);
	 *     dataSet.clear();
	 *
	 * A data set can:
	 * - add/remove/update data
	 * - gives triggers upon changes in the data
	 * - can  import/export data in various data formats
	 *
	 * @param {Array} [data]    Optional array with initial data
	 * @param {Object} [options]   Available options:
	 *                             {string} fieldId Field name of the id in the
	 *                                              items, 'id' by default.
	 *                             {Object.<string, string} type
	 *                                              A map with field names as key,
	 *                                              and the field type as value.
	 *                             {Object} queue   Queue changes to the DataSet,
	 *                                              flush them all at once.
	 *                                              Queue options:
	 *                                              - {number} delay  Delay in ms, null by default
	 *                                              - {number} max    Maximum number of entries in the queue, Infinity by default
	 * @constructor DataSet
	 */
	function DataSet(data, options) {
	  // correctly read optional arguments
	  if (data && !Array.isArray(data)) {
	    options = data;
	    data = null;
	  }

	  this._options = options || {};
	  this._data = {}; // map with data indexed by id
	  this.length = 0; // number of items in the DataSet
	  this._fieldId = this._options.fieldId || 'id'; // name of the field containing id
	  this._type = {}; // internal field types (NOTE: this can differ from this._options.type)

	  // all variants of a Date are internally stored as Date, so we can convert
	  // from everything to everything (also from ISODate to Number for example)
	  if (this._options.type) {
	    var fields = (0, _keys2['default'])(this._options.type);
	    for (var i = 0, len = fields.length; i < len; i++) {
	      var field = fields[i];
	      var value = this._options.type[field];
	      if (value == 'Date' || value == 'ISODate' || value == 'ASPDate') {
	        this._type[field] = 'Date';
	      } else {
	        this._type[field] = value;
	      }
	    }
	  }

	  this._subscribers = {}; // event subscribers

	  // add initial data when provided
	  if (data) {
	    this.add(data);
	  }

	  this.setOptions(options);
	}

	/**
	 * @param {Object} options   Available options:
	 *                             {Object} queue   Queue changes to the DataSet,
	 *                                              flush them all at once.
	 *                                              Queue options:
	 *                                              - {number} delay  Delay in ms, null by default
	 *                                              - {number} max    Maximum number of entries in the queue, Infinity by default
	 */
	DataSet.prototype.setOptions = function (options) {
	  if (options && options.queue !== undefined) {
	    if (options.queue === false) {
	      // delete queue if loaded
	      if (this._queue) {
	        this._queue.destroy();
	        delete this._queue;
	      }
	    } else {
	      // create queue and update its options
	      if (!this._queue) {
	        this._queue = Queue.extend(this, {
	          replace: ['add', 'update', 'remove']
	        });
	      }

	      if ((0, _typeof3['default'])(options.queue) === 'object') {
	        this._queue.setOptions(options.queue);
	      }
	    }
	  }
	};

	/**
	 * Subscribe to an event, add an event listener
	 * @param {string} event        Event name. Available events: 'add', 'update',
	 *                              'remove'
	 * @param {function} callback   Callback method. Called with three parameters:
	 *                                  {string} event
	 *                                  {Object | null} params
	 *                                  {string | number} senderId
	 */
	DataSet.prototype.on = function (event, callback) {
	  var subscribers = this._subscribers[event];
	  if (!subscribers) {
	    subscribers = [];
	    this._subscribers[event] = subscribers;
	  }

	  subscribers.push({
	    callback: callback
	  });
	};

	/**
	 * Unsubscribe from an event, remove an event listener
	 * @param {string} event
	 * @param {function} callback
	 */
	DataSet.prototype.off = function (event, callback) {
	  var subscribers = this._subscribers[event];
	  if (subscribers) {
	    this._subscribers[event] = subscribers.filter(function (listener) {
	      return listener.callback != callback;
	    });
	  }
	};

	/**
	 * Trigger an event
	 * @param {string} event
	 * @param {Object | null} params
	 * @param {string} [senderId]       Optional id of the sender.
	 * @private
	 */
	DataSet.prototype._trigger = function (event, params, senderId) {
	  if (event == '*') {
	    throw new Error('Cannot trigger event *');
	  }

	  var subscribers = [];
	  if (event in this._subscribers) {
	    subscribers = subscribers.concat(this._subscribers[event]);
	  }
	  if ('*' in this._subscribers) {
	    subscribers = subscribers.concat(this._subscribers['*']);
	  }

	  for (var i = 0, len = subscribers.length; i < len; i++) {
	    var subscriber = subscribers[i];
	    if (subscriber.callback) {
	      subscriber.callback(event, params, senderId || null);
	    }
	  }
	};

	/**
	 * Add data.
	 * Adding an item will fail when there already is an item with the same id.
	 * @param {Object | Array} data
	 * @param {string} [senderId] Optional sender id
	 * @return {Array.<string|number>} addedIds      Array with the ids of the added items
	 */
	DataSet.prototype.add = function (data, senderId) {
	  var addedIds = [],
	      id,
	      me = this;

	  if (Array.isArray(data)) {
	    // Array
	    for (var i = 0, len = data.length; i < len; i++) {
	      id = me._addItem(data[i]);
	      addedIds.push(id);
	    }
	  } else if (data && (typeof data === 'undefined' ? 'undefined' : (0, _typeof3['default'])(data)) === 'object') {
	    // Single item
	    id = me._addItem(data);
	    addedIds.push(id);
	  } else {
	    throw new Error('Unknown dataType');
	  }

	  if (addedIds.length) {
	    this._trigger('add', { items: addedIds }, senderId);
	  }

	  return addedIds;
	};

	/**
	 * Update existing items. When an item does not exist, it will be created
	 * @param {Object | Array} data
	 * @param {string} [senderId] Optional sender id
	 * @return {Array.<string|number>} updatedIds     The ids of the added or updated items
	 * @throws {Error} Unknown Datatype
	 */
	DataSet.prototype.update = function (data, senderId) {
	  var addedIds = [];
	  var updatedIds = [];
	  var oldData = [];
	  var updatedData = [];
	  var me = this;
	  var fieldId = me._fieldId;

	  var addOrUpdate = function addOrUpdate(item) {
	    var id = item[fieldId];
	    if (me._data[id]) {
	      var oldItem = util.extend({}, me._data[id]);
	      // update item
	      id = me._updateItem(item);
	      updatedIds.push(id);
	      updatedData.push(item);
	      oldData.push(oldItem);
	    } else {
	      // add new item
	      id = me._addItem(item);
	      addedIds.push(id);
	    }
	  };

	  if (Array.isArray(data)) {
	    // Array
	    for (var i = 0, len = data.length; i < len; i++) {
	      if (data[i] && (0, _typeof3['default'])(data[i]) === 'object') {
	        addOrUpdate(data[i]);
	      } else {
	        console.warn('Ignoring input item, which is not an object at index ' + i);
	      }
	    }
	  } else if (data && (typeof data === 'undefined' ? 'undefined' : (0, _typeof3['default'])(data)) === 'object') {
	    // Single item
	    addOrUpdate(data);
	  } else {
	    throw new Error('Unknown dataType');
	  }

	  if (addedIds.length) {
	    this._trigger('add', { items: addedIds }, senderId);
	  }
	  if (updatedIds.length) {
	    var props = { items: updatedIds, oldData: oldData, data: updatedData };
	    // TODO: remove deprecated property 'data' some day
	    //Object.defineProperty(props, 'data', {
	    //  'get': (function() {
	    //    console.warn('Property data is deprecated. Use DataSet.get(ids) to retrieve the new data, use the oldData property on this object to get the old data');
	    //    return updatedData;
	    //  }).bind(this)
	    //});
	    this._trigger('update', props, senderId);
	  }

	  return addedIds.concat(updatedIds);
	};

	/**
	 * Get a data item or multiple items.
	 *
	 * Usage:
	 *
	 *     get()
	 *     get(options: Object)
	 *
	 *     get(id: number | string)
	 *     get(id: number | string, options: Object)
	 *
	 *     get(ids: number[] | string[])
	 *     get(ids: number[] | string[], options: Object)
	 *
	 * Where:
	 *
	 * {number | string} id         The id of an item
	 * {number[] | string{}} ids    An array with ids of items
	 * {Object} options             An Object with options. Available options:
	 * {string} [returnType]        Type of data to be returned.
	 *                              Can be 'Array' (default) or 'Object'.
	 * {Object.<string, string>} [type]
	 * {string[]} [fields]          field names to be returned
	 * {function} [filter]          filter items
	 * {string | function} [order]  Order the items by a field name or custom sort function.
	 * @param {Array} args
	 * @returns {DataSet}
	 * @throws Error
	 */
	DataSet.prototype.get = function (args) {
	  // eslint-disable-line no-unused-vars
	  var me = this;

	  // parse the arguments
	  var id, ids, options;
	  var firstType = util.getType(arguments[0]);
	  if (firstType == 'String' || firstType == 'Number') {
	    // get(id [, options])
	    id = arguments[0];
	    options = arguments[1];
	  } else if (firstType == 'Array') {
	    // get(ids [, options])
	    ids = arguments[0];
	    options = arguments[1];
	  } else {
	    // get([, options])
	    options = arguments[0];
	  }

	  // determine the return type
	  var returnType;
	  if (options && options.returnType) {
	    var allowedValues = ['Array', 'Object'];
	    returnType = allowedValues.indexOf(options.returnType) == -1 ? 'Array' : options.returnType;
	  } else {
	    returnType = 'Array';
	  }

	  // build options
	  var type = options && options.type || this._options.type;
	  var filter = options && options.filter;
	  var items = [],
	      item,
	      itemIds,
	      itemId,
	      i,
	      len;

	  // convert items
	  if (id != undefined) {
	    // return a single item
	    item = me._getItem(id, type);
	    if (item && filter && !filter(item)) {
	      item = null;
	    }
	  } else if (ids != undefined) {
	    // return a subset of items
	    for (i = 0, len = ids.length; i < len; i++) {
	      item = me._getItem(ids[i], type);
	      if (!filter || filter(item)) {
	        items.push(item);
	      }
	    }
	  } else {
	    // return all items
	    itemIds = (0, _keys2['default'])(this._data);
	    for (i = 0, len = itemIds.length; i < len; i++) {
	      itemId = itemIds[i];
	      item = me._getItem(itemId, type);
	      if (!filter || filter(item)) {
	        items.push(item);
	      }
	    }
	  }

	  // order the results
	  if (options && options.order && id == undefined) {
	    this._sort(items, options.order);
	  }

	  // filter fields of the items
	  if (options && options.fields) {
	    var fields = options.fields;
	    if (id != undefined) {
	      item = this._filterFields(item, fields);
	    } else {
	      for (i = 0, len = items.length; i < len; i++) {
	        items[i] = this._filterFields(items[i], fields);
	      }
	    }
	  }

	  // return the results
	  if (returnType == 'Object') {
	    var result = {},
	        resultant;
	    for (i = 0, len = items.length; i < len; i++) {
	      resultant = items[i];
	      result[resultant.id] = resultant;
	    }
	    return result;
	  } else {
	    if (id != undefined) {
	      // a single item
	      return item;
	    } else {
	      // just return our array
	      return items;
	    }
	  }
	};

	/**
	 * Get ids of all items or from a filtered set of items.
	 * @param {Object} [options]    An Object with options. Available options:
	 *                              {function} [filter] filter items
	 *                              {string | function} [order] Order the items by
	 *                                  a field name or custom sort function.
	 * @return {Array.<string|number>} ids
	 */
	DataSet.prototype.getIds = function (options) {
	  var data = this._data,
	      filter = options && options.filter,
	      order = options && options.order,
	      type = options && options.type || this._options.type,
	      itemIds = (0, _keys2['default'])(data),
	      i,
	      len,
	      id,
	      item,
	      items,
	      ids = [];

	  if (filter) {
	    // get filtered items
	    if (order) {
	      // create ordered list
	      items = [];
	      for (i = 0, len = itemIds.length; i < len; i++) {
	        id = itemIds[i];
	        item = this._getItem(id, type);
	        if (filter(item)) {
	          items.push(item);
	        }
	      }

	      this._sort(items, order);

	      for (i = 0, len = items.length; i < len; i++) {
	        ids.push(items[i][this._fieldId]);
	      }
	    } else {
	      // create unordered list
	      for (i = 0, len = itemIds.length; i < len; i++) {
	        id = itemIds[i];
	        item = this._getItem(id, type);
	        if (filter(item)) {
	          ids.push(item[this._fieldId]);
	        }
	      }
	    }
	  } else {
	    // get all items
	    if (order) {
	      // create an ordered list
	      items = [];
	      for (i = 0, len = itemIds.length; i < len; i++) {
	        id = itemIds[i];
	        items.push(data[id]);
	      }

	      this._sort(items, order);

	      for (i = 0, len = items.length; i < len; i++) {
	        ids.push(items[i][this._fieldId]);
	      }
	    } else {
	      // create unordered list
	      for (i = 0, len = itemIds.length; i < len; i++) {
	        id = itemIds[i];
	        item = data[id];
	        ids.push(item[this._fieldId]);
	      }
	    }
	  }

	  return ids;
	};

	/**
	 * Returns the DataSet itself. Is overwritten for example by the DataView,
	 * which returns the DataSet it is connected to instead.
	 * @returns {DataSet}
	 */
	DataSet.prototype.getDataSet = function () {
	  return this;
	};

	/**
	 * Execute a callback function for every item in the dataset.
	 * @param {function} callback
	 * @param {Object} [options]    Available options:
	 *                              {Object.<string, string>} [type]
	 *                              {string[]} [fields] filter fields
	 *                              {function} [filter] filter items
	 *                              {string | function} [order] Order the items by
	 *                                  a field name or custom sort function.
	 */
	DataSet.prototype.forEach = function (callback, options) {
	  var filter = options && options.filter,
	      type = options && options.type || this._options.type,
	      data = this._data,
	      itemIds = (0, _keys2['default'])(data),
	      i,
	      len,
	      item,
	      id;

	  if (options && options.order) {
	    // execute forEach on ordered list
	    var items = this.get(options);

	    for (i = 0, len = items.length; i < len; i++) {
	      item = items[i];
	      id = item[this._fieldId];
	      callback(item, id);
	    }
	  } else {
	    // unordered
	    for (i = 0, len = itemIds.length; i < len; i++) {
	      id = itemIds[i];
	      item = this._getItem(id, type);
	      if (!filter || filter(item)) {
	        callback(item, id);
	      }
	    }
	  }
	};

	/**
	 * Map every item in the dataset.
	 * @param {function} callback
	 * @param {Object} [options]    Available options:
	 *                              {Object.<string, string>} [type]
	 *                              {string[]} [fields] filter fields
	 *                              {function} [filter] filter items
	 *                              {string | function} [order] Order the items by
	 *                                  a field name or custom sort function.
	 * @return {Object[]} mappedItems
	 */
	DataSet.prototype.map = function (callback, options) {
	  var filter = options && options.filter,
	      type = options && options.type || this._options.type,
	      mappedItems = [],
	      data = this._data,
	      itemIds = (0, _keys2['default'])(data),
	      i,
	      len,
	      id,
	      item;

	  // convert and filter items
	  for (i = 0, len = itemIds.length; i < len; i++) {
	    id = itemIds[i];
	    item = this._getItem(id, type);
	    if (!filter || filter(item)) {
	      mappedItems.push(callback(item, id));
	    }
	  }

	  // order items
	  if (options && options.order) {
	    this._sort(mappedItems, options.order);
	  }

	  return mappedItems;
	};

	/**
	 * Filter the fields of an item
	 * @param {Object | null} item
	 * @param {string[]} fields     Field names
	 * @return {Object | null} filteredItem or null if no item is provided
	 * @private
	 */
	DataSet.prototype._filterFields = function (item, fields) {
	  if (!item) {
	    // item is null
	    return item;
	  }

	  var filteredItem = {},
	      itemFields = (0, _keys2['default'])(item),
	      len = itemFields.length,
	      i,
	      field;

	  if (Array.isArray(fields)) {
	    for (i = 0; i < len; i++) {
	      field = itemFields[i];
	      if (fields.indexOf(field) != -1) {
	        filteredItem[field] = item[field];
	      }
	    }
	  } else {
	    for (i = 0; i < len; i++) {
	      field = itemFields[i];
	      if (fields.hasOwnProperty(field)) {
	        filteredItem[fields[field]] = item[field];
	      }
	    }
	  }

	  return filteredItem;
	};

	/**
	 * Sort the provided array with items
	 * @param {Object[]} items
	 * @param {string | function} order      A field name or custom sort function.
	 * @private
	 */
	DataSet.prototype._sort = function (items, order) {
	  if (util.isString(order)) {
	    // order by provided field name
	    var name = order; // field name
	    items.sort(function (a, b) {
	      var av = a[name];
	      var bv = b[name];
	      return av > bv ? 1 : av < bv ? -1 : 0;
	    });
	  } else if (typeof order === 'function') {
	    // order by sort function
	    items.sort(order);
	  }
	  // TODO: extend order by an Object {field:string, direction:string}
	  //       where direction can be 'asc' or 'desc'
	  else {
	      throw new TypeError('Order must be a function or a string');
	    }
	};

	/**
	 * Remove an object by pointer or by id
	 * @param {string | number | Object | Array.<string|number>} id Object or id, or an array with
	 *                                              objects or ids to be removed
	 * @param {string} [senderId] Optional sender id
	 * @return {Array.<string|number>} removedIds
	 */
	DataSet.prototype.remove = function (id, senderId) {
	  var removedIds = [],
	      removedItems = [],
	      ids = [],
	      i,
	      len,
	      itemId,
	      item;

	  // force everything to be an array for simplicity
	  ids = Array.isArray(id) ? id : [id];

	  for (i = 0, len = ids.length; i < len; i++) {
	    item = this._remove(ids[i]);
	    if (item) {
	      itemId = item[this._fieldId];
	      if (itemId != undefined) {
	        removedIds.push(itemId);
	        removedItems.push(item);
	      }
	    }
	  }

	  if (removedIds.length) {
	    this._trigger('remove', { items: removedIds, oldData: removedItems }, senderId);
	  }

	  return removedIds;
	};

	/**
	 * Remove an item by its id
	 * @param {number | string | Object} id   id or item
	 * @returns {number | string | null} id
	 * @private
	 */
	DataSet.prototype._remove = function (id) {
	  var item, ident;

	  // confirm the id to use based on the args type
	  if (util.isNumber(id) || util.isString(id)) {
	    ident = id;
	  } else if (id && (typeof id === 'undefined' ? 'undefined' : (0, _typeof3['default'])(id)) === 'object') {
	    ident = id[this._fieldId]; // look for the identifier field using _fieldId
	  }

	  // do the remove if the item is found
	  if (ident !== undefined && this._data[ident]) {
	    item = this._data[ident];
	    delete this._data[ident];
	    this.length--;
	    return item;
	  }
	  return null;
	};

	/**
	 * Clear the data
	 * @param {string} [senderId] Optional sender id
	 * @return {Array.<string|number>} removedIds    The ids of all removed items
	 */
	DataSet.prototype.clear = function (senderId) {
	  var i, len;
	  var ids = (0, _keys2['default'])(this._data);
	  var items = [];

	  for (i = 0, len = ids.length; i < len; i++) {
	    items.push(this._data[ids[i]]);
	  }

	  this._data = {};
	  this.length = 0;

	  this._trigger('remove', { items: ids, oldData: items }, senderId);

	  return ids;
	};

	/**
	 * Find the item with maximum value of a specified field
	 * @param {string} field
	 * @return {Object | null} item  Item containing max value, or null if no items
	 */
	DataSet.prototype.max = function (field) {
	  var data = this._data,
	      itemIds = (0, _keys2['default'])(data),
	      max = null,
	      maxField = null,
	      i,
	      len;

	  for (i = 0, len = itemIds.length; i < len; i++) {
	    var id = itemIds[i];
	    var item = data[id];
	    var itemField = item[field];
	    if (itemField != null && (!max || itemField > maxField)) {
	      max = item;
	      maxField = itemField;
	    }
	  }

	  return max;
	};

	/**
	 * Find the item with minimum value of a specified field
	 * @param {string} field
	 * @return {Object | null} item  Item containing max value, or null if no items
	 */
	DataSet.prototype.min = function (field) {
	  var data = this._data,
	      itemIds = (0, _keys2['default'])(data),
	      min = null,
	      minField = null,
	      i,
	      len;

	  for (i = 0, len = itemIds.length; i < len; i++) {
	    var id = itemIds[i];
	    var item = data[id];
	    var itemField = item[field];
	    if (itemField != null && (!min || itemField < minField)) {
	      min = item;
	      minField = itemField;
	    }
	  }

	  return min;
	};

	/**
	 * Find all distinct values of a specified field
	 * @param {string} field
	 * @return {Array} values  Array containing all distinct values. If data items
	 *                         do not contain the specified field are ignored.
	 *                         The returned array is unordered.
	 */
	DataSet.prototype.distinct = function (field) {
	  var data = this._data;
	  var itemIds = (0, _keys2['default'])(data);
	  var values = [];
	  var fieldType = this._options.type && this._options.type[field] || null;
	  var count = 0;
	  var i, j, len;

	  for (i = 0, len = itemIds.length; i < len; i++) {
	    var id = itemIds[i];
	    var item = data[id];
	    var value = item[field];
	    var exists = false;
	    for (j = 0; j < count; j++) {
	      if (values[j] == value) {
	        exists = true;
	        break;
	      }
	    }
	    if (!exists && value !== undefined) {
	      values[count] = value;
	      count++;
	    }
	  }

	  if (fieldType) {
	    for (i = 0, len = values.length; i < len; i++) {
	      values[i] = util.convert(values[i], fieldType);
	    }
	  }

	  return values;
	};

	/**
	 * Add a single item. Will fail when an item with the same id already exists.
	 * @param {Object} item
	 * @return {string} id
	 * @private
	 */
	DataSet.prototype._addItem = function (item) {
	  var id = item[this._fieldId];

	  if (id != undefined) {
	    // check whether this id is already taken
	    if (this._data[id]) {
	      // item already exists
	      throw new Error('Cannot add item: item with id ' + id + ' already exists');
	    }
	  } else {
	    // generate an id
	    id = util.randomUUID();
	    item[this._fieldId] = id;
	  }

	  var d = {},
	      fields = (0, _keys2['default'])(item),
	      i,
	      len;
	  for (i = 0, len = fields.length; i < len; i++) {
	    var field = fields[i];
	    var fieldType = this._type[field]; // type may be undefined
	    d[field] = util.convert(item[field], fieldType);
	  }
	  this._data[id] = d;
	  this.length++;

	  return id;
	};

	/**
	 * Get an item. Fields can be converted to a specific type
	 * @param {string} id
	 * @param {Object.<string, string>} [types]  field types to convert
	 * @return {Object | null} item
	 * @private
	 */
	DataSet.prototype._getItem = function (id, types) {
	  var field, value, i, len;

	  // get the item from the dataset
	  var raw = this._data[id];
	  if (!raw) {
	    return null;
	  }

	  // convert the items field types
	  var converted = {},
	      fields = (0, _keys2['default'])(raw);

	  if (types) {
	    for (i = 0, len = fields.length; i < len; i++) {
	      field = fields[i];
	      value = raw[field];
	      converted[field] = util.convert(value, types[field]);
	    }
	  } else {
	    // no field types specified, no converting needed
	    for (i = 0, len = fields.length; i < len; i++) {
	      field = fields[i];
	      value = raw[field];
	      converted[field] = value;
	    }
	  }

	  if (!converted[this._fieldId]) {
	    converted[this._fieldId] = raw.id;
	  }

	  return converted;
	};

	/**
	 * Update a single item: merge with existing item.
	 * Will fail when the item has no id, or when there does not exist an item
	 * with the same id.
	 * @param {Object} item
	 * @return {string} id
	 * @private
	 */
	DataSet.prototype._updateItem = function (item) {
	  var id = item[this._fieldId];
	  if (id == undefined) {
	    throw new Error('Cannot update item: item has no id (item: ' + (0, _stringify2['default'])(item) + ')');
	  }
	  var d = this._data[id];
	  if (!d) {
	    // item doesn't exist
	    throw new Error('Cannot update item: no item with id ' + id + ' found');
	  }

	  // merge with current item
	  var fields = (0, _keys2['default'])(item);
	  for (var i = 0, len = fields.length; i < len; i++) {
	    var field = fields[i];
	    var fieldType = this._type[field]; // type may be undefined
	    d[field] = util.convert(item[field], fieldType);
	  }

	  return id;
	};

	module.exports = DataSet;

	/***/ }),
	/* 12 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _keys = __webpack_require__(8);

	var _keys2 = _interopRequireDefault(_keys);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);
	var DataSet = __webpack_require__(11);

	/**
	 * DataView
	 *
	 * a dataview offers a filtered view on a dataset or an other dataview.
	 *
	 * @param {DataSet | DataView} data
	 * @param {Object} [options]   Available options: see method get
	 *
	 * @constructor DataView
	 */
	function DataView(data, options) {
	  this._data = null;
	  this._ids = {}; // ids of the items currently in memory (just contains a boolean true)
	  this.length = 0; // number of items in the DataView
	  this._options = options || {};
	  this._fieldId = 'id'; // name of the field containing id
	  this._subscribers = {}; // event subscribers

	  var me = this;
	  this.listener = function () {
	    me._onEvent.apply(me, arguments);
	  };

	  this.setData(data);
	}

	// TODO: implement a function .config() to dynamically update things like configured filter
	// and trigger changes accordingly

	/**
	 * Set a data source for the view
	 * @param {DataSet | DataView} data
	 */
	DataView.prototype.setData = function (data) {
	  var ids, id, i, len, items;

	  if (this._data) {
	    // unsubscribe from current dataset
	    if (this._data.off) {
	      this._data.off('*', this.listener);
	    }

	    // trigger a remove of all items in memory
	    ids = this._data.getIds({ filter: this._options && this._options.filter });
	    items = [];

	    for (i = 0, len = ids.length; i < len; i++) {
	      items.push(this._data._data[ids[i]]);
	    }

	    this._ids = {};
	    this.length = 0;
	    this._trigger('remove', { items: ids, oldData: items });
	  }

	  this._data = data;

	  if (this._data) {
	    // update fieldId
	    this._fieldId = this._options.fieldId || this._data && this._data.options && this._data.options.fieldId || 'id';

	    // trigger an add of all added items
	    ids = this._data.getIds({ filter: this._options && this._options.filter });
	    for (i = 0, len = ids.length; i < len; i++) {
	      id = ids[i];
	      this._ids[id] = true;
	    }
	    this.length = ids.length;
	    this._trigger('add', { items: ids });

	    // subscribe to new dataset
	    if (this._data.on) {
	      this._data.on('*', this.listener);
	    }
	  }
	};

	/**
	 * Refresh the DataView. Useful when the DataView has a filter function
	 * containing a variable parameter.
	 */
	DataView.prototype.refresh = function () {
	  var id, i, len;
	  var ids = this._data.getIds({ filter: this._options && this._options.filter }),
	      oldIds = (0, _keys2['default'])(this._ids),
	      newIds = {},
	      addedIds = [],
	      removedIds = [],
	      removedItems = [];

	  // check for additions
	  for (i = 0, len = ids.length; i < len; i++) {
	    id = ids[i];
	    newIds[id] = true;
	    if (!this._ids[id]) {
	      addedIds.push(id);
	      this._ids[id] = true;
	    }
	  }

	  // check for removals
	  for (i = 0, len = oldIds.length; i < len; i++) {
	    id = oldIds[i];
	    if (!newIds[id]) {
	      removedIds.push(id);
	      removedItems.push(this._data._data[id]);
	      delete this._ids[id];
	    }
	  }

	  this.length += addedIds.length - removedIds.length;

	  // trigger events
	  if (addedIds.length) {
	    this._trigger('add', { items: addedIds });
	  }
	  if (removedIds.length) {
	    this._trigger('remove', { items: removedIds, oldData: removedItems });
	  }
	};

	/**
	 * Get data from the data view
	 *
	 * Usage:
	 *
	 *     get()
	 *     get(options: Object)
	 *     get(options: Object, data: Array | DataTable)
	 *
	 *     get(id: Number)
	 *     get(id: Number, options: Object)
	 *     get(id: Number, options: Object, data: Array | DataTable)
	 *
	 *     get(ids: Number[])
	 *     get(ids: Number[], options: Object)
	 *     get(ids: Number[], options: Object, data: Array | DataTable)
	 *
	 * Where:
	 *
	 * {number | string} id         The id of an item
	 * {number[] | string{}} ids    An array with ids of items
	 * {Object} options             An Object with options. Available options:
	 *                              {string} [type] Type of data to be returned. Can
	 *                                              be 'DataTable' or 'Array' (default)
	 *                              {Object.<string, string>} [convert]
	 *                              {string[]} [fields] field names to be returned
	 *                              {function} [filter] filter items
	 *                              {string | function} [order] Order the items by
	 *                                  a field name or custom sort function.
	 * {Array | DataTable} [data]   If provided, items will be appended to this
	 *                              array or table. Required in case of Google
	 *                              DataTable.
	 * @param {Array} args
	 * @return {DataSet|DataView}
	 */
	DataView.prototype.get = function (args) {
	  // eslint-disable-line no-unused-vars
	  var me = this;

	  // parse the arguments
	  var ids, options, data;
	  var firstType = util.getType(arguments[0]);
	  if (firstType == 'String' || firstType == 'Number' || firstType == 'Array') {
	    // get(id(s) [, options] [, data])
	    ids = arguments[0]; // can be a single id or an array with ids
	    options = arguments[1];
	    data = arguments[2];
	  } else {
	    // get([, options] [, data])
	    options = arguments[0];
	    data = arguments[1];
	  }

	  // extend the options with the default options and provided options
	  var viewOptions = util.extend({}, this._options, options);

	  // create a combined filter method when needed
	  if (this._options.filter && options && options.filter) {
	    viewOptions.filter = function (item) {
	      return me._options.filter(item) && options.filter(item);
	    };
	  }

	  // build up the call to the linked data set
	  var getArguments = [];
	  if (ids != undefined) {
	    getArguments.push(ids);
	  }
	  getArguments.push(viewOptions);
	  getArguments.push(data);

	  return this._data && this._data.get.apply(this._data, getArguments);
	};

	/**
	 * Get ids of all items or from a filtered set of items.
	 * @param {Object} [options]    An Object with options. Available options:
	 *                              {function} [filter] filter items
	 *                              {string | function} [order] Order the items by
	 *                                  a field name or custom sort function.
	 * @return {Array.<string|number>} ids
	 */
	DataView.prototype.getIds = function (options) {
	  var ids;

	  if (this._data) {
	    var defaultFilter = this._options.filter;
	    var filter;

	    if (options && options.filter) {
	      if (defaultFilter) {
	        filter = function filter(item) {
	          return defaultFilter(item) && options.filter(item);
	        };
	      } else {
	        filter = options.filter;
	      }
	    } else {
	      filter = defaultFilter;
	    }

	    ids = this._data.getIds({
	      filter: filter,
	      order: options && options.order
	    });
	  } else {
	    ids = [];
	  }

	  return ids;
	};

	/**
	 * Map every item in the dataset.
	 * @param {function} callback
	 * @param {Object} [options]    Available options:
	 *                              {Object.<string, string>} [type]
	 *                              {string[]} [fields] filter fields
	 *                              {function} [filter] filter items
	 *                              {string | function} [order] Order the items by
	 *                                  a field name or custom sort function.
	 * @return {Object[]} mappedItems
	 */
	DataView.prototype.map = function (callback, options) {
	  var mappedItems = [];
	  if (this._data) {
	    var defaultFilter = this._options.filter;
	    var filter;

	    if (options && options.filter) {
	      if (defaultFilter) {
	        filter = function filter(item) {
	          return defaultFilter(item) && options.filter(item);
	        };
	      } else {
	        filter = options.filter;
	      }
	    } else {
	      filter = defaultFilter;
	    }

	    mappedItems = this._data.map(callback, {
	      filter: filter,
	      order: options && options.order
	    });
	  } else {
	    mappedItems = [];
	  }

	  return mappedItems;
	};

	/**
	 * Get the DataSet to which this DataView is connected. In case there is a chain
	 * of multiple DataViews, the root DataSet of this chain is returned.
	 * @return {DataSet} dataSet
	 */
	DataView.prototype.getDataSet = function () {
	  var dataSet = this;
	  while (dataSet instanceof DataView) {
	    dataSet = dataSet._data;
	  }
	  return dataSet || null;
	};

	/**
	 * Event listener. Will propagate all events from the connected data set to
	 * the subscribers of the DataView, but will filter the items and only trigger
	 * when there are changes in the filtered data set.
	 * @param {string} event
	 * @param {Object | null} params
	 * @param {string} senderId
	 * @private
	 */
	DataView.prototype._onEvent = function (event, params, senderId) {
	  var i, len, id, item;
	  var ids = params && params.items;
	  var addedIds = [],
	      updatedIds = [],
	      removedIds = [],
	      oldItems = [],
	      updatedItems = [],
	      removedItems = [];

	  if (ids && this._data) {
	    switch (event) {
	      case 'add':
	        // filter the ids of the added items
	        for (i = 0, len = ids.length; i < len; i++) {
	          id = ids[i];
	          item = this.get(id);
	          if (item) {
	            this._ids[id] = true;
	            addedIds.push(id);
	          }
	        }

	        break;

	      case 'update':
	        // determine the event from the views viewpoint: an updated
	        // item can be added, updated, or removed from this view.
	        for (i = 0, len = ids.length; i < len; i++) {
	          id = ids[i];
	          item = this.get(id);

	          if (item) {
	            if (this._ids[id]) {
	              updatedIds.push(id);
	              updatedItems.push(params.data[i]);
	              oldItems.push(params.oldData[i]);
	            } else {
	              this._ids[id] = true;
	              addedIds.push(id);
	            }
	          } else {
	            if (this._ids[id]) {
	              delete this._ids[id];
	              removedIds.push(id);
	              removedItems.push(params.oldData[i]);
	            } else {
	              // nothing interesting for me :-(
	            }
	          }
	        }

	        break;

	      case 'remove':
	        // filter the ids of the removed items
	        for (i = 0, len = ids.length; i < len; i++) {
	          id = ids[i];
	          if (this._ids[id]) {
	            delete this._ids[id];
	            removedIds.push(id);
	            removedItems.push(params.oldData[i]);
	          }
	        }

	        break;
	    }

	    this.length += addedIds.length - removedIds.length;

	    if (addedIds.length) {
	      this._trigger('add', { items: addedIds }, senderId);
	    }
	    if (updatedIds.length) {
	      this._trigger('update', { items: updatedIds, oldData: oldItems, data: updatedItems }, senderId);
	    }
	    if (removedIds.length) {
	      this._trigger('remove', { items: removedIds, oldData: removedItems }, senderId);
	    }
	  }
	};

	// copy subscription functionality from DataSet
	DataView.prototype.on = DataSet.prototype.on;
	DataView.prototype.off = DataSet.prototype.off;
	DataView.prototype._trigger = DataSet.prototype._trigger;

	// TODO: make these functions deprecated (replaced with `on` and `off` since version 0.5)
	DataView.prototype.subscribe = DataView.prototype.on;
	DataView.prototype.unsubscribe = DataView.prototype.off;

	module.exports = DataView;

	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __webpack_require__) {

	var store = __webpack_require__(57)('wks');
	var uid = __webpack_require__(40);
	var Symbol = __webpack_require__(18).Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';

	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};

	$exports.store = store;


	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	// DOM utility methods

	/**
	 * this prepares the JSON container for allocating SVG elements
	 * @param {Object} JSONcontainer
	 * @private
	 */
	exports.prepareElements = function (JSONcontainer) {
	  // cleanup the redundant svgElements;
	  for (var elementType in JSONcontainer) {
	    if (JSONcontainer.hasOwnProperty(elementType)) {
	      JSONcontainer[elementType].redundant = JSONcontainer[elementType].used;
	      JSONcontainer[elementType].used = [];
	    }
	  }
	};

	/**
	 * this cleans up all the unused SVG elements. By asking for the parentNode, we only need to supply the JSON container from
	 * which to remove the redundant elements.
	 *
	 * @param {Object} JSONcontainer
	 * @private
	 */
	exports.cleanupElements = function (JSONcontainer) {
	  // cleanup the redundant svgElements;
	  for (var elementType in JSONcontainer) {
	    if (JSONcontainer.hasOwnProperty(elementType)) {
	      if (JSONcontainer[elementType].redundant) {
	        for (var i = 0; i < JSONcontainer[elementType].redundant.length; i++) {
	          JSONcontainer[elementType].redundant[i].parentNode.removeChild(JSONcontainer[elementType].redundant[i]);
	        }
	        JSONcontainer[elementType].redundant = [];
	      }
	    }
	  }
	};

	/**
	 * Ensures that all elements are removed first up so they can be recreated cleanly
	 * @param {Object} JSONcontainer
	 */
	exports.resetElements = function (JSONcontainer) {
	  exports.prepareElements(JSONcontainer);
	  exports.cleanupElements(JSONcontainer);
	  exports.prepareElements(JSONcontainer);
	};

	/**
	 * Allocate or generate an SVG element if needed. Store a reference to it in the JSON container and draw it in the svgContainer
	 * the JSON container and the SVG container have to be supplied so other svg containers (like the legend) can use this.
	 *
	 * @param {string} elementType
	 * @param {Object} JSONcontainer
	 * @param {Object} svgContainer
	 * @returns {Element}
	 * @private
	 */
	exports.getSVGElement = function (elementType, JSONcontainer, svgContainer) {
	  var element;
	  // allocate SVG element, if it doesnt yet exist, create one.
	  if (JSONcontainer.hasOwnProperty(elementType)) {
	    // this element has been created before
	    // check if there is an redundant element
	    if (JSONcontainer[elementType].redundant.length > 0) {
	      element = JSONcontainer[elementType].redundant[0];
	      JSONcontainer[elementType].redundant.shift();
	    } else {
	      // create a new element and add it to the SVG
	      element = document.createElementNS('http://www.w3.org/2000/svg', elementType);
	      svgContainer.appendChild(element);
	    }
	  } else {
	    // create a new element and add it to the SVG, also create a new object in the svgElements to keep track of it.
	    element = document.createElementNS('http://www.w3.org/2000/svg', elementType);
	    JSONcontainer[elementType] = { used: [], redundant: [] };
	    svgContainer.appendChild(element);
	  }
	  JSONcontainer[elementType].used.push(element);
	  return element;
	};

	/**
	 * Allocate or generate an SVG element if needed. Store a reference to it in the JSON container and draw it in the svgContainer
	 * the JSON container and the SVG container have to be supplied so other svg containers (like the legend) can use this.
	 *
	 * @param {string} elementType
	 * @param {Object} JSONcontainer
	 * @param {Element} DOMContainer
	 * @param {Element} insertBefore
	 * @returns {*}
	 */
	exports.getDOMElement = function (elementType, JSONcontainer, DOMContainer, insertBefore) {
	  var element;
	  // allocate DOM element, if it doesnt yet exist, create one.
	  if (JSONcontainer.hasOwnProperty(elementType)) {
	    // this element has been created before
	    // check if there is an redundant element
	    if (JSONcontainer[elementType].redundant.length > 0) {
	      element = JSONcontainer[elementType].redundant[0];
	      JSONcontainer[elementType].redundant.shift();
	    } else {
	      // create a new element and add it to the SVG
	      element = document.createElement(elementType);
	      if (insertBefore !== undefined) {
	        DOMContainer.insertBefore(element, insertBefore);
	      } else {
	        DOMContainer.appendChild(element);
	      }
	    }
	  } else {
	    // create a new element and add it to the SVG, also create a new object in the svgElements to keep track of it.
	    element = document.createElement(elementType);
	    JSONcontainer[elementType] = { used: [], redundant: [] };
	    if (insertBefore !== undefined) {
	      DOMContainer.insertBefore(element, insertBefore);
	    } else {
	      DOMContainer.appendChild(element);
	    }
	  }
	  JSONcontainer[elementType].used.push(element);
	  return element;
	};

	/**
	 * Draw a point object. This is a separate function because it can also be called by the legend.
	 * The reason the JSONcontainer and the target SVG svgContainer have to be supplied is so the legend can use these functions
	 * as well.
	 *
	 * @param {number} x
	 * @param {number} y
	 * @param {Object} groupTemplate: A template containing the necessary information to draw the datapoint e.g., {style: 'circle', size: 5, className: 'className' }
	 * @param {Object} JSONcontainer
	 * @param {Object} svgContainer
	 * @param {Object} labelObj
	 * @returns {vis.PointItem}
	 */
	exports.drawPoint = function (x, y, groupTemplate, JSONcontainer, svgContainer, labelObj) {
	  var point;
	  if (groupTemplate.style == 'circle') {
	    point = exports.getSVGElement('circle', JSONcontainer, svgContainer);
	    point.setAttributeNS(null, "cx", x);
	    point.setAttributeNS(null, "cy", y);
	    point.setAttributeNS(null, "r", 0.5 * groupTemplate.size);
	  } else {
	    point = exports.getSVGElement('rect', JSONcontainer, svgContainer);
	    point.setAttributeNS(null, "x", x - 0.5 * groupTemplate.size);
	    point.setAttributeNS(null, "y", y - 0.5 * groupTemplate.size);
	    point.setAttributeNS(null, "width", groupTemplate.size);
	    point.setAttributeNS(null, "height", groupTemplate.size);
	  }

	  if (groupTemplate.styles !== undefined) {
	    point.setAttributeNS(null, "style", groupTemplate.styles);
	  }
	  point.setAttributeNS(null, "class", groupTemplate.className + " vis-point");
	  //handle label


	  if (labelObj) {
	    var label = exports.getSVGElement('text', JSONcontainer, svgContainer);
	    if (labelObj.xOffset) {
	      x = x + labelObj.xOffset;
	    }

	    if (labelObj.yOffset) {
	      y = y + labelObj.yOffset;
	    }
	    if (labelObj.content) {
	      label.textContent = labelObj.content;
	    }

	    if (labelObj.className) {
	      label.setAttributeNS(null, "class", labelObj.className + " vis-label");
	    }
	    label.setAttributeNS(null, "x", x);
	    label.setAttributeNS(null, "y", y);
	  }

	  return point;
	};

	/**
	 * draw a bar SVG element centered on the X coordinate
	 *
	 * @param {number} x
	 * @param {number} y
	 * @param {number} width
	 * @param {number} height
	 * @param {string} className
	 * @param {Object} JSONcontainer
	 * @param {Object} svgContainer
	 * @param {string} style
	 */
	exports.drawBar = function (x, y, width, height, className, JSONcontainer, svgContainer, style) {
	  if (height != 0) {
	    if (height < 0) {
	      height *= -1;
	      y -= height;
	    }
	    var rect = exports.getSVGElement('rect', JSONcontainer, svgContainer);
	    rect.setAttributeNS(null, "x", x - 0.5 * width);
	    rect.setAttributeNS(null, "y", y);
	    rect.setAttributeNS(null, "width", width);
	    rect.setAttributeNS(null, "height", height);
	    rect.setAttributeNS(null, "class", className);
	    if (style) {
	      rect.setAttributeNS(null, "style", style);
	    }
	  }
	};

	/***/ }),
	/* 15 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.printStyle = undefined;

	var _stringify = __webpack_require__(19);

	var _stringify2 = _interopRequireDefault(_stringify);

	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	var _keys = __webpack_require__(8);

	var _keys2 = _interopRequireDefault(_keys);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);

	var errorFound = false;
	var allOptions = void 0;
	var printStyle = 'background: #FFeeee; color: #dd0000';
	/**
	 *  Used to validate options.
	 */

	var Validator = function () {
	  /**
	   * @ignore
	   */
	  function Validator() {
	    (0, _classCallCheck3['default'])(this, Validator);
	  }

	  /**
	   * Main function to be called
	   * @param {Object} options
	   * @param {Object} referenceOptions
	   * @param {Object} subObject
	   * @returns {boolean}
	   * @static
	   */


	  (0, _createClass3['default'])(Validator, null, [{
	    key: 'validate',
	    value: function validate(options, referenceOptions, subObject) {
	      errorFound = false;
	      allOptions = referenceOptions;
	      var usedOptions = referenceOptions;
	      if (subObject !== undefined) {
	        usedOptions = referenceOptions[subObject];
	      }
	      Validator.parse(options, usedOptions, []);
	      return errorFound;
	    }

	    /**
	     * Will traverse an object recursively and check every value
	     * @param {Object} options
	     * @param {Object} referenceOptions
	     * @param {array} path    | where to look for the actual option
	     * @static
	     */

	  }, {
	    key: 'parse',
	    value: function parse(options, referenceOptions, path) {
	      for (var option in options) {
	        if (options.hasOwnProperty(option)) {
	          Validator.check(option, options, referenceOptions, path);
	        }
	      }
	    }

	    /**
	     * Check every value. If the value is an object, call the parse function on that object.
	     * @param {string} option
	     * @param {Object} options
	     * @param {Object} referenceOptions
	     * @param {array} path    | where to look for the actual option
	     * @static
	     */

	  }, {
	    key: 'check',
	    value: function check(option, options, referenceOptions, path) {
	      if (referenceOptions[option] === undefined && referenceOptions.__any__ === undefined) {
	        Validator.getSuggestion(option, referenceOptions, path);
	        return;
	      }

	      var referenceOption = option;
	      var is_object = true;

	      if (referenceOptions[option] === undefined && referenceOptions.__any__ !== undefined) {
	        // NOTE: This only triggers if the __any__ is in the top level of the options object.
	        //       THAT'S A REALLY BAD PLACE TO ALLOW IT!!!!
	        // TODO: Examine if needed, remove if possible

	        // __any__ is a wildcard. Any value is accepted and will be further analysed by reference.
	        referenceOption = '__any__';

	        // if the any-subgroup is not a predefined object in the configurator,
	        // we do not look deeper into the object.
	        is_object = Validator.getType(options[option]) === 'object';
	      } else {
	        // Since all options in the reference are objects, we can check whether 
	        // they are supposed to be the object to look for the __type__ field.
	        // if this is an object, we check if the correct type has been supplied to account for shorthand options.
	      }

	      var refOptionObj = referenceOptions[referenceOption];
	      if (is_object && refOptionObj.__type__ !== undefined) {
	        refOptionObj = refOptionObj.__type__;
	      }

	      Validator.checkFields(option, options, referenceOptions, referenceOption, refOptionObj, path);
	    }

	    /**
	     *
	     * @param {string}  option           | the option property
	     * @param {Object}  options          | The supplied options object
	     * @param {Object}  referenceOptions | The reference options containing all options and their allowed formats
	     * @param {string}  referenceOption  | Usually this is the same as option, except when handling an __any__ tag.
	     * @param {string}  refOptionObj     | This is the type object from the reference options
	     * @param {Array}   path             | where in the object is the option
	     * @static
	     */

	  }, {
	    key: 'checkFields',
	    value: function checkFields(option, options, referenceOptions, referenceOption, refOptionObj, path) {
	      var log = function log(message) {
	        console.log('%c' + message + Validator.printLocation(path, option), printStyle);
	      };

	      var optionType = Validator.getType(options[option]);
	      var refOptionType = refOptionObj[optionType];

	      if (refOptionType !== undefined) {
	        // if the type is correct, we check if it is supposed to be one of a few select values
	        if (Validator.getType(refOptionType) === 'array' && refOptionType.indexOf(options[option]) === -1) {
	          log('Invalid option detected in "' + option + '".' + ' Allowed values are:' + Validator.print(refOptionType) + ' not "' + options[option] + '". ');
	          errorFound = true;
	        } else if (optionType === 'object' && referenceOption !== "__any__") {
	          path = util.copyAndExtendArray(path, option);
	          Validator.parse(options[option], referenceOptions[referenceOption], path);
	        }
	      } else if (refOptionObj['any'] === undefined) {
	        // type of the field is incorrect and the field cannot be any
	        log('Invalid type received for "' + option + '". Expected: ' + Validator.print((0, _keys2['default'])(refOptionObj)) + '. Received [' + optionType + '] "' + options[option] + '"');
	        errorFound = true;
	      }
	    }

	    /**
	     *
	     * @param {Object|boolean|number|string|Array.<number>|Date|Node|Moment|undefined|null} object
	     * @returns {string}
	     * @static
	     */

	  }, {
	    key: 'getType',
	    value: function getType(object) {
	      var type = typeof object === 'undefined' ? 'undefined' : (0, _typeof3['default'])(object);

	      if (type === 'object') {
	        if (object === null) {
	          return 'null';
	        }
	        if (object instanceof Boolean) {
	          return 'boolean';
	        }
	        if (object instanceof Number) {
	          return 'number';
	        }
	        if (object instanceof String) {
	          return 'string';
	        }
	        if (Array.isArray(object)) {
	          return 'array';
	        }
	        if (object instanceof Date) {
	          return 'date';
	        }
	        if (object.nodeType !== undefined) {
	          return 'dom';
	        }
	        if (object._isAMomentObject === true) {
	          return 'moment';
	        }
	        return 'object';
	      } else if (type === 'number') {
	        return 'number';
	      } else if (type === 'boolean') {
	        return 'boolean';
	      } else if (type === 'string') {
	        return 'string';
	      } else if (type === undefined) {
	        return 'undefined';
	      }
	      return type;
	    }

	    /**
	     * @param {string} option
	     * @param {Object} options
	     * @param {Array.<string>} path
	     * @static
	     */

	  }, {
	    key: 'getSuggestion',
	    value: function getSuggestion(option, options, path) {
	      var localSearch = Validator.findInOptions(option, options, path, false);
	      var globalSearch = Validator.findInOptions(option, allOptions, [], true);

	      var localSearchThreshold = 8;
	      var globalSearchThreshold = 4;

	      var msg = void 0;
	      if (localSearch.indexMatch !== undefined) {
	        msg = ' in ' + Validator.printLocation(localSearch.path, option, '') + 'Perhaps it was incomplete? Did you mean: "' + localSearch.indexMatch + '"?\n\n';
	      } else if (globalSearch.distance <= globalSearchThreshold && localSearch.distance > globalSearch.distance) {
	        msg = ' in ' + Validator.printLocation(localSearch.path, option, '') + 'Perhaps it was misplaced? Matching option found at: ' + Validator.printLocation(globalSearch.path, globalSearch.closestMatch, '');
	      } else if (localSearch.distance <= localSearchThreshold) {
	        msg = '. Did you mean "' + localSearch.closestMatch + '"?' + Validator.printLocation(localSearch.path, option);
	      } else {
	        msg = '. Did you mean one of these: ' + Validator.print((0, _keys2['default'])(options)) + Validator.printLocation(path, option);
	      }

	      console.log('%cUnknown option detected: "' + option + '"' + msg, printStyle);
	      errorFound = true;
	    }

	    /**
	     * traverse the options in search for a match.
	     * @param {string} option
	     * @param {Object} options
	     * @param {Array} path    | where to look for the actual option
	     * @param {boolean} [recursive=false]
	     * @returns {{closestMatch: string, path: Array, distance: number}}
	     * @static
	     */

	  }, {
	    key: 'findInOptions',
	    value: function findInOptions(option, options, path) {
	      var recursive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

	      var min = 1e9;
	      var closestMatch = '';
	      var closestMatchPath = [];
	      var lowerCaseOption = option.toLowerCase();
	      var indexMatch = undefined;
	      for (var op in options) {
	        // eslint-disable-line guard-for-in
	        var distance = void 0;
	        if (options[op].__type__ !== undefined && recursive === true) {
	          var result = Validator.findInOptions(option, options[op], util.copyAndExtendArray(path, op));
	          if (min > result.distance) {
	            closestMatch = result.closestMatch;
	            closestMatchPath = result.path;
	            min = result.distance;
	            indexMatch = result.indexMatch;
	          }
	        } else {
	          if (op.toLowerCase().indexOf(lowerCaseOption) !== -1) {
	            indexMatch = op;
	          }
	          distance = Validator.levenshteinDistance(option, op);
	          if (min > distance) {
	            closestMatch = op;
	            closestMatchPath = util.copyArray(path);
	            min = distance;
	          }
	        }
	      }
	      return { closestMatch: closestMatch, path: closestMatchPath, distance: min, indexMatch: indexMatch };
	    }

	    /**
	     * @param {Array.<string>} path
	     * @param {Object} option
	     * @param {string} prefix
	     * @returns {String}
	     * @static
	     */

	  }, {
	    key: 'printLocation',
	    value: function printLocation(path, option) {
	      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Problem value found at: \n';

	      var str = '\n\n' + prefix + 'options = {\n';
	      for (var i = 0; i < path.length; i++) {
	        for (var j = 0; j < i + 1; j++) {
	          str += '  ';
	        }
	        str += path[i] + ': {\n';
	      }
	      for (var _j = 0; _j < path.length + 1; _j++) {
	        str += '  ';
	      }
	      str += option + '\n';
	      for (var _i = 0; _i < path.length + 1; _i++) {
	        for (var _j2 = 0; _j2 < path.length - _i; _j2++) {
	          str += '  ';
	        }
	        str += '}\n';
	      }
	      return str + '\n\n';
	    }

	    /**
	     * @param {Object} options
	     * @returns {String}
	     * @static
	     */

	  }, {
	    key: 'print',
	    value: function print(options) {
	      return (0, _stringify2['default'])(options).replace(/(\")|(\[)|(\])|(,"__type__")/g, "").replace(/(\,)/g, ', ');
	    }

	    /**
	     *  Compute the edit distance between the two given strings
	     * http://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance#JavaScript
	     *
	     * Copyright (c) 2011 Andrei Mackenzie
	     *
	     * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
	     *
	     * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
	     *
	     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	     *
	     * @param {string} a
	     * @param {string} b
	     * @returns {Array.<Array.<number>>}}
	     * @static
	     */

	  }, {
	    key: 'levenshteinDistance',
	    value: function levenshteinDistance(a, b) {
	      if (a.length === 0) return b.length;
	      if (b.length === 0) return a.length;

	      var matrix = [];

	      // increment along the first column of each row
	      var i;
	      for (i = 0; i <= b.length; i++) {
	        matrix[i] = [i];
	      }

	      // increment each column in the first row
	      var j;
	      for (j = 0; j <= a.length; j++) {
	        matrix[0][j] = j;
	      }

	      // Fill in the rest of the matrix
	      for (i = 1; i <= b.length; i++) {
	        for (j = 1; j <= a.length; j++) {
	          if (b.charAt(i - 1) == a.charAt(j - 1)) {
	            matrix[i][j] = matrix[i - 1][j - 1];
	          } else {
	            matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution
	            Math.min(matrix[i][j - 1] + 1, // insertion
	            matrix[i - 1][j] + 1)); // deletion
	          }
	        }
	      }

	      return matrix[b.length][a.length];
	    }
	  }]);
	  return Validator;
	}();

	exports['default'] = Validator;
	exports.printStyle = printStyle;

	/***/ }),
	/* 16 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var util = __webpack_require__(2);

	/**
	 * Prototype for visual components
	 * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} [body]
	 * @param {Object} [options]
	 */
	function Component(body, options) {
	  // eslint-disable-line no-unused-vars
	  this.options = null;
	  this.props = null;
	}

	/**
	 * Set options for the component. The new options will be merged into the
	 * current options.
	 * @param {Object} options
	 */
	Component.prototype.setOptions = function (options) {
	  if (options) {
	    util.extend(this.options, options);
	  }
	};

	/**
	 * Repaint the component
	 * @return {boolean} Returns true if the component is resized
	 */
	Component.prototype.redraw = function () {
	  // should be implemented by the component
	  return false;
	};

	/**
	 * Destroy the component. Cleanup DOM and event listeners
	 */
	Component.prototype.destroy = function () {
	  // should be implemented by the component
	};

	/**
	 * Test whether the component is resized since the last time _isResized() was
	 * called.
	 * @return {Boolean} Returns true if the component is resized
	 * @protected
	 */
	Component.prototype._isResized = function () {
	  var resized = this.props._previousWidth !== this.props.width || this.props._previousHeight !== this.props.height;

	  this.props._previousWidth = this.props.width;
	  this.props._previousHeight = this.props.height;

	  return resized;
	};

	module.exports = Component;

	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(18);
	var core = __webpack_require__(7);
	var ctx = __webpack_require__(80);
	var hide = __webpack_require__(26);
	var PROTOTYPE = 'prototype';

	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var IS_WRAP = type & $export.W;
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE];
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && key in exports) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function (C) {
	      var F = function (a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0: return new C();
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	module.exports = $export;


	/***/ }),
	/* 18 */
	/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


	/***/ }),
	/* 19 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(160), __esModule: true };

	/***/ }),
	/* 20 */
	/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(27);
	var IE8_DOM_DEFINE = __webpack_require__(81);
	var toPrimitive = __webpack_require__(53);
	var dP = Object.defineProperty;

	exports.f = __webpack_require__(21) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};


	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(28)(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});


	/***/ }),
	/* 22 */
	/***/ (function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};


	/***/ }),
	/* 23 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * The Base class for all Nodes.
	 */
	var NodeBase = function () {
	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function NodeBase(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, NodeBase);

	    this.body = body;
	    this.labelModule = labelModule;
	    this.setOptions(options);
	    this.top = undefined;
	    this.left = undefined;
	    this.height = undefined;
	    this.width = undefined;
	    this.radius = undefined;
	    this.margin = undefined;
	    this.refreshNeeded = true;
	    this.boundingBox = { top: 0, left: 0, right: 0, bottom: 0 };
	  }

	  /**
	   *
	   * @param {Object} options
	   */


	  (0, _createClass3['default'])(NodeBase, [{
	    key: 'setOptions',
	    value: function setOptions(options) {
	      this.options = options;
	    }

	    /**
	     *
	     * @param {Label} labelModule
	     * @private
	     */

	  }, {
	    key: '_setMargins',
	    value: function _setMargins(labelModule) {
	      this.margin = {};
	      if (this.options.margin) {
	        if ((0, _typeof3['default'])(this.options.margin) == 'object') {
	          this.margin.top = this.options.margin.top;
	          this.margin.right = this.options.margin.right;
	          this.margin.bottom = this.options.margin.bottom;
	          this.margin.left = this.options.margin.left;
	        } else {
	          this.margin.top = this.options.margin;
	          this.margin.right = this.options.margin;
	          this.margin.bottom = this.options.margin;
	          this.margin.left = this.options.margin;
	        }
	      }
	      labelModule.adjustSizes(this.margin);
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} angle
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_distanceToBorder',
	    value: function _distanceToBorder(ctx, angle) {
	      var borderWidth = this.options.borderWidth;
	      this.resize(ctx);
	      return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: 'enableShadow',
	    value: function enableShadow(ctx, values) {
	      if (values.shadow) {
	        ctx.shadowColor = values.shadowColor;
	        ctx.shadowBlur = values.shadowSize;
	        ctx.shadowOffsetX = values.shadowX;
	        ctx.shadowOffsetY = values.shadowY;
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: 'disableShadow',
	    value: function disableShadow(ctx, values) {
	      if (values.shadow) {
	        ctx.shadowColor = 'rgba(0,0,0,0)';
	        ctx.shadowBlur = 0;
	        ctx.shadowOffsetX = 0;
	        ctx.shadowOffsetY = 0;
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: 'enableBorderDashes',
	    value: function enableBorderDashes(ctx, values) {
	      if (values.borderDashes !== false) {
	        if (ctx.setLineDash !== undefined) {
	          var dashes = values.borderDashes;
	          if (dashes === true) {
	            dashes = [5, 15];
	          }
	          ctx.setLineDash(dashes);
	        } else {
	          console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used.");
	          this.options.shapeProperties.borderDashes = false;
	          values.borderDashes = false;
	        }
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: 'disableBorderDashes',
	    value: function disableBorderDashes(ctx, values) {
	      if (values.borderDashes !== false) {
	        if (ctx.setLineDash !== undefined) {
	          ctx.setLineDash([0]);
	        } else {
	          console.warn("setLineDash is not supported in this browser. The dashed borders cannot be used.");
	          this.options.shapeProperties.borderDashes = false;
	          values.borderDashes = false;
	        }
	      }
	    }

	    /**
	     * Determine if the shape of a node needs to be recalculated.
	     *
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @returns {boolean}
	     * @protected
	     */

	  }, {
	    key: 'needsRefresh',
	    value: function needsRefresh(selected, hover) {
	      if (this.refreshNeeded === true) {
	        // This is probably not the best location to reset this member.
	        // However, in the current logic, it is the most convenient one.
	        this.refreshNeeded = false;
	        return true;
	      }

	      return this.width === undefined || this.labelModule.differentState(selected, hover);
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: 'initContextForDraw',
	    value: function initContextForDraw(ctx, values) {
	      var borderWidth = values.borderWidth / this.body.view.scale;

	      ctx.lineWidth = Math.min(this.width, borderWidth);
	      ctx.strokeStyle = values.borderColor;
	      ctx.fillStyle = values.color;
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: 'performStroke',
	    value: function performStroke(ctx, values) {
	      var borderWidth = values.borderWidth / this.body.view.scale;

	      //draw dashed border if enabled, save and restore is required for firefox not to crash on unix.
	      ctx.save();
	      // if borders are zero width, they will be drawn with width 1 by default. This prevents that
	      if (borderWidth > 0) {
	        this.enableBorderDashes(ctx, values);
	        //draw the border
	        ctx.stroke();
	        //disable dashed border for other elements
	        this.disableBorderDashes(ctx, values);
	      }
	      ctx.restore();
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: 'performFill',
	    value: function performFill(ctx, values) {
	      // draw shadow if enabled
	      this.enableShadow(ctx, values);
	      // draw the background
	      ctx.fill();
	      // disable shadows for other elements.
	      this.disableShadow(ctx, values);

	      this.performStroke(ctx, values);
	    }

	    /**
	     *
	     * @param {number} margin
	     * @private
	     */

	  }, {
	    key: '_addBoundingBoxMargin',
	    value: function _addBoundingBoxMargin(margin) {
	      this.boundingBox.left -= margin;
	      this.boundingBox.top -= margin;
	      this.boundingBox.bottom += margin;
	      this.boundingBox.right += margin;
	    }

	    /**
	     * Actual implementation of this method call.
	     *
	     * Doing it like this makes it easier to override
	     * in the child classes.
	     *
	     * @param {number} x width
	     * @param {number} y height
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @private
	     */

	  }, {
	    key: '_updateBoundingBox',
	    value: function _updateBoundingBox(x, y, ctx, selected, hover) {
	      if (ctx !== undefined) {
	        this.resize(ctx, selected, hover);
	      }

	      this.left = x - this.width / 2;
	      this.top = y - this.height / 2;

	      this.boundingBox.left = this.left;
	      this.boundingBox.top = this.top;
	      this.boundingBox.bottom = this.top + this.height;
	      this.boundingBox.right = this.left + this.width;
	    }

	    /**
	     * Default implementation of this method call.
	     * This acts as a stub which can be overridden.
	     *
	     * @param {number} x width
	     * @param {number} y height
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {boolean} selected
	     * @param {boolean} hover
	     */

	  }, {
	    key: 'updateBoundingBox',
	    value: function updateBoundingBox(x, y, ctx, selected, hover) {
	      this._updateBoundingBox(x, y, ctx, selected, hover);
	    }

	    /**
	     * Determine the dimensions to use for nodes with an internal label
	     *
	     * Currently, these are: Circle, Ellipse, Database, Box
	     * The other nodes have external labels, and will not call this method
	     *
	     * If there is no label, decent default values are supplied.
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {boolean} [selected]
	     * @param {boolean} [hover]
	     * @returns {{width:number, height:number}}
	     */

	  }, {
	    key: 'getDimensionsFromLabel',
	    value: function getDimensionsFromLabel(ctx, selected, hover) {
	      // NOTE: previously 'textSize' was not put in 'this' for Ellipse
	      // TODO: examine the consequences.
	      this.textSize = this.labelModule.getTextSize(ctx, selected, hover);
	      var width = this.textSize.width;
	      var height = this.textSize.height;

	      var DEFAULT_SIZE = 14;
	      if (width === 0) {
	        // This happens when there is no label text set
	        width = DEFAULT_SIZE; // use a decent default
	        height = DEFAULT_SIZE; // if width zero, then height also always zero
	      }

	      return { width: width, height: height };
	    }
	  }]);
	  return NodeBase;
	}();

	exports['default'] = NodeBase;

	/***/ }),
	/* 24 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _NodeBase2 = __webpack_require__(23);

	var _NodeBase3 = _interopRequireDefault(_NodeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Base class for constructing Node/Cluster Shapes.
	 *
	 * @extends NodeBase
	 */
	var ShapeBase = function (_NodeBase) {
	  (0, _inherits3['default'])(ShapeBase, _NodeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function ShapeBase(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, ShapeBase);
	    return (0, _possibleConstructorReturn3['default'])(this, (ShapeBase.__proto__ || (0, _getPrototypeOf2['default'])(ShapeBase)).call(this, options, body, labelModule));
	  }

	  /**
	   *
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {boolean} [selected]
	   * @param {boolean} [hover]
	   * @param {Object} [values={size: this.options.size}]
	   */


	  (0, _createClass3['default'])(ShapeBase, [{
	    key: 'resize',
	    value: function resize(ctx) {
	      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
	      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;
	      var values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : { size: this.options.size };

	      if (this.needsRefresh(selected, hover)) {
	        this.labelModule.getTextSize(ctx, selected, hover);
	        var size = 2 * values.size;
	        this.width = size;
	        this.height = size;
	        this.radius = 0.5 * this.width;
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {string} shape
	     * @param {number} sizeMultiplier - Unused! TODO: Remove next major release
	     * @param {number} x
	     * @param {number} y
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     * @private
	     */

	  }, {
	    key: '_drawShape',
	    value: function _drawShape(ctx, shape, sizeMultiplier, x, y, selected, hover, values) {
	      this.resize(ctx, selected, hover, values);
	      this.left = x - this.width / 2;
	      this.top = y - this.height / 2;

	      this.initContextForDraw(ctx, values);
	      ctx[shape](x, y, values.size);
	      this.performFill(ctx, values);

	      if (this.options.label !== undefined) {
	        // Need to call following here in order to ensure value for `this.labelModule.size.height`
	        this.labelModule.calculateLabelSize(ctx, selected, hover, x, y, 'hanging');
	        var yLabel = y + 0.5 * this.height + 0.5 * this.labelModule.size.height;
	        this.labelModule.draw(ctx, x, yLabel, selected, hover, 'hanging');
	      }

	      this.updateBoundingBox(x, y);
	    }

	    /**
	     *
	     * @param {number} x
	     * @param {number} y
	     */

	  }, {
	    key: 'updateBoundingBox',
	    value: function updateBoundingBox(x, y) {
	      this.boundingBox.top = y - this.options.size;
	      this.boundingBox.left = x - this.options.size;
	      this.boundingBox.right = x + this.options.size;
	      this.boundingBox.bottom = y + this.options.size;

	      if (this.options.label !== undefined && this.labelModule.size.width > 0) {
	        this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
	        this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
	        this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height);
	      }
	    }
	  }]);
	  return ShapeBase;
	}(_NodeBase3['default']);

	exports['default'] = ShapeBase;

	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(78);
	var defined = __webpack_require__(51);
	module.exports = function (it) {
	  return IObject(defined(it));
	};


	/***/ }),
	/* 26 */
	/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(20);
	var createDesc = __webpack_require__(39);
	module.exports = __webpack_require__(21) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};


	/***/ }),
	/* 27 */
	/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(32);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};


	/***/ }),
	/* 28 */
	/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};


	/***/ }),
	/* 29 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(138), __esModule: true };

	/***/ }),
	/* 30 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	exports.__esModule = true;

	var _isIterable2 = __webpack_require__(188);

	var _isIterable3 = _interopRequireDefault(_isIterable2);

	var _getIterator2 = __webpack_require__(77);

	var _getIterator3 = _interopRequireDefault(_getIterator2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];
	    var _n = true;
	    var _d = false;
	    var _e = undefined;

	    try {
	      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);

	        if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;
	      _e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }

	    return _arr;
	  }

	  return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if ((0, _isIterable3.default)(Object(arr))) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();

	/***/ }),
	/* 31 */
	/***/ (function(module, exports) {

	module.exports = {};


	/***/ }),
	/* 32 */
	/***/ (function(module, exports) {

	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};


	/***/ }),
	/* 33 */
	/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(84);
	var enumBugKeys = __webpack_require__(58);

	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};


	/***/ }),
	/* 34 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/**
	 * @prototype Point3d
	 * @param {number} [x]
	 * @param {number} [y]
	 * @param {number} [z]
	 */
	function Point3d(x, y, z) {
	  this.x = x !== undefined ? x : 0;
	  this.y = y !== undefined ? y : 0;
	  this.z = z !== undefined ? z : 0;
	}

	/**
	 * Subtract the two provided points, returns a-b
	 * @param {Point3d} a
	 * @param {Point3d} b
	 * @return {Point3d} a-b
	 */
	Point3d.subtract = function (a, b) {
	  var sub = new Point3d();
	  sub.x = a.x - b.x;
	  sub.y = a.y - b.y;
	  sub.z = a.z - b.z;
	  return sub;
	};

	/**
	 * Add the two provided points, returns a+b
	 * @param {Point3d} a
	 * @param {Point3d} b
	 * @return {Point3d} a+b
	 */
	Point3d.add = function (a, b) {
	  var sum = new Point3d();
	  sum.x = a.x + b.x;
	  sum.y = a.y + b.y;
	  sum.z = a.z + b.z;
	  return sum;
	};

	/**
	 * Calculate the average of two 3d points
	 * @param {Point3d} a
	 * @param {Point3d} b
	 * @return {Point3d} The average, (a+b)/2
	 */
	Point3d.avg = function (a, b) {
	  return new Point3d((a.x + b.x) / 2, (a.y + b.y) / 2, (a.z + b.z) / 2);
	};

	/**
	 * Calculate the cross product of the two provided points, returns axb
	 * Documentation: http://en.wikipedia.org/wiki/Cross_product
	 * @param {Point3d} a
	 * @param {Point3d} b
	 * @return {Point3d} cross product axb
	 */
	Point3d.crossProduct = function (a, b) {
	  var crossproduct = new Point3d();

	  crossproduct.x = a.y * b.z - a.z * b.y;
	  crossproduct.y = a.z * b.x - a.x * b.z;
	  crossproduct.z = a.x * b.y - a.y * b.x;

	  return crossproduct;
	};

	/**
	 * Rtrieve the length of the vector (or the distance from this point to the origin
	 * @return {number}  length
	 */
	Point3d.prototype.length = function () {
	  return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	};

	module.exports = Point3d;

	/***/ }),
	/* 35 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/**
	 * Created by Alex on 11/6/2014.
	 */

	// https://github.com/umdjs/umd/blob/master/returnExports.js#L40-L60
	// if the module has no dependencies, the above pattern can be simplified to
	(function (root, factory) {
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
					__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
					(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
					__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    // Node. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like Node.
	    module.exports = factory();
	  } else {
	    // Browser globals (root is window)
	    root.keycharm = factory();
	  }
	}(this, function () {

	  function keycharm(options) {
	    var preventDefault = options && options.preventDefault || false;

	    var container = options && options.container || window;

	    var _exportFunctions = {};
	    var _bound = {keydown:{}, keyup:{}};
	    var _keys = {};
	    var i;

	    // a - z
	    for (i = 97; i <= 122; i++) {_keys[String.fromCharCode(i)] = {code:65 + (i - 97), shift: false};}
	    // A - Z
	    for (i = 65; i <= 90; i++) {_keys[String.fromCharCode(i)] = {code:i, shift: true};}
	    // 0 - 9
	    for (i = 0;  i <= 9;   i++) {_keys['' + i] = {code:48 + i, shift: false};}
	    // F1 - F12
	    for (i = 1;  i <= 12;   i++) {_keys['F' + i] = {code:111 + i, shift: false};}
	    // num0 - num9
	    for (i = 0;  i <= 9;   i++) {_keys['num' + i] = {code:96 + i, shift: false};}

	    // numpad misc
	    _keys['num*'] = {code:106, shift: false};
	    _keys['num+'] = {code:107, shift: false};
	    _keys['num-'] = {code:109, shift: false};
	    _keys['num/'] = {code:111, shift: false};
	    _keys['num.'] = {code:110, shift: false};
	    // arrows
	    _keys['left']  = {code:37, shift: false};
	    _keys['up']    = {code:38, shift: false};
	    _keys['right'] = {code:39, shift: false};
	    _keys['down']  = {code:40, shift: false};
	    // extra keys
	    _keys['space'] = {code:32, shift: false};
	    _keys['enter'] = {code:13, shift: false};
	    _keys['shift'] = {code:16, shift: undefined};
	    _keys['esc']   = {code:27, shift: false};
	    _keys['backspace'] = {code:8, shift: false};
	    _keys['tab']       = {code:9, shift: false};
	    _keys['ctrl']      = {code:17, shift: false};
	    _keys['alt']       = {code:18, shift: false};
	    _keys['delete']    = {code:46, shift: false};
	    _keys['pageup']    = {code:33, shift: false};
	    _keys['pagedown']  = {code:34, shift: false};
	    // symbols
	    _keys['=']     = {code:187, shift: false};
	    _keys['-']     = {code:189, shift: false};
	    _keys[']']     = {code:221, shift: false};
	    _keys['[']     = {code:219, shift: false};



	    var down = function(event) {handleEvent(event,'keydown');};
	    var up = function(event) {handleEvent(event,'keyup');};

	    // handle the actualy bound key with the event
	    var handleEvent = function(event,type) {
	      if (_bound[type][event.keyCode] !== undefined) {
	        var bound = _bound[type][event.keyCode];
	        for (var i = 0; i < bound.length; i++) {
	          if (bound[i].shift === undefined) {
	            bound[i].fn(event);
	          }
	          else if (bound[i].shift == true && event.shiftKey == true) {
	            bound[i].fn(event);
	          }
	          else if (bound[i].shift == false && event.shiftKey == false) {
	            bound[i].fn(event);
	          }
	        }

	        if (preventDefault == true) {
	          event.preventDefault();
	        }
	      }
	    };

	    // bind a key to a callback
	    _exportFunctions.bind = function(key, callback, type) {
	      if (type === undefined) {
	        type = 'keydown';
	      }
	      if (_keys[key] === undefined) {
	        throw new Error("unsupported key: " + key);
	      }
	      if (_bound[type][_keys[key].code] === undefined) {
	        _bound[type][_keys[key].code] = [];
	      }
	      _bound[type][_keys[key].code].push({fn:callback, shift:_keys[key].shift});
	    };


	    // bind all keys to a call back (demo purposes)
	    _exportFunctions.bindAll = function(callback, type) {
	      if (type === undefined) {
	        type = 'keydown';
	      }
	      for (var key in _keys) {
	        if (_keys.hasOwnProperty(key)) {
	          _exportFunctions.bind(key,callback,type);
	        }
	      }
	    };

	    // get the key label from an event
	    _exportFunctions.getKey = function(event) {
	      for (var key in _keys) {
	        if (_keys.hasOwnProperty(key)) {
	          if (event.shiftKey == true && _keys[key].shift == true && event.keyCode == _keys[key].code) {
	            return key;
	          }
	          else if (event.shiftKey == false && _keys[key].shift == false && event.keyCode == _keys[key].code) {
	            return key;
	          }
	          else if (event.keyCode == _keys[key].code && key == 'shift') {
	            return key;
	          }
	        }
	      }
	      return "unknown key, currently not supported";
	    };

	    // unbind either a specific callback from a key or all of them (by leaving callback undefined)
	    _exportFunctions.unbind = function(key, callback, type) {
	      if (type === undefined) {
	        type = 'keydown';
	      }
	      if (_keys[key] === undefined) {
	        throw new Error("unsupported key: " + key);
	      }
	      if (callback !== undefined) {
	        var newBindings = [];
	        var bound = _bound[type][_keys[key].code];
	        if (bound !== undefined) {
	          for (var i = 0; i < bound.length; i++) {
	            if (!(bound[i].fn == callback && bound[i].shift == _keys[key].shift)) {
	              newBindings.push(_bound[type][_keys[key].code][i]);
	            }
	          }
	        }
	        _bound[type][_keys[key].code] = newBindings;
	      }
	      else {
	        _bound[type][_keys[key].code] = [];
	      }
	    };

	    // reset all bound variables.
	    _exportFunctions.reset = function() {
	      _bound = {keydown:{}, keyup:{}};
	    };

	    // unbind all listeners and reset all variables.
	    _exportFunctions.destroy = function() {
	      _bound = {keydown:{}, keyup:{}};
	      container.removeEventListener('keydown', down, true);
	      container.removeEventListener('keyup', up, true);
	    };

	    // create listeners.
	    container.addEventListener('keydown',down,true);
	    container.addEventListener('keyup',up,true);

	    // return the public functions.
	    return _exportFunctions;
	  }

	  return keycharm;
	}));




	/***/ }),
	/* 36 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/**
	 * used in Core to convert the options into a volatile variable
	 * 
	 * @param {function} moment
	 * @param {Object} body
	 * @param {Array | Object} hiddenDates
	 * @returns {number}
	 */
	exports.convertHiddenOptions = function (moment, body, hiddenDates) {
	  if (hiddenDates && !Array.isArray(hiddenDates)) {
	    return exports.convertHiddenOptions(moment, body, [hiddenDates]);
	  }

	  body.hiddenDates = [];
	  if (hiddenDates) {
	    if (Array.isArray(hiddenDates) == true) {
	      for (var i = 0; i < hiddenDates.length; i++) {
	        if (hiddenDates[i].repeat === undefined) {
	          var dateItem = {};
	          dateItem.start = moment(hiddenDates[i].start).toDate().valueOf();
	          dateItem.end = moment(hiddenDates[i].end).toDate().valueOf();
	          body.hiddenDates.push(dateItem);
	        }
	      }
	      body.hiddenDates.sort(function (a, b) {
	        return a.start - b.start;
	      }); // sort by start time
	    }
	  }
	};

	/**
	 * create new entrees for the repeating hidden dates
	 *
	 * @param {function} moment
	 * @param {Object} body
	 * @param {Array | Object} hiddenDates
	 * @returns {null}
	 */
	exports.updateHiddenDates = function (moment, body, hiddenDates) {
	  if (hiddenDates && !Array.isArray(hiddenDates)) {
	    return exports.updateHiddenDates(moment, body, [hiddenDates]);
	  }

	  if (hiddenDates && body.domProps.centerContainer.width !== undefined) {
	    exports.convertHiddenOptions(moment, body, hiddenDates);

	    var start = moment(body.range.start);
	    var end = moment(body.range.end);

	    var totalRange = body.range.end - body.range.start;
	    var pixelTime = totalRange / body.domProps.centerContainer.width;

	    for (var i = 0; i < hiddenDates.length; i++) {
	      if (hiddenDates[i].repeat !== undefined) {
	        var startDate = moment(hiddenDates[i].start);
	        var endDate = moment(hiddenDates[i].end);

	        if (startDate._d == "Invalid Date") {
	          throw new Error("Supplied start date is not valid: " + hiddenDates[i].start);
	        }
	        if (endDate._d == "Invalid Date") {
	          throw new Error("Supplied end date is not valid: " + hiddenDates[i].end);
	        }

	        var duration = endDate - startDate;
	        if (duration >= 4 * pixelTime) {

	          var offset = 0;
	          var runUntil = end.clone();
	          switch (hiddenDates[i].repeat) {
	            case "daily":
	              // case of time
	              if (startDate.day() != endDate.day()) {
	                offset = 1;
	              }
	              startDate.dayOfYear(start.dayOfYear());
	              startDate.year(start.year());
	              startDate.subtract(7, 'days');

	              endDate.dayOfYear(start.dayOfYear());
	              endDate.year(start.year());
	              endDate.subtract(7 - offset, 'days');

	              runUntil.add(1, 'weeks');
	              break;
	            case "weekly":
	              var dayOffset = endDate.diff(startDate, 'days');
	              var day = startDate.day();

	              // set the start date to the range.start
	              startDate.date(start.date());
	              startDate.month(start.month());
	              startDate.year(start.year());
	              endDate = startDate.clone();

	              // force
	              startDate.day(day);
	              endDate.day(day);
	              endDate.add(dayOffset, 'days');

	              startDate.subtract(1, 'weeks');
	              endDate.subtract(1, 'weeks');

	              runUntil.add(1, 'weeks');
	              break;
	            case "monthly":
	              if (startDate.month() != endDate.month()) {
	                offset = 1;
	              }
	              startDate.month(start.month());
	              startDate.year(start.year());
	              startDate.subtract(1, 'months');

	              endDate.month(start.month());
	              endDate.year(start.year());
	              endDate.subtract(1, 'months');
	              endDate.add(offset, 'months');

	              runUntil.add(1, 'months');
	              break;
	            case "yearly":
	              if (startDate.year() != endDate.year()) {
	                offset = 1;
	              }
	              startDate.year(start.year());
	              startDate.subtract(1, 'years');
	              endDate.year(start.year());
	              endDate.subtract(1, 'years');
	              endDate.add(offset, 'years');

	              runUntil.add(1, 'years');
	              break;
	            default:
	              console.log("Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:", hiddenDates[i].repeat);
	              return;
	          }
	          while (startDate < runUntil) {
	            body.hiddenDates.push({ start: startDate.valueOf(), end: endDate.valueOf() });
	            switch (hiddenDates[i].repeat) {
	              case "daily":
	                startDate.add(1, 'days');
	                endDate.add(1, 'days');
	                break;
	              case "weekly":
	                startDate.add(1, 'weeks');
	                endDate.add(1, 'weeks');
	                break;
	              case "monthly":
	                startDate.add(1, 'months');
	                endDate.add(1, 'months');
	                break;
	              case "yearly":
	                startDate.add(1, 'y');
	                endDate.add(1, 'y');
	                break;
	              default:
	                console.log("Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:", hiddenDates[i].repeat);
	                return;
	            }
	          }
	          body.hiddenDates.push({ start: startDate.valueOf(), end: endDate.valueOf() });
	        }
	      }
	    }
	    // remove duplicates, merge where possible
	    exports.removeDuplicates(body);
	    // ensure the new positions are not on hidden dates
	    var startHidden = exports.isHidden(body.range.start, body.hiddenDates);
	    var endHidden = exports.isHidden(body.range.end, body.hiddenDates);
	    var rangeStart = body.range.start;
	    var rangeEnd = body.range.end;
	    if (startHidden.hidden == true) {
	      rangeStart = body.range.startToFront == true ? startHidden.startDate - 1 : startHidden.endDate + 1;
	    }
	    if (endHidden.hidden == true) {
	      rangeEnd = body.range.endToFront == true ? endHidden.startDate - 1 : endHidden.endDate + 1;
	    }
	    if (startHidden.hidden == true || endHidden.hidden == true) {
	      body.range._applyRange(rangeStart, rangeEnd);
	    }
	  }
	};

	/**
	 * remove duplicates from the hidden dates list. Duplicates are evil. They mess everything up.
	 * Scales with N^2
	 *
	 * @param {Object} body
	 */
	exports.removeDuplicates = function (body) {
	  var hiddenDates = body.hiddenDates;
	  var safeDates = [];
	  for (var i = 0; i < hiddenDates.length; i++) {
	    for (var j = 0; j < hiddenDates.length; j++) {
	      if (i != j && hiddenDates[j].remove != true && hiddenDates[i].remove != true) {
	        // j inside i
	        if (hiddenDates[j].start >= hiddenDates[i].start && hiddenDates[j].end <= hiddenDates[i].end) {
	          hiddenDates[j].remove = true;
	        }
	        // j start inside i
	        else if (hiddenDates[j].start >= hiddenDates[i].start && hiddenDates[j].start <= hiddenDates[i].end) {
	            hiddenDates[i].end = hiddenDates[j].end;
	            hiddenDates[j].remove = true;
	          }
	          // j end inside i
	          else if (hiddenDates[j].end >= hiddenDates[i].start && hiddenDates[j].end <= hiddenDates[i].end) {
	              hiddenDates[i].start = hiddenDates[j].start;
	              hiddenDates[j].remove = true;
	            }
	      }
	    }
	  }

	  for (i = 0; i < hiddenDates.length; i++) {
	    if (hiddenDates[i].remove !== true) {
	      safeDates.push(hiddenDates[i]);
	    }
	  }

	  body.hiddenDates = safeDates;
	  body.hiddenDates.sort(function (a, b) {
	    return a.start - b.start;
	  }); // sort by start time
	};

	exports.printDates = function (dates) {
	  for (var i = 0; i < dates.length; i++) {
	    console.log(i, new Date(dates[i].start), new Date(dates[i].end), dates[i].start, dates[i].end, dates[i].remove);
	  }
	};

	/**
	 * Used in TimeStep to avoid the hidden times.
	 * @param {function} moment
	 * @param {TimeStep} timeStep
	 * @param {Date} previousTime
	 */
	exports.stepOverHiddenDates = function (moment, timeStep, previousTime) {
	  var stepInHidden = false;
	  var currentValue = timeStep.current.valueOf();
	  for (var i = 0; i < timeStep.hiddenDates.length; i++) {
	    var startDate = timeStep.hiddenDates[i].start;
	    var endDate = timeStep.hiddenDates[i].end;
	    if (currentValue >= startDate && currentValue < endDate) {
	      stepInHidden = true;
	      break;
	    }
	  }

	  if (stepInHidden == true && currentValue < timeStep._end.valueOf() && currentValue != previousTime) {
	    var prevValue = moment(previousTime);
	    var newValue = moment(endDate);
	    //check if the next step should be major
	    if (prevValue.year() != newValue.year()) {
	      timeStep.switchedYear = true;
	    } else if (prevValue.month() != newValue.month()) {
	      timeStep.switchedMonth = true;
	    } else if (prevValue.dayOfYear() != newValue.dayOfYear()) {
	      timeStep.switchedDay = true;
	    }

	    timeStep.current = newValue;
	  }
	};

	///**
	// * Used in TimeStep to avoid the hidden times.
	// * @param timeStep
	// * @param previousTime
	// */
	//exports.checkFirstStep = function(timeStep) {
	//  var stepInHidden = false;
	//  var currentValue = timeStep.current.valueOf();
	//  for (var i = 0; i < timeStep.hiddenDates.length; i++) {
	//    var startDate = timeStep.hiddenDates[i].start;
	//    var endDate = timeStep.hiddenDates[i].end;
	//    if (currentValue >= startDate && currentValue < endDate) {
	//      stepInHidden = true;
	//      break;
	//    }
	//  }
	//
	//  if (stepInHidden == true && currentValue <= timeStep._end.valueOf()) {
	//    var newValue = moment(endDate);
	//    timeStep.current = newValue.toDate();
	//  }
	//};

	/**
	 * replaces the Core toScreen methods
	 *
	 * @param {vis.Core} Core
	 * @param {Date} time
	 * @param {number} width
	 * @returns {number}
	 */
	exports.toScreen = function (Core, time, width) {
	  var conversion;
	  if (Core.body.hiddenDates.length == 0) {
	    conversion = Core.range.conversion(width);
	    return (time.valueOf() - conversion.offset) * conversion.scale;
	  } else {
	    var hidden = exports.isHidden(time, Core.body.hiddenDates);
	    if (hidden.hidden == true) {
	      time = hidden.startDate;
	    }

	    var duration = exports.getHiddenDurationBetween(Core.body.hiddenDates, Core.range.start, Core.range.end);
	    if (time < Core.range.start) {
	      conversion = Core.range.conversion(width, duration);
	      var hiddenBeforeStart = exports.getHiddenDurationBeforeStart(Core.body.hiddenDates, time, conversion.offset);
	      time = Core.options.moment(time).toDate().valueOf();
	      time = time + hiddenBeforeStart;
	      return -(conversion.offset - time.valueOf()) * conversion.scale;
	    } else if (time > Core.range.end) {
	      var rangeAfterEnd = { start: Core.range.start, end: time };
	      time = exports.correctTimeForHidden(Core.options.moment, Core.body.hiddenDates, rangeAfterEnd, time);
	      conversion = Core.range.conversion(width, duration);
	      return (time.valueOf() - conversion.offset) * conversion.scale;
	    } else {
	      time = exports.correctTimeForHidden(Core.options.moment, Core.body.hiddenDates, Core.range, time);
	      conversion = Core.range.conversion(width, duration);
	      return (time.valueOf() - conversion.offset) * conversion.scale;
	    }
	  }
	};

	/**
	 * Replaces the core toTime methods
	 *
	 * @param {vis.Core} Core
	 * @param {number} x
	 * @param {number} width
	 * @returns {Date}
	 */
	exports.toTime = function (Core, x, width) {
	  if (Core.body.hiddenDates.length == 0) {
	    var conversion = Core.range.conversion(width);
	    return new Date(x / conversion.scale + conversion.offset);
	  } else {
	    var hiddenDuration = exports.getHiddenDurationBetween(Core.body.hiddenDates, Core.range.start, Core.range.end);
	    var totalDuration = Core.range.end - Core.range.start - hiddenDuration;
	    var partialDuration = totalDuration * x / width;
	    var accumulatedHiddenDuration = exports.getAccumulatedHiddenDuration(Core.body.hiddenDates, Core.range, partialDuration);

	    return new Date(accumulatedHiddenDuration + partialDuration + Core.range.start);
	  }
	};

	/**
	 * Support function
	 *
	 * @param {Array.<{start: Window.start, end: *}>} hiddenDates
	 * @param {number} start
	 * @param {number} end
	 * @returns {number}
	 */
	exports.getHiddenDurationBetween = function (hiddenDates, start, end) {
	  var duration = 0;
	  for (var i = 0; i < hiddenDates.length; i++) {
	    var startDate = hiddenDates[i].start;
	    var endDate = hiddenDates[i].end;
	    // if time after the cutout, and the
	    if (startDate >= start && endDate < end) {
	      duration += endDate - startDate;
	    }
	  }
	  return duration;
	};

	/**
	 * Support function
	 *
	 * @param {Array.<{start: Window.start, end: *}>} hiddenDates
	 * @param {number} start
	 * @param {number} end
	 * @returns {number}
	 */
	exports.getHiddenDurationBeforeStart = function (hiddenDates, start, end) {
	  var duration = 0;
	  for (var i = 0; i < hiddenDates.length; i++) {
	    var startDate = hiddenDates[i].start;
	    var endDate = hiddenDates[i].end;

	    if (startDate >= start && endDate <= end) {
	      duration += endDate - startDate;
	    }
	  }
	  return duration;
	};

	/**
	 * Support function
	 * @param {function} moment
	 * @param {Array.<{start: Window.start, end: *}>} hiddenDates
	 * @param {{start: number, end: number}} range
	 * @param {Date} time
	 * @returns {number}
	 */
	exports.correctTimeForHidden = function (moment, hiddenDates, range, time) {
	  time = moment(time).toDate().valueOf();
	  time -= exports.getHiddenDurationBefore(moment, hiddenDates, range, time);
	  return time;
	};

	exports.getHiddenDurationBefore = function (moment, hiddenDates, range, time) {
	  var timeOffset = 0;
	  time = moment(time).toDate().valueOf();

	  for (var i = 0; i < hiddenDates.length; i++) {
	    var startDate = hiddenDates[i].start;
	    var endDate = hiddenDates[i].end;
	    // if time after the cutout, and the
	    if (startDate >= range.start && endDate < range.end) {
	      if (time >= endDate) {
	        timeOffset += endDate - startDate;
	      }
	    }
	  }
	  return timeOffset;
	};

	/**
	 * sum the duration from start to finish, including the hidden duration,
	 * until the required amount has been reached, return the accumulated hidden duration
	 * @param {Array.<{start: Window.start, end: *}>} hiddenDates
	 * @param {{start: number, end: number}} range
	 * @param {number} [requiredDuration=0]
	 * @returns {number}
	 */
	exports.getAccumulatedHiddenDuration = function (hiddenDates, range, requiredDuration) {
	  var hiddenDuration = 0;
	  var duration = 0;
	  var previousPoint = range.start;
	  //exports.printDates(hiddenDates)
	  for (var i = 0; i < hiddenDates.length; i++) {
	    var startDate = hiddenDates[i].start;
	    var endDate = hiddenDates[i].end;
	    // if time after the cutout, and the
	    if (startDate >= range.start && endDate < range.end) {
	      duration += startDate - previousPoint;
	      previousPoint = endDate;
	      if (duration >= requiredDuration) {
	        break;
	      } else {
	        hiddenDuration += endDate - startDate;
	      }
	    }
	  }

	  return hiddenDuration;
	};

	/**
	 * used to step over to either side of a hidden block. Correction is disabled on tablets, might be set to true
	 * @param {Array.<{start: Window.start, end: *}>} hiddenDates
	 * @param {Date} time
	 * @param {number} direction
	 * @param {boolean} correctionEnabled
	 * @returns {Date|number}
	 */
	exports.snapAwayFromHidden = function (hiddenDates, time, direction, correctionEnabled) {
	  var isHidden = exports.isHidden(time, hiddenDates);
	  if (isHidden.hidden == true) {
	    if (direction < 0) {
	      if (correctionEnabled == true) {
	        return isHidden.startDate - (isHidden.endDate - time) - 1;
	      } else {
	        return isHidden.startDate - 1;
	      }
	    } else {
	      if (correctionEnabled == true) {
	        return isHidden.endDate + (time - isHidden.startDate) + 1;
	      } else {
	        return isHidden.endDate + 1;
	      }
	    }
	  } else {
	    return time;
	  }
	};

	/**
	 * Check if a time is hidden
	 *
	 * @param {Date} time
	 * @param {Array.<{start: Window.start, end: *}>} hiddenDates
	 * @returns {{hidden: boolean, startDate: Window.start, endDate: *}}
	 */
	exports.isHidden = function (time, hiddenDates) {
	  for (var i = 0; i < hiddenDates.length; i++) {
	    var startDate = hiddenDates[i].start;
	    var endDate = hiddenDates[i].end;

	    if (time >= startDate && time < endDate) {
	      // if the start is entering a hidden zone
	      return { hidden: true, startDate: startDate, endDate: endDate };
	    }
	  }
	  return { hidden: false, startDate: startDate, endDate: endDate };
	};

	/***/ }),
	/* 37 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/**
	 * Register a touch event, taking place before a gesture
	 * @param {Hammer} hammer       A hammer instance
	 * @param {function} callback   Callback, called as callback(event)
	 */
	exports.onTouch = function (hammer, callback) {
	  callback.inputHandler = function (event) {
	    if (event.isFirst) {
	      callback(event);
	    }
	  };

	  hammer.on('hammer.input', callback.inputHandler);
	};

	/**
	 * Register a release event, taking place after a gesture
	 * @param {Hammer} hammer       A hammer instance
	 * @param {function} callback   Callback, called as callback(event)
	 * @returns {*}
	 */
	exports.onRelease = function (hammer, callback) {
	  callback.inputHandler = function (event) {
	    if (event.isFinal) {
	      callback(event);
	    }
	  };

	  return hammer.on('hammer.input', callback.inputHandler);
	};

	/**
	 * Unregister a touch event, taking place before a gesture
	 * @param {Hammer} hammer       A hammer instance
	 * @param {function} callback   Callback, called as callback(event)
	 */
	exports.offTouch = function (hammer, callback) {
	  hammer.off('hammer.input', callback.inputHandler);
	};

	/**
	 * Unregister a release event, taking place before a gesture
	 * @param {Hammer} hammer       A hammer instance
	 * @param {function} callback   Callback, called as callback(event)
	 */
	exports.offRelease = exports.offTouch;

	/**
	 * Hack the PinchRecognizer such that it doesn't prevent default behavior
	 * for vertical panning.
	 *
	 * Yeah ... this is quite a hack ... see https://github.com/hammerjs/hammer.js/issues/932
	 *
	 * @param {Hammer.Pinch} pinchRecognizer
	 * @return {Hammer.Pinch} returns the pinchRecognizer
	 */
	exports.disablePreventDefaultVertically = function (pinchRecognizer) {
	  var TOUCH_ACTION_PAN_Y = 'pan-y';

	  pinchRecognizer.getTouchAction = function () {
	    // default method returns [TOUCH_ACTION_NONE]
	    return [TOUCH_ACTION_PAN_Y];
	  };

	  return pinchRecognizer;
	};

	/***/ }),
	/* 38 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	var _keys = __webpack_require__(8);

	var _keys2 = _interopRequireDefault(_keys);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var Hammer = __webpack_require__(10);
	var util = __webpack_require__(2);
	var moment = __webpack_require__(9);

	/**
	 * @constructor Item
	 * @param {Object} data             Object containing (optional) parameters type,
	 *                                  start, end, content, group, className.
	 * @param {{toScreen: function, toTime: function}} conversion
	 *                                  Conversion functions from time to screen and vice versa
	 * @param {Object} options          Configuration options
	 *                                  // TODO: describe available options
	 */
	function Item(data, conversion, options) {
	  this.id = null;
	  this.parent = null;
	  this.data = data;
	  this.dom = null;
	  this.conversion = conversion || {};
	  this.options = options || {};
	  this.selected = false;
	  this.displayed = false;
	  this.groupShowing = true;
	  this.dirty = true;

	  this.top = null;
	  this.right = null;
	  this.left = null;
	  this.width = null;
	  this.height = null;

	  this.editable = null;
	  this._updateEditStatus();
	}

	Item.prototype.stack = true;

	/**
	 * Select current item
	 */
	Item.prototype.select = function () {
	  this.selected = true;
	  this.dirty = true;
	  if (this.displayed) this.redraw();
	};

	/**
	 * Unselect current item
	 */
	Item.prototype.unselect = function () {
	  this.selected = false;
	  this.dirty = true;
	  if (this.displayed) this.redraw();
	};

	/**
	 * Set data for the item. Existing data will be updated. The id should not
	 * be changed. When the item is displayed, it will be redrawn immediately.
	 * @param {Object} data
	 */
	Item.prototype.setData = function (data) {
	  var groupChanged = data.group != undefined && this.data.group != data.group;
	  if (groupChanged && this.parent != null) {
	    this.parent.itemSet._moveToGroup(this, data.group);
	  }

	  if (this.parent) {
	    this.parent.stackDirty = true;
	  }

	  var subGroupChanged = data.subgroup != undefined && this.data.subgroup != data.subgroup;
	  if (subGroupChanged && this.parent != null) {
	    this.parent.changeSubgroup(this, this.data.subgroup, data.subgroup);
	  }

	  this.data = data;
	  this._updateEditStatus();
	  this.dirty = true;
	  if (this.displayed) this.redraw();
	};

	/**
	 * Set a parent for the item
	 * @param {Group} parent
	 */
	Item.prototype.setParent = function (parent) {
	  if (this.displayed) {
	    this.hide();
	    this.parent = parent;
	    if (this.parent) {
	      this.show();
	    }
	  } else {
	    this.parent = parent;
	  }
	};

	/**
	 * Check whether this item is visible inside given range
	 * @param {vis.Range} range with a timestamp for start and end
	 * @returns {boolean} True if visible
	 */
	Item.prototype.isVisible = function (range) {
	  // eslint-disable-line no-unused-vars
	  return false;
	};

	/**
	 * Show the Item in the DOM (when not already visible)
	 * @return {Boolean} changed
	 */
	Item.prototype.show = function () {
	  return false;
	};

	/**
	 * Hide the Item from the DOM (when visible)
	 * @return {Boolean} changed
	 */
	Item.prototype.hide = function () {
	  return false;
	};

	/**
	 * Repaint the item
	 */
	Item.prototype.redraw = function () {
	  // should be implemented by the item
	};

	/**
	 * Reposition the Item horizontally
	 */
	Item.prototype.repositionX = function () {
	  // should be implemented by the item
	};

	/**
	 * Reposition the Item vertically
	 */
	Item.prototype.repositionY = function () {
	  // should be implemented by the item
	};

	/**
	 * Repaint a drag area on the center of the item when the item is selected
	 * @protected
	 */
	Item.prototype._repaintDragCenter = function () {
	  if (this.selected && this.options.editable.updateTime && !this.dom.dragCenter) {
	    var me = this;
	    // create and show drag area
	    var dragCenter = document.createElement('div');
	    dragCenter.className = 'vis-drag-center';
	    dragCenter.dragCenterItem = this;
	    var hammer = new Hammer(dragCenter);

	    hammer.on('tap', function (event) {
	      me.parent.itemSet.body.emitter.emit('click', {
	        event: event,
	        item: me.id
	      });
	    });
	    hammer.on('doubletap', function (event) {
	      event.stopPropagation();
	      me.parent.itemSet._onUpdateItem(me);
	      me.parent.itemSet.body.emitter.emit('doubleClick', {
	        event: event,
	        item: me.id
	      });
	    });

	    if (this.dom.box) {
	      if (this.dom.dragLeft) {
	        this.dom.box.insertBefore(dragCenter, this.dom.dragLeft);
	      } else {
	        this.dom.box.appendChild(dragCenter);
	      }
	    } else if (this.dom.point) {
	      this.dom.point.appendChild(dragCenter);
	    }

	    this.dom.dragCenter = dragCenter;
	  } else if (!this.selected && this.dom.dragCenter) {
	    // delete drag area
	    if (this.dom.dragCenter.parentNode) {
	      this.dom.dragCenter.parentNode.removeChild(this.dom.dragCenter);
	    }
	    this.dom.dragCenter = null;
	  }
	};

	/**
	 * Repaint a delete button on the top right of the item when the item is selected
	 * @param {HTMLElement} anchor
	 * @protected
	 */
	Item.prototype._repaintDeleteButton = function (anchor) {
	  var editable = (this.options.editable.overrideItems || this.editable == null) && this.options.editable.remove || !this.options.editable.overrideItems && this.editable != null && this.editable.remove;

	  if (this.selected && editable && !this.dom.deleteButton) {
	    // create and show button
	    var me = this;

	    var deleteButton = document.createElement('div');

	    if (this.options.rtl) {
	      deleteButton.className = 'vis-delete-rtl';
	    } else {
	      deleteButton.className = 'vis-delete';
	    }
	    deleteButton.title = 'Delete this item';

	    // TODO: be able to destroy the delete button
	    new Hammer(deleteButton).on('tap', function (event) {
	      event.stopPropagation();
	      me.parent.removeFromDataSet(me);
	    });

	    anchor.appendChild(deleteButton);
	    this.dom.deleteButton = deleteButton;
	  } else if (!this.selected && this.dom.deleteButton) {
	    // remove button
	    if (this.dom.deleteButton.parentNode) {
	      this.dom.deleteButton.parentNode.removeChild(this.dom.deleteButton);
	    }
	    this.dom.deleteButton = null;
	  }
	};

	/**
	 * Repaint a onChange tooltip on the top right of the item when the item is selected
	 * @param {HTMLElement} anchor
	 * @protected
	 */
	Item.prototype._repaintOnItemUpdateTimeTooltip = function (anchor) {
	  if (!this.options.tooltipOnItemUpdateTime) return;

	  var editable = (this.options.editable.updateTime || this.data.editable === true) && this.data.editable !== false;

	  if (this.selected && editable && !this.dom.onItemUpdateTimeTooltip) {
	    var onItemUpdateTimeTooltip = document.createElement('div');

	    onItemUpdateTimeTooltip.className = 'vis-onUpdateTime-tooltip';
	    anchor.appendChild(onItemUpdateTimeTooltip);
	    this.dom.onItemUpdateTimeTooltip = onItemUpdateTimeTooltip;
	  } else if (!this.selected && this.dom.onItemUpdateTimeTooltip) {
	    // remove button
	    if (this.dom.onItemUpdateTimeTooltip.parentNode) {
	      this.dom.onItemUpdateTimeTooltip.parentNode.removeChild(this.dom.onItemUpdateTimeTooltip);
	    }
	    this.dom.onItemUpdateTimeTooltip = null;
	  }

	  // position onChange tooltip
	  if (this.dom.onItemUpdateTimeTooltip) {

	    // only show when editing
	    this.dom.onItemUpdateTimeTooltip.style.visibility = this.parent.itemSet.touchParams.itemIsDragging ? 'visible' : 'hidden';

	    // position relative to item's content
	    if (this.options.rtl) {
	      this.dom.onItemUpdateTimeTooltip.style.right = this.dom.content.style.right;
	    } else {
	      this.dom.onItemUpdateTimeTooltip.style.left = this.dom.content.style.left;
	    }

	    // position above or below the item depending on the item's position in the window
	    var tooltipOffset = 50; // TODO: should be tooltip height (depends on template)
	    var scrollTop = this.parent.itemSet.body.domProps.scrollTop;

	    // TODO: this.top for orientation:true is actually the items distance from the bottom... 
	    // (should be this.bottom)
	    var itemDistanceFromTop;
	    if (this.options.orientation.item == 'top') {
	      itemDistanceFromTop = this.top;
	    } else {
	      itemDistanceFromTop = this.parent.height - this.top - this.height;
	    }
	    var isCloseToTop = itemDistanceFromTop + this.parent.top - tooltipOffset < -scrollTop;

	    if (isCloseToTop) {
	      this.dom.onItemUpdateTimeTooltip.style.bottom = "";
	      this.dom.onItemUpdateTimeTooltip.style.top = this.height + 2 + "px";
	    } else {
	      this.dom.onItemUpdateTimeTooltip.style.top = "";
	      this.dom.onItemUpdateTimeTooltip.style.bottom = this.height + 2 + "px";
	    }

	    // handle tooltip content
	    var content;
	    var templateFunction;

	    if (this.options.tooltipOnItemUpdateTime && this.options.tooltipOnItemUpdateTime.template) {
	      templateFunction = this.options.tooltipOnItemUpdateTime.template.bind(this);
	      content = templateFunction(this.data);
	    } else {
	      content = 'start: ' + moment(this.data.start).format('MM/DD/YYYY hh:mm');
	      if (this.data.end) {
	        content += '<br> end: ' + moment(this.data.end).format('MM/DD/YYYY hh:mm');
	      }
	    }
	    this.dom.onItemUpdateTimeTooltip.innerHTML = content;
	  }
	};

	/**
	 * Set HTML contents for the item
	 * @param {Element} element   HTML element to fill with the contents
	 * @private
	 */
	Item.prototype._updateContents = function (element) {
	  var content;
	  var changed;
	  var templateFunction;
	  var itemVisibleFrameContent;
	  var visibleFrameTemplateFunction;
	  var itemData = this.parent.itemSet.itemsData.get(this.id); // get a clone of the data from the dataset

	  var frameElement = this.dom.box || this.dom.point;
	  var itemVisibleFrameContentElement = frameElement.getElementsByClassName('vis-item-visible-frame')[0];

	  if (this.options.visibleFrameTemplate) {
	    visibleFrameTemplateFunction = this.options.visibleFrameTemplate.bind(this);
	    itemVisibleFrameContent = visibleFrameTemplateFunction(itemData, frameElement);
	  } else {
	    itemVisibleFrameContent = '';
	  }

	  if (itemVisibleFrameContentElement) {
	    if (itemVisibleFrameContent instanceof Object && !(itemVisibleFrameContent instanceof Element)) {
	      visibleFrameTemplateFunction(itemData, itemVisibleFrameContentElement);
	    } else {
	      changed = this._contentToString(this.itemVisibleFrameContent) !== this._contentToString(itemVisibleFrameContent);
	      if (changed) {
	        // only replace the content when changed
	        if (itemVisibleFrameContent instanceof Element) {
	          itemVisibleFrameContentElement.innerHTML = '';
	          itemVisibleFrameContentElement.appendChild(itemVisibleFrameContent);
	        } else if (itemVisibleFrameContent != undefined) {
	          itemVisibleFrameContentElement.innerHTML = itemVisibleFrameContent;
	        } else {
	          if (!(this.data.type == 'background' && this.data.content === undefined)) {
	            throw new Error('Property "content" missing in item ' + this.id);
	          }
	        }

	        this.itemVisibleFrameContent = itemVisibleFrameContent;
	      }
	    }
	  }

	  if (this.options.template) {
	    templateFunction = this.options.template.bind(this);
	    content = templateFunction(itemData, element, this.data);
	  } else {
	    content = this.data.content;
	  }

	  if (content instanceof Object && !(content instanceof Element)) {
	    templateFunction(itemData, element);
	  } else {
	    changed = this._contentToString(this.content) !== this._contentToString(content);
	    if (changed) {
	      // only replace the content when changed
	      if (content instanceof Element) {
	        element.innerHTML = '';
	        element.appendChild(content);
	      } else if (content != undefined) {
	        element.innerHTML = content;
	      } else {
	        if (!(this.data.type == 'background' && this.data.content === undefined)) {
	          throw new Error('Property "content" missing in item ' + this.id);
	        }
	      }
	      this.content = content;
	    }
	  }
	};

	/**
	 * Process dataAttributes timeline option and set as data- attributes on dom.content
	 * @param {Element} element   HTML element to which the attributes will be attached
	 * @private
	 */
	Item.prototype._updateDataAttributes = function (element) {
	  if (this.options.dataAttributes && this.options.dataAttributes.length > 0) {
	    var attributes = [];

	    if (Array.isArray(this.options.dataAttributes)) {
	      attributes = this.options.dataAttributes;
	    } else if (this.options.dataAttributes == 'all') {
	      attributes = (0, _keys2['default'])(this.data);
	    } else {
	      return;
	    }

	    for (var i = 0; i < attributes.length; i++) {
	      var name = attributes[i];
	      var value = this.data[name];

	      if (value != null) {
	        element.setAttribute('data-' + name, value);
	      } else {
	        element.removeAttribute('data-' + name);
	      }
	    }
	  }
	};

	/**
	 * Update custom styles of the element
	 * @param {Element} element
	 * @private
	 */
	Item.prototype._updateStyle = function (element) {
	  // remove old styles
	  if (this.style) {
	    util.removeCssText(element, this.style);
	    this.style = null;
	  }

	  // append new styles
	  if (this.data.style) {
	    util.addCssText(element, this.data.style);
	    this.style = this.data.style;
	  }
	};

	/**
	 * Stringify the items contents
	 * @param {string | Element | undefined} content
	 * @returns {string | undefined}
	 * @private
	 */
	Item.prototype._contentToString = function (content) {
	  if (typeof content === 'string') return content;
	  if (content && 'outerHTML' in content) return content.outerHTML;
	  return content;
	};

	/**
	 * Update the editability of this item.
	 */
	Item.prototype._updateEditStatus = function () {
	  if (this.options) {
	    if (typeof this.options.editable === 'boolean') {
	      this.editable = {
	        updateTime: this.options.editable,
	        updateGroup: this.options.editable,
	        remove: this.options.editable
	      };
	    } else if ((0, _typeof3['default'])(this.options.editable) === 'object') {
	      this.editable = {};
	      util.selectiveExtend(['updateTime', 'updateGroup', 'remove'], this.editable, this.options.editable);
	    }
	  }
	  // Item data overrides, except if options.editable.overrideItems is set.
	  if (!this.options || !this.options.editable || this.options.editable.overrideItems !== true) {
	    if (this.data) {
	      if (typeof this.data.editable === 'boolean') {
	        this.editable = {
	          updateTime: this.data.editable,
	          updateGroup: this.data.editable,
	          remove: this.data.editable
	        };
	      } else if ((0, _typeof3['default'])(this.data.editable) === 'object') {
	        // TODO: in vis.js 5.0, we should change this to not reset options from the timeline configuration.
	        // Basically just remove the next line...
	        this.editable = {};
	        util.selectiveExtend(['updateTime', 'updateGroup', 'remove'], this.editable, this.data.editable);
	      }
	    }
	  }
	};

	/**
	 * Return the width of the item left from its start date
	 * @return {number}
	 */
	Item.prototype.getWidthLeft = function () {
	  return 0;
	};

	/**
	 * Return the width of the item right from the max of its start and end date
	 * @return {number}
	 */
	Item.prototype.getWidthRight = function () {
	  return 0;
	};

	/**
	 * Return the title of the item
	 * @return {string | undefined}
	 */
	Item.prototype.getTitle = function () {
	  return this.data.title;
	};

	module.exports = Item;

	/***/ }),
	/* 39 */
	/***/ (function(module, exports) {

	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};


	/***/ }),
	/* 40 */
	/***/ (function(module, exports) {

	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};


	/***/ }),
	/* 41 */
	/***/ (function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(51);
	module.exports = function (it) {
	  return Object(defined(it));
	};


	/***/ }),
	/* 42 */
	/***/ (function(module, exports) {

	exports.f = {}.propertyIsEnumerable;


	/***/ }),
	/* 43 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/**
	 * A queue
	 * @param {Object} options
	 *            Available options:
	 *            - delay: number    When provided, the queue will be flushed
	 *                               automatically after an inactivity of this delay
	 *                               in milliseconds.
	 *                               Default value is null.
	 *            - max: number      When the queue exceeds the given maximum number
	 *                               of entries, the queue is flushed automatically.
	 *                               Default value of max is Infinity.
	 * @constructor Queue
	 */
	function Queue(options) {
	  // options
	  this.delay = null;
	  this.max = Infinity;

	  // properties
	  this._queue = [];
	  this._timeout = null;
	  this._extended = null;

	  this.setOptions(options);
	}

	/**
	 * Update the configuration of the queue
	 * @param {Object} options
	 *            Available options:
	 *            - delay: number    When provided, the queue will be flushed
	 *                               automatically after an inactivity of this delay
	 *                               in milliseconds.
	 *                               Default value is null.
	 *            - max: number      When the queue exceeds the given maximum number
	 *                               of entries, the queue is flushed automatically.
	 *                               Default value of max is Infinity.
	 */
	Queue.prototype.setOptions = function (options) {
	  if (options && typeof options.delay !== 'undefined') {
	    this.delay = options.delay;
	  }
	  if (options && typeof options.max !== 'undefined') {
	    this.max = options.max;
	  }

	  this._flushIfNeeded();
	};

	/**
	 * Extend an object with queuing functionality.
	 * The object will be extended with a function flush, and the methods provided
	 * in options.replace will be replaced with queued ones.
	 * @param {Object} object
	 * @param {Object} options
	 *            Available options:
	 *            - replace: Array.<string>
	 *                               A list with method names of the methods
	 *                               on the object to be replaced with queued ones.
	 *            - delay: number    When provided, the queue will be flushed
	 *                               automatically after an inactivity of this delay
	 *                               in milliseconds.
	 *                               Default value is null.
	 *            - max: number      When the queue exceeds the given maximum number
	 *                               of entries, the queue is flushed automatically.
	 *                               Default value of max is Infinity.
	 * @return {Queue} Returns the created queue
	 */
	Queue.extend = function (object, options) {
	  var queue = new Queue(options);

	  if (object.flush !== undefined) {
	    throw new Error('Target object already has a property flush');
	  }
	  object.flush = function () {
	    queue.flush();
	  };

	  var methods = [{
	    name: 'flush',
	    original: undefined
	  }];

	  if (options && options.replace) {
	    for (var i = 0; i < options.replace.length; i++) {
	      var name = options.replace[i];
	      methods.push({
	        name: name,
	        original: object[name]
	      });
	      queue.replace(object, name);
	    }
	  }

	  queue._extended = {
	    object: object,
	    methods: methods
	  };

	  return queue;
	};

	/**
	 * Destroy the queue. The queue will first flush all queued actions, and in
	 * case it has extended an object, will restore the original object.
	 */
	Queue.prototype.destroy = function () {
	  this.flush();

	  if (this._extended) {
	    var object = this._extended.object;
	    var methods = this._extended.methods;
	    for (var i = 0; i < methods.length; i++) {
	      var method = methods[i];
	      if (method.original) {
	        object[method.name] = method.original;
	      } else {
	        delete object[method.name];
	      }
	    }
	    this._extended = null;
	  }
	};

	/**
	 * Replace a method on an object with a queued version
	 * @param {Object} object   Object having the method
	 * @param {string} method   The method name
	 */
	Queue.prototype.replace = function (object, method) {
	  var me = this;
	  var original = object[method];
	  if (!original) {
	    throw new Error('Method ' + method + ' undefined');
	  }

	  object[method] = function () {
	    // create an Array with the arguments
	    var args = [];
	    for (var i = 0; i < arguments.length; i++) {
	      args[i] = arguments[i];
	    }

	    // add this call to the queue
	    me.queue({
	      args: args,
	      fn: original,
	      context: this
	    });
	  };
	};

	/**
	 * Queue a call
	 * @param {function | {fn: function, args: Array} | {fn: function, args: Array, context: Object}} entry
	 */
	Queue.prototype.queue = function (entry) {
	  if (typeof entry === 'function') {
	    this._queue.push({ fn: entry });
	  } else {
	    this._queue.push(entry);
	  }

	  this._flushIfNeeded();
	};

	/**
	 * Check whether the queue needs to be flushed
	 * @private
	 */
	Queue.prototype._flushIfNeeded = function () {
	  // flush when the maximum is exceeded.
	  if (this._queue.length > this.max) {
	    this.flush();
	  }

	  // flush after a period of inactivity when a delay is configured
	  clearTimeout(this._timeout);
	  if (this.queue.length > 0 && typeof this.delay === 'number') {
	    var me = this;
	    this._timeout = setTimeout(function () {
	      me.flush();
	    }, this.delay);
	  }
	};

	/**
	 * Flush all queued calls
	 */
	Queue.prototype.flush = function () {
	  while (this._queue.length > 0) {
	    var entry = this._queue.shift();
	    entry.fn.apply(entry.context || entry.fn, entry.args || []);
	  }
	};

	module.exports = Queue;

	/***/ }),
	/* 44 */
	/***/ (function(module, exports) {


	/**
	 * Expose `Emitter`.
	 */

	module.exports = Emitter;

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks[event] = this._callbacks[event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  var self = this;
	  this._callbacks = this._callbacks || {};

	  function on() {
	    self.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks[event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks[event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks[event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks[event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


	/***/ }),
	/* 45 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);
	var Component = __webpack_require__(16);
	var TimeStep = __webpack_require__(66);
	var DateUtil = __webpack_require__(36);
	var moment = __webpack_require__(9);

	/**
	 * A horizontal time axis
	 * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} body
	 * @param {Object} [options]        See TimeAxis.setOptions for the available
	 *                                  options.
	 * @constructor TimeAxis
	 * @extends Component
	 */
	function TimeAxis(body, options) {
	  this.dom = {
	    foreground: null,
	    lines: [],
	    majorTexts: [],
	    minorTexts: [],
	    redundant: {
	      lines: [],
	      majorTexts: [],
	      minorTexts: []
	    }
	  };
	  this.props = {
	    range: {
	      start: 0,
	      end: 0,
	      minimumStep: 0
	    },
	    lineTop: 0
	  };

	  this.defaultOptions = {
	    orientation: {
	      axis: 'bottom'
	    }, // axis orientation: 'top' or 'bottom'
	    showMinorLabels: true,
	    showMajorLabels: true,
	    maxMinorChars: 7,
	    format: TimeStep.FORMAT,
	    moment: moment,
	    timeAxis: null
	  };
	  this.options = util.extend({}, this.defaultOptions);

	  this.body = body;

	  // create the HTML DOM
	  this._create();

	  this.setOptions(options);
	}

	TimeAxis.prototype = new Component();

	/**
	 * Set options for the TimeAxis.
	 * Parameters will be merged in current options.
	 * @param {Object} options  Available options:
	 *                          {string} [orientation.axis]
	 *                          {boolean} [showMinorLabels]
	 *                          {boolean} [showMajorLabels]
	 */
	TimeAxis.prototype.setOptions = function (options) {
	  if (options) {
	    // copy all options that we know
	    util.selectiveExtend(['showMinorLabels', 'showMajorLabels', 'maxMinorChars', 'hiddenDates', 'timeAxis', 'moment', 'rtl'], this.options, options);

	    // deep copy the format options
	    util.selectiveDeepExtend(['format'], this.options, options);

	    if ('orientation' in options) {
	      if (typeof options.orientation === 'string') {
	        this.options.orientation.axis = options.orientation;
	      } else if ((0, _typeof3['default'])(options.orientation) === 'object' && 'axis' in options.orientation) {
	        this.options.orientation.axis = options.orientation.axis;
	      }
	    }

	    // apply locale to moment.js
	    // TODO: not so nice, this is applied globally to moment.js
	    if ('locale' in options) {
	      if (typeof moment.locale === 'function') {
	        // moment.js 2.8.1+
	        moment.locale(options.locale);
	      } else {
	        moment.lang(options.locale);
	      }
	    }
	  }
	};

	/**
	 * Create the HTML DOM for the TimeAxis
	 */
	TimeAxis.prototype._create = function () {
	  this.dom.foreground = document.createElement('div');
	  this.dom.background = document.createElement('div');

	  this.dom.foreground.className = 'vis-time-axis vis-foreground';
	  this.dom.background.className = 'vis-time-axis vis-background';
	};

	/**
	 * Destroy the TimeAxis
	 */
	TimeAxis.prototype.destroy = function () {
	  // remove from DOM
	  if (this.dom.foreground.parentNode) {
	    this.dom.foreground.parentNode.removeChild(this.dom.foreground);
	  }
	  if (this.dom.background.parentNode) {
	    this.dom.background.parentNode.removeChild(this.dom.background);
	  }

	  this.body = null;
	};

	/**
	 * Repaint the component
	 * @return {boolean} Returns true if the component is resized
	 */
	TimeAxis.prototype.redraw = function () {
	  var props = this.props;
	  var foreground = this.dom.foreground;
	  var background = this.dom.background;

	  // determine the correct parent DOM element (depending on option orientation)
	  var parent = this.options.orientation.axis == 'top' ? this.body.dom.top : this.body.dom.bottom;
	  var parentChanged = foreground.parentNode !== parent;

	  // calculate character width and height
	  this._calculateCharSize();

	  // TODO: recalculate sizes only needed when parent is resized or options is changed
	  var showMinorLabels = this.options.showMinorLabels && this.options.orientation.axis !== 'none';
	  var showMajorLabels = this.options.showMajorLabels && this.options.orientation.axis !== 'none';

	  // determine the width and height of the elemens for the axis
	  props.minorLabelHeight = showMinorLabels ? props.minorCharHeight : 0;
	  props.majorLabelHeight = showMajorLabels ? props.majorCharHeight : 0;
	  props.height = props.minorLabelHeight + props.majorLabelHeight;
	  props.width = foreground.offsetWidth;

	  props.minorLineHeight = this.body.domProps.root.height - props.majorLabelHeight - (this.options.orientation.axis == 'top' ? this.body.domProps.bottom.height : this.body.domProps.top.height);
	  props.minorLineWidth = 1; // TODO: really calculate width
	  props.majorLineHeight = props.minorLineHeight + props.majorLabelHeight;
	  props.majorLineWidth = 1; // TODO: really calculate width

	  //  take foreground and background offline while updating (is almost twice as fast)
	  var foregroundNextSibling = foreground.nextSibling;
	  var backgroundNextSibling = background.nextSibling;
	  foreground.parentNode && foreground.parentNode.removeChild(foreground);
	  background.parentNode && background.parentNode.removeChild(background);

	  foreground.style.height = this.props.height + 'px';

	  this._repaintLabels();

	  // put DOM online again (at the same place)
	  if (foregroundNextSibling) {
	    parent.insertBefore(foreground, foregroundNextSibling);
	  } else {
	    parent.appendChild(foreground);
	  }
	  if (backgroundNextSibling) {
	    this.body.dom.backgroundVertical.insertBefore(background, backgroundNextSibling);
	  } else {
	    this.body.dom.backgroundVertical.appendChild(background);
	  }
	  return this._isResized() || parentChanged;
	};

	/**
	 * Repaint major and minor text labels and vertical grid lines
	 * @private
	 */
	TimeAxis.prototype._repaintLabels = function () {
	  var orientation = this.options.orientation.axis;

	  // calculate range and step (step such that we have space for 7 characters per label)
	  var start = util.convert(this.body.range.start, 'Number');
	  var end = util.convert(this.body.range.end, 'Number');
	  var timeLabelsize = this.body.util.toTime((this.props.minorCharWidth || 10) * this.options.maxMinorChars).valueOf();
	  var minimumStep = timeLabelsize - DateUtil.getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this.body.range, timeLabelsize);
	  minimumStep -= this.body.util.toTime(0).valueOf();

	  var step = new TimeStep(new Date(start), new Date(end), minimumStep, this.body.hiddenDates, this.options);
	  step.setMoment(this.options.moment);
	  if (this.options.format) {
	    step.setFormat(this.options.format);
	  }
	  if (this.options.timeAxis) {
	    step.setScale(this.options.timeAxis);
	  }
	  this.step = step;

	  // Move all DOM elements to a "redundant" list, where they
	  // can be picked for re-use, and clear the lists with lines and texts.
	  // At the end of the function _repaintLabels, left over elements will be cleaned up
	  var dom = this.dom;
	  dom.redundant.lines = dom.lines;
	  dom.redundant.majorTexts = dom.majorTexts;
	  dom.redundant.minorTexts = dom.minorTexts;
	  dom.lines = [];
	  dom.majorTexts = [];
	  dom.minorTexts = [];

	  var current; // eslint-disable-line no-unused-vars
	  var next;
	  var x;
	  var xNext;
	  var isMajor;
	  var nextIsMajor; // eslint-disable-line no-unused-vars
	  var showMinorGrid;
	  var width = 0,
	      prevWidth;
	  var line;
	  var labelMinor;
	  var xFirstMajorLabel = undefined;
	  var count = 0;
	  var MAX = 1000;
	  var className;

	  step.start();
	  next = step.getCurrent();
	  xNext = this.body.util.toScreen(next);
	  while (step.hasNext() && count < MAX) {
	    count++;

	    isMajor = step.isMajor();
	    className = step.getClassName();
	    labelMinor = step.getLabelMinor();

	    current = next;
	    x = xNext;

	    step.next();
	    next = step.getCurrent();
	    nextIsMajor = step.isMajor();
	    xNext = this.body.util.toScreen(next);

	    prevWidth = width;
	    width = xNext - x;
	    switch (step.scale) {
	      case 'week':
	        showMinorGrid = true;break;
	      default:
	        showMinorGrid = width >= prevWidth * 0.4;break; // prevent displaying of the 31th of the month on a scale of 5 days
	    }

	    if (this.options.showMinorLabels && showMinorGrid) {
	      var label = this._repaintMinorText(x, labelMinor, orientation, className);
	      label.style.width = width + 'px'; // set width to prevent overflow
	    }

	    if (isMajor && this.options.showMajorLabels) {
	      if (x > 0) {
	        if (xFirstMajorLabel == undefined) {
	          xFirstMajorLabel = x;
	        }
	        label = this._repaintMajorText(x, step.getLabelMajor(), orientation, className);
	      }
	      line = this._repaintMajorLine(x, width, orientation, className);
	    } else {
	      // minor line
	      if (showMinorGrid) {
	        line = this._repaintMinorLine(x, width, orientation, className);
	      } else {
	        if (line) {
	          // adjust the width of the previous grid
	          line.style.width = parseInt(line.style.width) + width + 'px';
	        }
	      }
	    }
	  }

	  if (count === MAX && !warnedForOverflow) {
	    console.warn('Something is wrong with the Timeline scale. Limited drawing of grid lines to ' + MAX + ' lines.');
	    warnedForOverflow = true;
	  }

	  // create a major label on the left when needed
	  if (this.options.showMajorLabels) {
	    var leftTime = this.body.util.toTime(0),
	        leftText = step.getLabelMajor(leftTime),
	        widthText = leftText.length * (this.props.majorCharWidth || 10) + 10; // upper bound estimation

	    if (xFirstMajorLabel == undefined || widthText < xFirstMajorLabel) {
	      this._repaintMajorText(0, leftText, orientation, className);
	    }
	  }

	  // Cleanup leftover DOM elements from the redundant list
	  util.forEach(this.dom.redundant, function (arr) {
	    while (arr.length) {
	      var elem = arr.pop();
	      if (elem && elem.parentNode) {
	        elem.parentNode.removeChild(elem);
	      }
	    }
	  });
	};

	/**
	 * Create a minor label for the axis at position x
	 * @param {number} x
	 * @param {string} text
	 * @param {string} orientation   "top" or "bottom" (default)
	 * @param {string} className
	 * @return {Element} Returns the HTML element of the created label
	 * @private
	 */
	TimeAxis.prototype._repaintMinorText = function (x, text, orientation, className) {
	  // reuse redundant label
	  var label = this.dom.redundant.minorTexts.shift();

	  if (!label) {
	    // create new label
	    var content = document.createTextNode('');
	    label = document.createElement('div');
	    label.appendChild(content);
	    this.dom.foreground.appendChild(label);
	  }
	  this.dom.minorTexts.push(label);
	  label.innerHTML = text;

	  label.style.top = orientation == 'top' ? this.props.majorLabelHeight + 'px' : '0';

	  if (this.options.rtl) {
	    label.style.left = "";
	    label.style.right = x + 'px';
	  } else {
	    label.style.left = x + 'px';
	  }
	  label.className = 'vis-text vis-minor ' + className;
	  //label.title = title;  // TODO: this is a heavy operation

	  return label;
	};

	/**
	 * Create a Major label for the axis at position x
	 * @param {number} x
	 * @param {string} text
	 * @param {string} orientation   "top" or "bottom" (default)
	 * @param {string} className
	 * @return {Element} Returns the HTML element of the created label
	 * @private
	 */
	TimeAxis.prototype._repaintMajorText = function (x, text, orientation, className) {
	  // reuse redundant label
	  var label = this.dom.redundant.majorTexts.shift();

	  if (!label) {
	    // create label
	    var content = document.createElement('div');
	    label = document.createElement('div');
	    label.appendChild(content);
	    this.dom.foreground.appendChild(label);
	  }

	  label.childNodes[0].innerHTML = text;
	  label.className = 'vis-text vis-major ' + className;
	  //label.title = title; // TODO: this is a heavy operation

	  label.style.top = orientation == 'top' ? '0' : this.props.minorLabelHeight + 'px';
	  if (this.options.rtl) {
	    label.style.left = "";
	    label.style.right = x + 'px';
	  } else {
	    label.style.left = x + 'px';
	  }

	  this.dom.majorTexts.push(label);
	  return label;
	};

	/**
	 * Create a minor line for the axis at position x
	 * @param {number} x
	 * @param {number} width
	 * @param {string} orientation   "top" or "bottom" (default)
	 * @param {string} className
	 * @return {Element} Returns the created line
	 * @private
	 */
	TimeAxis.prototype._repaintMinorLine = function (x, width, orientation, className) {
	  // reuse redundant line
	  var line = this.dom.redundant.lines.shift();
	  if (!line) {
	    // create vertical line
	    line = document.createElement('div');
	    this.dom.background.appendChild(line);
	  }
	  this.dom.lines.push(line);

	  var props = this.props;
	  if (orientation == 'top') {
	    line.style.top = props.majorLabelHeight + 'px';
	  } else {
	    line.style.top = this.body.domProps.top.height + 'px';
	  }
	  line.style.height = props.minorLineHeight + 'px';
	  if (this.options.rtl) {
	    line.style.left = "";
	    line.style.right = x - props.minorLineWidth / 2 + 'px';
	    line.className = 'vis-grid vis-vertical-rtl vis-minor ' + className;
	  } else {
	    line.style.left = x - props.minorLineWidth / 2 + 'px';
	    line.className = 'vis-grid vis-vertical vis-minor ' + className;
	  }
	  line.style.width = width + 'px';

	  return line;
	};

	/**
	 * Create a Major line for the axis at position x
	 * @param {number} x
	 * @param {number} width
	 * @param {string} orientation   "top" or "bottom" (default)
	 * @param {string} className
	 * @return {Element} Returns the created line
	 * @private
	 */
	TimeAxis.prototype._repaintMajorLine = function (x, width, orientation, className) {
	  // reuse redundant line
	  var line = this.dom.redundant.lines.shift();
	  if (!line) {
	    // create vertical line
	    line = document.createElement('div');
	    this.dom.background.appendChild(line);
	  }
	  this.dom.lines.push(line);

	  var props = this.props;
	  if (orientation == 'top') {
	    line.style.top = '0';
	  } else {
	    line.style.top = this.body.domProps.top.height + 'px';
	  }

	  if (this.options.rtl) {
	    line.style.left = "";
	    line.style.right = x - props.majorLineWidth / 2 + 'px';
	    line.className = 'vis-grid vis-vertical-rtl vis-major ' + className;
	  } else {
	    line.style.left = x - props.majorLineWidth / 2 + 'px';
	    line.className = 'vis-grid vis-vertical vis-major ' + className;
	  }

	  line.style.height = props.majorLineHeight + 'px';
	  line.style.width = width + 'px';

	  return line;
	};

	/**
	 * Determine the size of text on the axis (both major and minor axis).
	 * The size is calculated only once and then cached in this.props.
	 * @private
	 */
	TimeAxis.prototype._calculateCharSize = function () {
	  // Note: We calculate char size with every redraw. Size may change, for
	  // example when any of the timelines parents had display:none for example.

	  // determine the char width and height on the minor axis
	  if (!this.dom.measureCharMinor) {
	    this.dom.measureCharMinor = document.createElement('DIV');
	    this.dom.measureCharMinor.className = 'vis-text vis-minor vis-measure';
	    this.dom.measureCharMinor.style.position = 'absolute';

	    this.dom.measureCharMinor.appendChild(document.createTextNode('0'));
	    this.dom.foreground.appendChild(this.dom.measureCharMinor);
	  }
	  this.props.minorCharHeight = this.dom.measureCharMinor.clientHeight;
	  this.props.minorCharWidth = this.dom.measureCharMinor.clientWidth;

	  // determine the char width and height on the major axis
	  if (!this.dom.measureCharMajor) {
	    this.dom.measureCharMajor = document.createElement('DIV');
	    this.dom.measureCharMajor.className = 'vis-text vis-major vis-measure';
	    this.dom.measureCharMajor.style.position = 'absolute';

	    this.dom.measureCharMajor.appendChild(document.createTextNode('0'));
	    this.dom.foreground.appendChild(this.dom.measureCharMajor);
	  }
	  this.props.majorCharHeight = this.dom.measureCharMajor.clientHeight;
	  this.props.majorCharWidth = this.dom.measureCharMajor.clientWidth;
	};

	var warnedForOverflow = false;

	module.exports = TimeAxis;

	/***/ }),
	/* 46 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var Hammer = __webpack_require__(10);
	var util = __webpack_require__(2);
	var Component = __webpack_require__(16);
	var moment = __webpack_require__(9);
	var locales = __webpack_require__(98);

	/**
	 * A custom time bar
	 * @param {{range: Range, dom: Object}} body
	 * @param {Object} [options]        Available parameters:
	 *                                  {number | string} id
	 *                                  {string} locales
	 *                                  {string} locale
	 * @constructor CustomTime
	 * @extends Component
	 */
	function CustomTime(body, options) {
	  this.body = body;

	  // default options
	  this.defaultOptions = {
	    moment: moment,
	    locales: locales,
	    locale: 'en',
	    id: undefined,
	    title: undefined
	  };
	  this.options = util.extend({}, this.defaultOptions);

	  if (options && options.time) {
	    this.customTime = options.time;
	  } else {
	    this.customTime = new Date();
	  }

	  this.eventParams = {}; // stores state parameters while dragging the bar

	  this.setOptions(options);

	  // create the DOM
	  this._create();
	}

	CustomTime.prototype = new Component();

	/**
	 * Set options for the component. Options will be merged in current options.
	 * @param {Object} options  Available parameters:
	 *                                  {number | string} id
	 *                                  {string} locales
	 *                                  {string} locale
	 */
	CustomTime.prototype.setOptions = function (options) {
	  if (options) {
	    // copy all options that we know
	    util.selectiveExtend(['moment', 'locale', 'locales', 'id'], this.options, options);
	  }
	};

	/**
	 * Create the DOM for the custom time
	 * @private
	 */
	CustomTime.prototype._create = function () {
	  var bar = document.createElement('div');
	  bar['custom-time'] = this;
	  bar.className = 'vis-custom-time ' + (this.options.id || '');
	  bar.style.position = 'absolute';
	  bar.style.top = '0px';
	  bar.style.height = '100%';
	  this.bar = bar;

	  var drag = document.createElement('div');
	  drag.style.position = 'relative';
	  drag.style.top = '0px';
	  drag.style.left = '-10px';
	  drag.style.height = '100%';
	  drag.style.width = '20px';

	  /**
	   *
	   * @param {WheelEvent} e
	   */
	  function onMouseWheel(e) {
	    this.body.range._onMouseWheel(e);
	  }

	  if (drag.addEventListener) {
	    // IE9, Chrome, Safari, Opera
	    drag.addEventListener("mousewheel", onMouseWheel.bind(this), false);
	    // Firefox
	    drag.addEventListener("DOMMouseScroll", onMouseWheel.bind(this), false);
	  } else {
	    // IE 6/7/8
	    drag.attachEvent("onmousewheel", onMouseWheel.bind(this));
	  }

	  bar.appendChild(drag);
	  // attach event listeners
	  this.hammer = new Hammer(drag);
	  this.hammer.on('panstart', this._onDragStart.bind(this));
	  this.hammer.on('panmove', this._onDrag.bind(this));
	  this.hammer.on('panend', this._onDragEnd.bind(this));
	  this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_HORIZONTAL });
	};

	/**
	 * Destroy the CustomTime bar
	 */
	CustomTime.prototype.destroy = function () {
	  this.hide();

	  this.hammer.destroy();
	  this.hammer = null;

	  this.body = null;
	};

	/**
	 * Repaint the component
	 * @return {boolean} Returns true if the component is resized
	 */
	CustomTime.prototype.redraw = function () {
	  var parent = this.body.dom.backgroundVertical;
	  if (this.bar.parentNode != parent) {
	    // attach to the dom
	    if (this.bar.parentNode) {
	      this.bar.parentNode.removeChild(this.bar);
	    }
	    parent.appendChild(this.bar);
	  }

	  var x = this.body.util.toScreen(this.customTime);

	  var locale = this.options.locales[this.options.locale];
	  if (!locale) {
	    if (!this.warned) {
	      console.log('WARNING: options.locales[\'' + this.options.locale + '\'] not found. See http://visjs.org/docs/timeline/#Localization');
	      this.warned = true;
	    }
	    locale = this.options.locales['en']; // fall back on english when not available
	  }

	  var title = this.options.title;
	  // To hide the title completely use empty string ''.
	  if (title === undefined) {
	    title = locale.time + ': ' + this.options.moment(this.customTime).format('dddd, MMMM Do YYYY, H:mm:ss');
	    title = title.charAt(0).toUpperCase() + title.substring(1);
	  } else if (typeof title === "function") {
	    title = title.call(this.customTime);
	  }

	  this.bar.style.left = x + 'px';
	  this.bar.title = title;

	  return false;
	};

	/**
	 * Remove the CustomTime from the DOM
	 */
	CustomTime.prototype.hide = function () {
	  // remove the line from the DOM
	  if (this.bar.parentNode) {
	    this.bar.parentNode.removeChild(this.bar);
	  }
	};

	/**
	 * Set custom time.
	 * @param {Date | number | string} time
	 */
	CustomTime.prototype.setCustomTime = function (time) {
	  this.customTime = util.convert(time, 'Date');
	  this.redraw();
	};

	/**
	 * Retrieve the current custom time.
	 * @return {Date} customTime
	 */
	CustomTime.prototype.getCustomTime = function () {
	  return new Date(this.customTime.valueOf());
	};

	/**
	  * Set custom title.
	  * @param {Date | number | string} title
	  */
	CustomTime.prototype.setCustomTitle = function (title) {
	  this.options.title = title;
	};

	/**
	 * Start moving horizontally
	 * @param {Event} event
	 * @private
	 */
	CustomTime.prototype._onDragStart = function (event) {
	  this.eventParams.dragging = true;
	  this.eventParams.customTime = this.customTime;

	  event.stopPropagation();
	};

	/**
	 * Perform moving operating.
	 * @param {Event} event
	 * @private
	 */
	CustomTime.prototype._onDrag = function (event) {
	  if (!this.eventParams.dragging) return;

	  var x = this.body.util.toScreen(this.eventParams.customTime) + event.deltaX;
	  var time = this.body.util.toTime(x);

	  this.setCustomTime(time);

	  // fire a timechange event
	  this.body.emitter.emit('timechange', {
	    id: this.options.id,
	    time: new Date(this.customTime.valueOf()),
	    event: event
	  });

	  event.stopPropagation();
	};

	/**
	 * Stop moving operating.
	 * @param {Event} event
	 * @private
	 */
	CustomTime.prototype._onDragEnd = function (event) {
	  if (!this.eventParams.dragging) return;

	  // fire a timechanged event
	  this.body.emitter.emit('timechanged', {
	    id: this.options.id,
	    time: new Date(this.customTime.valueOf()),
	    event: event
	  });

	  event.stopPropagation();
	};

	/**
	 * Find a custom time from an event target:
	 * searches for the attribute 'custom-time' in the event target's element tree
	 * @param {Event} event
	 * @return {CustomTime | null} customTime
	 */
	CustomTime.customTimeFromTarget = function (event) {
	  var target = event.target;
	  while (target) {
	    if (target.hasOwnProperty('custom-time')) {
	      return target['custom-time'];
	    }
	    target = target.parentNode;
	  }

	  return null;
	};

	module.exports = CustomTime;

	/***/ }),
	/* 47 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);

	var Label = __webpack_require__(117)['default'];
	var ComponentUtil = __webpack_require__(48)['default'];
	var Box = __webpack_require__(193)['default'];
	var Circle = __webpack_require__(200)['default'];
	var CircularImage = __webpack_require__(201)['default'];
	var Database = __webpack_require__(202)['default'];
	var Diamond = __webpack_require__(203)['default'];
	var Dot = __webpack_require__(204)['default'];
	var Ellipse = __webpack_require__(205)['default'];
	var Icon = __webpack_require__(206)['default'];
	var Image = __webpack_require__(207)['default'];
	var Square = __webpack_require__(208)['default'];
	var Hexagon = __webpack_require__(209)['default'];
	var Star = __webpack_require__(210)['default'];
	var Text = __webpack_require__(211)['default'];
	var Triangle = __webpack_require__(212)['default'];
	var TriangleDown = __webpack_require__(213)['default'];

	var _require = __webpack_require__(15),
	    printStyle = _require.printStyle;

	/**
	 * A node. A node can be connected to other nodes via one or multiple edges.
	 */


	var Node = function () {
	  /**
	   *
	   * @param {object} options An object containing options for the node. All
	   *                            options are optional, except for the id.
	   *                              {number} id     Id of the node. Required
	   *                              {string} label  Text label for the node
	   *                              {number} x      Horizontal position of the node
	   *                              {number} y      Vertical position of the node
	   *                              {string} shape  Node shape
	   *                              {string} image  An image url
	   *                              {string} title  A title text, can be HTML
	   *                              {anytype} group A group name or number
	   *
	   * @param {Object} body               Shared state of current network instance
	   * @param {Network.Images} imagelist  A list with images. Only needed when the node has an image
	   * @param {Groups} grouplist          A list with groups. Needed for retrieving group options
	   * @param {Object} globalOptions      Current global node options; these serve as defaults for the node instance
	   * @param {Object} defaultOptions     Global default options for nodes; note that this is also the prototype
	   *                                    for parameter `globalOptions`.
	   */
	  function Node(options, body, imagelist, grouplist, globalOptions, defaultOptions) {
	    (0, _classCallCheck3['default'])(this, Node);

	    this.options = util.bridgeObject(globalOptions);
	    this.globalOptions = globalOptions;
	    this.defaultOptions = defaultOptions;
	    this.body = body;

	    this.edges = []; // all edges connected to this node

	    // set defaults for the options
	    this.id = undefined;
	    this.imagelist = imagelist;
	    this.grouplist = grouplist;

	    // state options
	    this.x = undefined;
	    this.y = undefined;
	    this.baseSize = this.options.size;
	    this.baseFontSize = this.options.font.size;
	    this.predefinedPosition = false; // used to check if initial fit should just take the range or approximate
	    this.selected = false;
	    this.hover = false;

	    this.labelModule = new Label(this.body, this.options, false /* Not edge label */);
	    this.setOptions(options);
	  }

	  /**
	   * Attach a edge to the node
	   * @param {Edge} edge
	   */


	  (0, _createClass3['default'])(Node, [{
	    key: 'attachEdge',
	    value: function attachEdge(edge) {
	      if (this.edges.indexOf(edge) === -1) {
	        this.edges.push(edge);
	      }
	    }

	    /**
	     * Detach a edge from the node
	     *
	     * @param {Edge} edge
	     */

	  }, {
	    key: 'detachEdge',
	    value: function detachEdge(edge) {
	      var index = this.edges.indexOf(edge);
	      if (index != -1) {
	        this.edges.splice(index, 1);
	      }
	    }

	    /**
	     * Set or overwrite options for the node
	     *
	     * @param {Object} options an object with options
	     * @returns {null|boolean}
	     */

	  }, {
	    key: 'setOptions',
	    value: function setOptions(options) {
	      var currentShape = this.options.shape;
	      if (!options) {
	        return; // Note that the return value will be 'undefined'! This is OK.
	      }

	      // basic options
	      if (options.id !== undefined) {
	        this.id = options.id;
	      }

	      if (this.id === undefined) {
	        throw new Error("Node must have an id");
	      }

	      Node.checkMass(options, this.id);

	      // set these options locally
	      // clear x and y positions
	      if (options.x !== undefined) {
	        if (options.x === null) {
	          this.x = undefined;this.predefinedPosition = false;
	        } else {
	          this.x = parseInt(options.x);this.predefinedPosition = true;
	        }
	      }
	      if (options.y !== undefined) {
	        if (options.y === null) {
	          this.y = undefined;this.predefinedPosition = false;
	        } else {
	          this.y = parseInt(options.y);this.predefinedPosition = true;
	        }
	      }
	      if (options.size !== undefined) {
	        this.baseSize = options.size;
	      }
	      if (options.value !== undefined) {
	        options.value = parseFloat(options.value);
	      }

	      // this transforms all shorthands into fully defined options
	      Node.parseOptions(this.options, options, true, this.globalOptions, this.grouplist);

	      var pile = [options, this.options, this.defaultOptions];
	      this.chooser = ComponentUtil.choosify('node', pile);

	      this._load_images();
	      this.updateLabelModule(options);
	      this.updateShape(currentShape);

	      return options.hidden !== undefined || options.physics !== undefined;
	    }

	    /**
	     * Load the images from the options, for the nodes that need them.
	     *
	     * TODO: The imageObj members should be moved to CircularImageBase.
	     *       It's the only place where they are required.
	     *
	     * @private
	     */

	  }, {
	    key: '_load_images',
	    value: function _load_images() {
	      // Don't bother loading for nodes without images
	      if (this.options.shape !== 'circularImage' && this.options.shape !== 'image') {
	        return;
	      }

	      if (this.options.image === undefined) {
	        throw new Error("Option image must be defined for node type '" + this.options.shape + "'");
	      }

	      if (this.imagelist === undefined) {
	        throw new Error("Internal Error: No images provided");
	      }

	      if (typeof this.options.image === 'string') {
	        this.imageObj = this.imagelist.load(this.options.image, this.options.brokenImage, this.id);
	      } else {
	        if (this.options.image.unselected === undefined) {
	          throw new Error("No unselected image provided");
	        }

	        this.imageObj = this.imagelist.load(this.options.image.unselected, this.options.brokenImage, this.id);

	        if (this.options.image.selected !== undefined) {
	          this.imageObjAlt = this.imagelist.load(this.options.image.selected, this.options.brokenImage, this.id);
	        } else {
	          this.imageObjAlt = undefined;
	        }
	      }
	    }

	    /**
	     * Copy group option values into the node options.
	     *
	     * The group options override the global node options, so the copy of group options
	     *  must happen *after* the global node options have been set.
	     *
	     * This method must also be called also if the global node options have changed and the group options did not.
	     *
	     * @param {Object} parentOptions
	     * @param {Object} newOptions  new values for the options, currently only passed in for check
	     * @param {Object} groupList
	     */

	  }, {
	    key: 'getFormattingValues',


	    /**
	     *
	     * @returns {{color: *, borderWidth: *, borderColor: *, size: *, borderDashes: (boolean|Array|allOptions.nodes.shapeProperties.borderDashes|{boolean, array}), borderRadius: (number|allOptions.nodes.shapeProperties.borderRadius|{number}|Array), shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *}}
	     */
	    value: function getFormattingValues() {
	      var values = {
	        color: this.options.color.background,
	        borderWidth: this.options.borderWidth,
	        borderColor: this.options.color.border,
	        size: this.options.size,
	        borderDashes: this.options.shapeProperties.borderDashes,
	        borderRadius: this.options.shapeProperties.borderRadius,
	        shadow: this.options.shadow.enabled,
	        shadowColor: this.options.shadow.color,
	        shadowSize: this.options.shadow.size,
	        shadowX: this.options.shadow.x,
	        shadowY: this.options.shadow.y
	      };
	      if (this.selected || this.hover) {
	        if (this.chooser === true) {
	          if (this.selected) {
	            values.borderWidth *= 2;
	            values.color = this.options.color.highlight.background;
	            values.borderColor = this.options.color.highlight.border;
	            values.shadow = this.options.shadow.enabled;
	          } else if (this.hover) {
	            values.color = this.options.color.hover.background;
	            values.borderColor = this.options.color.hover.border;
	            values.shadow = this.options.shadow.enabled;
	          }
	        } else if (typeof this.chooser === 'function') {
	          this.chooser(values, this.options.id, this.selected, this.hover);
	          if (values.shadow === false) {
	            if (values.shadowColor !== this.options.shadow.color || values.shadowSize !== this.options.shadow.size || values.shadowX !== this.options.shadow.x || values.shadowY !== this.options.shadow.y) {
	              values.shadow = true;
	            }
	          }
	        }
	      } else {
	        values.shadow = this.options.shadow.enabled;
	      }
	      return values;
	    }

	    /**
	     *
	     * @param {Object} options
	     */

	  }, {
	    key: 'updateLabelModule',
	    value: function updateLabelModule(options) {
	      if (this.options.label === undefined || this.options.label === null) {
	        this.options.label = '';
	      }

	      Node.updateGroupOptions(this.options, options, this.grouplist);

	      //
	      // Note:The prototype chain for this.options is:
	      //
	      // this.options ->    NodesHandler.options    -> NodesHandler.defaultOptions
	      //                 (also: this.globalOptions)
	      //
	      // Note that the prototypes are mentioned explicitly in the pile list below;
	      // WE DON'T WANT THE ORDER OF THE PROTOTYPES!!!! At least, not for font handling of labels.
	      // This is a good indication that the prototype usage of options is deficient.
	      //
	      var currentGroup = this.grouplist.get(this.options.group, false);
	      var pile = [options, // new options
	      this.options, // current node options, see comment above for prototype
	      currentGroup, // group options, if any
	      this.globalOptions, // Currently set global node options
	      this.defaultOptions // Default global node options
	      ];
	      this.labelModule.update(this.options, pile);

	      if (this.labelModule.baseSize !== undefined) {
	        this.baseFontSize = this.labelModule.baseSize;
	      }
	    }

	    /**
	     *
	     * @param {string} currentShape
	     */

	  }, {
	    key: 'updateShape',
	    value: function updateShape(currentShape) {
	      if (currentShape === this.options.shape && this.shape) {
	        this.shape.setOptions(this.options, this.imageObj, this.imageObjAlt);
	      } else {
	        // choose draw method depending on the shape
	        switch (this.options.shape) {
	          case 'box':
	            this.shape = new Box(this.options, this.body, this.labelModule);
	            break;
	          case 'circle':
	            this.shape = new Circle(this.options, this.body, this.labelModule);
	            break;
	          case 'circularImage':
	            this.shape = new CircularImage(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
	            break;
	          case 'database':
	            this.shape = new Database(this.options, this.body, this.labelModule);
	            break;
	          case 'diamond':
	            this.shape = new Diamond(this.options, this.body, this.labelModule);
	            break;
	          case 'dot':
	            this.shape = new Dot(this.options, this.body, this.labelModule);
	            break;
	          case 'ellipse':
	            this.shape = new Ellipse(this.options, this.body, this.labelModule);
	            break;
	          case 'icon':
	            this.shape = new Icon(this.options, this.body, this.labelModule);
	            break;
	          case 'image':
	            this.shape = new Image(this.options, this.body, this.labelModule, this.imageObj, this.imageObjAlt);
	            break;
	          case 'square':
	            this.shape = new Square(this.options, this.body, this.labelModule);
	            break;
	          case 'hexagon':
	            this.shape = new Hexagon(this.options, this.body, this.labelModule);
	            break;
	          case 'star':
	            this.shape = new Star(this.options, this.body, this.labelModule);
	            break;
	          case 'text':
	            this.shape = new Text(this.options, this.body, this.labelModule);
	            break;
	          case 'triangle':
	            this.shape = new Triangle(this.options, this.body, this.labelModule);
	            break;
	          case 'triangleDown':
	            this.shape = new TriangleDown(this.options, this.body, this.labelModule);
	            break;
	          default:
	            this.shape = new Ellipse(this.options, this.body, this.labelModule);
	            break;
	        }
	      }
	      this.needsRefresh();
	    }

	    /**
	     * select this node
	     */

	  }, {
	    key: 'select',
	    value: function select() {
	      this.selected = true;
	      this.needsRefresh();
	    }

	    /**
	     * unselect this node
	     */

	  }, {
	    key: 'unselect',
	    value: function unselect() {
	      this.selected = false;
	      this.needsRefresh();
	    }

	    /**
	     * Reset the calculated size of the node, forces it to recalculate its size
	     */

	  }, {
	    key: 'needsRefresh',
	    value: function needsRefresh() {
	      this.shape.refreshNeeded = true;
	    }

	    /**
	     * get the title of this node.
	     * @return {string} title    The title of the node, or undefined when no title
	     *                           has been set.
	     */

	  }, {
	    key: 'getTitle',
	    value: function getTitle() {
	      return this.options.title;
	    }

	    /**
	     * Calculate the distance to the border of the Node
	     * @param {CanvasRenderingContext2D}   ctx
	     * @param {number} angle        Angle in radians
	     * @returns {number} distance   Distance to the border in pixels
	     */

	  }, {
	    key: 'distanceToBorder',
	    value: function distanceToBorder(ctx, angle) {
	      return this.shape.distanceToBorder(ctx, angle);
	    }

	    /**
	     * Check if this node has a fixed x and y position
	     * @return {boolean}      true if fixed, false if not
	     */

	  }, {
	    key: 'isFixed',
	    value: function isFixed() {
	      return this.options.fixed.x && this.options.fixed.y;
	    }

	    /**
	     * check if this node is selecte
	     * @return {boolean} selected   True if node is selected, else false
	     */

	  }, {
	    key: 'isSelected',
	    value: function isSelected() {
	      return this.selected;
	    }

	    /**
	     * Retrieve the value of the node. Can be undefined
	     * @return {number} value
	     */

	  }, {
	    key: 'getValue',
	    value: function getValue() {
	      return this.options.value;
	    }

	    /**
	     * Get the current dimensions of the label
	     *
	     * @return {rect}
	     */

	  }, {
	    key: 'getLabelSize',
	    value: function getLabelSize() {
	      return this.labelModule.size();
	    }

	    /**
	     * Adjust the value range of the node. The node will adjust it's size
	     * based on its value.
	     * @param {number} min
	     * @param {number} max
	     * @param {number} total
	     */

	  }, {
	    key: 'setValueRange',
	    value: function setValueRange(min, max, total) {
	      if (this.options.value !== undefined) {
	        var scale = this.options.scaling.customScalingFunction(min, max, total, this.options.value);
	        var sizeDiff = this.options.scaling.max - this.options.scaling.min;
	        if (this.options.scaling.label.enabled === true) {
	          var fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;
	          this.options.font.size = this.options.scaling.label.min + scale * fontDiff;
	        }
	        this.options.size = this.options.scaling.min + scale * sizeDiff;
	      } else {
	        this.options.size = this.baseSize;
	        this.options.font.size = this.baseFontSize;
	      }

	      this.updateLabelModule();
	    }

	    /**
	     * Draw this node in the given canvas
	     * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
	     * @param {CanvasRenderingContext2D}   ctx
	     */

	  }, {
	    key: 'draw',
	    value: function draw(ctx) {
	      var values = this.getFormattingValues();
	      this.shape.draw(ctx, this.x, this.y, this.selected, this.hover, values);
	    }

	    /**
	     * Update the bounding box of the shape
	     * @param {CanvasRenderingContext2D}   ctx
	     */

	  }, {
	    key: 'updateBoundingBox',
	    value: function updateBoundingBox(ctx) {
	      this.shape.updateBoundingBox(this.x, this.y, ctx);
	    }

	    /**
	     * Recalculate the size of this node in the given canvas
	     * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
	     * @param {CanvasRenderingContext2D}   ctx
	     */

	  }, {
	    key: 'resize',
	    value: function resize(ctx) {
	      var values = this.getFormattingValues();
	      this.shape.resize(ctx, this.selected, this.hover, values);
	    }

	    /**
	     * Determine all visual elements of this node instance, in which the given
	     * point falls within the bounding shape.
	     *
	     * @param {point} point
	     * @returns {Array.<nodeClickItem|nodeLabelClickItem>} list with the items which are on the point
	     */

	  }, {
	    key: 'getItemsOnPoint',
	    value: function getItemsOnPoint(point) {
	      var ret = [];

	      if (this.labelModule.visible()) {
	        if (ComponentUtil.pointInRect(this.labelModule.getSize(), point)) {
	          ret.push({ nodeId: this.id, labelId: 0 });
	        }
	      }

	      if (ComponentUtil.pointInRect(this.shape.boundingBox, point)) {
	        ret.push({ nodeId: this.id });
	      }

	      return ret;
	    }

	    /**
	     * Check if this object is overlapping with the provided object
	     * @param {Object} obj   an object with parameters left, top, right, bottom
	     * @return {boolean}     True if location is located on node
	     */

	  }, {
	    key: 'isOverlappingWith',
	    value: function isOverlappingWith(obj) {
	      return this.shape.left < obj.right && this.shape.left + this.shape.width > obj.left && this.shape.top < obj.bottom && this.shape.top + this.shape.height > obj.top;
	    }

	    /**
	     * Check if this object is overlapping with the provided object
	     * @param {Object} obj   an object with parameters left, top, right, bottom
	     * @return {boolean}     True if location is located on node
	     */

	  }, {
	    key: 'isBoundingBoxOverlappingWith',
	    value: function isBoundingBoxOverlappingWith(obj) {
	      return this.shape.boundingBox.left < obj.right && this.shape.boundingBox.right > obj.left && this.shape.boundingBox.top < obj.bottom && this.shape.boundingBox.bottom > obj.top;
	    }

	    /**
	    * Check valid values for mass
	    *
	    * The mass may not be negative or zero. If it is, reset to 1
	    *
	    * @param {object} options
	    * @param {Node.id} id
	     * @static
	    */

	  }], [{
	    key: 'updateGroupOptions',
	    value: function updateGroupOptions(parentOptions, newOptions, groupList) {
	      if (groupList === undefined) return; // No groups, nothing to do

	      var group = parentOptions.group;

	      // paranoia: the selected group is already merged into node options, check.
	      if (newOptions !== undefined && newOptions.group !== undefined && group !== newOptions.group) {
	        throw new Error("updateGroupOptions: group values in options don't match.");
	      }

	      var hasGroup = typeof group === 'number' || typeof group === 'string' && group != '';
	      if (!hasGroup) return; // current node has no group, no need to merge

	      var groupObj = groupList.get(group);

	      // Skip merging of group font options into parent; these are required to be distinct for labels
	      // TODO: It might not be a good idea either to merge the rest of the options, investigate this. 
	      util.selectiveNotDeepExtend(['font'], parentOptions, groupObj);

	      // the color object needs to be completely defined.
	      // Since groups can partially overwrite the colors, we parse it again, just in case.
	      parentOptions.color = util.parseColor(parentOptions.color);
	    }

	    /**
	     * This process all possible shorthands in the new options and makes sure that the parentOptions are fully defined.
	     * Static so it can also be used by the handler.
	     *
	     * @param {Object} parentOptions
	     * @param {Object} newOptions
	     * @param {boolean} [allowDeletion=false]
	     * @param {Object} [globalOptions={}]
	     * @param {Object} [groupList]
	     * @static
	     */

	  }, {
	    key: 'parseOptions',
	    value: function parseOptions(parentOptions, newOptions) {
	      var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	      var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	      var groupList = arguments[4];


	      var fields = ['color', 'fixed', 'shadow'];
	      util.selectiveNotDeepExtend(fields, parentOptions, newOptions, allowDeletion);

	      Node.checkMass(newOptions);

	      // merge the shadow options into the parent.
	      util.mergeOptions(parentOptions, newOptions, 'shadow', globalOptions);

	      // individual shape newOptions
	      if (newOptions.color !== undefined && newOptions.color !== null) {
	        var parsedColor = util.parseColor(newOptions.color);
	        util.fillIfDefined(parentOptions.color, parsedColor);
	      } else if (allowDeletion === true && newOptions.color === null) {
	        parentOptions.color = util.bridgeObject(globalOptions.color); // set the object back to the global options
	      }

	      // handle the fixed options
	      if (newOptions.fixed !== undefined && newOptions.fixed !== null) {
	        if (typeof newOptions.fixed === 'boolean') {
	          parentOptions.fixed.x = newOptions.fixed;
	          parentOptions.fixed.y = newOptions.fixed;
	        } else {
	          if (newOptions.fixed.x !== undefined && typeof newOptions.fixed.x === 'boolean') {
	            parentOptions.fixed.x = newOptions.fixed.x;
	          }
	          if (newOptions.fixed.y !== undefined && typeof newOptions.fixed.y === 'boolean') {
	            parentOptions.fixed.y = newOptions.fixed.y;
	          }
	        }
	      }

	      if (allowDeletion === true && newOptions.font === null) {
	        parentOptions.font = util.bridgeObject(globalOptions.font); // set the object back to the global options
	      }

	      Node.updateGroupOptions(parentOptions, newOptions, groupList);

	      // handle the scaling options, specifically the label part
	      if (newOptions.scaling !== undefined) {
	        util.mergeOptions(parentOptions.scaling, newOptions.scaling, 'label', globalOptions.scaling);
	      }
	    }
	  }, {
	    key: 'checkMass',
	    value: function checkMass(options, id) {
	      if (options.mass !== undefined && options.mass <= 0) {
	        var strId = '';
	        if (id !== undefined) {
	          strId = ' in node id: ' + id;
	        }
	        console.log('%cNegative or zero mass disallowed' + strId + ', setting mass to 1.', printStyle);
	        options.mass = 1;
	      }
	    }
	  }]);
	  return Node;
	}();

	exports['default'] = Node;

	/***/ }),
	/* 48 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Definitions for param's in jsdoc.
	 * These are more or less global within Network. Putting them here until I can figure out
	 * where to really put them
	 * 
	 * @typedef {string|number} Id
	 * @typedef {Id} NodeId
	 * @typedef {Id} EdgeId
	 * @typedef {Id} LabelId
	 *
	 * @typedef {{x: number, y: number}} point
	 * @typedef {{left: number, top: number, width: number, height: number}} rect
	 * @typedef {{x: number, y:number, angle: number}} rotationPoint
	 *   - point to rotate around and the angle in radians to rotate. angle == 0 means no rotation
	 * @typedef {{nodeId:NodeId}} nodeClickItem
	 * @typedef {{nodeId:NodeId, labelId:LabelId}} nodeLabelClickItem
	 * @typedef {{edgeId:EdgeId}} edgeClickItem
	 * @typedef {{edgeId:EdgeId, labelId:LabelId}} edgeLabelClickItem
	 */

	var util = __webpack_require__(2);

	/**
	 * Helper functions for components
	 * @class
	 */

	var ComponentUtil = function () {
	  function ComponentUtil() {
	    (0, _classCallCheck3['default'])(this, ComponentUtil);
	  }

	  (0, _createClass3['default'])(ComponentUtil, null, [{
	    key: 'choosify',

	    /**
	     * Determine values to use for (sub)options of 'chosen'.
	     *
	     * This option is either a boolean or an object whose values should be examined further.
	     * The relevant structures are:
	     *
	     * - chosen: <boolean value>
	     * - chosen: { subOption: <boolean or function> }
	     *
	     * Where subOption is 'node', 'edge' or 'label'.
	     *
	     * The intention of this method appears to be to set a specific priority to the options;
	     * Since most properties are either bridged or merged into the local options objects, there
	     * is not much point in handling them separately.
	     * TODO: examine if 'most' in previous sentence can be replaced with 'all'. In that case, we
	     *       should be able to get rid of this method.
	     *
	     * @param {string}  subOption  option within object 'chosen' to consider; either 'node', 'edge' or 'label'
	     * @param {Object}  pile       array of options objects to consider
	     * 
	     * @return {boolean|function}  value for passed subOption of 'chosen' to use
	     */
	    value: function choosify(subOption, pile) {
	      // allowed values for subOption
	      var allowed = ['node', 'edge', 'label'];
	      var value = true;

	      var chosen = util.topMost(pile, 'chosen');
	      if (typeof chosen === 'boolean') {
	        value = chosen;
	      } else if ((typeof chosen === 'undefined' ? 'undefined' : (0, _typeof3['default'])(chosen)) === 'object') {
	        if (allowed.indexOf(subOption) === -1) {
	          throw new Error('choosify: subOption \'' + subOption + '\' should be one of ' + "'" + allowed.join("', '") + "'");
	        }

	        var chosenEdge = util.topMost(pile, ['chosen', subOption]);
	        if (typeof chosenEdge === 'boolean' || typeof chosenEdge === 'function') {
	          value = chosenEdge;
	        }
	      }

	      return value;
	    }

	    /**
	     * Check if the point falls within the given rectangle.
	     *
	     * @param {rect} rect
	     * @param {point} point
	     * @param {rotationPoint} [rotationPoint] if specified, the rotation that applies to the rectangle.
	     * @returns {boolean}  true if point within rectangle, false otherwise
	     * @static
	     */

	  }, {
	    key: 'pointInRect',
	    value: function pointInRect(rect, point, rotationPoint) {
	      if (rect.width <= 0 || rect.height <= 0) {
	        return false; // early out
	      }

	      if (rotationPoint !== undefined) {
	        // Rotate the point the same amount as the rectangle
	        var tmp = {
	          x: point.x - rotationPoint.x,
	          y: point.y - rotationPoint.y
	        };

	        if (rotationPoint.angle !== 0) {
	          // In order to get the coordinates the same, you need to 
	          // rotate in the reverse direction
	          var angle = -rotationPoint.angle;

	          var tmp2 = {
	            x: Math.cos(angle) * tmp.x - Math.sin(angle) * tmp.y,
	            y: Math.sin(angle) * tmp.x + Math.cos(angle) * tmp.y
	          };
	          point = tmp2;
	        } else {
	          point = tmp;
	        }

	        // Note that if a rotation is specified, the rectangle coordinates
	        // are **not* the full canvas coordinates. They are relative to the
	        // rotationPoint. Hence, the point coordinates need not be translated
	        // back in this case.
	      }

	      var right = rect.x + rect.width;
	      var bottom = rect.y + rect.width;

	      return rect.left < point.x && right > point.x && rect.top < point.y && bottom > point.y;
	    }

	    /**
	     * Check if given value is acceptable as a label text.
	     *
	     * @param {*} text value to check; can be anything at this point
	     * @returns {boolean} true if valid label value, false otherwise
	     */

	  }, {
	    key: 'isValidLabel',
	    value: function isValidLabel(text) {
	      // Note that this is quite strict: types that *might* be converted to string are disallowed
	      return typeof text === 'string' && text !== '';
	    }
	  }]);
	  return ComponentUtil;
	}();

	exports['default'] = ComponentUtil;

	/***/ }),
	/* 49 */
	/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(125);
	var global = __webpack_require__(18);
	var hide = __webpack_require__(26);
	var Iterators = __webpack_require__(31);
	var TO_STRING_TAG = __webpack_require__(13)('toStringTag');

	var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
	  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
	  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
	  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
	  'TextTrackList,TouchList').split(',');

	for (var i = 0; i < DOMIterables.length; i++) {
	  var NAME = DOMIterables[i];
	  var Collection = global[NAME];
	  var proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}


	/***/ }),
	/* 50 */
	/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};


	/***/ }),
	/* 51 */
	/***/ (function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};


	/***/ }),
	/* 52 */
	/***/ (function(module, exports) {

	module.exports = true;


	/***/ }),
	/* 53 */
	/***/ (function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(32);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};


	/***/ }),
	/* 54 */
	/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(27);
	var dPs = __webpack_require__(130);
	var enumBugKeys = __webpack_require__(58);
	var IE_PROTO = __webpack_require__(56)('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(82)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(134).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};

	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


	/***/ }),
	/* 55 */
	/***/ (function(module, exports) {

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};


	/***/ }),
	/* 56 */
	/***/ (function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(57)('keys');
	var uid = __webpack_require__(40);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};


	/***/ }),
	/* 57 */
	/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(18);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});
	module.exports = function (key) {
	  return store[key] || (store[key] = {});
	};


	/***/ }),
	/* 58 */
	/***/ (function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');


	/***/ }),
	/* 59 */
	/***/ (function(module, exports, __webpack_require__) {

	var def = __webpack_require__(20).f;
	var has = __webpack_require__(22);
	var TAG = __webpack_require__(13)('toStringTag');

	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};


	/***/ }),
	/* 60 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var $at = __webpack_require__(135)(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(79)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});


	/***/ }),
	/* 61 */
	/***/ (function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(13);


	/***/ }),
	/* 62 */
	/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(18);
	var core = __webpack_require__(7);
	var LIBRARY = __webpack_require__(52);
	var wksExt = __webpack_require__(61);
	var defineProperty = __webpack_require__(20).f;
	module.exports = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
	};


	/***/ }),
	/* 63 */
	/***/ (function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;


	/***/ }),
	/* 64 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _keys = __webpack_require__(8);

	var _keys2 = _interopRequireDefault(_keys);

	var _stringify = __webpack_require__(19);

	var _stringify2 = _interopRequireDefault(_stringify);

	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);
	var moment = __webpack_require__(9);
	var Component = __webpack_require__(16);
	var DateUtil = __webpack_require__(36);

	/**
	 * A Range controls a numeric range with a start and end value.
	 * The Range adjusts the range based on mouse events or programmatic changes,
	 * and triggers events when the range is changing or has been changed.
	 * @param {{dom: Object, domProps: Object, emitter: Emitter}} body
	 * @param {Object} [options]    See description at Range.setOptions
	 * @constructor Range
	 * @extends Component
	 */
	function Range(body, options) {
	  var now = moment().hours(0).minutes(0).seconds(0).milliseconds(0);
	  var start = now.clone().add(-3, 'days').valueOf();
	  var end = now.clone().add(3, 'days').valueOf();
	  this.millisecondsPerPixelCache = undefined;

	  if (options === undefined) {
	    this.start = start;
	    this.end = end;
	  } else {
	    this.start = options.start || start;
	    this.end = options.end || end;
	  }

	  this.rolling = false;

	  this.body = body;
	  this.deltaDifference = 0;
	  this.scaleOffset = 0;
	  this.startToFront = false;
	  this.endToFront = true;

	  // default options
	  this.defaultOptions = {
	    rtl: false,
	    start: null,
	    end: null,
	    moment: moment,
	    direction: 'horizontal', // 'horizontal' or 'vertical'
	    moveable: true,
	    zoomable: true,
	    min: null,
	    max: null,
	    zoomMin: 10, // milliseconds
	    zoomMax: 1000 * 60 * 60 * 24 * 365 * 10000, // milliseconds
	    rollingMode: {
	      follow: false,
	      offset: 0.5
	    }
	  };
	  this.options = util.extend({}, this.defaultOptions);
	  this.props = {
	    touch: {}
	  };
	  this.animationTimer = null;

	  // drag listeners for dragging
	  this.body.emitter.on('panstart', this._onDragStart.bind(this));
	  this.body.emitter.on('panmove', this._onDrag.bind(this));
	  this.body.emitter.on('panend', this._onDragEnd.bind(this));

	  // mouse wheel for zooming
	  this.body.emitter.on('mousewheel', this._onMouseWheel.bind(this));

	  // pinch to zoom
	  this.body.emitter.on('touch', this._onTouch.bind(this));
	  this.body.emitter.on('pinch', this._onPinch.bind(this));

	  // on click of rolling mode button
	  this.body.dom.rollingModeBtn.addEventListener('click', this.startRolling.bind(this));

	  this.setOptions(options);
	}

	Range.prototype = new Component();

	/**
	 * Set options for the range controller
	 * @param {Object} options      Available options:
	 *                              {number | Date | String} start  Start date for the range
	 *                              {number | Date | String} end    End date for the range
	 *                              {number} min    Minimum value for start
	 *                              {number} max    Maximum value for end
	 *                              {number} zoomMin    Set a minimum value for
	 *                                                  (end - start).
	 *                              {number} zoomMax    Set a maximum value for
	 *                                                  (end - start).
	 *                              {boolean} moveable Enable moving of the range
	 *                                                 by dragging. True by default
	 *                              {boolean} zoomable Enable zooming of the range
	 *                                                 by pinching/scrolling. True by default
	 */
	Range.prototype.setOptions = function (options) {
	  if (options) {
	    // copy the options that we know
	    var fields = ['animation', 'direction', 'min', 'max', 'zoomMin', 'zoomMax', 'moveable', 'zoomable', 'moment', 'activate', 'hiddenDates', 'zoomKey', 'rtl', 'showCurrentTime', 'rollingMode', 'horizontalScroll'];
	    util.selectiveExtend(fields, this.options, options);

	    if (options.rollingMode && options.rollingMode.follow) {
	      this.startRolling();
	    }
	    if ('start' in options || 'end' in options) {
	      // apply a new range. both start and end are optional
	      this.setRange(options.start, options.end);
	    }
	  }
	};

	/**
	 * Test whether direction has a valid value
	 * @param {string} direction    'horizontal' or 'vertical'
	 */
	function validateDirection(direction) {
	  if (direction != 'horizontal' && direction != 'vertical') {
	    throw new TypeError('Unknown direction "' + direction + '". ' + 'Choose "horizontal" or "vertical".');
	  }
	}

	/**
	 * Start auto refreshing the current time bar
	 */
	Range.prototype.startRolling = function () {
	  var me = this;

	  /**
	   *  Updates the current time.
	   */
	  function update() {
	    me.stopRolling();
	    me.rolling = true;

	    var interval = me.end - me.start;
	    var t = util.convert(new Date(), 'Date').valueOf();

	    var start = t - interval * me.options.rollingMode.offset;
	    var end = t + interval * (1 - me.options.rollingMode.offset);

	    var options = {
	      animation: false
	    };
	    me.setRange(start, end, options);

	    // determine interval to refresh
	    var scale = me.conversion(me.body.domProps.center.width).scale;
	    interval = 1 / scale / 10;
	    if (interval < 30) interval = 30;
	    if (interval > 1000) interval = 1000;

	    me.body.dom.rollingModeBtn.style.visibility = "hidden";
	    // start a renderTimer to adjust for the new time
	    me.currentTimeTimer = setTimeout(update, interval);
	  }

	  update();
	};

	/**
	 * Stop auto refreshing the current time bar
	 */
	Range.prototype.stopRolling = function () {
	  if (this.currentTimeTimer !== undefined) {
	    clearTimeout(this.currentTimeTimer);
	    this.rolling = false;
	    this.body.dom.rollingModeBtn.style.visibility = "visible";
	  }
	};

	/**
	 * Set a new start and end range
	 * @param {Date | number | string} [start]
	 * @param {Date | number | string} [end]
	 * @param {Object} options      Available options:
	 *                              {boolean | {duration: number, easingFunction: string}} [animation=false]
	 *                                    If true, the range is animated
	 *                                    smoothly to the new window. An object can be
	 *                                    provided to specify duration and easing function.
	 *                                    Default duration is 500 ms, and default easing
	 *                                    function is 'easeInOutQuad'.
	 *                              {boolean} [byUser=false]
	 *                              {Event}  event  Mouse event
	 * @param {Function} callback     a callback function to be executed at the end of this function  
	 * @param {Function} frameCallback    a callback function executed each frame of the range animation.
	 *                                    The callback will be passed three parameters:
	 *                                    {number} easeCoefficient    an easing coefficent
	 *                                    {boolean} willDraw          If true the caller will redraw after the callback completes
	 *                                    {boolean} done              If true then animation is ending after the current frame
	 */

	Range.prototype.setRange = function (start, end, options, callback, frameCallback) {
	  if (!options) {
	    options = {};
	  }
	  if (options.byUser !== true) {
	    options.byUser = false;
	  }
	  var me = this;
	  var finalStart = start != undefined ? util.convert(start, 'Date').valueOf() : null;
	  var finalEnd = end != undefined ? util.convert(end, 'Date').valueOf() : null;
	  this._cancelAnimation();
	  this.millisecondsPerPixelCache = undefined;

	  if (options.animation) {
	    // true or an Object
	    var initStart = this.start;
	    var initEnd = this.end;
	    var duration = (0, _typeof3['default'])(options.animation) === 'object' && 'duration' in options.animation ? options.animation.duration : 500;
	    var easingName = (0, _typeof3['default'])(options.animation) === 'object' && 'easingFunction' in options.animation ? options.animation.easingFunction : 'easeInOutQuad';
	    var easingFunction = util.easingFunctions[easingName];
	    if (!easingFunction) {
	      throw new Error('Unknown easing function ' + (0, _stringify2['default'])(easingName) + '. ' + 'Choose from: ' + (0, _keys2['default'])(util.easingFunctions).join(', '));
	    }

	    var initTime = new Date().valueOf();
	    var anyChanged = false;

	    var next = function next() {
	      if (!me.props.touch.dragging) {
	        var now = new Date().valueOf();
	        var time = now - initTime;
	        var ease = easingFunction(time / duration);
	        var done = time > duration;
	        var s = done || finalStart === null ? finalStart : initStart + (finalStart - initStart) * ease;
	        var e = done || finalEnd === null ? finalEnd : initEnd + (finalEnd - initEnd) * ease;

	        changed = me._applyRange(s, e);
	        DateUtil.updateHiddenDates(me.options.moment, me.body, me.options.hiddenDates);
	        anyChanged = anyChanged || changed;

	        var params = {
	          start: new Date(me.start),
	          end: new Date(me.end),
	          byUser: options.byUser,
	          event: options.event
	        };

	        if (frameCallback) {
	          frameCallback(ease, changed, done);
	        }

	        if (changed) {
	          me.body.emitter.emit('rangechange', params);
	        }

	        if (done) {
	          if (anyChanged) {
	            me.body.emitter.emit('rangechanged', params);
	            if (callback) {
	              return callback();
	            }
	          }
	        } else {
	          // animate with as high as possible frame rate, leave 20 ms in between
	          // each to prevent the browser from blocking
	          me.animationTimer = setTimeout(next, 20);
	        }
	      }
	    };

	    return next();
	  } else {
	    var changed = this._applyRange(finalStart, finalEnd);
	    DateUtil.updateHiddenDates(this.options.moment, this.body, this.options.hiddenDates);
	    if (changed) {
	      var params = {
	        start: new Date(this.start),
	        end: new Date(this.end),
	        byUser: options.byUser,
	        event: options.event
	      };

	      this.body.emitter.emit('rangechange', params);
	      clearTimeout(me.timeoutID);
	      me.timeoutID = setTimeout(function () {
	        me.body.emitter.emit('rangechanged', params);
	      }, 200);
	      if (callback) {
	        return callback();
	      }
	    }
	  }
	};

	/**
	 * Get the number of milliseconds per pixel.
	 *
	 * @returns {undefined|number}
	 */
	Range.prototype.getMillisecondsPerPixel = function () {
	  if (this.millisecondsPerPixelCache === undefined) {
	    this.millisecondsPerPixelCache = (this.end - this.start) / this.body.dom.center.clientWidth;
	  }
	  return this.millisecondsPerPixelCache;
	};

	/**
	 * Stop an animation
	 * @private
	 */
	Range.prototype._cancelAnimation = function () {
	  if (this.animationTimer) {
	    clearTimeout(this.animationTimer);
	    this.animationTimer = null;
	  }
	};

	/**
	 * Set a new start and end range. This method is the same as setRange, but
	 * does not trigger a range change and range changed event, and it returns
	 * true when the range is changed
	 * @param {number} [start]
	 * @param {number} [end]
	 * @return {boolean} changed
	 * @private
	 */
	Range.prototype._applyRange = function (start, end) {
	  var newStart = start != null ? util.convert(start, 'Date').valueOf() : this.start,
	      newEnd = end != null ? util.convert(end, 'Date').valueOf() : this.end,
	      max = this.options.max != null ? util.convert(this.options.max, 'Date').valueOf() : null,
	      min = this.options.min != null ? util.convert(this.options.min, 'Date').valueOf() : null,
	      diff;

	  // check for valid number
	  if (isNaN(newStart) || newStart === null) {
	    throw new Error('Invalid start "' + start + '"');
	  }
	  if (isNaN(newEnd) || newEnd === null) {
	    throw new Error('Invalid end "' + end + '"');
	  }

	  // prevent end < start
	  if (newEnd < newStart) {
	    newEnd = newStart;
	  }

	  // prevent start < min
	  if (min !== null) {
	    if (newStart < min) {
	      diff = min - newStart;
	      newStart += diff;
	      newEnd += diff;

	      // prevent end > max
	      if (max != null) {
	        if (newEnd > max) {
	          newEnd = max;
	        }
	      }
	    }
	  }

	  // prevent end > max
	  if (max !== null) {
	    if (newEnd > max) {
	      diff = newEnd - max;
	      newStart -= diff;
	      newEnd -= diff;

	      // prevent start < min
	      if (min != null) {
	        if (newStart < min) {
	          newStart = min;
	        }
	      }
	    }
	  }

	  // prevent (end-start) < zoomMin
	  if (this.options.zoomMin !== null) {
	    var zoomMin = parseFloat(this.options.zoomMin);
	    if (zoomMin < 0) {
	      zoomMin = 0;
	    }
	    if (newEnd - newStart < zoomMin) {
	      // compensate for a scale of 0.5 ms
	      var compensation = 0.5;
	      if (this.end - this.start === zoomMin && newStart >= this.start - compensation && newEnd <= this.end) {
	        // ignore this action, we are already zoomed to the minimum
	        newStart = this.start;
	        newEnd = this.end;
	      } else {
	        // zoom to the minimum
	        diff = zoomMin - (newEnd - newStart);
	        newStart -= diff / 2;
	        newEnd += diff / 2;
	      }
	    }
	  }

	  // prevent (end-start) > zoomMax
	  if (this.options.zoomMax !== null) {
	    var zoomMax = parseFloat(this.options.zoomMax);
	    if (zoomMax < 0) {
	      zoomMax = 0;
	    }

	    if (newEnd - newStart > zoomMax) {
	      if (this.end - this.start === zoomMax && newStart < this.start && newEnd > this.end) {
	        // ignore this action, we are already zoomed to the maximum
	        newStart = this.start;
	        newEnd = this.end;
	      } else {
	        // zoom to the maximum
	        diff = newEnd - newStart - zoomMax;
	        newStart += diff / 2;
	        newEnd -= diff / 2;
	      }
	    }
	  }

	  var changed = this.start != newStart || this.end != newEnd;

	  // if the new range does NOT overlap with the old range, emit checkRangedItems to avoid not showing ranged items (ranged meaning has end time, not necessarily of type Range)
	  if (!(newStart >= this.start && newStart <= this.end || newEnd >= this.start && newEnd <= this.end) && !(this.start >= newStart && this.start <= newEnd || this.end >= newStart && this.end <= newEnd)) {
	    this.body.emitter.emit('checkRangedItems');
	  }

	  this.start = newStart;
	  this.end = newEnd;
	  return changed;
	};

	/**
	 * Retrieve the current range.
	 * @return {Object} An object with start and end properties
	 */
	Range.prototype.getRange = function () {
	  return {
	    start: this.start,
	    end: this.end
	  };
	};

	/**
	 * Calculate the conversion offset and scale for current range, based on
	 * the provided width
	 * @param {number} width
	 * @param {number} [totalHidden=0]
	 * @returns {{offset: number, scale: number}} conversion
	 */
	Range.prototype.conversion = function (width, totalHidden) {
	  return Range.conversion(this.start, this.end, width, totalHidden);
	};

	/**
	 * Static method to calculate the conversion offset and scale for a range,
	 * based on the provided start, end, and width
	 * @param {number} start
	 * @param {number} end
	 * @param {number} width
	 * @param {number} [totalHidden=0]
	 * @returns {{offset: number, scale: number}} conversion
	 */
	Range.conversion = function (start, end, width, totalHidden) {
	  if (totalHidden === undefined) {
	    totalHidden = 0;
	  }
	  if (width != 0 && end - start != 0) {
	    return {
	      offset: start,
	      scale: width / (end - start - totalHidden)
	    };
	  } else {
	    return {
	      offset: 0,
	      scale: 1
	    };
	  }
	};

	/**
	 * Start dragging horizontally or vertically
	 * @param {Event} event
	 * @private
	 */
	Range.prototype._onDragStart = function (event) {
	  this.deltaDifference = 0;
	  this.previousDelta = 0;

	  // only allow dragging when configured as movable
	  if (!this.options.moveable) return;

	  // only start dragging when the mouse is inside the current range
	  if (!this._isInsideRange(event)) return;

	  // refuse to drag when we where pinching to prevent the timeline make a jump
	  // when releasing the fingers in opposite order from the touch screen
	  if (!this.props.touch.allowDragging) return;

	  this.stopRolling();

	  this.props.touch.start = this.start;
	  this.props.touch.end = this.end;
	  this.props.touch.dragging = true;

	  if (this.body.dom.root) {
	    this.body.dom.root.style.cursor = 'move';
	  }
	};

	/**
	 * Perform dragging operation
	 * @param {Event} event
	 * @private
	 */
	Range.prototype._onDrag = function (event) {
	  if (!event) return;

	  if (!this.props.touch.dragging) return;

	  // only allow dragging when configured as movable
	  if (!this.options.moveable) return;

	  // TODO: this may be redundant in hammerjs2
	  // refuse to drag when we where pinching to prevent the timeline make a jump
	  // when releasing the fingers in opposite order from the touch screen
	  if (!this.props.touch.allowDragging) return;

	  var direction = this.options.direction;
	  validateDirection(direction);
	  var delta = direction == 'horizontal' ? event.deltaX : event.deltaY;
	  delta -= this.deltaDifference;
	  var interval = this.props.touch.end - this.props.touch.start;

	  // normalize dragging speed if cutout is in between.
	  var duration = DateUtil.getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
	  interval -= duration;

	  var width = direction == 'horizontal' ? this.body.domProps.center.width : this.body.domProps.center.height;
	  var diffRange;
	  if (this.options.rtl) {
	    diffRange = delta / width * interval;
	  } else {
	    diffRange = -delta / width * interval;
	  }

	  var newStart = this.props.touch.start + diffRange;
	  var newEnd = this.props.touch.end + diffRange;

	  // snapping times away from hidden zones
	  var safeStart = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newStart, this.previousDelta - delta, true);
	  var safeEnd = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newEnd, this.previousDelta - delta, true);
	  if (safeStart != newStart || safeEnd != newEnd) {
	    this.deltaDifference += delta;
	    this.props.touch.start = safeStart;
	    this.props.touch.end = safeEnd;
	    this._onDrag(event);
	    return;
	  }

	  this.previousDelta = delta;
	  this._applyRange(newStart, newEnd);

	  var startDate = new Date(this.start);
	  var endDate = new Date(this.end);

	  // fire a rangechange event
	  this.body.emitter.emit('rangechange', {
	    start: startDate,
	    end: endDate,
	    byUser: true,
	    event: event
	  });

	  // fire a panmove event
	  this.body.emitter.emit('panmove');
	};

	/**
	 * Stop dragging operation
	 * @param {event} event
	 * @private
	 */
	Range.prototype._onDragEnd = function (event) {
	  if (!this.props.touch.dragging) return;

	  // only allow dragging when configured as movable
	  if (!this.options.moveable) return;

	  // TODO: this may be redundant in hammerjs2
	  // refuse to drag when we where pinching to prevent the timeline make a jump
	  // when releasing the fingers in opposite order from the touch screen
	  if (!this.props.touch.allowDragging) return;

	  this.props.touch.dragging = false;
	  if (this.body.dom.root) {
	    this.body.dom.root.style.cursor = 'auto';
	  }

	  // fire a rangechanged event
	  this.body.emitter.emit('rangechanged', {
	    start: new Date(this.start),
	    end: new Date(this.end),
	    byUser: true,
	    event: event
	  });
	};

	/**
	 * Event handler for mouse wheel event, used to zoom
	 * Code from http://adomas.org/javascript-mouse-wheel/
	 * @param {Event} event
	 * @private
	 */
	Range.prototype._onMouseWheel = function (event) {
	  // retrieve delta
	  var delta = 0;
	  if (event.wheelDelta) {
	    /* IE/Opera. */
	    delta = event.wheelDelta / 120;
	  } else if (event.detail) {
	    /* Mozilla case. */
	    // In Mozilla, sign of delta is different than in IE.
	    // Also, delta is multiple of 3.
	    delta = -event.detail / 3;
	  }

	  // don't allow zoom when the according key is pressed and the zoomKey option or not zoomable but movable
	  if (this.options.zoomKey && !event[this.options.zoomKey] && this.options.zoomable || !this.options.zoomable && this.options.moveable) {
	    return;
	  }

	  // only allow zooming when configured as zoomable and moveable
	  if (!(this.options.zoomable && this.options.moveable)) return;

	  // only zoom when the mouse is inside the current range
	  if (!this._isInsideRange(event)) return;

	  // If delta is nonzero, handle it.
	  // Basically, delta is now positive if wheel was scrolled up,
	  // and negative, if wheel was scrolled down.
	  if (delta) {
	    // perform the zoom action. Delta is normally 1 or -1

	    // adjust a negative delta such that zooming in with delta 0.1
	    // equals zooming out with a delta -0.1
	    var scale;
	    if (delta < 0) {
	      scale = 1 - delta / 5;
	    } else {
	      scale = 1 / (1 + delta / 5);
	    }

	    // calculate center, the date to zoom around
	    var pointerDate;
	    if (this.rolling) {
	      pointerDate = this.start + (this.end - this.start) * this.options.rollingMode.offset;
	    } else {
	      var pointer = this.getPointer({ x: event.clientX, y: event.clientY }, this.body.dom.center);
	      pointerDate = this._pointerToDate(pointer);
	    }
	    this.zoom(scale, pointerDate, delta, event);

	    // Prevent default actions caused by mouse wheel
	    // (else the page and timeline both scroll)
	    event.preventDefault();
	  }
	};

	/**
	 * Start of a touch gesture
	 * @param {Event} event
	 * @private
	 */
	Range.prototype._onTouch = function (event) {
	  // eslint-disable-line no-unused-vars
	  this.props.touch.start = this.start;
	  this.props.touch.end = this.end;
	  this.props.touch.allowDragging = true;
	  this.props.touch.center = null;
	  this.scaleOffset = 0;
	  this.deltaDifference = 0;
	  // Disable the browser default handling of this event.
	  util.preventDefault(event);
	};

	/**
	 * Handle pinch event
	 * @param {Event} event
	 * @private
	 */
	Range.prototype._onPinch = function (event) {
	  // only allow zooming when configured as zoomable and moveable
	  if (!(this.options.zoomable && this.options.moveable)) return;

	  // Disable the browser default handling of this event.
	  util.preventDefault(event);

	  this.props.touch.allowDragging = false;

	  if (!this.props.touch.center) {
	    this.props.touch.center = this.getPointer(event.center, this.body.dom.center);
	  }

	  this.stopRolling();

	  var scale = 1 / (event.scale + this.scaleOffset);
	  var centerDate = this._pointerToDate(this.props.touch.center);

	  var hiddenDuration = DateUtil.getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
	  var hiddenDurationBefore = DateUtil.getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this, centerDate);
	  var hiddenDurationAfter = hiddenDuration - hiddenDurationBefore;

	  // calculate new start and end
	  var newStart = centerDate - hiddenDurationBefore + (this.props.touch.start - (centerDate - hiddenDurationBefore)) * scale;
	  var newEnd = centerDate + hiddenDurationAfter + (this.props.touch.end - (centerDate + hiddenDurationAfter)) * scale;

	  // snapping times away from hidden zones
	  this.startToFront = 1 - scale <= 0; // used to do the right auto correction with periodic hidden times
	  this.endToFront = scale - 1 <= 0; // used to do the right auto correction with periodic hidden times

	  var safeStart = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newStart, 1 - scale, true);
	  var safeEnd = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newEnd, scale - 1, true);
	  if (safeStart != newStart || safeEnd != newEnd) {
	    this.props.touch.start = safeStart;
	    this.props.touch.end = safeEnd;
	    this.scaleOffset = 1 - event.scale;
	    newStart = safeStart;
	    newEnd = safeEnd;
	  }

	  var options = {
	    animation: false,
	    byUser: true,
	    event: event
	  };
	  this.setRange(newStart, newEnd, options);

	  this.startToFront = false; // revert to default
	  this.endToFront = true; // revert to default
	};

	/**
	 * Test whether the mouse from a mouse event is inside the visible window,
	 * between the current start and end date
	 * @param {Object} event
	 * @return {boolean} Returns true when inside the visible window
	 * @private
	 */
	Range.prototype._isInsideRange = function (event) {
	  // calculate the time where the mouse is, check whether inside
	  // and no scroll action should happen.
	  var clientX = event.center ? event.center.x : event.clientX;
	  var x;
	  if (this.options.rtl) {
	    x = clientX - util.getAbsoluteLeft(this.body.dom.centerContainer);
	  } else {
	    x = util.getAbsoluteRight(this.body.dom.centerContainer) - clientX;
	  }
	  var time = this.body.util.toTime(x);

	  return time >= this.start && time <= this.end;
	};

	/**
	 * Helper function to calculate the center date for zooming
	 * @param {{x: number, y: number}} pointer
	 * @return {number} date
	 * @private
	 */
	Range.prototype._pointerToDate = function (pointer) {
	  var conversion;
	  var direction = this.options.direction;

	  validateDirection(direction);

	  if (direction == 'horizontal') {
	    return this.body.util.toTime(pointer.x).valueOf();
	  } else {
	    var height = this.body.domProps.center.height;
	    conversion = this.conversion(height);
	    return pointer.y / conversion.scale + conversion.offset;
	  }
	};

	/**
	 * Get the pointer location relative to the location of the dom element
	 * @param {{x: number, y: number}} touch
	 * @param {Element} element   HTML DOM element
	 * @return {{x: number, y: number}} pointer
	 * @private
	 */
	Range.prototype.getPointer = function (touch, element) {
	  if (this.options.rtl) {
	    return {
	      x: util.getAbsoluteRight(element) - touch.x,
	      y: touch.y - util.getAbsoluteTop(element)
	    };
	  } else {
	    return {
	      x: touch.x - util.getAbsoluteLeft(element),
	      y: touch.y - util.getAbsoluteTop(element)
	    };
	  }
	};

	/**
	 * Zoom the range the given scale in or out. Start and end date will
	 * be adjusted, and the timeline will be redrawn. You can optionally give a
	 * date around which to zoom.
	 * For example, try scale = 0.9 or 1.1
	 * @param {number} scale      Scaling factor. Values above 1 will zoom out,
	 *                            values below 1 will zoom in.
	 * @param {number} [center]   Value representing a date around which will
	 *                            be zoomed.
	 * @param {number} delta
	 * @param {Event} event
	 */
	Range.prototype.zoom = function (scale, center, delta, event) {
	  // if centerDate is not provided, take it half between start Date and end Date
	  if (center == null) {
	    center = (this.start + this.end) / 2;
	  }

	  var hiddenDuration = DateUtil.getHiddenDurationBetween(this.body.hiddenDates, this.start, this.end);
	  var hiddenDurationBefore = DateUtil.getHiddenDurationBefore(this.options.moment, this.body.hiddenDates, this, center);
	  var hiddenDurationAfter = hiddenDuration - hiddenDurationBefore;

	  // calculate new start and end
	  var newStart = center - hiddenDurationBefore + (this.start - (center - hiddenDurationBefore)) * scale;
	  var newEnd = center + hiddenDurationAfter + (this.end - (center + hiddenDurationAfter)) * scale;

	  // snapping times away from hidden zones
	  this.startToFront = delta > 0 ? false : true; // used to do the right autocorrection with periodic hidden times
	  this.endToFront = -delta > 0 ? false : true; // used to do the right autocorrection with periodic hidden times
	  var safeStart = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newStart, delta, true);
	  var safeEnd = DateUtil.snapAwayFromHidden(this.body.hiddenDates, newEnd, -delta, true);
	  if (safeStart != newStart || safeEnd != newEnd) {
	    newStart = safeStart;
	    newEnd = safeEnd;
	  }

	  var options = {
	    animation: false,
	    byUser: true,
	    event: event
	  };
	  this.setRange(newStart, newEnd, options);

	  this.startToFront = false; // revert to default
	  this.endToFront = true; // revert to default
	};

	/**
	 * Move the range with a given delta to the left or right. Start and end
	 * value will be adjusted. For example, try delta = 0.1 or -0.1
	 * @param {number}  delta     Moving amount. Positive value will move right,
	 *                            negative value will move left
	 */
	Range.prototype.move = function (delta) {
	  // zoom start Date and end Date relative to the centerDate
	  var diff = this.end - this.start;

	  // apply new values
	  var newStart = this.start + diff * delta;
	  var newEnd = this.end + diff * delta;

	  // TODO: reckon with min and max range

	  this.start = newStart;
	  this.end = newEnd;
	};

	/**
	 * Move the range to a new center point
	 * @param {number} moveTo      New center point of the range
	 */
	Range.prototype.moveTo = function (moveTo) {
	  var center = (this.start + this.end) / 2;

	  var diff = center - moveTo;

	  // calculate new start and end
	  var newStart = this.start - diff;
	  var newEnd = this.end - diff;

	  var options = {
	    animation: false,
	    byUser: true,
	    event: null
	  };
	  this.setRange(newStart, newEnd, options);
	};

	module.exports = Range;

	/***/ }),
	/* 65 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _stringify = __webpack_require__(19);

	var _stringify2 = _interopRequireDefault(_stringify);

	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var Emitter = __webpack_require__(44);
	var Hammer = __webpack_require__(10);
	var hammerUtil = __webpack_require__(37);
	var util = __webpack_require__(2);
	var TimeAxis = __webpack_require__(45);
	var Activator = __webpack_require__(97);
	var DateUtil = __webpack_require__(36);
	var CustomTime = __webpack_require__(46);

	/**
	 * Create a timeline visualization
	 * @constructor Core
	 */
	function Core() {}

	// turn Core into an event emitter
	Emitter(Core.prototype);

	/**
	 * Create the main DOM for the Core: a root panel containing left, right,
	 * top, bottom, content, and background panel.
	 * @param {Element} container  The container element where the Core will
	 *                             be attached.
	 * @protected
	 */
	Core.prototype._create = function (container) {
	  this.dom = {};

	  this.dom.container = container;

	  this.dom.root = document.createElement('div');
	  this.dom.background = document.createElement('div');
	  this.dom.backgroundVertical = document.createElement('div');
	  this.dom.backgroundHorizontal = document.createElement('div');
	  this.dom.centerContainer = document.createElement('div');
	  this.dom.leftContainer = document.createElement('div');
	  this.dom.rightContainer = document.createElement('div');
	  this.dom.center = document.createElement('div');
	  this.dom.left = document.createElement('div');
	  this.dom.right = document.createElement('div');
	  this.dom.top = document.createElement('div');
	  this.dom.bottom = document.createElement('div');
	  this.dom.shadowTop = document.createElement('div');
	  this.dom.shadowBottom = document.createElement('div');
	  this.dom.shadowTopLeft = document.createElement('div');
	  this.dom.shadowBottomLeft = document.createElement('div');
	  this.dom.shadowTopRight = document.createElement('div');
	  this.dom.shadowBottomRight = document.createElement('div');
	  this.dom.rollingModeBtn = document.createElement('div');

	  this.dom.root.className = 'vis-timeline';
	  this.dom.background.className = 'vis-panel vis-background';
	  this.dom.backgroundVertical.className = 'vis-panel vis-background vis-vertical';
	  this.dom.backgroundHorizontal.className = 'vis-panel vis-background vis-horizontal';
	  this.dom.centerContainer.className = 'vis-panel vis-center';
	  this.dom.leftContainer.className = 'vis-panel vis-left';
	  this.dom.rightContainer.className = 'vis-panel vis-right';
	  this.dom.top.className = 'vis-panel vis-top';
	  this.dom.bottom.className = 'vis-panel vis-bottom';
	  this.dom.left.className = 'vis-content';
	  this.dom.center.className = 'vis-content';
	  this.dom.right.className = 'vis-content';
	  this.dom.shadowTop.className = 'vis-shadow vis-top';
	  this.dom.shadowBottom.className = 'vis-shadow vis-bottom';
	  this.dom.shadowTopLeft.className = 'vis-shadow vis-top';
	  this.dom.shadowBottomLeft.className = 'vis-shadow vis-bottom';
	  this.dom.shadowTopRight.className = 'vis-shadow vis-top';
	  this.dom.shadowBottomRight.className = 'vis-shadow vis-bottom';
	  this.dom.rollingModeBtn.className = 'vis-rolling-mode-btn';

	  this.dom.root.appendChild(this.dom.background);
	  this.dom.root.appendChild(this.dom.backgroundVertical);
	  this.dom.root.appendChild(this.dom.backgroundHorizontal);
	  this.dom.root.appendChild(this.dom.centerContainer);
	  this.dom.root.appendChild(this.dom.leftContainer);
	  this.dom.root.appendChild(this.dom.rightContainer);
	  this.dom.root.appendChild(this.dom.top);
	  this.dom.root.appendChild(this.dom.bottom);
	  this.dom.root.appendChild(this.dom.bottom);
	  this.dom.root.appendChild(this.dom.rollingModeBtn);

	  this.dom.centerContainer.appendChild(this.dom.center);
	  this.dom.leftContainer.appendChild(this.dom.left);
	  this.dom.rightContainer.appendChild(this.dom.right);
	  this.dom.centerContainer.appendChild(this.dom.shadowTop);
	  this.dom.centerContainer.appendChild(this.dom.shadowBottom);
	  this.dom.leftContainer.appendChild(this.dom.shadowTopLeft);
	  this.dom.leftContainer.appendChild(this.dom.shadowBottomLeft);
	  this.dom.rightContainer.appendChild(this.dom.shadowTopRight);
	  this.dom.rightContainer.appendChild(this.dom.shadowBottomRight);

	  // size properties of each of the panels
	  this.props = {
	    root: {},
	    background: {},
	    centerContainer: {},
	    leftContainer: {},
	    rightContainer: {},
	    center: {},
	    left: {},
	    right: {},
	    top: {},
	    bottom: {},
	    border: {},
	    scrollTop: 0,
	    scrollTopMin: 0
	  };

	  this.on('rangechange', function () {
	    if (this.initialDrawDone === true) {
	      this._redraw();
	    }
	  }.bind(this));
	  this.on('rangechanged', function () {
	    if (!this.initialRangeChangeDone) {
	      this.initialRangeChangeDone = true;
	    }
	  }.bind(this));
	  this.on('touch', this._onTouch.bind(this));
	  this.on('panmove', this._onDrag.bind(this));

	  var me = this;
	  this._origRedraw = this._redraw.bind(this);
	  this._redraw = util.throttle(this._origRedraw);

	  this.on('_change', function (properties) {
	    if (me.itemSet && me.itemSet.initialItemSetDrawn && properties && properties.queue == true) {
	      me._redraw();
	    } else {
	      me._origRedraw();
	    }
	  });

	  // create event listeners for all interesting events, these events will be
	  // emitted via emitter
	  this.hammer = new Hammer(this.dom.root);
	  var pinchRecognizer = this.hammer.get('pinch').set({ enable: true });
	  hammerUtil.disablePreventDefaultVertically(pinchRecognizer);
	  this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_HORIZONTAL });
	  this.listeners = {};

	  var events = ['tap', 'doubletap', 'press', 'pinch', 'pan', 'panstart', 'panmove', 'panend'
	  // TODO: cleanup
	  //'touch', 'pinch',
	  //'tap', 'doubletap', 'hold',
	  //'dragstart', 'drag', 'dragend',
	  //'mousewheel', 'DOMMouseScroll' // DOMMouseScroll is needed for Firefox
	  ];
	  events.forEach(function (type) {
	    var listener = function listener(event) {
	      if (me.isActive()) {
	        me.emit(type, event);
	      }
	    };
	    me.hammer.on(type, listener);
	    me.listeners[type] = listener;
	  });

	  // emulate a touch event (emitted before the start of a pan, pinch, tap, or press)
	  hammerUtil.onTouch(this.hammer, function (event) {
	    me.emit('touch', event);
	  }.bind(this));

	  // emulate a release event (emitted after a pan, pinch, tap, or press)
	  hammerUtil.onRelease(this.hammer, function (event) {
	    me.emit('release', event);
	  }.bind(this));

	  /**
	   *
	   * @param {WheelEvent} event
	   */
	  function onMouseWheel(event) {
	    if (this.isActive()) {
	      this.emit('mousewheel', event);
	    }

	    // deltaX and deltaY normalization from jquery.mousewheel.js
	    var deltaX = 0;
	    var deltaY = 0;

	    // Old school scrollwheel delta
	    if ('detail' in event) {
	      deltaY = event.detail * -1;
	    }
	    if ('wheelDelta' in event) {
	      deltaY = event.wheelDelta;
	    }
	    if ('wheelDeltaY' in event) {
	      deltaY = event.wheelDeltaY;
	    }
	    if ('wheelDeltaX' in event) {
	      deltaX = event.wheelDeltaX * -1;
	    }

	    // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
	    if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {
	      deltaX = deltaY * -1;
	      deltaY = 0;
	    }

	    // New school wheel delta (wheel event)
	    if ('deltaY' in event) {
	      deltaY = event.deltaY * -1;
	    }
	    if ('deltaX' in event) {
	      deltaX = event.deltaX;
	    }

	    // prevent scrolling when zoomKey defined or activated
	    if (!this.options.zoomKey || event[this.options.zoomKey]) return;

	    // Prevent default actions caused by mouse wheel
	    // (else the page and timeline both scroll)
	    event.preventDefault();

	    if (this.options.verticalScroll && Math.abs(deltaY) >= Math.abs(deltaX)) {
	      var current = this.props.scrollTop;
	      var adjusted = current + deltaY;

	      if (this.isActive()) {
	        this._setScrollTop(adjusted);
	        this._redraw();
	        this.emit('scroll', event);
	      }
	    } else if (this.options.horizontalScroll) {
	      var delta = Math.abs(deltaX) >= Math.abs(deltaY) ? deltaX : deltaY;

	      // calculate a single scroll jump relative to the range scale
	      var diff = delta / 120 * (this.range.end - this.range.start) / 20;
	      // calculate new start and end
	      var newStart = this.range.start + diff;
	      var newEnd = this.range.end + diff;

	      var options = {
	        animation: false,
	        byUser: true,
	        event: event
	      };
	      this.range.setRange(newStart, newEnd, options);
	    }
	  }

	  if (this.dom.centerContainer.addEventListener) {
	    // IE9, Chrome, Safari, Opera
	    this.dom.centerContainer.addEventListener("mousewheel", onMouseWheel.bind(this), false);
	    // Firefox
	    this.dom.centerContainer.addEventListener("DOMMouseScroll", onMouseWheel.bind(this), false);
	  } else {
	    // IE 6/7/8
	    this.dom.centerContainer.attachEvent("onmousewheel", onMouseWheel.bind(this));
	  }

	  /**
	   *
	   * @param {scroll} event
	   */
	  function onMouseScrollSide(event) {
	    if (!me.options.verticalScroll) return;
	    event.preventDefault();
	    if (me.isActive()) {
	      var adjusted = -event.target.scrollTop;
	      me._setScrollTop(adjusted);
	      me._redraw();
	      me.emit('scrollSide', event);
	    }
	  }

	  this.dom.left.parentNode.addEventListener('scroll', onMouseScrollSide.bind(this));
	  this.dom.right.parentNode.addEventListener('scroll', onMouseScrollSide.bind(this));

	  var itemAddedToTimeline = false;

	  /**
	   *
	   * @param {dragover} event
	   * @returns {boolean}
	   */
	  function handleDragOver(event) {
	    if (event.preventDefault) {
	      event.preventDefault(); // Necessary. Allows us to drop.
	    }

	    // make sure your target is a vis element
	    if (!event.target.className.indexOf("vis") > -1) return;

	    // make sure only one item is added every time you're over the timeline
	    if (itemAddedToTimeline) return;

	    event.dataTransfer.dropEffect = 'move';
	    itemAddedToTimeline = true;
	    return false;
	  }

	  /**
	   *
	   * @param {drop} event
	   * @returns {boolean}
	   */
	  function handleDrop(event) {
	    // prevent redirect to blank page - Firefox
	    if (event.preventDefault) {
	      event.preventDefault();
	    }
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    }
	    // return when dropping non-vis items
	    try {
	      var itemData = JSON.parse(event.dataTransfer.getData("text"));
	      if (!itemData || !itemData.content) return;
	    } catch (err) {
	      return false;
	    }

	    itemAddedToTimeline = false;
	    event.center = {
	      x: event.clientX,
	      y: event.clientY
	    };

	    if (itemData.target !== 'item') {
	      me.itemSet._onAddItem(event);
	    } else {
	      me.itemSet._onDropObjectOnItem(event);
	    }
	    me.emit('drop', me.getEventProperties(event));
	    return false;
	  }

	  this.dom.center.addEventListener('dragover', handleDragOver.bind(this), false);
	  this.dom.center.addEventListener('drop', handleDrop.bind(this), false);

	  this.customTimes = [];

	  // store state information needed for touch events
	  this.touch = {};

	  this.redrawCount = 0;
	  this.initialDrawDone = false;
	  this.initialRangeChangeDone = false;

	  // attach the root panel to the provided container
	  if (!container) throw new Error('No container provided');
	  container.appendChild(this.dom.root);
	};

	/**
	 * Set options. Options will be passed to all components loaded in the Timeline.
	 * @param {Object} [options]
	 *                           {String} orientation
	 *                              Vertical orientation for the Timeline,
	 *                              can be 'bottom' (default) or 'top'.
	 *                           {string | number} width
	 *                              Width for the timeline, a number in pixels or
	 *                              a css string like '1000px' or '75%'. '100%' by default.
	 *                           {string | number} height
	 *                              Fixed height for the Timeline, a number in pixels or
	 *                              a css string like '400px' or '75%'. If undefined,
	 *                              The Timeline will automatically size such that
	 *                              its contents fit.
	 *                           {string | number} minHeight
	 *                              Minimum height for the Timeline, a number in pixels or
	 *                              a css string like '400px' or '75%'.
	 *                           {string | number} maxHeight
	 *                              Maximum height for the Timeline, a number in pixels or
	 *                              a css string like '400px' or '75%'.
	 *                           {number | Date | string} start
	 *                              Start date for the visible window
	 *                           {number | Date | string} end
	 *                              End date for the visible window
	 */
	Core.prototype.setOptions = function (options) {
	  if (options) {
	    // copy the known options
	    var fields = ['width', 'height', 'minHeight', 'maxHeight', 'autoResize', 'start', 'end', 'clickToUse', 'dataAttributes', 'hiddenDates', 'locale', 'locales', 'moment', 'rtl', 'zoomKey', 'horizontalScroll', 'verticalScroll'];
	    util.selectiveExtend(fields, this.options, options);

	    this.dom.rollingModeBtn.style.visibility = 'hidden';

	    if (this.options.rtl) {
	      this.dom.container.style.direction = "rtl";
	      this.dom.backgroundVertical.className = 'vis-panel vis-background vis-vertical-rtl';
	    }

	    if (this.options.verticalScroll) {
	      if (this.options.rtl) {
	        this.dom.rightContainer.className = 'vis-panel vis-right vis-vertical-scroll';
	      } else {
	        this.dom.leftContainer.className = 'vis-panel vis-left vis-vertical-scroll';
	      }
	    }

	    if ((0, _typeof3['default'])(this.options.orientation) !== 'object') {
	      this.options.orientation = { item: undefined, axis: undefined };
	    }
	    if ('orientation' in options) {
	      if (typeof options.orientation === 'string') {
	        this.options.orientation = {
	          item: options.orientation,
	          axis: options.orientation
	        };
	      } else if ((0, _typeof3['default'])(options.orientation) === 'object') {
	        if ('item' in options.orientation) {
	          this.options.orientation.item = options.orientation.item;
	        }
	        if ('axis' in options.orientation) {
	          this.options.orientation.axis = options.orientation.axis;
	        }
	      }
	    }

	    if (this.options.orientation.axis === 'both') {
	      if (!this.timeAxis2) {
	        var timeAxis2 = this.timeAxis2 = new TimeAxis(this.body);
	        timeAxis2.setOptions = function (options) {
	          var _options = options ? util.extend({}, options) : {};
	          _options.orientation = 'top'; // override the orientation option, always top
	          TimeAxis.prototype.setOptions.call(timeAxis2, _options);
	        };
	        this.components.push(timeAxis2);
	      }
	    } else {
	      if (this.timeAxis2) {
	        var index = this.components.indexOf(this.timeAxis2);
	        if (index !== -1) {
	          this.components.splice(index, 1);
	        }
	        this.timeAxis2.destroy();
	        this.timeAxis2 = null;
	      }
	    }

	    // if the graph2d's drawPoints is a function delegate the callback to the onRender property
	    if (typeof options.drawPoints == 'function') {
	      options.drawPoints = {
	        onRender: options.drawPoints
	      };
	    }

	    if ('hiddenDates' in this.options) {
	      DateUtil.convertHiddenOptions(this.options.moment, this.body, this.options.hiddenDates);
	    }

	    if ('clickToUse' in options) {
	      if (options.clickToUse) {
	        if (!this.activator) {
	          this.activator = new Activator(this.dom.root);
	        }
	      } else {
	        if (this.activator) {
	          this.activator.destroy();
	          delete this.activator;
	        }
	      }
	    }

	    if ('showCustomTime' in options) {
	      throw new Error('Option `showCustomTime` is deprecated. Create a custom time bar via timeline.addCustomTime(time [, id])');
	    }

	    // enable/disable autoResize
	    this._initAutoResize();
	  }

	  // propagate options to all components
	  this.components.forEach(function (component) {
	    return component.setOptions(options);
	  });

	  // enable/disable configure
	  if ('configure' in options) {
	    if (!this.configurator) {
	      this.configurator = this._createConfigurator();
	    }

	    this.configurator.setOptions(options.configure);

	    // collect the settings of all components, and pass them to the configuration system
	    var appliedOptions = util.deepExtend({}, this.options);
	    this.components.forEach(function (component) {
	      util.deepExtend(appliedOptions, component.options);
	    });
	    this.configurator.setModuleOptions({ global: appliedOptions });
	  }

	  this._redraw();
	};

	/**
	 * Returns true when the Timeline is active.
	 * @returns {boolean}
	 */
	Core.prototype.isActive = function () {
	  return !this.activator || this.activator.active;
	};

	/**
	 * Destroy the Core, clean up all DOM elements and event listeners.
	 */
	Core.prototype.destroy = function () {
	  // unbind datasets
	  this.setItems(null);
	  this.setGroups(null);

	  // remove all event listeners
	  this.off();

	  // stop checking for changed size
	  this._stopAutoResize();

	  // remove from DOM
	  if (this.dom.root.parentNode) {
	    this.dom.root.parentNode.removeChild(this.dom.root);
	  }
	  this.dom = null;

	  // remove Activator
	  if (this.activator) {
	    this.activator.destroy();
	    delete this.activator;
	  }

	  // cleanup hammer touch events
	  for (var event in this.listeners) {
	    if (this.listeners.hasOwnProperty(event)) {
	      delete this.listeners[event];
	    }
	  }
	  this.listeners = null;
	  this.hammer = null;

	  // give all components the opportunity to cleanup
	  this.components.forEach(function (component) {
	    return component.destroy();
	  });

	  this.body = null;
	};

	/**
	 * Set a custom time bar
	 * @param {Date} time
	 * @param {number} [id=undefined] Optional id of the custom time bar to be adjusted.
	 */
	Core.prototype.setCustomTime = function (time, id) {
	  var customTimes = this.customTimes.filter(function (component) {
	    return id === component.options.id;
	  });

	  if (customTimes.length === 0) {
	    throw new Error('No custom time bar found with id ' + (0, _stringify2['default'])(id));
	  }

	  if (customTimes.length > 0) {
	    customTimes[0].setCustomTime(time);
	  }
	};

	/**
	 * Retrieve the current custom time.
	 * @param {number} [id=undefined]    Id of the custom time bar.
	 * @return {Date | undefined} customTime
	 */
	Core.prototype.getCustomTime = function (id) {
	  var customTimes = this.customTimes.filter(function (component) {
	    return component.options.id === id;
	  });

	  if (customTimes.length === 0) {
	    throw new Error('No custom time bar found with id ' + (0, _stringify2['default'])(id));
	  }
	  return customTimes[0].getCustomTime();
	};

	/**
	 * Set a custom title for the custom time bar.
	 * @param {string} [title] Custom title
	 * @param {number} [id=undefined]    Id of the custom time bar.
	 * @returns {*}
	 */
	Core.prototype.setCustomTimeTitle = function (title, id) {
	  var customTimes = this.customTimes.filter(function (component) {
	    return component.options.id === id;
	  });

	  if (customTimes.length === 0) {
	    throw new Error('No custom time bar found with id ' + (0, _stringify2['default'])(id));
	  }
	  if (customTimes.length > 0) {
	    return customTimes[0].setCustomTitle(title);
	  }
	};

	/**
	 * Retrieve meta information from an event.
	 * Should be overridden by classes extending Core
	 * @param {Event} event
	 * @return {Object} An object with related information.
	 */
	Core.prototype.getEventProperties = function (event) {
	  return { event: event };
	};

	/**
	 * Add custom vertical bar
	 * @param {Date | string | number} [time]  A Date, unix timestamp, or
	 *                                         ISO date string. Time point where
	 *                                         the new bar should be placed.
	 *                                         If not provided, `new Date()` will
	 *                                         be used.
	 * @param {number | string} [id=undefined] Id of the new bar. Optional
	 * @return {number | string}               Returns the id of the new bar
	 */
	Core.prototype.addCustomTime = function (time, id) {
	  var timestamp = time !== undefined ? util.convert(time, 'Date').valueOf() : new Date();

	  var exists = this.customTimes.some(function (customTime) {
	    return customTime.options.id === id;
	  });
	  if (exists) {
	    throw new Error('A custom time with id ' + (0, _stringify2['default'])(id) + ' already exists');
	  }

	  var customTime = new CustomTime(this.body, util.extend({}, this.options, {
	    time: timestamp,
	    id: id
	  }));

	  this.customTimes.push(customTime);
	  this.components.push(customTime);
	  this._redraw();

	  return id;
	};

	/**
	 * Remove previously added custom bar
	 * @param {int} id ID of the custom bar to be removed
	 * [at]returns {boolean} True if the bar exists and is removed, false otherwise
	 */
	Core.prototype.removeCustomTime = function (id) {
	  var customTimes = this.customTimes.filter(function (bar) {
	    return bar.options.id === id;
	  });

	  if (customTimes.length === 0) {
	    throw new Error('No custom time bar found with id ' + (0, _stringify2['default'])(id));
	  }

	  customTimes.forEach(function (customTime) {
	    this.customTimes.splice(this.customTimes.indexOf(customTime), 1);
	    this.components.splice(this.components.indexOf(customTime), 1);
	    customTime.destroy();
	  }.bind(this));
	};

	/**
	 * Get the id's of the currently visible items.
	 * @returns {Array} The ids of the visible items
	 */
	Core.prototype.getVisibleItems = function () {
	  return this.itemSet && this.itemSet.getVisibleItems() || [];
	};

	/**
	 * Set Core window such that it fits all items
	 * @param {Object} [options]  Available options:
	 *                                `animation: boolean | {duration: number, easingFunction: string}`
	 *                                    If true (default), the range is animated
	 *                                    smoothly to the new window. An object can be
	 *                                    provided to specify duration and easing function.
	 *                                    Default duration is 500 ms, and default easing
	 *                                    function is 'easeInOutQuad'.
	 * @param {function} [callback] a callback funtion to be executed at the end of this function
	 */
	Core.prototype.fit = function (options, callback) {
	  var range = this.getDataRange();

	  // skip range set if there is no min and max date
	  if (range.min === null && range.max === null) {
	    return;
	  }

	  // apply a margin of 1% left and right of the data
	  var interval = range.max - range.min;
	  var min = new Date(range.min.valueOf() - interval * 0.01);
	  var max = new Date(range.max.valueOf() + interval * 0.01);
	  var animation = options && options.animation !== undefined ? options.animation : true;
	  this.range.setRange(min, max, { animation: animation }, callback);
	};

	/**
	 * Calculate the data range of the items start and end dates
	 * [at]returns {{min: [Date], max: [Date]}}
	 * @protected
	 */
	Core.prototype.getDataRange = function () {
	  // must be implemented by Timeline and Graph2d
	  throw new Error('Cannot invoke abstract method getDataRange');
	};

	/**
	 * Set the visible window. Both parameters are optional, you can change only
	 * start or only end. Syntax:
	 *
	 *     TimeLine.setWindow(start, end)
	 *     TimeLine.setWindow(start, end, options)
	 *     TimeLine.setWindow(range)
	 *
	 * Where start and end can be a Date, number, or string, and range is an
	 * object with properties start and end.
	 *
	 * @param {Date | number | string | Object} [start] Start date of visible window
	 * @param {Date | number | string} [end]            End date of visible window
	 * @param {Object} [options]  Available options:
	 *                                `animation: boolean | {duration: number, easingFunction: string}`
	 *                                    If true (default), the range is animated
	 *                                    smoothly to the new window. An object can be
	 *                                    provided to specify duration and easing function.
	 *                                    Default duration is 500 ms, and default easing
	 *                                    function is 'easeInOutQuad'.
	 * @param {function} [callback] a callback funtion to be executed at the end of this function
	 */
	Core.prototype.setWindow = function (start, end, options, callback) {
	  if (typeof arguments[2] == "function") {
	    callback = arguments[2];
	    options = {};
	  }
	  var animation;
	  var range;
	  if (arguments.length == 1) {
	    range = arguments[0];
	    animation = range.animation !== undefined ? range.animation : true;
	    this.range.setRange(range.start, range.end, { animation: animation });
	  } else if (arguments.length == 2 && typeof arguments[1] == "function") {
	    range = arguments[0];
	    callback = arguments[1];
	    animation = range.animation !== undefined ? range.animation : true;
	    this.range.setRange(range.start, range.end, { animation: animation }, callback);
	  } else {
	    animation = options && options.animation !== undefined ? options.animation : true;
	    this.range.setRange(start, end, { animation: animation }, callback);
	  }
	};

	/**
	 * Move the window such that given time is centered on screen.
	 * @param {Date | number | string} time
	 * @param {Object} [options]  Available options:
	 *                                `animation: boolean | {duration: number, easingFunction: string}`
	 *                                    If true (default), the range is animated
	 *                                    smoothly to the new window. An object can be
	 *                                    provided to specify duration and easing function.
	 *                                    Default duration is 500 ms, and default easing
	 *                                    function is 'easeInOutQuad'.
	 * @param {function} [callback] a callback funtion to be executed at the end of this function
	 */
	Core.prototype.moveTo = function (time, options, callback) {
	  if (typeof arguments[1] == "function") {
	    callback = arguments[1];
	    options = {};
	  }
	  var interval = this.range.end - this.range.start;
	  var t = util.convert(time, 'Date').valueOf();

	  var start = t - interval / 2;
	  var end = t + interval / 2;
	  var animation = options && options.animation !== undefined ? options.animation : true;

	  this.range.setRange(start, end, { animation: animation }, callback);
	};

	/**
	 * Get the visible window
	 * @return {{start: Date, end: Date}}   Visible range
	 */
	Core.prototype.getWindow = function () {
	  var range = this.range.getRange();
	  return {
	    start: new Date(range.start),
	    end: new Date(range.end)
	  };
	};

	/**
	 * Zoom in the window such that given time is centered on screen.
	 * @param {number} percentage - must be between [0..1]
	 * @param {Object} [options]  Available options:
	 *                                `animation: boolean | {duration: number, easingFunction: string}`
	 *                                    If true (default), the range is animated
	 *                                    smoothly to the new window. An object can be
	 *                                    provided to specify duration and easing function.
	 *                                    Default duration is 500 ms, and default easing
	 *                                    function is 'easeInOutQuad'.
	 * @param {function} [callback] a callback funtion to be executed at the end of this function
	 */
	Core.prototype.zoomIn = function (percentage, options, callback) {
	  if (!percentage || percentage < 0 || percentage > 1) return;
	  if (typeof arguments[1] == "function") {
	    callback = arguments[1];
	    options = {};
	  }
	  var range = this.getWindow();
	  var start = range.start.valueOf();
	  var end = range.end.valueOf();
	  var interval = end - start;
	  var newInterval = interval / (1 + percentage);
	  var distance = (interval - newInterval) / 2;
	  var newStart = start + distance;
	  var newEnd = end - distance;

	  this.setWindow(newStart, newEnd, options, callback);
	};

	/**
	 * Zoom out the window such that given time is centered on screen.
	 * @param {number} percentage - must be between [0..1]
	 * @param {Object} [options]  Available options:
	 *                                `animation: boolean | {duration: number, easingFunction: string}`
	 *                                    If true (default), the range is animated
	 *                                    smoothly to the new window. An object can be
	 *                                    provided to specify duration and easing function.
	 *                                    Default duration is 500 ms, and default easing
	 *                                    function is 'easeInOutQuad'.
	 * @param {function} [callback] a callback funtion to be executed at the end of this function
	 */
	Core.prototype.zoomOut = function (percentage, options, callback) {
	  if (!percentage || percentage < 0 || percentage > 1) return;
	  if (typeof arguments[1] == "function") {
	    callback = arguments[1];
	    options = {};
	  }
	  var range = this.getWindow();
	  var start = range.start.valueOf();
	  var end = range.end.valueOf();
	  var interval = end - start;
	  var newStart = start - interval * percentage / 2;
	  var newEnd = end + interval * percentage / 2;

	  this.setWindow(newStart, newEnd, options, callback);
	};

	/**
	 * Force a redraw. Can be overridden by implementations of Core
	 *
	 * Note: this function will be overridden on construction with a trottled version
	 */
	Core.prototype.redraw = function () {
	  this._redraw();
	};

	/**
	 * Redraw for internal use. Redraws all components. See also the public
	 * method redraw.
	 * @protected
	 */
	Core.prototype._redraw = function () {
	  this.redrawCount++;
	  var resized = false;
	  var options = this.options;
	  var props = this.props;
	  var dom = this.dom;

	  if (!dom || !dom.container || dom.root.offsetWidth == 0) return; // when destroyed, or invisible

	  DateUtil.updateHiddenDates(this.options.moment, this.body, this.options.hiddenDates);

	  // update class names
	  if (options.orientation == 'top') {
	    util.addClassName(dom.root, 'vis-top');
	    util.removeClassName(dom.root, 'vis-bottom');
	  } else {
	    util.removeClassName(dom.root, 'vis-top');
	    util.addClassName(dom.root, 'vis-bottom');
	  }

	  // update root width and height options
	  dom.root.style.maxHeight = util.option.asSize(options.maxHeight, '');
	  dom.root.style.minHeight = util.option.asSize(options.minHeight, '');
	  dom.root.style.width = util.option.asSize(options.width, '');

	  // calculate border widths
	  props.border.left = (dom.centerContainer.offsetWidth - dom.centerContainer.clientWidth) / 2;
	  props.border.right = props.border.left;
	  props.border.top = (dom.centerContainer.offsetHeight - dom.centerContainer.clientHeight) / 2;
	  props.border.bottom = props.border.top;
	  props.borderRootHeight = dom.root.offsetHeight - dom.root.clientHeight;
	  props.borderRootWidth = dom.root.offsetWidth - dom.root.clientWidth;

	  // workaround for a bug in IE: the clientWidth of an element with
	  // a height:0px and overflow:hidden is not calculated and always has value 0
	  if (dom.centerContainer.clientHeight === 0) {
	    props.border.left = props.border.top;
	    props.border.right = props.border.left;
	  }
	  if (dom.root.clientHeight === 0) {
	    props.borderRootWidth = props.borderRootHeight;
	  }

	  // calculate the heights. If any of the side panels is empty, we set the height to
	  // minus the border width, such that the border will be invisible
	  props.center.height = dom.center.offsetHeight;
	  props.left.height = dom.left.offsetHeight;
	  props.right.height = dom.right.offsetHeight;
	  props.top.height = dom.top.clientHeight || -props.border.top;
	  props.bottom.height = dom.bottom.clientHeight || -props.border.bottom;

	  // TODO: compensate borders when any of the panels is empty.

	  // apply auto height
	  // TODO: only calculate autoHeight when needed (else we cause an extra reflow/repaint of the DOM)
	  var contentHeight = Math.max(props.left.height, props.center.height, props.right.height);
	  var autoHeight = props.top.height + contentHeight + props.bottom.height + props.borderRootHeight + props.border.top + props.border.bottom;
	  dom.root.style.height = util.option.asSize(options.height, autoHeight + 'px');

	  // calculate heights of the content panels
	  props.root.height = dom.root.offsetHeight;
	  props.background.height = props.root.height - props.borderRootHeight;
	  var containerHeight = props.root.height - props.top.height - props.bottom.height - props.borderRootHeight;
	  props.centerContainer.height = containerHeight;
	  props.leftContainer.height = containerHeight;
	  props.rightContainer.height = props.leftContainer.height;

	  // calculate the widths of the panels
	  props.root.width = dom.root.offsetWidth;
	  props.background.width = props.root.width - props.borderRootWidth;

	  if (!this.initialDrawDone) {
	    props.scrollbarWidth = util.getScrollBarWidth();
	  }

	  if (options.verticalScroll) {
	    if (options.rtl) {
	      props.left.width = dom.leftContainer.clientWidth || -props.border.left;
	      props.right.width = dom.rightContainer.clientWidth + props.scrollbarWidth || -props.border.right;
	    } else {
	      props.left.width = dom.leftContainer.clientWidth + props.scrollbarWidth || -props.border.left;
	      props.right.width = dom.rightContainer.clientWidth || -props.border.right;
	    }
	  } else {
	    props.left.width = dom.leftContainer.clientWidth || -props.border.left;
	    props.right.width = dom.rightContainer.clientWidth || -props.border.right;
	  }

	  this._setDOM();

	  // update the scrollTop, feasible range for the offset can be changed
	  // when the height of the Core or of the contents of the center changed
	  var offset = this._updateScrollTop();

	  // reposition the scrollable contents
	  if (options.orientation.item != 'top') {
	    offset += Math.max(props.centerContainer.height - props.center.height - props.border.top - props.border.bottom, 0);
	  }
	  dom.center.style.top = offset + 'px';

	  // show shadows when vertical scrolling is available
	  var visibilityTop = props.scrollTop == 0 ? 'hidden' : '';
	  var visibilityBottom = props.scrollTop == props.scrollTopMin ? 'hidden' : '';
	  dom.shadowTop.style.visibility = visibilityTop;
	  dom.shadowBottom.style.visibility = visibilityBottom;
	  dom.shadowTopLeft.style.visibility = visibilityTop;
	  dom.shadowBottomLeft.style.visibility = visibilityBottom;
	  dom.shadowTopRight.style.visibility = visibilityTop;
	  dom.shadowBottomRight.style.visibility = visibilityBottom;

	  if (options.verticalScroll) {
	    dom.rightContainer.className = 'vis-panel vis-right vis-vertical-scroll';
	    dom.leftContainer.className = 'vis-panel vis-left vis-vertical-scroll';

	    dom.shadowTopRight.style.visibility = "hidden";
	    dom.shadowBottomRight.style.visibility = "hidden";
	    dom.shadowTopLeft.style.visibility = "hidden";
	    dom.shadowBottomLeft.style.visibility = "hidden";

	    dom.left.style.top = '0px';
	    dom.right.style.top = '0px';
	  }

	  if (!options.verticalScroll || props.center.height < props.centerContainer.height) {
	    dom.left.style.top = offset + 'px';
	    dom.right.style.top = offset + 'px';
	    dom.rightContainer.className = dom.rightContainer.className.replace(new RegExp('(?:^|\\s)' + 'vis-vertical-scroll' + '(?:\\s|$)'), ' ');
	    dom.leftContainer.className = dom.leftContainer.className.replace(new RegExp('(?:^|\\s)' + 'vis-vertical-scroll' + '(?:\\s|$)'), ' ');
	    props.left.width = dom.leftContainer.clientWidth || -props.border.left;
	    props.right.width = dom.rightContainer.clientWidth || -props.border.right;
	    this._setDOM();
	  }

	  // enable/disable vertical panning
	  var contentsOverflow = props.center.height > props.centerContainer.height;
	  this.hammer.get('pan').set({
	    direction: contentsOverflow ? Hammer.DIRECTION_ALL : Hammer.DIRECTION_HORIZONTAL
	  });

	  // redraw all components
	  this.components.forEach(function (component) {
	    resized = component.redraw() || resized;
	  });
	  var MAX_REDRAW = 5;
	  if (resized) {
	    if (this.redrawCount < MAX_REDRAW) {
	      this.body.emitter.emit('_change');
	      return;
	    } else {
	      console.log('WARNING: infinite loop in redraw?');
	    }
	  } else {
	    this.redrawCount = 0;
	  }

	  //Emit public 'changed' event for UI updates, see issue #1592
	  this.body.emitter.emit("changed");
	};

	Core.prototype._setDOM = function () {
	  var props = this.props;
	  var dom = this.dom;

	  props.leftContainer.width = props.left.width;
	  props.rightContainer.width = props.right.width;
	  var centerWidth = props.root.width - props.left.width - props.right.width - props.borderRootWidth;
	  props.center.width = centerWidth;
	  props.centerContainer.width = centerWidth;
	  props.top.width = centerWidth;
	  props.bottom.width = centerWidth;

	  // resize the panels
	  dom.background.style.height = props.background.height + 'px';
	  dom.backgroundVertical.style.height = props.background.height + 'px';
	  dom.backgroundHorizontal.style.height = props.centerContainer.height + 'px';
	  dom.centerContainer.style.height = props.centerContainer.height + 'px';
	  dom.leftContainer.style.height = props.leftContainer.height + 'px';
	  dom.rightContainer.style.height = props.rightContainer.height + 'px';

	  dom.background.style.width = props.background.width + 'px';
	  dom.backgroundVertical.style.width = props.centerContainer.width + 'px';
	  dom.backgroundHorizontal.style.width = props.background.width + 'px';
	  dom.centerContainer.style.width = props.center.width + 'px';
	  dom.top.style.width = props.top.width + 'px';
	  dom.bottom.style.width = props.bottom.width + 'px';

	  // reposition the panels
	  dom.background.style.left = '0';
	  dom.background.style.top = '0';
	  dom.backgroundVertical.style.left = props.left.width + props.border.left + 'px';
	  dom.backgroundVertical.style.top = '0';
	  dom.backgroundHorizontal.style.left = '0';
	  dom.backgroundHorizontal.style.top = props.top.height + 'px';
	  dom.centerContainer.style.left = props.left.width + 'px';
	  dom.centerContainer.style.top = props.top.height + 'px';
	  dom.leftContainer.style.left = '0';
	  dom.leftContainer.style.top = props.top.height + 'px';
	  dom.rightContainer.style.left = props.left.width + props.center.width + 'px';
	  dom.rightContainer.style.top = props.top.height + 'px';
	  dom.top.style.left = props.left.width + 'px';
	  dom.top.style.top = '0';
	  dom.bottom.style.left = props.left.width + 'px';
	  dom.bottom.style.top = props.top.height + props.centerContainer.height + 'px';
	  dom.center.style.left = '0';
	  dom.left.style.left = '0';
	  dom.right.style.left = '0';
	};

	// TODO: deprecated since version 1.1.0, remove some day
	Core.prototype.repaint = function () {
	  throw new Error('Function repaint is deprecated. Use redraw instead.');
	};

	/**
	 * Set a current time. This can be used for example to ensure that a client's
	 * time is synchronized with a shared server time.
	 * Only applicable when option `showCurrentTime` is true.
	 * @param {Date | string | number} time     A Date, unix timestamp, or
	 *                                          ISO date string.
	 */
	Core.prototype.setCurrentTime = function (time) {
	  if (!this.currentTime) {
	    throw new Error('Option showCurrentTime must be true');
	  }

	  this.currentTime.setCurrentTime(time);
	};

	/**
	 * Get the current time.
	 * Only applicable when option `showCurrentTime` is true.
	 * @return {Date} Returns the current time.
	 */
	Core.prototype.getCurrentTime = function () {
	  if (!this.currentTime) {
	    throw new Error('Option showCurrentTime must be true');
	  }

	  return this.currentTime.getCurrentTime();
	};

	/**
	 * Convert a position on screen (pixels) to a datetime
	 * @param {int}     x    Position on the screen in pixels
	 * @return {Date}   time The datetime the corresponds with given position x
	 * @protected
	 */
	// TODO: move this function to Range
	Core.prototype._toTime = function (x) {
	  return DateUtil.toTime(this, x, this.props.center.width);
	};

	/**
	 * Convert a position on the global screen (pixels) to a datetime
	 * @param {int}     x    Position on the screen in pixels
	 * @return {Date}   time The datetime the corresponds with given position x
	 * @protected
	 */
	// TODO: move this function to Range
	Core.prototype._toGlobalTime = function (x) {
	  return DateUtil.toTime(this, x, this.props.root.width);
	  //var conversion = this.range.conversion(this.props.root.width);
	  //return new Date(x / conversion.scale + conversion.offset);
	};

	/**
	 * Convert a datetime (Date object) into a position on the screen
	 * @param {Date}   time A date
	 * @return {int}   x    The position on the screen in pixels which corresponds
	 *                      with the given date.
	 * @protected
	 */
	// TODO: move this function to Range
	Core.prototype._toScreen = function (time) {
	  return DateUtil.toScreen(this, time, this.props.center.width);
	};

	/**
	 * Convert a datetime (Date object) into a position on the root
	 * This is used to get the pixel density estimate for the screen, not the center panel
	 * @param {Date}   time A date
	 * @return {int}   x    The position on root in pixels which corresponds
	 *                      with the given date.
	 * @protected
	 */
	// TODO: move this function to Range
	Core.prototype._toGlobalScreen = function (time) {
	  return DateUtil.toScreen(this, time, this.props.root.width);
	  //var conversion = this.range.conversion(this.props.root.width);
	  //return (time.valueOf() - conversion.offset) * conversion.scale;
	};

	/**
	 * Initialize watching when option autoResize is true
	 * @private
	 */
	Core.prototype._initAutoResize = function () {
	  if (this.options.autoResize == true) {
	    this._startAutoResize();
	  } else {
	    this._stopAutoResize();
	  }
	};

	/**
	 * Watch for changes in the size of the container. On resize, the Panel will
	 * automatically redraw itself.
	 * @private
	 */
	Core.prototype._startAutoResize = function () {
	  var me = this;

	  this._stopAutoResize();

	  this._onResize = function () {
	    if (me.options.autoResize != true) {
	      // stop watching when the option autoResize is changed to false
	      me._stopAutoResize();
	      return;
	    }

	    if (me.dom.root) {
	      // check whether the frame is resized
	      // Note: we compare offsetWidth here, not clientWidth. For some reason,
	      // IE does not restore the clientWidth from 0 to the actual width after
	      // changing the timeline's container display style from none to visible
	      if (me.dom.root.offsetWidth != me.props.lastWidth || me.dom.root.offsetHeight != me.props.lastHeight) {
	        me.props.lastWidth = me.dom.root.offsetWidth;
	        me.props.lastHeight = me.dom.root.offsetHeight;
	        me.props.scrollbarWidth = util.getScrollBarWidth();

	        me.body.emitter.emit('_change');
	      }
	    }
	  };

	  // add event listener to window resize
	  util.addEventListener(window, 'resize', this._onResize);

	  //Prevent initial unnecessary redraw
	  if (me.dom.root) {
	    me.props.lastWidth = me.dom.root.offsetWidth;
	    me.props.lastHeight = me.dom.root.offsetHeight;
	  }

	  this.watchTimer = setInterval(this._onResize, 1000);
	};

	/**
	 * Stop watching for a resize of the frame.
	 * @private
	 */
	Core.prototype._stopAutoResize = function () {
	  if (this.watchTimer) {
	    clearInterval(this.watchTimer);
	    this.watchTimer = undefined;
	  }

	  // remove event listener on window.resize
	  if (this._onResize) {
	    util.removeEventListener(window, 'resize', this._onResize);
	    this._onResize = null;
	  }
	};

	/**
	 * Start moving the timeline vertically
	 * @param {Event} event
	 * @private
	 */
	Core.prototype._onTouch = function (event) {
	  // eslint-disable-line no-unused-vars
	  this.touch.allowDragging = true;
	  this.touch.initialScrollTop = this.props.scrollTop;
	};

	/**
	 * Start moving the timeline vertically
	 * @param {Event} event
	 * @private
	 */
	Core.prototype._onPinch = function (event) {
	  // eslint-disable-line no-unused-vars
	  this.touch.allowDragging = false;
	};

	/**
	 * Move the timeline vertically
	 * @param {Event} event
	 * @private
	 */
	Core.prototype._onDrag = function (event) {
	  if (!event) return;
	  // refuse to drag when we where pinching to prevent the timeline make a jump
	  // when releasing the fingers in opposite order from the touch screen
	  if (!this.touch.allowDragging) return;

	  var delta = event.deltaY;

	  var oldScrollTop = this._getScrollTop();
	  var newScrollTop = this._setScrollTop(this.touch.initialScrollTop + delta);

	  if (this.options.verticalScroll) {
	    this.dom.left.parentNode.scrollTop = -this.props.scrollTop;
	    this.dom.right.parentNode.scrollTop = -this.props.scrollTop;
	  }

	  if (newScrollTop != oldScrollTop) {
	    this.emit("verticalDrag");
	  }
	};

	/**
	 * Apply a scrollTop
	 * @param {number} scrollTop
	 * @returns {number} scrollTop  Returns the applied scrollTop
	 * @private
	 */
	Core.prototype._setScrollTop = function (scrollTop) {
	  this.props.scrollTop = scrollTop;
	  this._updateScrollTop();
	  return this.props.scrollTop;
	};

	/**
	 * Update the current scrollTop when the height of  the containers has been changed
	 * @returns {number} scrollTop  Returns the applied scrollTop
	 * @private
	 */
	Core.prototype._updateScrollTop = function () {
	  // recalculate the scrollTopMin
	  var scrollTopMin = Math.min(this.props.centerContainer.height - this.props.center.height, 0); // is negative or zero
	  if (scrollTopMin != this.props.scrollTopMin) {
	    // in case of bottom orientation, change the scrollTop such that the contents
	    // do not move relative to the time axis at the bottom
	    if (this.options.orientation.item != 'top') {
	      this.props.scrollTop += scrollTopMin - this.props.scrollTopMin;
	    }
	    this.props.scrollTopMin = scrollTopMin;
	  }

	  // limit the scrollTop to the feasible scroll range
	  if (this.props.scrollTop > 0) this.props.scrollTop = 0;
	  if (this.props.scrollTop < scrollTopMin) this.props.scrollTop = scrollTopMin;

	  if (this.options.verticalScroll) {
	    this.dom.left.parentNode.scrollTop = -this.props.scrollTop;
	    this.dom.right.parentNode.scrollTop = -this.props.scrollTop;
	  }

	  return this.props.scrollTop;
	};

	/**
	 * Get the current scrollTop
	 * @returns {number} scrollTop
	 * @private
	 */
	Core.prototype._getScrollTop = function () {
	  return this.props.scrollTop;
	};

	/**
	 * Load a configurator
	 * [at]returns {Object}
	 * @private
	 */
	Core.prototype._createConfigurator = function () {
	  throw new Error('Cannot invoke abstract method _createConfigurator');
	};

	module.exports = Core;

	/***/ }),
	/* 66 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var moment = __webpack_require__(9);
	var DateUtil = __webpack_require__(36);
	var util = __webpack_require__(2);

	/**
	 * The class TimeStep is an iterator for dates. You provide a start date and an
	 * end date. The class itself determines the best scale (step size) based on the
	 * provided start Date, end Date, and minimumStep.
	 *
	 * If minimumStep is provided, the step size is chosen as close as possible
	 * to the minimumStep but larger than minimumStep. If minimumStep is not
	 * provided, the scale is set to 1 DAY.
	 * The minimumStep should correspond with the onscreen size of about 6 characters
	 *
	 * Alternatively, you can set a scale by hand.
	 * After creation, you can initialize the class by executing first(). Then you
	 * can iterate from the start date to the end date via next(). You can check if
	 * the end date is reached with the function hasNext(). After each step, you can
	 * retrieve the current date via getCurrent().
	 * The TimeStep has scales ranging from milliseconds, seconds, minutes, hours,
	 * days, to years.
	 *
	 * Version: 1.2
	 *
	 * @param {Date} [start]         The start date, for example new Date(2010, 9, 21)
	 *                               or new Date(2010, 9, 21, 23, 45, 00)
	 * @param {Date} [end]           The end date
	 * @param {number} [minimumStep] Optional. Minimum step size in milliseconds
	 * @param {Date|Array.<Date>} [hiddenDates] Optional.
	 * @param {{showMajorLabels: boolean}} [options] Optional.
	 * @constructor  TimeStep
	 */
	function TimeStep(start, end, minimumStep, hiddenDates, options) {
	  this.moment = moment;

	  // variables
	  this.current = this.moment();
	  this._start = this.moment();
	  this._end = this.moment();

	  this.autoScale = true;
	  this.scale = 'day';
	  this.step = 1;

	  // initialize the range
	  this.setRange(start, end, minimumStep);

	  // hidden Dates options
	  this.switchedDay = false;
	  this.switchedMonth = false;
	  this.switchedYear = false;
	  if (Array.isArray(hiddenDates)) {
	    this.hiddenDates = hiddenDates;
	  } else if (hiddenDates != undefined) {
	    this.hiddenDates = [hiddenDates];
	  } else {
	    this.hiddenDates = [];
	  }

	  this.format = TimeStep.FORMAT; // default formatting
	  this.options = options ? options : {};
	}

	// Time formatting
	TimeStep.FORMAT = {
	  minorLabels: {
	    millisecond: 'SSS',
	    second: 's',
	    minute: 'HH:mm',
	    hour: 'HH:mm',
	    weekday: 'ddd D',
	    day: 'D',
	    week: 'w',
	    month: 'MMM',
	    year: 'YYYY'
	  },
	  majorLabels: {
	    millisecond: 'HH:mm:ss',
	    second: 'D MMMM HH:mm',
	    minute: 'ddd D MMMM',
	    hour: 'ddd D MMMM',
	    weekday: 'MMMM YYYY',
	    day: 'MMMM YYYY',
	    week: 'MMMM YYYY',
	    month: 'YYYY',
	    year: ''
	  }
	};

	/**
	 * Set custom constructor function for moment. Can be used to set dates
	 * to UTC or to set a utcOffset.
	 * @param {function} moment
	 */
	TimeStep.prototype.setMoment = function (moment) {
	  this.moment = moment;

	  // update the date properties, can have a new utcOffset
	  this.current = this.moment(this.current.valueOf());
	  this._start = this.moment(this._start.valueOf());
	  this._end = this.moment(this._end.valueOf());
	};

	/**
	 * Set custom formatting for the minor an major labels of the TimeStep.
	 * Both `minorLabels` and `majorLabels` are an Object with properties:
	 * 'millisecond', 'second', 'minute', 'hour', 'weekday', 'day', 'week', 'month', 'year'.
	 * @param {{minorLabels: Object, majorLabels: Object}} format
	 */
	TimeStep.prototype.setFormat = function (format) {
	  var defaultFormat = util.deepExtend({}, TimeStep.FORMAT);
	  this.format = util.deepExtend(defaultFormat, format);
	};

	/**
	 * Set a new range
	 * If minimumStep is provided, the step size is chosen as close as possible
	 * to the minimumStep but larger than minimumStep. If minimumStep is not
	 * provided, the scale is set to 1 DAY.
	 * The minimumStep should correspond with the onscreen size of about 6 characters
	 * @param {Date} [start]      The start date and time.
	 * @param {Date} [end]        The end date and time.
	 * @param {int} [minimumStep] Optional. Minimum step size in milliseconds
	 */
	TimeStep.prototype.setRange = function (start, end, minimumStep) {
	  if (!(start instanceof Date) || !(end instanceof Date)) {
	    throw "No legal start or end date in method setRange";
	  }

	  this._start = start != undefined ? this.moment(start.valueOf()) : new Date();
	  this._end = end != undefined ? this.moment(end.valueOf()) : new Date();

	  if (this.autoScale) {
	    this.setMinimumStep(minimumStep);
	  }
	};

	/**
	 * Set the range iterator to the start date.
	 */
	TimeStep.prototype.start = function () {
	  this.current = this._start.clone();
	  this.roundToMinor();
	};

	/**
	 * Round the current date to the first minor date value
	 * This must be executed once when the current date is set to start Date
	 */
	TimeStep.prototype.roundToMinor = function () {
	  // round to floor
	  // to prevent year & month scales rounding down to the first day of week we perform this separately
	  if (this.scale == 'week') {
	    this.current.weekday(0);
	  }
	  // IMPORTANT: we have no breaks in this switch! (this is no bug)
	  // noinspection FallThroughInSwitchStatementJS
	  switch (this.scale) {
	    case 'year':
	      this.current.year(this.step * Math.floor(this.current.year() / this.step));
	      this.current.month(0);
	    case 'month':
	      this.current.date(1); // eslint-disable-line no-fallthrough
	    case 'week': // eslint-disable-line no-fallthrough
	    case 'day': // eslint-disable-line no-fallthrough
	    case 'weekday':
	      this.current.hours(0); // eslint-disable-line no-fallthrough
	    case 'hour':
	      this.current.minutes(0); // eslint-disable-line no-fallthrough
	    case 'minute':
	      this.current.seconds(0); // eslint-disable-line no-fallthrough
	    case 'second':
	      this.current.milliseconds(0); // eslint-disable-line no-fallthrough
	    //case 'millisecond': // nothing to do for milliseconds
	  }

	  if (this.step != 1) {
	    // round down to the first minor value that is a multiple of the current step size
	    switch (this.scale) {
	      case 'millisecond':
	        this.current.subtract(this.current.milliseconds() % this.step, 'milliseconds');break;
	      case 'second':
	        this.current.subtract(this.current.seconds() % this.step, 'seconds');break;
	      case 'minute':
	        this.current.subtract(this.current.minutes() % this.step, 'minutes');break;
	      case 'hour':
	        this.current.subtract(this.current.hours() % this.step, 'hours');break;
	      case 'weekday': // intentional fall through
	      case 'day':
	        this.current.subtract((this.current.date() - 1) % this.step, 'day');break;
	      case 'week':
	        this.current.subtract(this.current.week() % this.step, 'week');break;
	      case 'month':
	        this.current.subtract(this.current.month() % this.step, 'month');break;
	      case 'year':
	        this.current.subtract(this.current.year() % this.step, 'year');break;
	      default:
	        break;
	    }
	  }
	};

	/**
	 * Check if the there is a next step
	 * @return {boolean}  true if the current date has not passed the end date
	 */
	TimeStep.prototype.hasNext = function () {
	  return this.current.valueOf() <= this._end.valueOf();
	};

	/**
	 * Do the next step
	 */
	TimeStep.prototype.next = function () {
	  var prev = this.current.valueOf();

	  // Two cases, needed to prevent issues with switching daylight savings
	  // (end of March and end of October)
	  switch (this.scale) {
	    case 'millisecond':
	      this.current.add(this.step, 'millisecond');break;
	    case 'second':
	      this.current.add(this.step, 'second');break;
	    case 'minute':
	      this.current.add(this.step, 'minute');break;
	    case 'hour':
	      this.current.add(this.step, 'hour');

	      if (this.current.month() < 6) {
	        this.current.subtract(this.current.hours() % this.step, 'hour');
	      } else {
	        if (this.current.hours() % this.step !== 0) {
	          this.current.add(this.step - this.current.hours() % this.step, 'hour');
	        }
	      }
	      break;
	    case 'weekday': // intentional fall through
	    case 'day':
	      this.current.add(this.step, 'day');break;
	    case 'week':
	      if (this.current.weekday() !== 0) {
	        // we had a month break not correlating with a week's start before
	        this.current.weekday(0); // switch back to week cycles
	        this.current.add(this.step, 'week');
	      } else if (this.options.showMajorLabels === false) {
	        this.current.add(this.step, 'week'); // the default case
	      } else {
	        // first day of the week
	        var nextWeek = this.current.clone();
	        nextWeek.add(1, 'week');
	        if (nextWeek.isSame(this.current, 'month')) {
	          // is the first day of the next week in the same month?
	          this.current.add(this.step, 'week'); // the default case
	        } else {
	          // inject a step at each first day of the month
	          this.current.add(this.step, 'week');
	          this.current.date(1);
	        }
	      }
	      break;
	    case 'month':
	      this.current.add(this.step, 'month');break;
	    case 'year':
	      this.current.add(this.step, 'year');break;
	    default:
	      break;
	  }

	  if (this.step != 1) {
	    // round down to the correct major value
	    switch (this.scale) {
	      case 'millisecond':
	        if (this.current.milliseconds() > 0 && this.current.milliseconds() < this.step) this.current.milliseconds(0);break;
	      case 'second':
	        if (this.current.seconds() > 0 && this.current.seconds() < this.step) this.current.seconds(0);break;
	      case 'minute':
	        if (this.current.minutes() > 0 && this.current.minutes() < this.step) this.current.minutes(0);break;
	      case 'hour':
	        if (this.current.hours() > 0 && this.current.hours() < this.step) this.current.hours(0);break;
	      case 'weekday': // intentional fall through
	      case 'day':
	        if (this.current.date() < this.step + 1) this.current.date(1);break;
	      case 'week':
	        if (this.current.week() < this.step) this.current.week(1);break; // week numbering starts at 1, not 0
	      case 'month':
	        if (this.current.month() < this.step) this.current.month(0);break;
	      case 'year':
	        break; // nothing to do for year
	      default:
	        break;
	    }
	  }

	  // safety mechanism: if current time is still unchanged, move to the end
	  if (this.current.valueOf() == prev) {
	    this.current = this._end.clone();
	  }

	  // Reset switches for year, month and day. Will get set to true where appropriate in DateUtil.stepOverHiddenDates
	  this.switchedDay = false;
	  this.switchedMonth = false;
	  this.switchedYear = false;

	  DateUtil.stepOverHiddenDates(this.moment, this, prev);
	};

	/**
	 * Get the current datetime
	 * @return {Moment}  current The current date
	 */
	TimeStep.prototype.getCurrent = function () {
	  return this.current;
	};

	/**
	 * Set a custom scale. Autoscaling will be disabled.
	 * For example setScale('minute', 5) will result
	 * in minor steps of 5 minutes, and major steps of an hour.
	 *
	 * @param {{scale: string, step: number}} params
	 *                               An object containing two properties:
	 *                               - A string 'scale'. Choose from 'millisecond', 'second',
	 *                                 'minute', 'hour', 'weekday', 'day', 'week', 'month', 'year'.
	 *                               - A number 'step'. A step size, by default 1.
	 *                                 Choose for example 1, 2, 5, or 10.
	 */
	TimeStep.prototype.setScale = function (params) {
	  if (params && typeof params.scale == 'string') {
	    this.scale = params.scale;
	    this.step = params.step > 0 ? params.step : 1;
	    this.autoScale = false;
	  }
	};

	/**
	 * Enable or disable autoscaling
	 * @param {boolean} enable  If true, autoascaling is set true
	 */
	TimeStep.prototype.setAutoScale = function (enable) {
	  this.autoScale = enable;
	};

	/**
	 * Automatically determine the scale that bests fits the provided minimum step
	 * @param {number} [minimumStep]  The minimum step size in milliseconds
	 */
	TimeStep.prototype.setMinimumStep = function (minimumStep) {
	  if (minimumStep == undefined) {
	    return;
	  }

	  //var b = asc + ds;

	  var stepYear = 1000 * 60 * 60 * 24 * 30 * 12;
	  var stepMonth = 1000 * 60 * 60 * 24 * 30;
	  var stepDay = 1000 * 60 * 60 * 24;
	  var stepHour = 1000 * 60 * 60;
	  var stepMinute = 1000 * 60;
	  var stepSecond = 1000;
	  var stepMillisecond = 1;

	  // find the smallest step that is larger than the provided minimumStep
	  if (stepYear * 1000 > minimumStep) {
	    this.scale = 'year';this.step = 1000;
	  }
	  if (stepYear * 500 > minimumStep) {
	    this.scale = 'year';this.step = 500;
	  }
	  if (stepYear * 100 > minimumStep) {
	    this.scale = 'year';this.step = 100;
	  }
	  if (stepYear * 50 > minimumStep) {
	    this.scale = 'year';this.step = 50;
	  }
	  if (stepYear * 10 > minimumStep) {
	    this.scale = 'year';this.step = 10;
	  }
	  if (stepYear * 5 > minimumStep) {
	    this.scale = 'year';this.step = 5;
	  }
	  if (stepYear > minimumStep) {
	    this.scale = 'year';this.step = 1;
	  }
	  if (stepMonth * 3 > minimumStep) {
	    this.scale = 'month';this.step = 3;
	  }
	  if (stepMonth > minimumStep) {
	    this.scale = 'month';this.step = 1;
	  }
	  if (stepDay * 5 > minimumStep) {
	    this.scale = 'day';this.step = 5;
	  }
	  if (stepDay * 2 > minimumStep) {
	    this.scale = 'day';this.step = 2;
	  }
	  if (stepDay > minimumStep) {
	    this.scale = 'day';this.step = 1;
	  }
	  if (stepDay / 2 > minimumStep) {
	    this.scale = 'weekday';this.step = 1;
	  }
	  if (stepHour * 4 > minimumStep) {
	    this.scale = 'hour';this.step = 4;
	  }
	  if (stepHour > minimumStep) {
	    this.scale = 'hour';this.step = 1;
	  }
	  if (stepMinute * 15 > minimumStep) {
	    this.scale = 'minute';this.step = 15;
	  }
	  if (stepMinute * 10 > minimumStep) {
	    this.scale = 'minute';this.step = 10;
	  }
	  if (stepMinute * 5 > minimumStep) {
	    this.scale = 'minute';this.step = 5;
	  }
	  if (stepMinute > minimumStep) {
	    this.scale = 'minute';this.step = 1;
	  }
	  if (stepSecond * 15 > minimumStep) {
	    this.scale = 'second';this.step = 15;
	  }
	  if (stepSecond * 10 > minimumStep) {
	    this.scale = 'second';this.step = 10;
	  }
	  if (stepSecond * 5 > minimumStep) {
	    this.scale = 'second';this.step = 5;
	  }
	  if (stepSecond > minimumStep) {
	    this.scale = 'second';this.step = 1;
	  }
	  if (stepMillisecond * 200 > minimumStep) {
	    this.scale = 'millisecond';this.step = 200;
	  }
	  if (stepMillisecond * 100 > minimumStep) {
	    this.scale = 'millisecond';this.step = 100;
	  }
	  if (stepMillisecond * 50 > minimumStep) {
	    this.scale = 'millisecond';this.step = 50;
	  }
	  if (stepMillisecond * 10 > minimumStep) {
	    this.scale = 'millisecond';this.step = 10;
	  }
	  if (stepMillisecond * 5 > minimumStep) {
	    this.scale = 'millisecond';this.step = 5;
	  }
	  if (stepMillisecond > minimumStep) {
	    this.scale = 'millisecond';this.step = 1;
	  }
	};

	/**
	 * Snap a date to a rounded value.
	 * The snap intervals are dependent on the current scale and step.
	 * Static function
	 * @param {Date} date    the date to be snapped.
	 * @param {string} scale Current scale, can be 'millisecond', 'second',
	 *                       'minute', 'hour', 'weekday, 'day', 'week', 'month', 'year'.
	 * @param {number} step  Current step (1, 2, 4, 5, ...
	 * @return {Date} snappedDate
	 */
	TimeStep.snap = function (date, scale, step) {
	  var clone = moment(date);

	  if (scale == 'year') {
	    var year = clone.year() + Math.round(clone.month() / 12);
	    clone.year(Math.round(year / step) * step);
	    clone.month(0);
	    clone.date(0);
	    clone.hours(0);
	    clone.minutes(0);
	    clone.seconds(0);
	    clone.milliseconds(0);
	  } else if (scale == 'month') {
	    if (clone.date() > 15) {
	      clone.date(1);
	      clone.add(1, 'month');
	      // important: first set Date to 1, after that change the month.
	    } else {
	      clone.date(1);
	    }

	    clone.hours(0);
	    clone.minutes(0);
	    clone.seconds(0);
	    clone.milliseconds(0);
	  } else if (scale == 'week') {
	    if (clone.weekday() > 2) {
	      // doing it the momentjs locale aware way
	      clone.weekday(0);
	      clone.add(1, 'week');
	    } else {
	      clone.weekday(0);
	    }

	    clone.hours(0);
	    clone.minutes(0);
	    clone.seconds(0);
	    clone.milliseconds(0);
	  } else if (scale == 'day') {
	    //noinspection FallthroughInSwitchStatementJS
	    switch (step) {
	      case 5:
	      case 2:
	        clone.hours(Math.round(clone.hours() / 24) * 24);break;
	      default:
	        clone.hours(Math.round(clone.hours() / 12) * 12);break;
	    }
	    clone.minutes(0);
	    clone.seconds(0);
	    clone.milliseconds(0);
	  } else if (scale == 'weekday') {
	    //noinspection FallthroughInSwitchStatementJS
	    switch (step) {
	      case 5:
	      case 2:
	        clone.hours(Math.round(clone.hours() / 12) * 12);break;
	      default:
	        clone.hours(Math.round(clone.hours() / 6) * 6);break;
	    }
	    clone.minutes(0);
	    clone.seconds(0);
	    clone.milliseconds(0);
	  } else if (scale == 'hour') {
	    switch (step) {
	      case 4:
	        clone.minutes(Math.round(clone.minutes() / 60) * 60);break;
	      default:
	        clone.minutes(Math.round(clone.minutes() / 30) * 30);break;
	    }
	    clone.seconds(0);
	    clone.milliseconds(0);
	  } else if (scale == 'minute') {
	    //noinspection FallthroughInSwitchStatementJS
	    switch (step) {
	      case 15:
	      case 10:
	        clone.minutes(Math.round(clone.minutes() / 5) * 5);
	        clone.seconds(0);
	        break;
	      case 5:
	        clone.seconds(Math.round(clone.seconds() / 60) * 60);break;
	      default:
	        clone.seconds(Math.round(clone.seconds() / 30) * 30);break;
	    }
	    clone.milliseconds(0);
	  } else if (scale == 'second') {
	    //noinspection FallthroughInSwitchStatementJS
	    switch (step) {
	      case 15:
	      case 10:
	        clone.seconds(Math.round(clone.seconds() / 5) * 5);
	        clone.milliseconds(0);
	        break;
	      case 5:
	        clone.milliseconds(Math.round(clone.milliseconds() / 1000) * 1000);break;
	      default:
	        clone.milliseconds(Math.round(clone.milliseconds() / 500) * 500);break;
	    }
	  } else if (scale == 'millisecond') {
	    var _step = step > 5 ? step / 2 : 1;
	    clone.milliseconds(Math.round(clone.milliseconds() / _step) * _step);
	  }

	  return clone;
	};

	/**
	 * Check if the current value is a major value (for example when the step
	 * is DAY, a major value is each first day of the MONTH)
	 * @return {boolean} true if current date is major, else false.
	 */
	TimeStep.prototype.isMajor = function () {
	  if (this.switchedYear == true) {
	    switch (this.scale) {
	      case 'year':
	      case 'month':
	      case 'week':
	      case 'weekday':
	      case 'day':
	      case 'hour':
	      case 'minute':
	      case 'second':
	      case 'millisecond':
	        return true;
	      default:
	        return false;
	    }
	  } else if (this.switchedMonth == true) {
	    switch (this.scale) {
	      case 'week':
	      case 'weekday':
	      case 'day':
	      case 'hour':
	      case 'minute':
	      case 'second':
	      case 'millisecond':
	        return true;
	      default:
	        return false;
	    }
	  } else if (this.switchedDay == true) {
	    switch (this.scale) {
	      case 'millisecond':
	      case 'second':
	      case 'minute':
	      case 'hour':
	        return true;
	      default:
	        return false;
	    }
	  }

	  var date = this.moment(this.current);
	  switch (this.scale) {
	    case 'millisecond':
	      return date.milliseconds() == 0;
	    case 'second':
	      return date.seconds() == 0;
	    case 'minute':
	      return date.hours() == 0 && date.minutes() == 0;
	    case 'hour':
	      return date.hours() == 0;
	    case 'weekday': // intentional fall through
	    case 'day':
	      return date.date() == 1;
	    case 'week':
	      return date.date() == 1;
	    case 'month':
	      return date.month() == 0;
	    case 'year':
	      return false;
	    default:
	      return false;
	  }
	};

	/**
	 * Returns formatted text for the minor axislabel, depending on the current
	 * date and the scale. For example when scale is MINUTE, the current time is
	 * formatted as "hh:mm".
	 * @param {Date} [date=this.current] custom date. if not provided, current date is taken
	 * @returns {String}
	 */
	TimeStep.prototype.getLabelMinor = function (date) {
	  if (date == undefined) {
	    date = this.current;
	  }
	  if (date instanceof Date) {
	    date = this.moment(date);
	  }

	  if (typeof this.format.minorLabels === "function") {
	    return this.format.minorLabels(date, this.scale, this.step);
	  }

	  var format = this.format.minorLabels[this.scale];
	  // noinspection FallThroughInSwitchStatementJS
	  switch (this.scale) {
	    case 'week':
	      if (this.isMajor() && date.weekday() !== 0) {
	        return "";
	      }
	    default:
	      // eslint-disable-line no-fallthrough
	      return format && format.length > 0 ? this.moment(date).format(format) : '';
	  }
	};

	/**
	 * Returns formatted text for the major axis label, depending on the current
	 * date and the scale. For example when scale is MINUTE, the major scale is
	 * hours, and the hour will be formatted as "hh".
	 * @param {Date} [date=this.current] custom date. if not provided, current date is taken
	 * @returns {String}
	 */
	TimeStep.prototype.getLabelMajor = function (date) {
	  if (date == undefined) {
	    date = this.current;
	  }
	  if (date instanceof Date) {
	    date = this.moment(date);
	  }

	  if (typeof this.format.majorLabels === "function") {
	    return this.format.majorLabels(date, this.scale, this.step);
	  }

	  var format = this.format.majorLabels[this.scale];
	  return format && format.length > 0 ? this.moment(date).format(format) : '';
	};

	TimeStep.prototype.getClassName = function () {
	  var _moment = this.moment;
	  var m = this.moment(this.current);
	  var current = m.locale ? m.locale('en') : m.lang('en'); // old versions of moment have .lang() function
	  var step = this.step;
	  var classNames = [];

	  /**
	   *
	   * @param {number} value
	   * @returns {String}
	   */
	  function even(value) {
	    return value / step % 2 == 0 ? ' vis-even' : ' vis-odd';
	  }

	  /**
	   *
	   * @param {Date} date
	   * @returns {String}
	   */
	  function today(date) {
	    if (date.isSame(new Date(), 'day')) {
	      return ' vis-today';
	    }
	    if (date.isSame(_moment().add(1, 'day'), 'day')) {
	      return ' vis-tomorrow';
	    }
	    if (date.isSame(_moment().add(-1, 'day'), 'day')) {
	      return ' vis-yesterday';
	    }
	    return '';
	  }

	  /**
	   *
	   * @param {Date} date
	   * @returns {String}
	   */
	  function currentWeek(date) {
	    return date.isSame(new Date(), 'week') ? ' vis-current-week' : '';
	  }

	  /**
	   *
	   * @param {Date} date
	   * @returns {String}
	   */
	  function currentMonth(date) {
	    return date.isSame(new Date(), 'month') ? ' vis-current-month' : '';
	  }

	  /**
	   *
	   * @param {Date} date
	   * @returns {String}
	   */
	  function currentYear(date) {
	    return date.isSame(new Date(), 'year') ? ' vis-current-year' : '';
	  }

	  switch (this.scale) {
	    case 'millisecond':
	      classNames.push(today(current));
	      classNames.push(even(current.milliseconds()));
	      break;
	    case 'second':
	      classNames.push(today(current));
	      classNames.push(even(current.seconds()));
	      break;
	    case 'minute':
	      classNames.push(today(current));
	      classNames.push(even(current.minutes()));
	      break;
	    case 'hour':
	      classNames.push('vis-h' + current.hours() + (this.step == 4 ? '-h' + (current.hours() + 4) : ''));
	      classNames.push(today(current));
	      classNames.push(even(current.hours()));
	      break;
	    case 'weekday':
	      classNames.push('vis-' + current.format('dddd').toLowerCase());
	      classNames.push(today(current));
	      classNames.push(currentWeek(current));
	      classNames.push(even(current.date()));
	      break;
	    case 'day':
	      classNames.push('vis-day' + current.date());
	      classNames.push('vis-' + current.format('MMMM').toLowerCase());
	      classNames.push(today(current));
	      classNames.push(currentMonth(current));
	      classNames.push(this.step <= 2 ? today(current) : '');
	      classNames.push(this.step <= 2 ? 'vis-' + current.format('dddd').toLowerCase() : '');
	      classNames.push(even(current.date() - 1));
	      break;
	    case 'week':
	      classNames.push('vis-week' + current.format('w'));
	      classNames.push(currentWeek(current));
	      classNames.push(even(current.week()));
	      break;
	    case 'month':
	      classNames.push('vis-' + current.format('MMMM').toLowerCase());
	      classNames.push(currentMonth(current));
	      classNames.push(even(current.month()));
	      break;
	    case 'year':
	      classNames.push('vis-year' + current.year());
	      classNames.push(currentYear(current));
	      classNames.push(even(current.year()));
	      break;
	  }
	  return classNames.filter(String).join(" ");
	};

	module.exports = TimeStep;

	/***/ }),
	/* 67 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var util = __webpack_require__(2);
	var Component = __webpack_require__(16);
	var moment = __webpack_require__(9);
	var locales = __webpack_require__(98);

	/**
	 * A current time bar
	 * @param {{range: Range, dom: Object, domProps: Object}} body
	 * @param {Object} [options]        Available parameters:
	 *                                  {Boolean} [showCurrentTime]
	 * @constructor CurrentTime
	 * @extends Component
	 */
	function CurrentTime(body, options) {
	  this.body = body;

	  // default options
	  this.defaultOptions = {
	    rtl: false,
	    showCurrentTime: true,

	    moment: moment,
	    locales: locales,
	    locale: 'en'
	  };
	  this.options = util.extend({}, this.defaultOptions);
	  this.offset = 0;

	  this._create();

	  this.setOptions(options);
	}

	CurrentTime.prototype = new Component();

	/**
	 * Create the HTML DOM for the current time bar
	 * @private
	 */
	CurrentTime.prototype._create = function () {
	  var bar = document.createElement('div');
	  bar.className = 'vis-current-time';
	  bar.style.position = 'absolute';
	  bar.style.top = '0px';
	  bar.style.height = '100%';

	  this.bar = bar;
	};

	/**
	 * Destroy the CurrentTime bar
	 */
	CurrentTime.prototype.destroy = function () {
	  this.options.showCurrentTime = false;
	  this.redraw(); // will remove the bar from the DOM and stop refreshing

	  this.body = null;
	};

	/**
	 * Set options for the component. Options will be merged in current options.
	 * @param {Object} options  Available parameters:
	 *                          {boolean} [showCurrentTime]
	 */
	CurrentTime.prototype.setOptions = function (options) {
	  if (options) {
	    // copy all options that we know
	    util.selectiveExtend(['rtl', 'showCurrentTime', 'moment', 'locale', 'locales'], this.options, options);
	  }
	};

	/**
	 * Repaint the component
	 * @return {boolean} Returns true if the component is resized
	 */
	CurrentTime.prototype.redraw = function () {
	  if (this.options.showCurrentTime) {
	    var parent = this.body.dom.backgroundVertical;
	    if (this.bar.parentNode != parent) {
	      // attach to the dom
	      if (this.bar.parentNode) {
	        this.bar.parentNode.removeChild(this.bar);
	      }
	      parent.appendChild(this.bar);

	      this.start();
	    }

	    var now = this.options.moment(new Date().valueOf() + this.offset);
	    var x = this.body.util.toScreen(now);

	    var locale = this.options.locales[this.options.locale];
	    if (!locale) {
	      if (!this.warned) {
	        console.log('WARNING: options.locales[\'' + this.options.locale + '\'] not found. See http://visjs.org/docs/timeline/#Localization');
	        this.warned = true;
	      }
	      locale = this.options.locales['en']; // fall back on english when not available
	    }
	    var title = locale.current + ' ' + locale.time + ': ' + now.format('dddd, MMMM Do YYYY, H:mm:ss');
	    title = title.charAt(0).toUpperCase() + title.substring(1);

	    if (this.options.rtl) {
	      this.bar.style.right = x + 'px';
	    } else {
	      this.bar.style.left = x + 'px';
	    }
	    this.bar.title = title;
	  } else {
	    // remove the line from the DOM
	    if (this.bar.parentNode) {
	      this.bar.parentNode.removeChild(this.bar);
	    }
	    this.stop();
	  }

	  return false;
	};

	/**
	 * Start auto refreshing the current time bar
	 */
	CurrentTime.prototype.start = function () {
	  var me = this;

	  /**
	   *  Updates the current time.
	   */
	  function update() {
	    me.stop();

	    // determine interval to refresh
	    var scale = me.body.range.conversion(me.body.domProps.center.width).scale;
	    var interval = 1 / scale / 10;
	    if (interval < 30) interval = 30;
	    if (interval > 1000) interval = 1000;

	    me.redraw();
	    me.body.emitter.emit('currentTimeTick');

	    // start a renderTimer to adjust for the new time
	    me.currentTimeTimer = setTimeout(update, interval);
	  }

	  update();
	};

	/**
	 * Stop auto refreshing the current time bar
	 */
	CurrentTime.prototype.stop = function () {
	  if (this.currentTimeTimer !== undefined) {
	    clearTimeout(this.currentTimeTimer);
	    delete this.currentTimeTimer;
	  }
	};

	/**
	 * Set a current time. This can be used for example to ensure that a client's
	 * time is synchronized with a shared server time.
	 * @param {Date | string | number} time     A Date, unix timestamp, or
	 *                                          ISO date string.
	 */
	CurrentTime.prototype.setCurrentTime = function (time) {
	  var t = util.convert(time, 'Date').valueOf();
	  var now = new Date().valueOf();
	  this.offset = t - now;
	  this.redraw();
	};

	/**
	 * Get the current time.
	 * @return {Date} Returns the current time.
	 */
	CurrentTime.prototype.getCurrentTime = function () {
	  return new Date(new Date().valueOf() + this.offset);
	};

	module.exports = CurrentTime;

	/***/ }),
	/* 68 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _keys = __webpack_require__(8);

	var _keys2 = _interopRequireDefault(_keys);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);
	var stack = __webpack_require__(100);

	/**
	 * @param {number | string} groupId
	 * @param {Object} data
	 * @param {ItemSet} itemSet
	 * @constructor Group
	 */
	function Group(groupId, data, itemSet) {
	  this.groupId = groupId;
	  this.subgroups = {};
	  this.subgroupStack = {};
	  this.subgroupStackAll = false;
	  this.doInnerStack = false;
	  this.subgroupIndex = 0;
	  this.subgroupOrderer = data && data.subgroupOrder;
	  this.itemSet = itemSet;
	  this.isVisible = null;
	  this.stackDirty = true; // if true, items will be restacked on next redraw

	  if (data && data.nestedGroups) {
	    this.nestedGroups = data.nestedGroups;
	    if (data.showNested == false) {
	      this.showNested = false;
	    } else {
	      this.showNested = true;
	    }
	  }

	  if (data && data.subgroupStack) {
	    if (typeof data.subgroupStack === "boolean") {
	      this.doInnerStack = data.subgroupStack;
	      this.subgroupStackAll = data.subgroupStack;
	    } else {
	      // We might be doing stacking on specific sub groups, but only
	      // if at least one is set to do stacking
	      for (var key in data.subgroupStack) {
	        this.subgroupStack[key] = data.subgroupStack[key];
	        this.doInnerStack = this.doInnerStack || data.subgroupStack[key];
	      }
	    }
	  }

	  this.nestedInGroup = null;

	  this.dom = {};
	  this.props = {
	    label: {
	      width: 0,
	      height: 0
	    }
	  };
	  this.className = null;

	  this.items = {}; // items filtered by groupId of this group
	  this.visibleItems = []; // items currently visible in window
	  this.itemsInRange = []; // items currently in range
	  this.orderedItems = {
	    byStart: [],
	    byEnd: []
	  };
	  this.checkRangedItems = false; // needed to refresh the ranged items if the window is programatically changed with NO overlap.
	  var me = this;
	  this.itemSet.body.emitter.on("checkRangedItems", function () {
	    me.checkRangedItems = true;
	  });

	  this._create();

	  this.setData(data);
	}

	/**
	 * Create DOM elements for the group
	 * @private
	 */
	Group.prototype._create = function () {
	  var label = document.createElement('div');
	  if (this.itemSet.options.groupEditable.order) {
	    label.className = 'vis-label draggable';
	  } else {
	    label.className = 'vis-label';
	  }
	  this.dom.label = label;

	  var inner = document.createElement('div');
	  inner.className = 'vis-inner';
	  label.appendChild(inner);
	  this.dom.inner = inner;

	  var foreground = document.createElement('div');
	  foreground.className = 'vis-group';
	  foreground['timeline-group'] = this;
	  this.dom.foreground = foreground;

	  this.dom.background = document.createElement('div');
	  this.dom.background.className = 'vis-group';

	  this.dom.axis = document.createElement('div');
	  this.dom.axis.className = 'vis-group';

	  // create a hidden marker to detect when the Timelines container is attached
	  // to the DOM, or the style of a parent of the Timeline is changed from
	  // display:none is changed to visible.
	  this.dom.marker = document.createElement('div');
	  this.dom.marker.style.visibility = 'hidden';
	  this.dom.marker.style.position = 'absolute';
	  this.dom.marker.innerHTML = '';
	  this.dom.background.appendChild(this.dom.marker);
	};

	/**
	 * Set the group data for this group
	 * @param {Object} data   Group data, can contain properties content and className
	 */
	Group.prototype.setData = function (data) {
	  // update contents
	  var content;
	  var templateFunction;

	  if (this.itemSet.options && this.itemSet.options.groupTemplate) {
	    templateFunction = this.itemSet.options.groupTemplate.bind(this);
	    content = templateFunction(data, this.dom.inner);
	  } else {
	    content = data && data.content;
	  }

	  if (content instanceof Element) {
	    this.dom.inner.appendChild(content);
	    while (this.dom.inner.firstChild) {
	      this.dom.inner.removeChild(this.dom.inner.firstChild);
	    }
	    this.dom.inner.appendChild(content);
	  } else if (content instanceof Object) {
	    templateFunction(data, this.dom.inner);
	  } else if (content !== undefined && content !== null) {
	    this.dom.inner.innerHTML = content;
	  } else {
	    this.dom.inner.innerHTML = this.groupId || ''; // groupId can be null
	  }

	  // update title
	  this.dom.label.title = data && data.title || '';
	  if (!this.dom.inner.firstChild) {
	    util.addClassName(this.dom.inner, 'vis-hidden');
	  } else {
	    util.removeClassName(this.dom.inner, 'vis-hidden');
	  }

	  if (data && data.nestedGroups) {
	    if (!this.nestedGroups || this.nestedGroups != data.nestedGroups) {
	      this.nestedGroups = data.nestedGroups;
	    }

	    if (data.showNested !== undefined || this.showNested === undefined) {
	      if (data.showNested == false) {
	        this.showNested = false;
	      } else {
	        this.showNested = true;
	      }
	    }

	    util.addClassName(this.dom.label, 'vis-nesting-group');
	    var collapsedDirClassName = this.itemSet.options.rtl ? 'collapsed-rtl' : 'collapsed';
	    if (this.showNested) {
	      util.removeClassName(this.dom.label, collapsedDirClassName);
	      util.addClassName(this.dom.label, 'expanded');
	    } else {
	      util.removeClassName(this.dom.label, 'expanded');
	      util.addClassName(this.dom.label, collapsedDirClassName);
	    }
	  } else if (this.nestedGroups) {
	    this.nestedGroups = null;
	    collapsedDirClassName = this.itemSet.options.rtl ? 'collapsed-rtl' : 'collapsed';
	    util.removeClassName(this.dom.label, collapsedDirClassName);
	    util.removeClassName(this.dom.label, 'expanded');
	    util.removeClassName(this.dom.label, 'vis-nesting-group');
	  }

	  if (data && data.nestedInGroup) {
	    util.addClassName(this.dom.label, 'vis-nested-group');
	    if (this.itemSet.options && this.itemSet.options.rtl) {
	      this.dom.inner.style.paddingRight = '30px';
	    } else {
	      this.dom.inner.style.paddingLeft = '30px';
	    }
	  }

	  // update className
	  var className = data && data.className || null;
	  if (className != this.className) {
	    if (this.className) {
	      util.removeClassName(this.dom.label, this.className);
	      util.removeClassName(this.dom.foreground, this.className);
	      util.removeClassName(this.dom.background, this.className);
	      util.removeClassName(this.dom.axis, this.className);
	    }
	    util.addClassName(this.dom.label, className);
	    util.addClassName(this.dom.foreground, className);
	    util.addClassName(this.dom.background, className);
	    util.addClassName(this.dom.axis, className);
	    this.className = className;
	  }

	  // update style
	  if (this.style) {
	    util.removeCssText(this.dom.label, this.style);
	    this.style = null;
	  }
	  if (data && data.style) {
	    util.addCssText(this.dom.label, data.style);
	    this.style = data.style;
	  }
	};

	/**
	 * Get the width of the group label
	 * @return {number} width
	 */
	Group.prototype.getLabelWidth = function () {
	  return this.props.label.width;
	};

	Group.prototype._didMarkerHeightChange = function () {
	  var markerHeight = this.dom.marker.clientHeight;
	  if (markerHeight != this.lastMarkerHeight) {
	    this.lastMarkerHeight = markerHeight;
	    var redrawQueue = {};
	    var redrawQueueLength = 0;

	    util.forEach(this.items, function (item, key) {
	      item.dirty = true;
	      if (item.displayed) {
	        var returnQueue = true;
	        redrawQueue[key] = item.redraw(returnQueue);
	        redrawQueueLength = redrawQueue[key].length;
	      }
	    });

	    var needRedraw = redrawQueueLength > 0;
	    if (needRedraw) {
	      // redraw all regular items
	      for (var i = 0; i < redrawQueueLength; i++) {
	        util.forEach(redrawQueue, function (fns) {
	          fns[i]();
	        });
	      }
	    }
	    return true;
	  }
	};

	Group.prototype._calculateGroupSizeAndPosition = function () {
	  var offsetTop = this.dom.foreground.offsetTop;
	  var offsetLeft = this.dom.foreground.offsetLeft;
	  var offsetWidth = this.dom.foreground.offsetWidth;
	  this.top = offsetTop;
	  this.right = offsetLeft;
	  this.width = offsetWidth;
	};

	Group.prototype._redrawItems = function (forceRestack, lastIsVisible, margin, range) {
	  var restack = forceRestack || this.stackDirty || this.isVisible && !lastIsVisible;

	  // if restacking, reposition visible items vertically
	  if (restack) {
	    var visibleSubgroups = {};
	    var subgroup = null;

	    if (typeof this.itemSet.options.order === 'function') {
	      // a custom order function
	      // brute force restack of all items

	      // show all items
	      var me = this;
	      var limitSize = false;

	      var redrawQueue = {};
	      var redrawQueueLength = 0;

	      util.forEach(this.items, function (item, key) {
	        if (!item.displayed) {
	          var returnQueue = true;
	          redrawQueue[key] = item.redraw(returnQueue);
	          redrawQueueLength = redrawQueue[key].length;
	          me.visibleItems.push(item);
	        }
	      });

	      var needRedraw = redrawQueueLength > 0;
	      if (needRedraw) {
	        // redraw all regular items
	        for (var i = 0; i < redrawQueueLength; i++) {
	          util.forEach(redrawQueue, function (fns) {
	            fns[i]();
	          });
	        }
	      }

	      util.forEach(this.items, function (item) {
	        item.repositionX(limitSize);
	      });

	      if (this.doInnerStack && this.itemSet.options.stackSubgroups) {
	        // Order the items within each subgroup
	        for (subgroup in this.subgroups) {
	          visibleSubgroups[subgroup] = this.subgroups[subgroup].items.slice().sort(function (a, b) {
	            return me.itemSet.options.order(a.data, b.data);
	          });
	        }

	        stack.stackSubgroupsWithInnerStack(visibleSubgroups, margin, this.subgroups);
	      } else {
	        // order all items and force a restacking
	        var customOrderedItems = this.orderedItems.byStart.slice().sort(function (a, b) {
	          return me.itemSet.options.order(a.data, b.data);
	        });
	        stack.stack(customOrderedItems, margin, true /* restack=true */);
	      }

	      this.visibleItems = this._updateItemsInRange(this.orderedItems, this.visibleItems, range);
	    } else {
	      // no custom order function, lazy stacking
	      this.visibleItems = this._updateItemsInRange(this.orderedItems, this.visibleItems, range);

	      if (this.itemSet.options.stack) {
	        if (this.doInnerStack && this.itemSet.options.stackSubgroups) {
	          for (subgroup in this.subgroups) {
	            visibleSubgroups[subgroup] = this.subgroups[subgroup].items;
	          }

	          stack.stackSubgroupsWithInnerStack(visibleSubgroups, margin, this.subgroups);
	        } else {
	          // TODO: ugly way to access options...
	          stack.stack(this.visibleItems, margin, true /* restack=true */);
	        }
	      } else {
	        // no stacking
	        stack.nostack(this.visibleItems, margin, this.subgroups, this.itemSet.options.stackSubgroups);
	      }
	    }

	    this.stackDirty = false;
	  }
	};

	Group.prototype._didResize = function (resized, height) {
	  resized = util.updateProperty(this, 'height', height) || resized;
	  // recalculate size of label
	  var labelWidth = this.dom.inner.clientWidth;
	  var labelHeight = this.dom.inner.clientHeight;
	  resized = util.updateProperty(this.props.label, 'width', labelWidth) || resized;
	  resized = util.updateProperty(this.props.label, 'height', labelHeight) || resized;
	  return resized;
	};

	Group.prototype._applyGroupHeight = function (height) {
	  this.dom.background.style.height = height + 'px';
	  this.dom.foreground.style.height = height + 'px';
	  this.dom.label.style.height = height + 'px';
	};

	// update vertical position of items after they are re-stacked and the height of the group is calculated
	Group.prototype._updateItemsVerticalPosition = function (margin) {
	  for (var i = 0, ii = this.visibleItems.length; i < ii; i++) {
	    var item = this.visibleItems[i];
	    item.repositionY(margin);
	    if (!this.isVisible && this.groupId != "__background__") {
	      if (item.displayed) item.hide();
	    }
	  }
	};

	/**
	 * Repaint this group
	 * @param {{start: number, end: number}} range
	 * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	 * @param {boolean} [forceRestack=false]  Force restacking of all items
	 * @param {boolean} [returnQueue=false]  return the queue or if the group resized
	 * @return {boolean} Returns true if the group is resized or the redraw queue if returnQueue=true
	 */
	Group.prototype.redraw = function (range, margin, forceRestack, returnQueue) {
	  var resized = false;
	  var lastIsVisible = this.isVisible;
	  var height;

	  var queue = [
	  // force recalculation of the height of the items when the marker height changed
	  // (due to the Timeline being attached to the DOM or changed from display:none to visible)
	  function () {
	    forceRestack = this._didMarkerHeightChange.bind(this);
	  }.bind(this),

	  // recalculate the height of the subgroups
	  this._updateSubGroupHeights.bind(this, margin),

	  // calculate actual size and position
	  this._calculateGroupSizeAndPosition.bind(this),

	  // check if group is visible
	  function () {
	    this.isVisible = this._isGroupVisible.bind(this)(range, margin);
	  }.bind(this),

	  // redraw Items if needed
	  function () {
	    this._redrawItems.bind(this)(forceRestack, lastIsVisible, margin, range);
	  }.bind(this),

	  // update subgroups
	  this._updateSubgroupsSizes.bind(this),

	  // recalculate the height of the group
	  function () {
	    height = this._calculateHeight.bind(this)(margin);
	  }.bind(this),

	  // calculate actual size and position again
	  this._calculateGroupSizeAndPosition.bind(this),

	  // check if resized
	  function () {
	    resized = this._didResize.bind(this)(resized, height);
	  }.bind(this),

	  // apply group height
	  function () {
	    this._applyGroupHeight.bind(this)(height);
	  }.bind(this),

	  // update vertical position of items after they are re-stacked and the height of the group is calculated
	  function () {
	    this._updateItemsVerticalPosition.bind(this)(margin);
	  }.bind(this), function () {
	    if (!this.isVisible && this.height) {
	      resized = false;
	    }
	    return resized;
	  }];

	  if (returnQueue) {
	    return queue;
	  } else {
	    var result;
	    queue.forEach(function (fn) {
	      result = fn();
	    });
	    return result;
	  }
	};

	/**
	 * recalculate the height of the subgroups
	 *
	 * @param {{item: vis.Item}} margin
	 * @private
	 */
	Group.prototype._updateSubGroupHeights = function (margin) {
	  if ((0, _keys2['default'])(this.subgroups).length > 0) {
	    var me = this;

	    this.resetSubgroups();

	    util.forEach(this.visibleItems, function (item) {
	      if (item.data.subgroup !== undefined) {
	        me.subgroups[item.data.subgroup].height = Math.max(me.subgroups[item.data.subgroup].height, item.height + margin.item.vertical);
	        me.subgroups[item.data.subgroup].visible = true;
	      }
	    });
	  }
	};

	/**
	 * check if group is visible
	 *
	 * @param {vis.Range} range
	 * @param {{axis: vis.DataAxis}} margin
	 * @returns {boolean} is visible
	 * @private
	 */
	Group.prototype._isGroupVisible = function (range, margin) {
	  return this.top <= range.body.domProps.centerContainer.height - range.body.domProps.scrollTop + margin.axis && this.top + this.height + margin.axis >= -range.body.domProps.scrollTop;
	};

	/**
	 * recalculate the height of the group
	 * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	 * @returns {number} Returns the height
	 * @private
	 */
	Group.prototype._calculateHeight = function (margin) {
	  // recalculate the height of the group
	  var height;
	  var itemsInRange = this.visibleItems;
	  if (itemsInRange.length > 0) {
	    var min = itemsInRange[0].top;
	    var max = itemsInRange[0].top + itemsInRange[0].height;
	    util.forEach(itemsInRange, function (item) {
	      min = Math.min(min, item.top);
	      max = Math.max(max, item.top + item.height);
	    });
	    if (min > margin.axis) {
	      // there is an empty gap between the lowest item and the axis
	      var offset = min - margin.axis;
	      max -= offset;
	      util.forEach(itemsInRange, function (item) {
	        item.top -= offset;
	      });
	    }
	    height = max + margin.item.vertical / 2;
	  } else {
	    height = 0;
	  }
	  height = Math.max(height, this.props.label.height);

	  return height;
	};

	/**
	 * Show this group: attach to the DOM
	 */
	Group.prototype.show = function () {
	  if (!this.dom.label.parentNode) {
	    this.itemSet.dom.labelSet.appendChild(this.dom.label);
	  }

	  if (!this.dom.foreground.parentNode) {
	    this.itemSet.dom.foreground.appendChild(this.dom.foreground);
	  }

	  if (!this.dom.background.parentNode) {
	    this.itemSet.dom.background.appendChild(this.dom.background);
	  }

	  if (!this.dom.axis.parentNode) {
	    this.itemSet.dom.axis.appendChild(this.dom.axis);
	  }
	};

	/**
	 * Hide this group: remove from the DOM
	 */
	Group.prototype.hide = function () {
	  var label = this.dom.label;
	  if (label.parentNode) {
	    label.parentNode.removeChild(label);
	  }

	  var foreground = this.dom.foreground;
	  if (foreground.parentNode) {
	    foreground.parentNode.removeChild(foreground);
	  }

	  var background = this.dom.background;
	  if (background.parentNode) {
	    background.parentNode.removeChild(background);
	  }

	  var axis = this.dom.axis;
	  if (axis.parentNode) {
	    axis.parentNode.removeChild(axis);
	  }
	};

	/**
	 * Add an item to the group
	 * @param {Item} item
	 */
	Group.prototype.add = function (item) {
	  this.items[item.id] = item;
	  item.setParent(this);
	  this.stackDirty = true;
	  // add to
	  if (item.data.subgroup !== undefined) {
	    this._addToSubgroup(item);
	    this.orderSubgroups();
	  }

	  if (this.visibleItems.indexOf(item) == -1) {
	    var range = this.itemSet.body.range; // TODO: not nice accessing the range like this
	    this._checkIfVisible(item, this.visibleItems, range);
	  }
	};

	Group.prototype._addToSubgroup = function (item, subgroupId) {
	  subgroupId = subgroupId || item.data.subgroup;
	  if (subgroupId != undefined && this.subgroups[subgroupId] === undefined) {
	    this.subgroups[subgroupId] = {
	      height: 0,
	      top: 0,
	      start: item.data.start,
	      end: item.data.end || item.data.start,
	      visible: false,
	      index: this.subgroupIndex,
	      items: [],
	      stack: this.subgroupStackAll || this.subgroupStack[subgroupId] || false
	    };
	    this.subgroupIndex++;
	  }

	  if (new Date(item.data.start) < new Date(this.subgroups[subgroupId].start)) {
	    this.subgroups[subgroupId].start = item.data.start;
	  }

	  var itemEnd = item.data.end || item.data.start;
	  if (new Date(itemEnd) > new Date(this.subgroups[subgroupId].end)) {
	    this.subgroups[subgroupId].end = itemEnd;
	  }

	  this.subgroups[subgroupId].items.push(item);
	};

	Group.prototype._updateSubgroupsSizes = function () {
	  var me = this;
	  if (me.subgroups) {
	    for (var subgroup in me.subgroups) {
	      var initialEnd = me.subgroups[subgroup].items[0].data.end || me.subgroups[subgroup].items[0].data.start;
	      var newStart = me.subgroups[subgroup].items[0].data.start;
	      var newEnd = initialEnd - 1;

	      me.subgroups[subgroup].items.forEach(function (item) {
	        if (new Date(item.data.start) < new Date(newStart)) {
	          newStart = item.data.start;
	        }

	        var itemEnd = item.data.end || item.data.start;
	        if (new Date(itemEnd) > new Date(newEnd)) {
	          newEnd = itemEnd;
	        }
	      });

	      me.subgroups[subgroup].start = newStart;
	      me.subgroups[subgroup].end = new Date(newEnd - 1); // -1 to compensate for colliding end to start subgroups;
	    }
	  }
	};

	Group.prototype.orderSubgroups = function () {
	  if (this.subgroupOrderer !== undefined) {
	    var sortArray = [];
	    var subgroup;
	    if (typeof this.subgroupOrderer == 'string') {
	      for (subgroup in this.subgroups) {
	        sortArray.push({ subgroup: subgroup, sortField: this.subgroups[subgroup].items[0].data[this.subgroupOrderer] });
	      }
	      sortArray.sort(function (a, b) {
	        return a.sortField - b.sortField;
	      });
	    } else if (typeof this.subgroupOrderer == 'function') {
	      for (subgroup in this.subgroups) {
	        sortArray.push(this.subgroups[subgroup].items[0].data);
	      }
	      sortArray.sort(this.subgroupOrderer);
	    }

	    if (sortArray.length > 0) {
	      for (var i = 0; i < sortArray.length; i++) {
	        this.subgroups[sortArray[i].subgroup].index = i;
	      }
	    }
	  }
	};

	Group.prototype.resetSubgroups = function () {
	  for (var subgroup in this.subgroups) {
	    if (this.subgroups.hasOwnProperty(subgroup)) {
	      this.subgroups[subgroup].visible = false;
	      this.subgroups[subgroup].height = 0;
	    }
	  }
	};

	/**
	 * Remove an item from the group
	 * @param {Item} item
	 */
	Group.prototype.remove = function (item) {
	  delete this.items[item.id];
	  item.setParent(null);
	  this.stackDirty = true;

	  // remove from visible items
	  var index = this.visibleItems.indexOf(item);
	  if (index != -1) this.visibleItems.splice(index, 1);

	  if (item.data.subgroup !== undefined) {
	    this._removeFromSubgroup(item);
	    this.orderSubgroups();
	  }
	};

	Group.prototype._removeFromSubgroup = function (item, subgroupId) {
	  subgroupId = subgroupId || item.data.subgroup;
	  if (subgroupId != undefined) {
	    var subgroup = this.subgroups[subgroupId];
	    if (subgroup) {
	      var itemIndex = subgroup.items.indexOf(item);
	      //  Check the item is actually in this subgroup. How should items not in the group be handled?
	      if (itemIndex >= 0) {
	        subgroup.items.splice(itemIndex, 1);
	        if (!subgroup.items.length) {
	          delete this.subgroups[subgroupId];
	        } else {
	          this._updateSubgroupsSizes();
	        }
	      }
	    }
	  }
	};

	/**
	 * Remove an item from the corresponding DataSet
	 * @param {Item} item
	 */
	Group.prototype.removeFromDataSet = function (item) {
	  this.itemSet.removeItem(item.id);
	};

	/**
	 * Reorder the items
	 */
	Group.prototype.order = function () {
	  var array = util.toArray(this.items);
	  var startArray = [];
	  var endArray = [];

	  for (var i = 0; i < array.length; i++) {
	    if (array[i].data.end !== undefined) {
	      endArray.push(array[i]);
	    }
	    startArray.push(array[i]);
	  }
	  this.orderedItems = {
	    byStart: startArray,
	    byEnd: endArray
	  };

	  stack.orderByStart(this.orderedItems.byStart);
	  stack.orderByEnd(this.orderedItems.byEnd);
	};

	/**
	 * Update the visible items
	 * @param {{byStart: Item[], byEnd: Item[]}} orderedItems   All items ordered by start date and by end date
	 * @param {Item[]} oldVisibleItems                          The previously visible items.
	 * @param {{start: number, end: number}} range              Visible range
	 * @return {Item[]} visibleItems                            The new visible items.
	 * @private
	 */
	Group.prototype._updateItemsInRange = function (orderedItems, oldVisibleItems, range) {
	  var visibleItems = [];
	  var visibleItemsLookup = {}; // we keep this to quickly look up if an item already exists in the list without using indexOf on visibleItems

	  var interval = (range.end - range.start) / 4;
	  var lowerBound = range.start - interval;
	  var upperBound = range.end + interval;

	  // this function is used to do the binary search.
	  var searchFunction = function searchFunction(value) {
	    if (value < lowerBound) {
	      return -1;
	    } else if (value <= upperBound) {
	      return 0;
	    } else {
	      return 1;
	    }
	  };

	  // first check if the items that were in view previously are still in view.
	  // IMPORTANT: this handles the case for the items with startdate before the window and enddate after the window!
	  // also cleans up invisible items.
	  if (oldVisibleItems.length > 0) {
	    for (var i = 0; i < oldVisibleItems.length; i++) {
	      this._checkIfVisibleWithReference(oldVisibleItems[i], visibleItems, visibleItemsLookup, range);
	    }
	  }

	  // we do a binary search for the items that have only start values.
	  var initialPosByStart = util.binarySearchCustom(orderedItems.byStart, searchFunction, 'data', 'start');

	  // trace the visible items from the inital start pos both ways until an invisible item is found, we only look at the start values.
	  this._traceVisible(initialPosByStart, orderedItems.byStart, visibleItems, visibleItemsLookup, function (item) {
	    return item.data.start < lowerBound || item.data.start > upperBound;
	  });

	  // if the window has changed programmatically without overlapping the old window, the ranged items with start < lowerBound and end > upperbound are not shown.
	  // We therefore have to brute force check all items in the byEnd list
	  if (this.checkRangedItems == true) {
	    this.checkRangedItems = false;
	    for (i = 0; i < orderedItems.byEnd.length; i++) {
	      this._checkIfVisibleWithReference(orderedItems.byEnd[i], visibleItems, visibleItemsLookup, range);
	    }
	  } else {
	    // we do a binary search for the items that have defined end times.
	    var initialPosByEnd = util.binarySearchCustom(orderedItems.byEnd, searchFunction, 'data', 'end');

	    // trace the visible items from the inital start pos both ways until an invisible item is found, we only look at the end values.
	    this._traceVisible(initialPosByEnd, orderedItems.byEnd, visibleItems, visibleItemsLookup, function (item) {
	      return item.data.end < lowerBound || item.data.end > upperBound;
	    });
	  }

	  var redrawQueue = {};
	  var redrawQueueLength = 0;

	  for (i = 0; i < visibleItems.length; i++) {
	    var item = visibleItems[i];
	    if (!item.displayed) {
	      var returnQueue = true;
	      redrawQueue[i] = item.redraw(returnQueue);
	      redrawQueueLength = redrawQueue[i].length;
	    }
	  }

	  var needRedraw = redrawQueueLength > 0;
	  if (needRedraw) {
	    // redraw all regular items
	    for (var j = 0; j < redrawQueueLength; j++) {
	      util.forEach(redrawQueue, function (fns) {
	        fns[j]();
	      });
	    }
	  }

	  for (i = 0; i < visibleItems.length; i++) {
	    visibleItems[i].repositionX();
	  }
	  return visibleItems;
	};

	Group.prototype._traceVisible = function (initialPos, items, visibleItems, visibleItemsLookup, breakCondition) {
	  if (initialPos != -1) {
	    var i, item;
	    for (i = initialPos; i >= 0; i--) {
	      item = items[i];
	      if (breakCondition(item)) {
	        break;
	      } else {
	        if (visibleItemsLookup[item.id] === undefined) {
	          visibleItemsLookup[item.id] = true;
	          visibleItems.push(item);
	        }
	      }
	    }

	    for (i = initialPos + 1; i < items.length; i++) {
	      item = items[i];
	      if (breakCondition(item)) {
	        break;
	      } else {
	        if (visibleItemsLookup[item.id] === undefined) {
	          visibleItemsLookup[item.id] = true;
	          visibleItems.push(item);
	        }
	      }
	    }
	  }
	};

	/**
	 * this function is very similar to the _checkIfInvisible() but it does not
	 * return booleans, hides the item if it should not be seen and always adds to
	 * the visibleItems.
	 * this one is for brute forcing and hiding.
	 *
	 * @param {Item} item
	 * @param {Array} visibleItems
	 * @param {{start:number, end:number}} range
	 * @private
	 */
	Group.prototype._checkIfVisible = function (item, visibleItems, range) {
	  if (item.isVisible(range)) {
	    if (!item.displayed) item.show();
	    // reposition item horizontally
	    item.repositionX();
	    visibleItems.push(item);
	  } else {
	    if (item.displayed) item.hide();
	  }
	};

	/**
	 * this function is very similar to the _checkIfInvisible() but it does not
	 * return booleans, hides the item if it should not be seen and always adds to
	 * the visibleItems.
	 * this one is for brute forcing and hiding.
	 *
	 * @param {Item} item
	 * @param {Array.<vis.Item>} visibleItems
	 * @param {Object<number, boolean>} visibleItemsLookup
	 * @param {{start:number, end:number}} range
	 * @private
	 */
	Group.prototype._checkIfVisibleWithReference = function (item, visibleItems, visibleItemsLookup, range) {
	  if (item.isVisible(range)) {
	    if (visibleItemsLookup[item.id] === undefined) {
	      visibleItemsLookup[item.id] = true;
	      visibleItems.push(item);
	    }
	  } else {
	    if (item.displayed) item.hide();
	  }
	};

	Group.prototype.changeSubgroup = function (item, oldSubgroup, newSubgroup) {
	  this._removeFromSubgroup(item, oldSubgroup);
	  this._addToSubgroup(item, newSubgroup);
	  this.orderSubgroups();
	};

	module.exports = Group;

	/***/ }),
	/* 69 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _create = __webpack_require__(29);

	var _create2 = _interopRequireDefault(_create);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var Group = __webpack_require__(68);

	/**
	 * @constructor BackgroundGroup
	 * @param {number | string} groupId
	 * @param {Object} data
	 * @param {ItemSet} itemSet
	 * @extends Group
	 */
	function BackgroundGroup(groupId, data, itemSet) {
	  Group.call(this, groupId, data, itemSet);

	  this.width = 0;
	  this.height = 0;
	  this.top = 0;
	  this.left = 0;
	}

	BackgroundGroup.prototype = (0, _create2['default'])(Group.prototype);

	/**
	 * Repaint this group
	 * @param {{start: number, end: number}} range
	 * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	 * @param {boolean} [forceRestack=false]  Force restacking of all items
	 * @return {boolean} Returns true if the group is resized
	 */
	BackgroundGroup.prototype.redraw = function (range, margin, forceRestack) {
	  // eslint-disable-line no-unused-vars
	  var resized = false;

	  this.visibleItems = this._updateItemsInRange(this.orderedItems, this.visibleItems, range);

	  // calculate actual size
	  this.width = this.dom.background.offsetWidth;

	  // apply new height (just always zero for BackgroundGroup
	  this.dom.background.style.height = '0';

	  // update vertical position of items after they are re-stacked and the height of the group is calculated
	  for (var i = 0, ii = this.visibleItems.length; i < ii; i++) {
	    var item = this.visibleItems[i];
	    item.repositionY(margin);
	  }

	  return resized;
	};

	/**
	 * Show this group: attach to the DOM
	 */
	BackgroundGroup.prototype.show = function () {
	  if (!this.dom.background.parentNode) {
	    this.itemSet.dom.background.appendChild(this.dom.background);
	  }
	};

	module.exports = BackgroundGroup;

	/***/ }),
	/* 70 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var Item = __webpack_require__(38);

	/**
	 * @constructor RangeItem
	 * @extends Item
	 * @param {Object} data             Object containing parameters start, end
	 *                                  content, className.
	 * @param {{toScreen: function, toTime: function}} conversion
	 *                                  Conversion functions from time to screen and vice versa
	 * @param {Object} [options]        Configuration options
	 *                                  // TODO: describe options
	 */
	function RangeItem(data, conversion, options) {
	  this.props = {
	    content: {
	      width: 0
	    }
	  };
	  this.overflow = false; // if contents can overflow (css styling), this flag is set to true
	  this.options = options;
	  // validate data
	  if (data) {
	    if (data.start == undefined) {
	      throw new Error('Property "start" missing in item ' + data.id);
	    }
	    if (data.end == undefined) {
	      throw new Error('Property "end" missing in item ' + data.id);
	    }
	  }

	  Item.call(this, data, conversion, options);
	}

	RangeItem.prototype = new Item(null, null, null);

	RangeItem.prototype.baseClassName = 'vis-item vis-range';

	/**
	 * Check whether this item is visible inside given range
	 *
	 * @param {vis.Range} range with a timestamp for start and end
	 * @returns {boolean} True if visible
	 */
	RangeItem.prototype.isVisible = function (range) {
	  // determine visibility
	  return this.data.start < range.end && this.data.end > range.start;
	};

	RangeItem.prototype._createDomElement = function () {
	  if (!this.dom) {
	    // create DOM
	    this.dom = {};

	    // background box
	    this.dom.box = document.createElement('div');
	    // className is updated in redraw()

	    // frame box (to prevent the item contents from overflowing)
	    this.dom.frame = document.createElement('div');
	    this.dom.frame.className = 'vis-item-overflow';
	    this.dom.box.appendChild(this.dom.frame);

	    // visible frame box (showing the frame that is always visible)
	    this.dom.visibleFrame = document.createElement('div');
	    this.dom.visibleFrame.className = 'vis-item-visible-frame';
	    this.dom.box.appendChild(this.dom.visibleFrame);

	    // contents box
	    this.dom.content = document.createElement('div');
	    this.dom.content.className = 'vis-item-content';
	    this.dom.frame.appendChild(this.dom.content);

	    // attach this item as attribute
	    this.dom.box['timeline-item'] = this;

	    this.dirty = true;
	  }
	};

	RangeItem.prototype._appendDomElement = function () {
	  if (!this.parent) {
	    throw new Error('Cannot redraw item: no parent attached');
	  }
	  if (!this.dom.box.parentNode) {
	    var foreground = this.parent.dom.foreground;
	    if (!foreground) {
	      throw new Error('Cannot redraw item: parent has no foreground container element');
	    }
	    foreground.appendChild(this.dom.box);
	  }
	  this.displayed = true;
	};

	RangeItem.prototype._updateDirtyDomComponents = function () {
	  // update dirty DOM. An item is marked dirty when:
	  // - the item is not yet rendered
	  // - the item's data is changed
	  // - the item is selected/deselected
	  if (this.dirty) {
	    this._updateContents(this.dom.content);
	    this._updateDataAttributes(this.dom.box);
	    this._updateStyle(this.dom.box);

	    var editable = this.editable.updateTime || this.editable.updateGroup;

	    // update class
	    var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '') + (editable ? ' vis-editable' : ' vis-readonly');
	    this.dom.box.className = this.baseClassName + className;

	    // turn off max-width to be able to calculate the real width
	    // this causes an extra browser repaint/reflow, but so be it
	    this.dom.content.style.maxWidth = 'none';
	  }
	};

	RangeItem.prototype._getDomComponentsSizes = function () {
	  // determine from css whether this box has overflow
	  this.overflow = window.getComputedStyle(this.dom.frame).overflow !== 'hidden';
	  return {
	    content: {
	      width: this.dom.content.offsetWidth
	    },
	    box: {
	      height: this.dom.box.offsetHeight
	    }
	  };
	};

	RangeItem.prototype._updateDomComponentsSizes = function (sizes) {
	  this.props.content.width = sizes.content.width;
	  this.height = sizes.box.height;
	  this.dom.content.style.maxWidth = '';
	  this.dirty = false;
	};

	RangeItem.prototype._repaintDomAdditionals = function () {
	  this._repaintOnItemUpdateTimeTooltip(this.dom.box);
	  this._repaintDeleteButton(this.dom.box);
	  this._repaintDragCenter();
	  this._repaintDragLeft();
	  this._repaintDragRight();
	};

	/**
	 * Repaint the item
	 * @param {boolean} [returnQueue=false]  return the queue
	 * @return {boolean} the redraw queue if returnQueue=true
	 */
	RangeItem.prototype.redraw = function (returnQueue) {
	  var sizes;
	  var queue = [
	  // create item DOM
	  this._createDomElement.bind(this),

	  // append DOM to parent DOM
	  this._appendDomElement.bind(this),

	  // update dirty DOM 
	  this._updateDirtyDomComponents.bind(this), function () {
	    if (this.dirty) {
	      sizes = this._getDomComponentsSizes.bind(this)();
	    }
	  }.bind(this), function () {
	    if (this.dirty) {
	      this._updateDomComponentsSizes.bind(this)(sizes);
	    }
	  }.bind(this),

	  // repaint DOM additionals
	  this._repaintDomAdditionals.bind(this)];

	  if (returnQueue) {
	    return queue;
	  } else {
	    var result;
	    queue.forEach(function (fn) {
	      result = fn();
	    });
	    return result;
	  }
	};

	/**
	 * Show the item in the DOM (when not already visible). The items DOM will
	 * be created when needed.
	 */
	RangeItem.prototype.show = function () {
	  if (!this.displayed) {
	    this.redraw();
	  }
	};

	/**
	 * Hide the item from the DOM (when visible)
	 */
	RangeItem.prototype.hide = function () {
	  if (this.displayed) {
	    var box = this.dom.box;

	    if (box.parentNode) {
	      box.parentNode.removeChild(box);
	    }

	    this.displayed = false;
	  }
	};

	/**
	 * Reposition the item horizontally
	 * @param {boolean} [limitSize=true] If true (default), the width of the range
	 *                                   item will be limited, as the browser cannot
	 *                                   display very wide divs. This means though
	 *                                   that the applied left and width may
	 *                                   not correspond to the ranges start and end
	 * @Override
	 */
	RangeItem.prototype.repositionX = function (limitSize) {
	  var parentWidth = this.parent.width;
	  var start = this.conversion.toScreen(this.data.start);
	  var end = this.conversion.toScreen(this.data.end);
	  var align = this.data.align === undefined ? this.options.align : this.data.align;
	  var contentStartPosition;
	  var contentWidth;

	  // limit the width of the range, as browsers cannot draw very wide divs
	  // unless limitSize: false is explicitly set in item data
	  if (this.data.limitSize !== false && (limitSize === undefined || limitSize === true)) {
	    if (start < -parentWidth) {
	      start = -parentWidth;
	    }
	    if (end > 2 * parentWidth) {
	      end = 2 * parentWidth;
	    }
	  }

	  // add 0.5 to compensate floating-point values rounding
	  var boxWidth = Math.max(end - start + 0.5, 1);

	  if (this.overflow) {
	    if (this.options.rtl) {
	      this.right = start;
	    } else {
	      this.left = start;
	    }
	    this.width = boxWidth + this.props.content.width;
	    contentWidth = this.props.content.width;

	    // Note: The calculation of width is an optimistic calculation, giving
	    //       a width which will not change when moving the Timeline
	    //       So no re-stacking needed, which is nicer for the eye;
	  } else {
	    if (this.options.rtl) {
	      this.right = start;
	    } else {
	      this.left = start;
	    }
	    this.width = boxWidth;
	    contentWidth = Math.min(end - start, this.props.content.width);
	  }

	  if (this.options.rtl) {
	    this.dom.box.style.right = this.right + 'px';
	  } else {
	    this.dom.box.style.left = this.left + 'px';
	  }
	  this.dom.box.style.width = boxWidth + 'px';

	  switch (align) {
	    case 'left':
	      if (this.options.rtl) {
	        this.dom.content.style.right = '0';
	      } else {
	        this.dom.content.style.left = '0';
	      }
	      break;

	    case 'right':
	      if (this.options.rtl) {
	        this.dom.content.style.right = Math.max(boxWidth - contentWidth, 0) + 'px';
	      } else {
	        this.dom.content.style.left = Math.max(boxWidth - contentWidth, 0) + 'px';
	      }
	      break;

	    case 'center':
	      if (this.options.rtl) {
	        this.dom.content.style.right = Math.max((boxWidth - contentWidth) / 2, 0) + 'px';
	      } else {
	        this.dom.content.style.left = Math.max((boxWidth - contentWidth) / 2, 0) + 'px';
	      }

	      break;

	    default:
	      // 'auto'
	      // when range exceeds left of the window, position the contents at the left of the visible area
	      if (this.overflow) {
	        if (end > 0) {
	          contentStartPosition = Math.max(-start, 0);
	        } else {
	          contentStartPosition = -contentWidth; // ensure it's not visible anymore
	        }
	      } else {
	        if (start < 0) {
	          contentStartPosition = -start;
	        } else {
	          contentStartPosition = 0;
	        }
	      }
	      if (this.options.rtl) {
	        this.dom.content.style.right = contentStartPosition + 'px';
	      } else {
	        this.dom.content.style.left = contentStartPosition + 'px';
	        this.dom.content.style.width = 'calc(100% - ' + contentStartPosition + 'px)';
	      }
	  }
	};

	/**
	 * Reposition the item vertically
	 * @Override
	 */
	RangeItem.prototype.repositionY = function () {
	  var orientation = this.options.orientation.item;
	  var box = this.dom.box;

	  if (orientation == 'top') {
	    box.style.top = this.top + 'px';
	  } else {
	    box.style.top = this.parent.height - this.top - this.height + 'px';
	  }
	};

	/**
	 * Repaint a drag area on the left side of the range when the range is selected
	 * @protected
	 */
	RangeItem.prototype._repaintDragLeft = function () {
	  if ((this.selected || this.options.itemsAlwaysDraggable.range) && this.options.editable.updateTime && !this.dom.dragLeft) {
	    // create and show drag area
	    var dragLeft = document.createElement('div');
	    dragLeft.className = 'vis-drag-left';
	    dragLeft.dragLeftItem = this;

	    this.dom.box.appendChild(dragLeft);
	    this.dom.dragLeft = dragLeft;
	  } else if (!this.selected && !this.options.itemsAlwaysDraggable.range && this.dom.dragLeft) {
	    // delete drag area
	    if (this.dom.dragLeft.parentNode) {
	      this.dom.dragLeft.parentNode.removeChild(this.dom.dragLeft);
	    }
	    this.dom.dragLeft = null;
	  }
	};

	/**
	 * Repaint a drag area on the right side of the range when the range is selected
	 * @protected
	 */
	RangeItem.prototype._repaintDragRight = function () {
	  if ((this.selected || this.options.itemsAlwaysDraggable.range) && this.options.editable.updateTime && !this.dom.dragRight) {
	    // create and show drag area
	    var dragRight = document.createElement('div');
	    dragRight.className = 'vis-drag-right';
	    dragRight.dragRightItem = this;

	    this.dom.box.appendChild(dragRight);
	    this.dom.dragRight = dragRight;
	  } else if (!this.selected && !this.options.itemsAlwaysDraggable.range && this.dom.dragRight) {
	    // delete drag area
	    if (this.dom.dragRight.parentNode) {
	      this.dom.dragRight.parentNode.removeChild(this.dom.dragRight);
	    }
	    this.dom.dragRight = null;
	  }
	};

	module.exports = RangeItem;

	/***/ }),
	/* 71 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _stringify = __webpack_require__(19);

	var _stringify2 = _interopRequireDefault(_stringify);

	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);

	var ColorPicker = __webpack_require__(179)['default'];

	/**
	 * The way this works is for all properties of this.possible options, you can supply the property name in any form to list the options.
	 * Boolean options are recognised as Boolean
	 * Number options should be written as array: [default value, min value, max value, stepsize]
	 * Colors should be written as array: ['color', '#ffffff']
	 * Strings with should be written as array: [option1, option2, option3, ..]
	 *
	 * The options are matched with their counterparts in each of the modules and the values used in the configuration are
	 */

	var Configurator = function () {
	  /**
	   * @param {Object} parentModule        | the location where parentModule.setOptions() can be called
	   * @param {Object} defaultContainer    | the default container of the module
	   * @param {Object} configureOptions    | the fully configured and predefined options set found in allOptions.js
	   * @param {number} pixelRatio          | canvas pixel ratio
	   */
	  function Configurator(parentModule, defaultContainer, configureOptions) {
	    var pixelRatio = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
	    (0, _classCallCheck3['default'])(this, Configurator);

	    this.parent = parentModule;
	    this.changedOptions = [];
	    this.container = defaultContainer;
	    this.allowCreation = false;

	    this.options = {};
	    this.initialized = false;
	    this.popupCounter = 0;
	    this.defaultOptions = {
	      enabled: false,
	      filter: true,
	      container: undefined,
	      showButton: true
	    };
	    util.extend(this.options, this.defaultOptions);

	    this.configureOptions = configureOptions;
	    this.moduleOptions = {};
	    this.domElements = [];
	    this.popupDiv = {};
	    this.popupLimit = 5;
	    this.popupHistory = {};
	    this.colorPicker = new ColorPicker(pixelRatio);
	    this.wrapper = undefined;
	  }

	  /**
	   * refresh all options.
	   * Because all modules parse their options by themselves, we just use their options. We copy them here.
	   *
	   * @param {Object} options
	   */


	  (0, _createClass3['default'])(Configurator, [{
	    key: 'setOptions',
	    value: function setOptions(options) {
	      if (options !== undefined) {
	        // reset the popup history because the indices may have been changed.
	        this.popupHistory = {};
	        this._removePopup();

	        var enabled = true;
	        if (typeof options === 'string') {
	          this.options.filter = options;
	        } else if (options instanceof Array) {
	          this.options.filter = options.join();
	        } else if ((typeof options === 'undefined' ? 'undefined' : (0, _typeof3['default'])(options)) === 'object') {
	          if (options.container !== undefined) {
	            this.options.container = options.container;
	          }
	          if (options.filter !== undefined) {
	            this.options.filter = options.filter;
	          }
	          if (options.showButton !== undefined) {
	            this.options.showButton = options.showButton;
	          }
	          if (options.enabled !== undefined) {
	            enabled = options.enabled;
	          }
	        } else if (typeof options === 'boolean') {
	          this.options.filter = true;
	          enabled = options;
	        } else if (typeof options === 'function') {
	          this.options.filter = options;
	          enabled = true;
	        }
	        if (this.options.filter === false) {
	          enabled = false;
	        }

	        this.options.enabled = enabled;
	      }
	      this._clean();
	    }

	    /**
	     *
	     * @param {Object} moduleOptions
	     */

	  }, {
	    key: 'setModuleOptions',
	    value: function setModuleOptions(moduleOptions) {
	      this.moduleOptions = moduleOptions;
	      if (this.options.enabled === true) {
	        this._clean();
	        if (this.options.container !== undefined) {
	          this.container = this.options.container;
	        }
	        this._create();
	      }
	    }

	    /**
	     * Create all DOM elements
	     * @private
	     */

	  }, {
	    key: '_create',
	    value: function _create() {
	      var _this = this;

	      this._clean();
	      this.changedOptions = [];

	      var filter = this.options.filter;
	      var counter = 0;
	      var show = false;
	      for (var option in this.configureOptions) {
	        if (this.configureOptions.hasOwnProperty(option)) {
	          this.allowCreation = false;
	          show = false;
	          if (typeof filter === 'function') {
	            show = filter(option, []);
	            show = show || this._handleObject(this.configureOptions[option], [option], true);
	          } else if (filter === true || filter.indexOf(option) !== -1) {
	            show = true;
	          }

	          if (show !== false) {
	            this.allowCreation = true;

	            // linebreak between categories
	            if (counter > 0) {
	              this._makeItem([]);
	            }
	            // a header for the category
	            this._makeHeader(option);

	            // get the sub options
	            this._handleObject(this.configureOptions[option], [option]);
	          }
	          counter++;
	        }
	      }

	      if (this.options.showButton === true) {
	        var generateButton = document.createElement('div');
	        generateButton.className = 'vis-configuration vis-config-button';
	        generateButton.innerHTML = 'generate options';
	        generateButton.onclick = function () {
	          _this._printOptions();
	        };
	        generateButton.onmouseover = function () {
	          generateButton.className = 'vis-configuration vis-config-button hover';
	        };
	        generateButton.onmouseout = function () {
	          generateButton.className = 'vis-configuration vis-config-button';
	        };

	        this.optionsContainer = document.createElement('div');
	        this.optionsContainer.className = 'vis-configuration vis-config-option-container';

	        this.domElements.push(this.optionsContainer);
	        this.domElements.push(generateButton);
	      }

	      this._push();
	      //~ this.colorPicker.insertTo(this.container);
	    }

	    /**
	     * draw all DOM elements on the screen
	     * @private
	     */

	  }, {
	    key: '_push',
	    value: function _push() {
	      this.wrapper = document.createElement('div');
	      this.wrapper.className = 'vis-configuration-wrapper';
	      this.container.appendChild(this.wrapper);
	      for (var i = 0; i < this.domElements.length; i++) {
	        this.wrapper.appendChild(this.domElements[i]);
	      }

	      this._showPopupIfNeeded();
	    }

	    /**
	     * delete all DOM elements
	     * @private
	     */

	  }, {
	    key: '_clean',
	    value: function _clean() {
	      for (var i = 0; i < this.domElements.length; i++) {
	        this.wrapper.removeChild(this.domElements[i]);
	      }

	      if (this.wrapper !== undefined) {
	        this.container.removeChild(this.wrapper);
	        this.wrapper = undefined;
	      }
	      this.domElements = [];

	      this._removePopup();
	    }

	    /**
	     * get the value from the actualOptions if it exists
	     * @param {array} path    | where to look for the actual option
	     * @returns {*}
	     * @private
	     */

	  }, {
	    key: '_getValue',
	    value: function _getValue(path) {
	      var base = this.moduleOptions;
	      for (var i = 0; i < path.length; i++) {
	        if (base[path[i]] !== undefined) {
	          base = base[path[i]];
	        } else {
	          base = undefined;
	          break;
	        }
	      }
	      return base;
	    }

	    /**
	     * all option elements are wrapped in an item
	     * @param {Array} path    | where to look for the actual option
	     * @param {Array.<Element>} domElements
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_makeItem',
	    value: function _makeItem(path) {
	      if (this.allowCreation === true) {
	        var item = document.createElement('div');
	        item.className = 'vis-configuration vis-config-item vis-config-s' + path.length;

	        for (var _len = arguments.length, domElements = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	          domElements[_key - 1] = arguments[_key];
	        }

	        domElements.forEach(function (element) {
	          item.appendChild(element);
	        });
	        this.domElements.push(item);
	        return this.domElements.length;
	      }
	      return 0;
	    }

	    /**
	     * header for major subjects
	     * @param {string} name
	     * @private
	     */

	  }, {
	    key: '_makeHeader',
	    value: function _makeHeader(name) {
	      var div = document.createElement('div');
	      div.className = 'vis-configuration vis-config-header';
	      div.innerHTML = name;
	      this._makeItem([], div);
	    }

	    /**
	     * make a label, if it is an object label, it gets different styling.
	     * @param {string} name
	     * @param {array} path    | where to look for the actual option
	     * @param {string} objectLabel
	     * @returns {HTMLElement}
	     * @private
	     */

	  }, {
	    key: '_makeLabel',
	    value: function _makeLabel(name, path) {
	      var objectLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	      var div = document.createElement('div');
	      div.className = 'vis-configuration vis-config-label vis-config-s' + path.length;
	      if (objectLabel === true) {
	        div.innerHTML = '<i><b>' + name + ':</b></i>';
	      } else {
	        div.innerHTML = name + ':';
	      }
	      return div;
	    }

	    /**
	     * make a dropdown list for multiple possible string optoins
	     * @param {Array.<number>} arr
	     * @param {number} value
	     * @param {array} path    | where to look for the actual option
	     * @private
	     */

	  }, {
	    key: '_makeDropdown',
	    value: function _makeDropdown(arr, value, path) {
	      var select = document.createElement('select');
	      select.className = 'vis-configuration vis-config-select';
	      var selectedValue = 0;
	      if (value !== undefined) {
	        if (arr.indexOf(value) !== -1) {
	          selectedValue = arr.indexOf(value);
	        }
	      }

	      for (var i = 0; i < arr.length; i++) {
	        var option = document.createElement('option');
	        option.value = arr[i];
	        if (i === selectedValue) {
	          option.selected = 'selected';
	        }
	        option.innerHTML = arr[i];
	        select.appendChild(option);
	      }

	      var me = this;
	      select.onchange = function () {
	        me._update(this.value, path);
	      };

	      var label = this._makeLabel(path[path.length - 1], path);
	      this._makeItem(path, label, select);
	    }

	    /**
	     * make a range object for numeric options
	     * @param {Array.<number>} arr
	     * @param {number} value
	     * @param {array} path    | where to look for the actual option
	     * @private
	     */

	  }, {
	    key: '_makeRange',
	    value: function _makeRange(arr, value, path) {
	      var defaultValue = arr[0];
	      var min = arr[1];
	      var max = arr[2];
	      var step = arr[3];
	      var range = document.createElement('input');
	      range.className = 'vis-configuration vis-config-range';
	      try {
	        range.type = 'range'; // not supported on IE9
	        range.min = min;
	        range.max = max;
	      }
	      // TODO: Add some error handling and remove this lint exception
	      catch (err) {} // eslint-disable-line no-empty
	      range.step = step;

	      // set up the popup settings in case they are needed.
	      var popupString = '';
	      var popupValue = 0;

	      if (value !== undefined) {
	        var factor = 1.20;
	        if (value < 0 && value * factor < min) {
	          range.min = Math.ceil(value * factor);
	          popupValue = range.min;
	          popupString = 'range increased';
	        } else if (value / factor < min) {
	          range.min = Math.ceil(value / factor);
	          popupValue = range.min;
	          popupString = 'range increased';
	        }
	        if (value * factor > max && max !== 1) {
	          range.max = Math.ceil(value * factor);
	          popupValue = range.max;
	          popupString = 'range increased';
	        }
	        range.value = value;
	      } else {
	        range.value = defaultValue;
	      }

	      var input = document.createElement('input');
	      input.className = 'vis-configuration vis-config-rangeinput';
	      input.value = range.value;

	      var me = this;
	      range.onchange = function () {
	        input.value = this.value;me._update(Number(this.value), path);
	      };
	      range.oninput = function () {
	        input.value = this.value;
	      };

	      var label = this._makeLabel(path[path.length - 1], path);
	      var itemIndex = this._makeItem(path, label, range, input);

	      // if a popup is needed AND it has not been shown for this value, show it.
	      if (popupString !== '' && this.popupHistory[itemIndex] !== popupValue) {
	        this.popupHistory[itemIndex] = popupValue;
	        this._setupPopup(popupString, itemIndex);
	      }
	    }

	    /**
	     * prepare the popup
	     * @param {string} string
	     * @param {number} index
	     * @private
	     */

	  }, {
	    key: '_setupPopup',
	    value: function _setupPopup(string, index) {
	      var _this2 = this;

	      if (this.initialized === true && this.allowCreation === true && this.popupCounter < this.popupLimit) {
	        var div = document.createElement("div");
	        div.id = "vis-configuration-popup";
	        div.className = "vis-configuration-popup";
	        div.innerHTML = string;
	        div.onclick = function () {
	          _this2._removePopup();
	        };
	        this.popupCounter += 1;
	        this.popupDiv = { html: div, index: index };
	      }
	    }

	    /**
	     * remove the popup from the dom
	     * @private
	     */

	  }, {
	    key: '_removePopup',
	    value: function _removePopup() {
	      if (this.popupDiv.html !== undefined) {
	        this.popupDiv.html.parentNode.removeChild(this.popupDiv.html);
	        clearTimeout(this.popupDiv.hideTimeout);
	        clearTimeout(this.popupDiv.deleteTimeout);
	        this.popupDiv = {};
	      }
	    }

	    /**
	     * Show the popup if it is needed.
	     * @private
	     */

	  }, {
	    key: '_showPopupIfNeeded',
	    value: function _showPopupIfNeeded() {
	      var _this3 = this;

	      if (this.popupDiv.html !== undefined) {
	        var correspondingElement = this.domElements[this.popupDiv.index];
	        var rect = correspondingElement.getBoundingClientRect();
	        this.popupDiv.html.style.left = rect.left + "px";
	        this.popupDiv.html.style.top = rect.top - 30 + "px"; // 30 is the height;
	        document.body.appendChild(this.popupDiv.html);
	        this.popupDiv.hideTimeout = setTimeout(function () {
	          _this3.popupDiv.html.style.opacity = 0;
	        }, 1500);
	        this.popupDiv.deleteTimeout = setTimeout(function () {
	          _this3._removePopup();
	        }, 1800);
	      }
	    }

	    /**
	     * make a checkbox for boolean options.
	     * @param {number} defaultValue
	     * @param {number} value
	     * @param {array} path    | where to look for the actual option
	     * @private
	     */

	  }, {
	    key: '_makeCheckbox',
	    value: function _makeCheckbox(defaultValue, value, path) {
	      var checkbox = document.createElement('input');
	      checkbox.type = 'checkbox';
	      checkbox.className = 'vis-configuration vis-config-checkbox';
	      checkbox.checked = defaultValue;
	      if (value !== undefined) {
	        checkbox.checked = value;
	        if (value !== defaultValue) {
	          if ((typeof defaultValue === 'undefined' ? 'undefined' : (0, _typeof3['default'])(defaultValue)) === 'object') {
	            if (value !== defaultValue.enabled) {
	              this.changedOptions.push({ path: path, value: value });
	            }
	          } else {
	            this.changedOptions.push({ path: path, value: value });
	          }
	        }
	      }

	      var me = this;
	      checkbox.onchange = function () {
	        me._update(this.checked, path);
	      };

	      var label = this._makeLabel(path[path.length - 1], path);
	      this._makeItem(path, label, checkbox);
	    }

	    /**
	     * make a text input field for string options.
	     * @param {number} defaultValue
	     * @param {number} value
	     * @param {array} path    | where to look for the actual option
	     * @private
	     */

	  }, {
	    key: '_makeTextInput',
	    value: function _makeTextInput(defaultValue, value, path) {
	      var checkbox = document.createElement('input');
	      checkbox.type = 'text';
	      checkbox.className = 'vis-configuration vis-config-text';
	      checkbox.value = value;
	      if (value !== defaultValue) {
	        this.changedOptions.push({ path: path, value: value });
	      }

	      var me = this;
	      checkbox.onchange = function () {
	        me._update(this.value, path);
	      };

	      var label = this._makeLabel(path[path.length - 1], path);
	      this._makeItem(path, label, checkbox);
	    }

	    /**
	     * make a color field with a color picker for color fields
	     * @param {Array.<number>} arr
	     * @param {number} value
	     * @param {array} path    | where to look for the actual option
	     * @private
	     */

	  }, {
	    key: '_makeColorField',
	    value: function _makeColorField(arr, value, path) {
	      var _this4 = this;

	      var defaultColor = arr[1];
	      var div = document.createElement('div');
	      value = value === undefined ? defaultColor : value;

	      if (value !== 'none') {
	        div.className = 'vis-configuration vis-config-colorBlock';
	        div.style.backgroundColor = value;
	      } else {
	        div.className = 'vis-configuration vis-config-colorBlock none';
	      }

	      value = value === undefined ? defaultColor : value;
	      div.onclick = function () {
	        _this4._showColorPicker(value, div, path);
	      };

	      var label = this._makeLabel(path[path.length - 1], path);
	      this._makeItem(path, label, div);
	    }

	    /**
	     * used by the color buttons to call the color picker.
	     * @param {number} value
	     * @param {HTMLElement} div
	     * @param {array} path    | where to look for the actual option
	     * @private
	     */

	  }, {
	    key: '_showColorPicker',
	    value: function _showColorPicker(value, div, path) {
	      var _this5 = this;

	      // clear the callback from this div
	      div.onclick = function () {};

	      this.colorPicker.insertTo(div);
	      this.colorPicker.show();

	      this.colorPicker.setColor(value);
	      this.colorPicker.setUpdateCallback(function (color) {
	        var colorString = 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + color.a + ')';
	        div.style.backgroundColor = colorString;
	        _this5._update(colorString, path);
	      });

	      // on close of the colorpicker, restore the callback.
	      this.colorPicker.setCloseCallback(function () {
	        div.onclick = function () {
	          _this5._showColorPicker(value, div, path);
	        };
	      });
	    }

	    /**
	     * parse an object and draw the correct items
	     * @param {Object} obj
	     * @param {array} [path=[]]    | where to look for the actual option
	     * @param {boolean} [checkOnly=false]
	     * @returns {boolean}
	     * @private
	     */

	  }, {
	    key: '_handleObject',
	    value: function _handleObject(obj) {
	      var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	      var checkOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	      var show = false;
	      var filter = this.options.filter;
	      var visibleInSet = false;
	      for (var subObj in obj) {
	        if (obj.hasOwnProperty(subObj)) {
	          show = true;
	          var item = obj[subObj];
	          var newPath = util.copyAndExtendArray(path, subObj);
	          if (typeof filter === 'function') {
	            show = filter(subObj, path);

	            // if needed we must go deeper into the object.
	            if (show === false) {
	              if (!(item instanceof Array) && typeof item !== 'string' && typeof item !== 'boolean' && item instanceof Object) {
	                this.allowCreation = false;
	                show = this._handleObject(item, newPath, true);
	                this.allowCreation = checkOnly === false;
	              }
	            }
	          }

	          if (show !== false) {
	            visibleInSet = true;
	            var value = this._getValue(newPath);

	            if (item instanceof Array) {
	              this._handleArray(item, value, newPath);
	            } else if (typeof item === 'string') {
	              this._makeTextInput(item, value, newPath);
	            } else if (typeof item === 'boolean') {
	              this._makeCheckbox(item, value, newPath);
	            } else if (item instanceof Object) {
	              // collapse the physics options that are not enabled
	              var draw = true;
	              if (path.indexOf('physics') !== -1) {
	                if (this.moduleOptions.physics.solver !== subObj) {
	                  draw = false;
	                }
	              }

	              if (draw === true) {
	                // initially collapse options with an disabled enabled option.
	                if (item.enabled !== undefined) {
	                  var enabledPath = util.copyAndExtendArray(newPath, 'enabled');
	                  var enabledValue = this._getValue(enabledPath);
	                  if (enabledValue === true) {
	                    var label = this._makeLabel(subObj, newPath, true);
	                    this._makeItem(newPath, label);
	                    visibleInSet = this._handleObject(item, newPath) || visibleInSet;
	                  } else {
	                    this._makeCheckbox(item, enabledValue, newPath);
	                  }
	                } else {
	                  var _label = this._makeLabel(subObj, newPath, true);
	                  this._makeItem(newPath, _label);
	                  visibleInSet = this._handleObject(item, newPath) || visibleInSet;
	                }
	              }
	            } else {
	              console.error('dont know how to handle', item, subObj, newPath);
	            }
	          }
	        }
	      }
	      return visibleInSet;
	    }

	    /**
	     * handle the array type of option
	     * @param {Array.<number>} arr
	     * @param {number} value
	     * @param {array} path    | where to look for the actual option
	     * @private
	     */

	  }, {
	    key: '_handleArray',
	    value: function _handleArray(arr, value, path) {
	      if (typeof arr[0] === 'string' && arr[0] === 'color') {
	        this._makeColorField(arr, value, path);
	        if (arr[1] !== value) {
	          this.changedOptions.push({ path: path, value: value });
	        }
	      } else if (typeof arr[0] === 'string') {
	        this._makeDropdown(arr, value, path);
	        if (arr[0] !== value) {
	          this.changedOptions.push({ path: path, value: value });
	        }
	      } else if (typeof arr[0] === 'number') {
	        this._makeRange(arr, value, path);
	        if (arr[0] !== value) {
	          this.changedOptions.push({ path: path, value: Number(value) });
	        }
	      }
	    }

	    /**
	     * called to update the network with the new settings.
	     * @param {number} value
	     * @param {array} path    | where to look for the actual option
	     * @private
	     */

	  }, {
	    key: '_update',
	    value: function _update(value, path) {
	      var options = this._constructOptions(value, path);

	      if (this.parent.body && this.parent.body.emitter && this.parent.body.emitter.emit) {
	        this.parent.body.emitter.emit("configChange", options);
	      }
	      this.initialized = true;
	      this.parent.setOptions(options);
	    }

	    /**
	     *
	     * @param {string|Boolean} value
	     * @param {Array.<string>} path
	     * @param {{}} optionsObj
	     * @returns {{}}
	     * @private
	     */

	  }, {
	    key: '_constructOptions',
	    value: function _constructOptions(value, path) {
	      var optionsObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	      var pointer = optionsObj;

	      // when dropdown boxes can be string or boolean, we typecast it into correct types
	      value = value === 'true' ? true : value;
	      value = value === 'false' ? false : value;

	      for (var i = 0; i < path.length; i++) {
	        if (path[i] !== 'global') {
	          if (pointer[path[i]] === undefined) {
	            pointer[path[i]] = {};
	          }
	          if (i !== path.length - 1) {
	            pointer = pointer[path[i]];
	          } else {
	            pointer[path[i]] = value;
	          }
	        }
	      }
	      return optionsObj;
	    }

	    /**
	     * @private
	     */

	  }, {
	    key: '_printOptions',
	    value: function _printOptions() {
	      var options = this.getOptions();
	      this.optionsContainer.innerHTML = '<pre>var options = ' + (0, _stringify2['default'])(options, null, 2) + '</pre>';
	    }

	    /**
	     *
	     * @returns {{}} options
	     */

	  }, {
	    key: 'getOptions',
	    value: function getOptions() {
	      var options = {};
	      for (var i = 0; i < this.changedOptions.length; i++) {
	        this._constructOptions(this.changedOptions[i].value, this.changedOptions[i].path, options);
	      }
	      return options;
	    }
	  }]);
	  return Configurator;
	}();

	exports['default'] = Configurator;

	/***/ }),
	/* 72 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var DOMutil = __webpack_require__(14);

	/**
	 *
	 * @param {number | string} groupId
	 * @param {Object} options   // TODO: Describe options
	 *
	 * @constructor Points
	 */
	function Points(groupId, options) {} // eslint-disable-line no-unused-vars


	/**
	 * draw the data points
	 *
	 * @param {Array} dataset
	 * @param {GraphGroup} group
	 * @param {Object} framework            | SVG DOM element
	 * @param {number} [offset]
	 */
	Points.draw = function (dataset, group, framework, offset) {
	  offset = offset || 0;
	  var callback = getCallback(framework, group);

	  for (var i = 0; i < dataset.length; i++) {
	    if (!callback) {
	      // draw the point the simple way.
	      DOMutil.drawPoint(dataset[i].screen_x + offset, dataset[i].screen_y, getGroupTemplate(group), framework.svgElements, framework.svg, dataset[i].label);
	    } else {
	      var callbackResult = callback(dataset[i], group); // result might be true, false or an object
	      if (callbackResult === true || (typeof callbackResult === 'undefined' ? 'undefined' : (0, _typeof3['default'])(callbackResult)) === 'object') {
	        DOMutil.drawPoint(dataset[i].screen_x + offset, dataset[i].screen_y, getGroupTemplate(group, callbackResult), framework.svgElements, framework.svg, dataset[i].label);
	      }
	    }
	  }
	};

	Points.drawIcon = function (group, x, y, iconWidth, iconHeight, framework) {
	  var fillHeight = iconHeight * 0.5;

	  var outline = DOMutil.getSVGElement("rect", framework.svgElements, framework.svg);
	  outline.setAttributeNS(null, "x", x);
	  outline.setAttributeNS(null, "y", y - fillHeight);
	  outline.setAttributeNS(null, "width", iconWidth);
	  outline.setAttributeNS(null, "height", 2 * fillHeight);
	  outline.setAttributeNS(null, "class", "vis-outline");

	  //Don't call callback on icon
	  DOMutil.drawPoint(x + 0.5 * iconWidth, y, getGroupTemplate(group), framework.svgElements, framework.svg);
	};

	/**
	 *
	 * @param {vis.Group} group
	 * @param {any} callbackResult
	 * @returns {{style: *, styles: (*|string), size: *, className: *}}
	 */
	function getGroupTemplate(group, callbackResult) {
	  callbackResult = typeof callbackResult === 'undefined' ? {} : callbackResult;
	  return {
	    style: callbackResult.style || group.options.drawPoints.style,
	    styles: callbackResult.styles || group.options.drawPoints.styles,
	    size: callbackResult.size || group.options.drawPoints.size,
	    className: callbackResult.className || group.className
	  };
	}

	/**
	 *
	 * @param {Object} framework            | SVG DOM element
	 * @param {vis.Group} group
	 * @returns {function}
	 */
	function getCallback(framework, group) {
	  var callback = undefined;
	  // check for the graph2d onRender
	  if (framework.options && framework.options.drawPoints && framework.options.drawPoints.onRender && typeof framework.options.drawPoints.onRender == 'function') {
	    callback = framework.options.drawPoints.onRender;
	  }

	  // override it with the group onRender if defined
	  if (group.group.options && group.group.options.drawPoints && group.group.options.drawPoints.onRender && typeof group.group.options.drawPoints.onRender == 'function') {
	    callback = group.group.options.drawPoints.onRender;
	  }
	  return callback;
	}

	module.exports = Points;

	/***/ }),
	/* 73 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _NodeBase2 = __webpack_require__(23);

	var _NodeBase3 = _interopRequireDefault(_NodeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * NOTE: This is a bad base class
	 *
	 * Child classes are:
	 *
	 *   Image       - uses *only* image methods
	 *   Circle      - uses *only* _drawRawCircle
	 *   CircleImage - uses all
	 *
	 * TODO: Refactor, move _drawRawCircle to different module, derive Circle from NodeBase
	 *       Rename this to ImageBase
	 *       Consolidate common code in Image and CircleImage to base class
	 *
	 * @extends NodeBase
	 */
	var CircleImageBase = function (_NodeBase) {
	  (0, _inherits3['default'])(CircleImageBase, _NodeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function CircleImageBase(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, CircleImageBase);

	    var _this = (0, _possibleConstructorReturn3['default'])(this, (CircleImageBase.__proto__ || (0, _getPrototypeOf2['default'])(CircleImageBase)).call(this, options, body, labelModule));

	    _this.labelOffset = 0;
	    _this.selected = false;
	    return _this;
	  }

	  /**
	   *
	   * @param {Object} options
	   * @param {Object} [imageObj]
	   * @param {Object} [imageObjAlt]
	   */


	  (0, _createClass3['default'])(CircleImageBase, [{
	    key: 'setOptions',
	    value: function setOptions(options, imageObj, imageObjAlt) {
	      this.options = options;

	      if (!(imageObj === undefined && imageObjAlt === undefined)) {
	        this.setImages(imageObj, imageObjAlt);
	      }
	    }

	    /**
	     * Set the images for this node.
	     *
	     * The images can be updated after the initial setting of options;
	     * therefore, this method needs to be reentrant. 
	     *
	     * For correct working in error cases, it is necessary to properly set
	     * field 'nodes.brokenImage' in the options.
	     *
	     * @param {Image} imageObj  required; main image to show for this node
	     * @param {Image|undefined} imageObjAlt optional; image to show when node is selected
	     */

	  }, {
	    key: 'setImages',
	    value: function setImages(imageObj, imageObjAlt) {
	      if (imageObjAlt && this.selected) {
	        this.imageObj = imageObjAlt;
	        this.imageObjAlt = imageObj;
	      } else {
	        this.imageObj = imageObj;
	        this.imageObjAlt = imageObjAlt;
	      }
	    }

	    /**
	     * Set selection and switch between the base and the selected image.
	     *
	     * Do the switch only if imageObjAlt exists.
	     *
	     * @param {boolean} selected value of new selected state for current node
	     */

	  }, {
	    key: 'switchImages',
	    value: function switchImages(selected) {
	      var selection_changed = selected && !this.selected || !selected && this.selected;
	      this.selected = selected; // Remember new selection

	      if (this.imageObjAlt !== undefined && selection_changed) {
	        var imageTmp = this.imageObj;
	        this.imageObj = this.imageObjAlt;
	        this.imageObjAlt = imageTmp;
	      }
	    }

	    /**
	     * Adjust the node dimensions for a loaded image.
	     *
	     * Pre: this.imageObj is valid
	     */

	  }, {
	    key: '_resizeImage',
	    value: function _resizeImage() {
	      var width, height;

	      if (this.options.shapeProperties.useImageSize === false) {
	        // Use the size property
	        var ratio_width = 1;
	        var ratio_height = 1;

	        // Only calculate the proper ratio if both width and height not zero
	        if (this.imageObj.width && this.imageObj.height) {
	          if (this.imageObj.width > this.imageObj.height) {
	            ratio_width = this.imageObj.width / this.imageObj.height;
	          } else {
	            ratio_height = this.imageObj.height / this.imageObj.width;
	          }
	        }

	        width = this.options.size * 2 * ratio_width;
	        height = this.options.size * 2 * ratio_height;
	      } else {
	        // Use the image size
	        width = this.imageObj.width;
	        height = this.imageObj.height;
	      }

	      this.width = width;
	      this.height = height;
	      this.radius = 0.5 * this.width;
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} x width
	     * @param {number} y height
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     * @private
	     */

	  }, {
	    key: '_drawRawCircle',
	    value: function _drawRawCircle(ctx, x, y, values) {
	      this.initContextForDraw(ctx, values);
	      ctx.circle(x, y, values.size);
	      this.performFill(ctx, values);
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     * @private
	     */

	  }, {
	    key: '_drawImageAtPosition',
	    value: function _drawImageAtPosition(ctx, values) {
	      if (this.imageObj.width != 0) {
	        // draw the image
	        ctx.globalAlpha = 1.0;

	        // draw shadow if enabled
	        this.enableShadow(ctx, values);

	        var factor = 1;
	        if (this.options.shapeProperties.interpolation === true) {
	          factor = this.imageObj.width / this.width / this.body.view.scale;
	        }

	        this.imageObj.drawImageAtPosition(ctx, factor, this.left, this.top, this.width, this.height);

	        // disable shadows for other elements.
	        this.disableShadow(ctx, values);
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} x width
	     * @param {number} y height
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @private
	     */

	  }, {
	    key: '_drawImageLabel',
	    value: function _drawImageLabel(ctx, x, y, selected, hover) {
	      var yLabel;
	      var offset = 0;

	      if (this.height !== undefined) {
	        offset = this.height * 0.5;
	        var labelDimensions = this.labelModule.getTextSize(ctx, selected, hover);
	        if (labelDimensions.lineCount >= 1) {
	          offset += labelDimensions.height / 2;
	        }
	      }

	      yLabel = y + offset;

	      if (this.options.label) {
	        this.labelOffset = offset;
	      }
	      this.labelModule.draw(ctx, x, yLabel, selected, hover, 'hanging');
	    }
	  }]);
	  return CircleImageBase;
	}(_NodeBase3['default']);

	exports['default'] = CircleImageBase;

	/***/ }),
	/* 74 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _stringify = __webpack_require__(19);

	var _stringify2 = _interopRequireDefault(_stringify);

	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	var _create = __webpack_require__(29);

	var _create2 = _interopRequireDefault(_create);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);
	var Label = __webpack_require__(117)['default'];
	var ComponentUtil = __webpack_require__(48)['default'];
	var CubicBezierEdge = __webpack_require__(215)['default'];
	var BezierEdgeDynamic = __webpack_require__(217)['default'];
	var BezierEdgeStatic = __webpack_require__(218)['default'];
	var StraightEdge = __webpack_require__(219)['default'];

	/**
	 * An edge connects two nodes and has a specific direction.
	 */

	var Edge = function () {
	  /**
	   * @param {Object} options        values specific to this edge, must contain at least 'from' and 'to'
	   * @param {Object} body           shared state from Network instance
	   * @param {Object} globalOptions  options from the EdgesHandler instance
	   * @param {Object} defaultOptions default options from the EdgeHandler instance. Value and reference are constant
	   */
	  function Edge(options, body, globalOptions, defaultOptions) {
	    (0, _classCallCheck3['default'])(this, Edge);

	    if (body === undefined) {
	      throw new Error("No body provided");
	    }

	    // Since globalOptions is constant in values as well as reference,
	    // Following needs to be done only once.

	    this.options = util.bridgeObject(globalOptions);
	    this.globalOptions = globalOptions;
	    this.defaultOptions = defaultOptions;
	    this.body = body;

	    // initialize variables
	    this.id = undefined;
	    this.fromId = undefined;
	    this.toId = undefined;
	    this.selected = false;
	    this.hover = false;
	    this.labelDirty = true;

	    this.baseWidth = this.options.width;
	    this.baseFontSize = this.options.font.size;

	    this.from = undefined; // a node
	    this.to = undefined; // a node

	    this.edgeType = undefined;

	    this.connected = false;

	    this.labelModule = new Label(this.body, this.options, true /* It's an edge label */);
	    this.setOptions(options);
	  }

	  /**
	   * Set or overwrite options for the edge
	   * @param {Object} options  an object with options
	   * @returns {null|boolean} null if no options, boolean if date changed
	   */


	  (0, _createClass3['default'])(Edge, [{
	    key: 'setOptions',
	    value: function setOptions(options) {
	      if (!options) {
	        return;
	      }

	      Edge.parseOptions(this.options, options, true, this.globalOptions);

	      if (options.id !== undefined) {
	        this.id = options.id;
	      }
	      if (options.from !== undefined) {
	        this.fromId = options.from;
	      }
	      if (options.to !== undefined) {
	        this.toId = options.to;
	      }
	      if (options.title !== undefined) {
	        this.title = options.title;
	      }
	      if (options.value !== undefined) {
	        options.value = parseFloat(options.value);
	      }

	      var pile = [options, this.options, this.defaultOptions];
	      this.chooser = ComponentUtil.choosify('edge', pile);

	      // update label Module
	      this.updateLabelModule(options);

	      var dataChanged = this.updateEdgeType();

	      // if anything has been updates, reset the selection width and the hover width
	      this._setInteractionWidths();

	      // A node is connected when it has a from and to node that both exist in the network.body.nodes.
	      this.connect();

	      if (options.hidden !== undefined || options.physics !== undefined) {
	        dataChanged = true;
	      }

	      return dataChanged;
	    }

	    /**
	     *
	     * @param {Object} parentOptions
	     * @param {Object} newOptions
	     * @param {boolean} [allowDeletion=false]
	     * @param {Object} [globalOptions={}]
	     * @param {boolean} [copyFromGlobals=false]
	     */

	  }, {
	    key: 'getFormattingValues',


	    /**
	     *
	     * @returns {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}}
	     */
	    value: function getFormattingValues() {
	      var toArrow = this.options.arrows.to === true || this.options.arrows.to.enabled === true;
	      var fromArrow = this.options.arrows.from === true || this.options.arrows.from.enabled === true;
	      var middleArrow = this.options.arrows.middle === true || this.options.arrows.middle.enabled === true;
	      var inheritsColor = this.options.color.inherit;
	      var values = {
	        toArrow: toArrow,
	        toArrowScale: this.options.arrows.to.scaleFactor,
	        toArrowType: this.options.arrows.to.type,
	        middleArrow: middleArrow,
	        middleArrowScale: this.options.arrows.middle.scaleFactor,
	        middleArrowType: this.options.arrows.middle.type,
	        fromArrow: fromArrow,
	        fromArrowScale: this.options.arrows.from.scaleFactor,
	        fromArrowType: this.options.arrows.from.type,
	        arrowStrikethrough: this.options.arrowStrikethrough,
	        color: inheritsColor ? undefined : this.options.color.color,
	        inheritsColor: inheritsColor,
	        opacity: this.options.color.opacity,
	        hidden: this.options.hidden,
	        length: this.options.length,
	        shadow: this.options.shadow.enabled,
	        shadowColor: this.options.shadow.color,
	        shadowSize: this.options.shadow.size,
	        shadowX: this.options.shadow.x,
	        shadowY: this.options.shadow.y,
	        dashes: this.options.dashes,
	        width: this.options.width
	      };
	      if (this.selected || this.hover) {
	        if (this.chooser === true) {
	          if (this.selected) {
	            var selectedWidth = this.options.selectionWidth;
	            if (typeof selectedWidth === 'function') {
	              values.width = selectedWidth(values.width);
	            } else if (typeof selectedWidth === 'number') {
	              values.width += selectedWidth;
	            }
	            values.width = Math.max(values.width, 0.3 / this.body.view.scale);
	            values.color = this.options.color.highlight;
	            values.shadow = this.options.shadow.enabled;
	          } else if (this.hover) {
	            var hoverWidth = this.options.hoverWidth;
	            if (typeof hoverWidth === 'function') {
	              values.width = hoverWidth(values.width);
	            } else if (typeof hoverWidth === 'number') {
	              values.width += hoverWidth;
	            }
	            values.width = Math.max(values.width, 0.3 / this.body.view.scale);
	            values.color = this.options.color.hover;
	            values.shadow = this.options.shadow.enabled;
	          }
	        } else if (typeof this.chooser === 'function') {
	          this.chooser(values, this.options.id, this.selected, this.hover);
	          if (values.color !== undefined) {
	            values.inheritsColor = false;
	          }
	          if (values.shadow === false) {
	            if (values.shadowColor !== this.options.shadow.color || values.shadowSize !== this.options.shadow.size || values.shadowX !== this.options.shadow.x || values.shadowY !== this.options.shadow.y) {
	              values.shadow = true;
	            }
	          }
	        }
	      } else {
	        values.shadow = this.options.shadow.enabled;
	        values.width = Math.max(values.width, 0.3 / this.body.view.scale);
	      }
	      return values;
	    }

	    /**
	     * update the options in the label module
	     *
	     * @param {Object} options
	     */

	  }, {
	    key: 'updateLabelModule',
	    value: function updateLabelModule(options) {
	      var pile = [options, this.options, this.globalOptions, // Currently set global edge options
	      this.defaultOptions];

	      this.labelModule.update(this.options, pile);

	      if (this.labelModule.baseSize !== undefined) {
	        this.baseFontSize = this.labelModule.baseSize;
	      }
	    }

	    /**
	     * update the edge type, set the options
	     * @returns {boolean}
	     */

	  }, {
	    key: 'updateEdgeType',
	    value: function updateEdgeType() {
	      var smooth = this.options.smooth;
	      var dataChanged = false;
	      var changeInType = true;
	      if (this.edgeType !== undefined) {
	        if (this.edgeType instanceof BezierEdgeDynamic && smooth.enabled === true && smooth.type === 'dynamic' || this.edgeType instanceof CubicBezierEdge && smooth.enabled === true && smooth.type === 'cubicBezier' || this.edgeType instanceof BezierEdgeStatic && smooth.enabled === true && smooth.type !== 'dynamic' && smooth.type !== 'cubicBezier' || this.edgeType instanceof StraightEdge && smooth.type.enabled === false) {
	          changeInType = false;
	        }
	        if (changeInType === true) {
	          dataChanged = this.cleanup();
	        }
	      }
	      if (changeInType === true) {
	        if (smooth.enabled === true) {
	          if (smooth.type === 'dynamic') {
	            dataChanged = true;
	            this.edgeType = new BezierEdgeDynamic(this.options, this.body, this.labelModule);
	          } else if (smooth.type === 'cubicBezier') {
	            this.edgeType = new CubicBezierEdge(this.options, this.body, this.labelModule);
	          } else {
	            this.edgeType = new BezierEdgeStatic(this.options, this.body, this.labelModule);
	          }
	        } else {
	          this.edgeType = new StraightEdge(this.options, this.body, this.labelModule);
	        }
	      } else {
	        // if nothing changes, we just set the options.
	        this.edgeType.setOptions(this.options);
	      }
	      return dataChanged;
	    }

	    /**
	     * Connect an edge to its nodes
	     */

	  }, {
	    key: 'connect',
	    value: function connect() {
	      this.disconnect();

	      this.from = this.body.nodes[this.fromId] || undefined;
	      this.to = this.body.nodes[this.toId] || undefined;
	      this.connected = this.from !== undefined && this.to !== undefined;

	      if (this.connected === true) {
	        this.from.attachEdge(this);
	        this.to.attachEdge(this);
	      } else {
	        if (this.from) {
	          this.from.detachEdge(this);
	        }
	        if (this.to) {
	          this.to.detachEdge(this);
	        }
	      }

	      this.edgeType.connect();
	    }

	    /**
	     * Disconnect an edge from its nodes
	     */

	  }, {
	    key: 'disconnect',
	    value: function disconnect() {
	      if (this.from) {
	        this.from.detachEdge(this);
	        this.from = undefined;
	      }
	      if (this.to) {
	        this.to.detachEdge(this);
	        this.to = undefined;
	      }

	      this.connected = false;
	    }

	    /**
	     * get the title of this edge.
	     * @return {string} title    The title of the edge, or undefined when no title
	     *                           has been set.
	     */

	  }, {
	    key: 'getTitle',
	    value: function getTitle() {
	      return this.title;
	    }

	    /**
	     * check if this node is selecte
	     * @return {boolean} selected   True if node is selected, else false
	     */

	  }, {
	    key: 'isSelected',
	    value: function isSelected() {
	      return this.selected;
	    }

	    /**
	     * Retrieve the value of the edge. Can be undefined
	     * @return {number} value
	     */

	  }, {
	    key: 'getValue',
	    value: function getValue() {
	      return this.options.value;
	    }

	    /**
	     * Adjust the value range of the edge. The edge will adjust it's width
	     * based on its value.
	     * @param {number} min
	     * @param {number} max
	     * @param {number} total
	     */

	  }, {
	    key: 'setValueRange',
	    value: function setValueRange(min, max, total) {
	      if (this.options.value !== undefined) {
	        var scale = this.options.scaling.customScalingFunction(min, max, total, this.options.value);
	        var widthDiff = this.options.scaling.max - this.options.scaling.min;
	        if (this.options.scaling.label.enabled === true) {
	          var fontDiff = this.options.scaling.label.max - this.options.scaling.label.min;
	          this.options.font.size = this.options.scaling.label.min + scale * fontDiff;
	        }
	        this.options.width = this.options.scaling.min + scale * widthDiff;
	      } else {
	        this.options.width = this.baseWidth;
	        this.options.font.size = this.baseFontSize;
	      }

	      this._setInteractionWidths();
	      this.updateLabelModule();
	    }

	    /**
	     *
	     * @private
	     */

	  }, {
	    key: '_setInteractionWidths',
	    value: function _setInteractionWidths() {
	      if (typeof this.options.hoverWidth === 'function') {
	        this.edgeType.hoverWidth = this.options.hoverWidth(this.options.width);
	      } else {
	        this.edgeType.hoverWidth = this.options.hoverWidth + this.options.width;
	      }
	      if (typeof this.options.selectionWidth === 'function') {
	        this.edgeType.selectionWidth = this.options.selectionWidth(this.options.width);
	      } else {
	        this.edgeType.selectionWidth = this.options.selectionWidth + this.options.width;
	      }
	    }

	    /**
	     * Redraw a edge
	     * Draw this edge in the given canvas
	     * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
	     * @param {CanvasRenderingContext2D}   ctx
	     */

	  }, {
	    key: 'draw',
	    value: function draw(ctx) {
	      var values = this.getFormattingValues();
	      if (values.hidden) {
	        return;
	      }

	      // get the via node from the edge type
	      var viaNode = this.edgeType.getViaNode();
	      var arrowData = {};

	      // restore edge targets to defaults
	      this.edgeType.fromPoint = this.edgeType.from;
	      this.edgeType.toPoint = this.edgeType.to;

	      // from and to arrows give a different end point for edges. we set them here
	      if (values.fromArrow) {
	        arrowData.from = this.edgeType.getArrowData(ctx, 'from', viaNode, this.selected, this.hover, values);
	        if (values.arrowStrikethrough === false) this.edgeType.fromPoint = arrowData.from.core;
	      }
	      if (values.toArrow) {
	        arrowData.to = this.edgeType.getArrowData(ctx, 'to', viaNode, this.selected, this.hover, values);
	        if (values.arrowStrikethrough === false) this.edgeType.toPoint = arrowData.to.core;
	      }

	      // the middle arrow depends on the line, which can depend on the to and from arrows so we do this one lastly.
	      if (values.middleArrow) {
	        arrowData.middle = this.edgeType.getArrowData(ctx, 'middle', viaNode, this.selected, this.hover, values);
	      }

	      // draw everything
	      this.edgeType.drawLine(ctx, values, this.selected, this.hover, viaNode);
	      this.drawArrows(ctx, arrowData, values);
	      this.drawLabel(ctx, viaNode);
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {Object} arrowData
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: 'drawArrows',
	    value: function drawArrows(ctx, arrowData, values) {
	      if (values.fromArrow) {
	        this.edgeType.drawArrowHead(ctx, values, this.selected, this.hover, arrowData.from);
	      }
	      if (values.middleArrow) {
	        this.edgeType.drawArrowHead(ctx, values, this.selected, this.hover, arrowData.middle);
	      }
	      if (values.toArrow) {
	        this.edgeType.drawArrowHead(ctx, values, this.selected, this.hover, arrowData.to);
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {Node} viaNode
	     */

	  }, {
	    key: 'drawLabel',
	    value: function drawLabel(ctx, viaNode) {
	      if (this.options.label !== undefined) {
	        // set style
	        var node1 = this.from;
	        var node2 = this.to;

	        if (this.labelModule.differentState(this.selected, this.hover)) {
	          this.labelModule.getTextSize(ctx, this.selected, this.hover);
	        }

	        if (node1.id != node2.id) {
	          this.labelModule.pointToSelf = false;
	          var point = this.edgeType.getPoint(0.5, viaNode);
	          ctx.save();

	          var rotationPoint = this._getRotation(ctx);
	          if (rotationPoint.angle != 0) {
	            ctx.translate(rotationPoint.x, rotationPoint.y);
	            ctx.rotate(rotationPoint.angle);
	          }

	          // draw the label
	          this.labelModule.draw(ctx, point.x, point.y, this.selected, this.hover);

	          /*
	                  // Useful debug code: draw a border around the label
	                  // This should **not** be enabled in production!
	                  var size = this.labelModule.getSize();; // ;; intentional so lint catches it
	                  ctx.strokeStyle = "#ff0000";
	                  ctx.strokeRect(size.left, size.top, size.width, size.height);
	                  // End  debug code
	          */

	          ctx.restore();
	        } else {
	          // Ignore the orientations.
	          this.labelModule.pointToSelf = true;
	          var x, y;
	          var radius = this.options.selfReferenceSize;
	          if (node1.shape.width > node1.shape.height) {
	            x = node1.x + node1.shape.width * 0.5;
	            y = node1.y - radius;
	          } else {
	            x = node1.x + radius;
	            y = node1.y - node1.shape.height * 0.5;
	          }
	          point = this._pointOnCircle(x, y, radius, 0.125);
	          this.labelModule.draw(ctx, point.x, point.y, this.selected, this.hover);
	        }
	      }
	    }

	    /**
	     * Determine all visual elements of this edge instance, in which the given
	     * point falls within the bounding shape.
	     *
	     * @param {point} point
	     * @returns {Array.<edgeClickItem|edgeLabelClickItem>} list with the items which are on the point
	     */

	  }, {
	    key: 'getItemsOnPoint',
	    value: function getItemsOnPoint(point) {
	      var ret = [];

	      if (this.labelModule.visible()) {
	        var rotationPoint = this._getRotation();
	        if (ComponentUtil.pointInRect(this.labelModule.getSize(), point, rotationPoint)) {
	          ret.push({ edgeId: this.id, labelId: 0 });
	        }
	      }

	      var obj = {
	        left: point.x,
	        top: point.y
	      };

	      if (this.isOverlappingWith(obj)) {
	        ret.push({ edgeId: this.id });
	      }

	      return ret;
	    }

	    /**
	     * Check if this object is overlapping with the provided object
	     * @param {Object} obj   an object with parameters left, top
	     * @return {boolean}     True if location is located on the edge
	     */

	  }, {
	    key: 'isOverlappingWith',
	    value: function isOverlappingWith(obj) {
	      if (this.connected) {
	        var distMax = 10;
	        var xFrom = this.from.x;
	        var yFrom = this.from.y;
	        var xTo = this.to.x;
	        var yTo = this.to.y;
	        var xObj = obj.left;
	        var yObj = obj.top;

	        var dist = this.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, xObj, yObj);

	        return dist < distMax;
	      } else {
	        return false;
	      }
	    }

	    /** 
	     * Determine the rotation point, if any.
	     *
	     * @param {CanvasRenderingContext2D} [ctx] if passed, do a recalculation of the label size
	     * @returns {rotationPoint} the point to rotate around and the angle in radians to rotate
	     * @private
	     */

	  }, {
	    key: '_getRotation',
	    value: function _getRotation(ctx) {
	      var viaNode = this.edgeType.getViaNode();
	      var point = this.edgeType.getPoint(0.5, viaNode);

	      if (ctx !== undefined) {
	        this.labelModule.calculateLabelSize(ctx, this.selected, this.hover, point.x, point.y);
	      }

	      var ret = {
	        x: point.x,
	        y: this.labelModule.size.yLine,
	        angle: 0
	      };

	      if (!this.labelModule.visible()) {
	        return ret; // Don't even bother doing the atan2, there's nothing to draw
	      }

	      if (this.options.font.align === "horizontal") {
	        return ret; // No need to calculate angle
	      }

	      var dy = this.from.y - this.to.y;
	      var dx = this.from.x - this.to.x;
	      var angle = Math.atan2(dy, dx); // radians

	      // rotate so that label is readable
	      if (angle < -1 && dx < 0 || angle > 0 && dx < 0) {
	        angle += Math.PI;
	      }
	      ret.angle = angle;

	      return ret;
	    }

	    /**
	     * Get a point on a circle
	     * @param {number} x
	     * @param {number} y
	     * @param {number} radius
	     * @param {number} percentage Value between 0 (line start) and 1 (line end)
	     * @return {Object} point
	     * @private
	     */

	  }, {
	    key: '_pointOnCircle',
	    value: function _pointOnCircle(x, y, radius, percentage) {
	      var angle = percentage * 2 * Math.PI;
	      return {
	        x: x + radius * Math.cos(angle),
	        y: y - radius * Math.sin(angle)
	      };
	    }

	    /**
	     * Sets selected state to true
	     */

	  }, {
	    key: 'select',
	    value: function select() {
	      this.selected = true;
	    }

	    /**
	     * Sets selected state to false
	     */

	  }, {
	    key: 'unselect',
	    value: function unselect() {
	      this.selected = false;
	    }

	    /**
	     * cleans all required things on delete
	     * @returns {*}
	     */

	  }, {
	    key: 'cleanup',
	    value: function cleanup() {
	      return this.edgeType.cleanup();
	    }

	    /**
	     * Remove edge from the list and perform necessary cleanup.
	     */

	  }, {
	    key: 'remove',
	    value: function remove() {
	      this.cleanup();
	      this.disconnect();
	      delete this.body.edges[this.id];
	    }

	    /**
	     * Check if both connecting nodes exist
	     * @returns {boolean}
	     */

	  }, {
	    key: 'endPointsValid',
	    value: function endPointsValid() {
	      return this.body.nodes[this.fromId] !== undefined && this.body.nodes[this.toId] !== undefined;
	    }
	  }], [{
	    key: 'parseOptions',
	    value: function parseOptions(parentOptions, newOptions) {
	      var allowDeletion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	      var globalOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	      var copyFromGlobals = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

	      var fields = ['arrowStrikethrough', 'id', 'from', 'hidden', 'hoverWidth', 'labelHighlightBold', 'length', 'line', 'opacity', 'physics', 'scaling', 'selectionWidth', 'selfReferenceSize', 'to', 'title', 'value', 'width', 'font', 'chosen', 'widthConstraint'];

	      // only deep extend the items in the field array. These do not have shorthand.
	      util.selectiveDeepExtend(fields, parentOptions, newOptions, allowDeletion);

	      // Only copy label if it's a legal value.
	      if (ComponentUtil.isValidLabel(newOptions.label)) {
	        parentOptions.label = newOptions.label;
	      } else {
	        parentOptions.label = undefined;
	      }

	      util.mergeOptions(parentOptions, newOptions, 'smooth', globalOptions);
	      util.mergeOptions(parentOptions, newOptions, 'shadow', globalOptions);

	      if (newOptions.dashes !== undefined && newOptions.dashes !== null) {
	        parentOptions.dashes = newOptions.dashes;
	      } else if (allowDeletion === true && newOptions.dashes === null) {
	        parentOptions.dashes = (0, _create2['default'])(globalOptions.dashes); // this sets the pointer of the option back to the global option.
	      }

	      // set the scaling newOptions
	      if (newOptions.scaling !== undefined && newOptions.scaling !== null) {
	        if (newOptions.scaling.min !== undefined) {
	          parentOptions.scaling.min = newOptions.scaling.min;
	        }
	        if (newOptions.scaling.max !== undefined) {
	          parentOptions.scaling.max = newOptions.scaling.max;
	        }
	        util.mergeOptions(parentOptions.scaling, newOptions.scaling, 'label', globalOptions.scaling);
	      } else if (allowDeletion === true && newOptions.scaling === null) {
	        parentOptions.scaling = (0, _create2['default'])(globalOptions.scaling); // this sets the pointer of the option back to the global option.
	      }

	      // handle multiple input cases for arrows
	      if (newOptions.arrows !== undefined && newOptions.arrows !== null) {
	        if (typeof newOptions.arrows === 'string') {
	          var arrows = newOptions.arrows.toLowerCase();
	          parentOptions.arrows.to.enabled = arrows.indexOf("to") != -1;
	          parentOptions.arrows.middle.enabled = arrows.indexOf("middle") != -1;
	          parentOptions.arrows.from.enabled = arrows.indexOf("from") != -1;
	        } else if ((0, _typeof3['default'])(newOptions.arrows) === 'object') {
	          util.mergeOptions(parentOptions.arrows, newOptions.arrows, 'to', globalOptions.arrows);
	          util.mergeOptions(parentOptions.arrows, newOptions.arrows, 'middle', globalOptions.arrows);
	          util.mergeOptions(parentOptions.arrows, newOptions.arrows, 'from', globalOptions.arrows);
	        } else {
	          throw new Error("The arrow newOptions can only be an object or a string. Refer to the documentation. You used:" + (0, _stringify2['default'])(newOptions.arrows));
	        }
	      } else if (allowDeletion === true && newOptions.arrows === null) {
	        parentOptions.arrows = (0, _create2['default'])(globalOptions.arrows); // this sets the pointer of the option back to the global option.
	      }

	      // handle multiple input cases for color
	      if (newOptions.color !== undefined && newOptions.color !== null) {
	        var fromColor = newOptions.color;
	        var toColor = parentOptions.color;

	        // If passed, fill in values from default options - required in the case of no prototype bridging
	        if (copyFromGlobals) {
	          util.deepExtend(toColor, globalOptions.color, false, allowDeletion);
	        } else {
	          // Clear local properties - need to do it like this in order to retain prototype bridges
	          for (var i in toColor) {
	            if (toColor.hasOwnProperty(i)) {
	              delete toColor[i];
	            }
	          }
	        }

	        if (util.isString(toColor)) {
	          toColor.color = toColor;
	          toColor.highlight = toColor;
	          toColor.hover = toColor;
	          toColor.inherit = false;
	          if (fromColor.opacity === undefined) {
	            toColor.opacity = 1.0; // set default
	          }
	        } else {
	          var colorsDefined = false;
	          if (fromColor.color !== undefined) {
	            toColor.color = fromColor.color;colorsDefined = true;
	          }
	          if (fromColor.highlight !== undefined) {
	            toColor.highlight = fromColor.highlight;colorsDefined = true;
	          }
	          if (fromColor.hover !== undefined) {
	            toColor.hover = fromColor.hover;colorsDefined = true;
	          }
	          if (fromColor.inherit !== undefined) {
	            toColor.inherit = fromColor.inherit;
	          }
	          if (fromColor.opacity !== undefined) {
	            toColor.opacity = Math.min(1, Math.max(0, fromColor.opacity));
	          }

	          if (colorsDefined === true) {
	            toColor.inherit = false;
	          } else {
	            if (toColor.inherit === undefined) {
	              toColor.inherit = 'from'; // Set default
	            }
	          }
	        }
	      } else if (allowDeletion === true && newOptions.color === null) {
	        parentOptions.color = util.bridgeObject(globalOptions.color); // set the object back to the global options
	      }

	      if (allowDeletion === true && newOptions.font === null) {
	        parentOptions.font = util.bridgeObject(globalOptions.font); // set the object back to the global options
	      }
	    }
	  }]);
	  return Edge;
	}();

	exports['default'] = Edge;

	/***/ }),
	/* 75 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _EdgeBase2 = __webpack_require__(118);

	var _EdgeBase3 = _interopRequireDefault(_EdgeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * The Base Class for all Bezier edges. Bezier curves are used to model smooth
	 * gradual curves in paths between nodes.
	 *
	 * @extends EdgeBase
	 */
	var BezierEdgeBase = function (_EdgeBase) {
	  (0, _inherits3['default'])(BezierEdgeBase, _EdgeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function BezierEdgeBase(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, BezierEdgeBase);
	    return (0, _possibleConstructorReturn3['default'])(this, (BezierEdgeBase.__proto__ || (0, _getPrototypeOf2['default'])(BezierEdgeBase)).call(this, options, body, labelModule));
	  }

	  /**
	   * This function uses binary search to look for the point where the bezier curve crosses the border of the node.
	   *
	   * @param {Node} nearNode
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {Node} viaNode
	   * @returns {*}
	   * @private
	   */


	  (0, _createClass3['default'])(BezierEdgeBase, [{
	    key: '_findBorderPositionBezier',
	    value: function _findBorderPositionBezier(nearNode, ctx) {
	      var viaNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this._getViaCoordinates();

	      var maxIterations = 10;
	      var iteration = 0;
	      var low = 0;
	      var high = 1;
	      var pos, angle, distanceToBorder, distanceToPoint, difference;
	      var threshold = 0.2;
	      var node = this.to;
	      var from = false;
	      if (nearNode.id === this.from.id) {
	        node = this.from;
	        from = true;
	      }

	      while (low <= high && iteration < maxIterations) {
	        var middle = (low + high) * 0.5;

	        pos = this.getPoint(middle, viaNode);
	        angle = Math.atan2(node.y - pos.y, node.x - pos.x);
	        distanceToBorder = node.distanceToBorder(ctx, angle);
	        distanceToPoint = Math.sqrt(Math.pow(pos.x - node.x, 2) + Math.pow(pos.y - node.y, 2));
	        difference = distanceToBorder - distanceToPoint;
	        if (Math.abs(difference) < threshold) {
	          break; // found
	        } else if (difference < 0) {
	          // distance to nodes is larger than distance to border --> t needs to be bigger if we're looking at the to node.
	          if (from === false) {
	            low = middle;
	          } else {
	            high = middle;
	          }
	        } else {
	          if (from === false) {
	            high = middle;
	          } else {
	            low = middle;
	          }
	        }

	        iteration++;
	      }
	      pos.t = middle;

	      return pos;
	    }

	    /**
	     * Calculate the distance between a point (x3,y3) and a line segment from
	     * (x1,y1) to (x2,y2).
	     * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
	     * @param {number} x1 from x
	     * @param {number} y1 from y
	     * @param {number} x2 to x
	     * @param {number} y2 to y
	     * @param {number} x3 point to check x
	     * @param {number} y3 point to check y
	     * @param {Node} via
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_getDistanceToBezierEdge',
	    value: function _getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via) {
	      // x3,y3 is the point
	      var minDistance = 1e9;
	      var distance = void 0;
	      var i = void 0,
	          t = void 0,
	          x = void 0,
	          y = void 0;
	      var lastX = x1;
	      var lastY = y1;
	      for (i = 1; i < 10; i++) {
	        t = 0.1 * i;
	        x = Math.pow(1 - t, 2) * x1 + 2 * t * (1 - t) * via.x + Math.pow(t, 2) * x2;
	        y = Math.pow(1 - t, 2) * y1 + 2 * t * (1 - t) * via.y + Math.pow(t, 2) * y2;
	        if (i > 0) {
	          distance = this._getDistanceToLine(lastX, lastY, x, y, x3, y3);
	          minDistance = distance < minDistance ? distance : minDistance;
	        }
	        lastX = x;
	        lastY = y;
	      }

	      return minDistance;
	    }

	    /**
	     * Draw a bezier curve between two nodes
	     *
	     * The method accepts zero, one or two control points.
	     * Passing zero control points just draws a straight line
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {Object}           values   | options for shadow drawing
	     * @param {Object|undefined} viaNode1 | first control point for curve drawing
	     * @param {Object|undefined} viaNode2 | second control point for curve drawing
	     *
	     * @protected
	     */

	  }, {
	    key: '_bezierCurve',
	    value: function _bezierCurve(ctx, values, viaNode1, viaNode2) {
	      var hasNode1 = viaNode1 !== undefined && viaNode1.x !== undefined;
	      var hasNode2 = viaNode2 !== undefined && viaNode2.x !== undefined;

	      ctx.beginPath();
	      ctx.moveTo(this.fromPoint.x, this.fromPoint.y);

	      if (hasNode1 && hasNode2) {
	        ctx.bezierCurveTo(viaNode1.x, viaNode1.y, viaNode2.x, viaNode2.y, this.toPoint.x, this.toPoint.y);
	      } else if (hasNode1) {
	        ctx.quadraticCurveTo(viaNode1.x, viaNode1.y, this.toPoint.x, this.toPoint.y);
	      } else {
	        // fallback to normal straight edge
	        ctx.lineTo(this.toPoint.x, this.toPoint.y);
	      }

	      // draw shadow if enabled
	      this.enableShadow(ctx, values);
	      ctx.stroke();
	      this.disableShadow(ctx, values);
	    }

	    /**
	     *
	     * @returns {*|{x, y}|{x: undefined, y: undefined}}
	     */

	  }, {
	    key: 'getViaNode',
	    value: function getViaNode() {
	      return this._getViaCoordinates();
	    }
	  }]);
	  return BezierEdgeBase;
	}(_EdgeBase3['default']);

	exports['default'] = BezierEdgeBase;

	/***/ }),
	/* 76 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var util = __webpack_require__(2);

	/**
	 * Utility Class
	 */

	var NetworkUtil = function () {
	  /**
	   * @ignore
	   */
	  function NetworkUtil() {
	    (0, _classCallCheck3["default"])(this, NetworkUtil);
	  }

	  /**
	   * Find the center position of the network considering the bounding boxes
	   *
	   * @param {Array.<Node>} allNodes
	   * @param {Array.<Node>} [specificNodes=[]]
	   * @returns {{minX: number, maxX: number, minY: number, maxY: number}}
	   * @static
	   */


	  (0, _createClass3["default"])(NetworkUtil, null, [{
	    key: "getRange",
	    value: function getRange(allNodes) {
	      var specificNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	      var minY = 1e9,
	          maxY = -1e9,
	          minX = 1e9,
	          maxX = -1e9,
	          node;
	      if (specificNodes.length > 0) {
	        for (var i = 0; i < specificNodes.length; i++) {
	          node = allNodes[specificNodes[i]];
	          if (minX > node.shape.boundingBox.left) {
	            minX = node.shape.boundingBox.left;
	          }
	          if (maxX < node.shape.boundingBox.right) {
	            maxX = node.shape.boundingBox.right;
	          }
	          if (minY > node.shape.boundingBox.top) {
	            minY = node.shape.boundingBox.top;
	          } // top is negative, bottom is positive
	          if (maxY < node.shape.boundingBox.bottom) {
	            maxY = node.shape.boundingBox.bottom;
	          } // top is negative, bottom is positive
	        }
	      }

	      if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {
	        minY = 0, maxY = 0, minX = 0, maxX = 0;
	      }
	      return { minX: minX, maxX: maxX, minY: minY, maxY: maxY };
	    }

	    /**
	     * Find the center position of the network
	     *
	     * @param {Array.<Node>} allNodes
	     * @param {Array.<Node>} [specificNodes=[]]
	     * @returns {{minX: number, maxX: number, minY: number, maxY: number}}
	     * @static
	     */

	  }, {
	    key: "getRangeCore",
	    value: function getRangeCore(allNodes) {
	      var specificNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	      var minY = 1e9,
	          maxY = -1e9,
	          minX = 1e9,
	          maxX = -1e9,
	          node;
	      if (specificNodes.length > 0) {
	        for (var i = 0; i < specificNodes.length; i++) {
	          node = allNodes[specificNodes[i]];
	          if (minX > node.x) {
	            minX = node.x;
	          }
	          if (maxX < node.x) {
	            maxX = node.x;
	          }
	          if (minY > node.y) {
	            minY = node.y;
	          } // top is negative, bottom is positive
	          if (maxY < node.y) {
	            maxY = node.y;
	          } // top is negative, bottom is positive
	        }
	      }

	      if (minX === 1e9 && maxX === -1e9 && minY === 1e9 && maxY === -1e9) {
	        minY = 0, maxY = 0, minX = 0, maxX = 0;
	      }
	      return { minX: minX, maxX: maxX, minY: minY, maxY: maxY };
	    }

	    /**
	     * @param {object} range = {minX: minX, maxX: maxX, minY: minY, maxY: maxY};
	     * @returns {{x: number, y: number}}
	     * @static
	     */

	  }, {
	    key: "findCenter",
	    value: function findCenter(range) {
	      return { x: 0.5 * (range.maxX + range.minX),
	        y: 0.5 * (range.maxY + range.minY) };
	    }

	    /**
	     * This returns a clone of the options or options of the edge or node to be used for construction of new edges or check functions for new nodes.
	     * @param {vis.Item} item
	     * @param {'node'|undefined} type
	     * @returns {{}}
	     * @static
	     */

	  }, {
	    key: "cloneOptions",
	    value: function cloneOptions(item, type) {
	      var clonedOptions = {};
	      if (type === undefined || type === 'node') {
	        util.deepExtend(clonedOptions, item.options, true);
	        clonedOptions.x = item.x;
	        clonedOptions.y = item.y;
	        clonedOptions.amountOfConnections = item.edges.length;
	      } else {
	        util.deepExtend(clonedOptions, item.options, true);
	      }
	      return clonedOptions;
	    }
	  }]);
	  return NetworkUtil;
	}();

	exports["default"] = NetworkUtil;

	/***/ }),
	/* 77 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(124), __esModule: true };

	/***/ }),
	/* 78 */
	/***/ (function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(50);
	// eslint-disable-next-line no-prototype-builtins
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};


	/***/ }),
	/* 79 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var LIBRARY = __webpack_require__(52);
	var $export = __webpack_require__(17);
	var redefine = __webpack_require__(83);
	var hide = __webpack_require__(26);
	var has = __webpack_require__(22);
	var Iterators = __webpack_require__(31);
	var $iterCreate = __webpack_require__(129);
	var setToStringTag = __webpack_require__(59);
	var getPrototypeOf = __webpack_require__(85);
	var ITERATOR = __webpack_require__(13)('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';

	var returnThis = function () { return this; };

	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};


	/***/ }),
	/* 80 */
	/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(128);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};


	/***/ }),
	/* 81 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(21) && !__webpack_require__(28)(function () {
	  return Object.defineProperty(__webpack_require__(82)('div'), 'a', { get: function () { return 7; } }).a != 7;
	});


	/***/ }),
	/* 82 */
	/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(32);
	var document = __webpack_require__(18).document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};


	/***/ }),
	/* 83 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(26);


	/***/ }),
	/* 84 */
	/***/ (function(module, exports, __webpack_require__) {

	var has = __webpack_require__(22);
	var toIObject = __webpack_require__(25);
	var arrayIndexOf = __webpack_require__(131)(false);
	var IE_PROTO = __webpack_require__(56)('IE_PROTO');

	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};


	/***/ }),
	/* 85 */
	/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(22);
	var toObject = __webpack_require__(41);
	var IE_PROTO = __webpack_require__(56)('IE_PROTO');
	var ObjectProto = Object.prototype;

	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};


	/***/ }),
	/* 86 */
	/***/ (function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(50);
	var TAG = __webpack_require__(13)('toStringTag');
	// ES3 wrong here
	var ARG = cof(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};

	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};


	/***/ }),
	/* 87 */
	/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(17);
	var core = __webpack_require__(7);
	var fails = __webpack_require__(28);
	module.exports = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
	};


	/***/ }),
	/* 88 */
	/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = __webpack_require__(84);
	var hiddenKeys = __webpack_require__(58).concat('length', 'prototype');

	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};


	/***/ }),
	/* 89 */
	/***/ (function(module, exports, __webpack_require__) {

	var pIE = __webpack_require__(42);
	var createDesc = __webpack_require__(39);
	var toIObject = __webpack_require__(25);
	var toPrimitive = __webpack_require__(53);
	var has = __webpack_require__(22);
	var IE8_DOM_DEFINE = __webpack_require__(81);
	var gOPD = Object.getOwnPropertyDescriptor;

	exports.f = __webpack_require__(21) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};


	/***/ }),
	/* 90 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(162), __esModule: true };

	/***/ }),
	/* 91 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/**
	 * @prototype Point2d
	 * @param {number} [x]
	 * @param {number} [y]
	 */
	function Point2d(x, y) {
	  this.x = x !== undefined ? x : 0;
	  this.y = y !== undefined ? y : 0;
	}

	module.exports = Point2d;

	/***/ }),
	/* 92 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var util = __webpack_require__(2);

	/**
	 * An html slider control with start/stop/prev/next buttons
	 *
	 * @constructor Slider
	 * @param {Element} container  The element where the slider will be created
	 * @param {Object} options   Available options:
	 *                 {boolean} visible   If true (default) the
	 *                           slider is visible.
	 */
	function Slider(container, options) {
	  if (container === undefined) {
	    throw new Error('No container element defined');
	  }
	  this.container = container;
	  this.visible = options && options.visible != undefined ? options.visible : true;

	  if (this.visible) {
	    this.frame = document.createElement('DIV');
	    //this.frame.style.backgroundColor = '#E5E5E5';
	    this.frame.style.width = '100%';
	    this.frame.style.position = 'relative';
	    this.container.appendChild(this.frame);

	    this.frame.prev = document.createElement('INPUT');
	    this.frame.prev.type = 'BUTTON';
	    this.frame.prev.value = 'Prev';
	    this.frame.appendChild(this.frame.prev);

	    this.frame.play = document.createElement('INPUT');
	    this.frame.play.type = 'BUTTON';
	    this.frame.play.value = 'Play';
	    this.frame.appendChild(this.frame.play);

	    this.frame.next = document.createElement('INPUT');
	    this.frame.next.type = 'BUTTON';
	    this.frame.next.value = 'Next';
	    this.frame.appendChild(this.frame.next);

	    this.frame.bar = document.createElement('INPUT');
	    this.frame.bar.type = 'BUTTON';
	    this.frame.bar.style.position = 'absolute';
	    this.frame.bar.style.border = '1px solid red';
	    this.frame.bar.style.width = '100px';
	    this.frame.bar.style.height = '6px';
	    this.frame.bar.style.borderRadius = '2px';
	    this.frame.bar.style.MozBorderRadius = '2px';
	    this.frame.bar.style.border = '1px solid #7F7F7F';
	    this.frame.bar.style.backgroundColor = '#E5E5E5';
	    this.frame.appendChild(this.frame.bar);

	    this.frame.slide = document.createElement('INPUT');
	    this.frame.slide.type = 'BUTTON';
	    this.frame.slide.style.margin = '0px';
	    this.frame.slide.value = ' ';
	    this.frame.slide.style.position = 'relative';
	    this.frame.slide.style.left = '-100px';
	    this.frame.appendChild(this.frame.slide);

	    // create events
	    var me = this;
	    this.frame.slide.onmousedown = function (event) {
	      me._onMouseDown(event);
	    };
	    this.frame.prev.onclick = function (event) {
	      me.prev(event);
	    };
	    this.frame.play.onclick = function (event) {
	      me.togglePlay(event);
	    };
	    this.frame.next.onclick = function (event) {
	      me.next(event);
	    };
	  }

	  this.onChangeCallback = undefined;

	  this.values = [];
	  this.index = undefined;

	  this.playTimeout = undefined;
	  this.playInterval = 1000; // milliseconds
	  this.playLoop = true;
	}

	/**
	 * Select the previous index
	 */
	Slider.prototype.prev = function () {
	  var index = this.getIndex();
	  if (index > 0) {
	    index--;
	    this.setIndex(index);
	  }
	};

	/**
	 * Select the next index
	 */
	Slider.prototype.next = function () {
	  var index = this.getIndex();
	  if (index < this.values.length - 1) {
	    index++;
	    this.setIndex(index);
	  }
	};

	/**
	 * Select the next index
	 */
	Slider.prototype.playNext = function () {
	  var start = new Date();

	  var index = this.getIndex();
	  if (index < this.values.length - 1) {
	    index++;
	    this.setIndex(index);
	  } else if (this.playLoop) {
	    // jump to the start
	    index = 0;
	    this.setIndex(index);
	  }

	  var end = new Date();
	  var diff = end - start;

	  // calculate how much time it to to set the index and to execute the callback
	  // function.
	  var interval = Math.max(this.playInterval - diff, 0);
	  // document.title = diff // TODO: cleanup

	  var me = this;
	  this.playTimeout = setTimeout(function () {
	    me.playNext();
	  }, interval);
	};

	/**
	 * Toggle start or stop playing
	 */
	Slider.prototype.togglePlay = function () {
	  if (this.playTimeout === undefined) {
	    this.play();
	  } else {
	    this.stop();
	  }
	};

	/**
	 * Start playing
	 */
	Slider.prototype.play = function () {
	  // Test whether already playing
	  if (this.playTimeout) return;

	  this.playNext();

	  if (this.frame) {
	    this.frame.play.value = 'Stop';
	  }
	};

	/**
	 * Stop playing
	 */
	Slider.prototype.stop = function () {
	  clearInterval(this.playTimeout);
	  this.playTimeout = undefined;

	  if (this.frame) {
	    this.frame.play.value = 'Play';
	  }
	};

	/**
	 * Set a callback function which will be triggered when the value of the
	 * slider bar has changed.
	 *
	 * @param {function} callback
	 */
	Slider.prototype.setOnChangeCallback = function (callback) {
	  this.onChangeCallback = callback;
	};

	/**
	 * Set the interval for playing the list
	 * @param {number} interval   The interval in milliseconds
	 */
	Slider.prototype.setPlayInterval = function (interval) {
	  this.playInterval = interval;
	};

	/**
	 * Retrieve the current play interval
	 * @return {number} interval   The interval in milliseconds
	 */
	Slider.prototype.getPlayInterval = function () {
	  return this.playInterval;
	};

	/**
	 * Set looping on or off
	 * @param {boolean} doLoop  If true, the slider will jump to the start when
	 *               the end is passed, and will jump to the end
	 *               when the start is passed.
	 *
	 */
	Slider.prototype.setPlayLoop = function (doLoop) {
	  this.playLoop = doLoop;
	};

	/**
	 * Execute the onchange callback function
	 */
	Slider.prototype.onChange = function () {
	  if (this.onChangeCallback !== undefined) {
	    this.onChangeCallback();
	  }
	};

	/**
	 * redraw the slider on the correct place
	 */
	Slider.prototype.redraw = function () {
	  if (this.frame) {
	    // resize the bar
	    this.frame.bar.style.top = this.frame.clientHeight / 2 - this.frame.bar.offsetHeight / 2 + 'px';
	    this.frame.bar.style.width = this.frame.clientWidth - this.frame.prev.clientWidth - this.frame.play.clientWidth - this.frame.next.clientWidth - 30 + 'px';

	    // position the slider button
	    var left = this.indexToLeft(this.index);
	    this.frame.slide.style.left = left + 'px';
	  }
	};

	/**
	 * Set the list with values for the slider
	 * @param {Array} values   A javascript array with values (any type)
	 */
	Slider.prototype.setValues = function (values) {
	  this.values = values;

	  if (this.values.length > 0) this.setIndex(0);else this.index = undefined;
	};

	/**
	 * Select a value by its index
	 * @param {number} index
	 */
	Slider.prototype.setIndex = function (index) {
	  if (index < this.values.length) {
	    this.index = index;

	    this.redraw();
	    this.onChange();
	  } else {
	    throw new Error('Index out of range');
	  }
	};

	/**
	 * retrieve the index of the currently selected vaue
	 * @return {number} index
	 */
	Slider.prototype.getIndex = function () {
	  return this.index;
	};

	/**
	 * retrieve the currently selected value
	 * @return {*} value
	 */
	Slider.prototype.get = function () {
	  return this.values[this.index];
	};

	Slider.prototype._onMouseDown = function (event) {
	  // only react on left mouse button down
	  var leftButtonDown = event.which ? event.which === 1 : event.button === 1;
	  if (!leftButtonDown) return;

	  this.startClientX = event.clientX;
	  this.startSlideX = parseFloat(this.frame.slide.style.left);

	  this.frame.style.cursor = 'move';

	  // add event listeners to handle moving the contents
	  // we store the function onmousemove and onmouseup in the graph, so we can
	  // remove the eventlisteners lateron in the function mouseUp()
	  var me = this;
	  this.onmousemove = function (event) {
	    me._onMouseMove(event);
	  };
	  this.onmouseup = function (event) {
	    me._onMouseUp(event);
	  };
	  util.addEventListener(document, 'mousemove', this.onmousemove);
	  util.addEventListener(document, 'mouseup', this.onmouseup);
	  util.preventDefault(event);
	};

	Slider.prototype.leftToIndex = function (left) {
	  var width = parseFloat(this.frame.bar.style.width) - this.frame.slide.clientWidth - 10;
	  var x = left - 3;

	  var index = Math.round(x / width * (this.values.length - 1));
	  if (index < 0) index = 0;
	  if (index > this.values.length - 1) index = this.values.length - 1;

	  return index;
	};

	Slider.prototype.indexToLeft = function (index) {
	  var width = parseFloat(this.frame.bar.style.width) - this.frame.slide.clientWidth - 10;

	  var x = index / (this.values.length - 1) * width;
	  var left = x + 3;

	  return left;
	};

	Slider.prototype._onMouseMove = function (event) {
	  var diff = event.clientX - this.startClientX;
	  var x = this.startSlideX + diff;

	  var index = this.leftToIndex(x);

	  this.setIndex(index);

	  util.preventDefault();
	};

	Slider.prototype._onMouseUp = function (event) {
	  // eslint-disable-line no-unused-vars
	  this.frame.style.cursor = 'auto';

	  // remove event listeners
	  util.removeEventListener(document, 'mousemove', this.onmousemove);
	  util.removeEventListener(document, 'mouseup', this.onmouseup);

	  util.preventDefault();
	};

	module.exports = Slider;

	/***/ }),
	/* 93 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/**
	 * @prototype StepNumber
	 * The class StepNumber is an iterator for Numbers. You provide a start and end
	 * value, and a best step size. StepNumber itself rounds to fixed values and
	 * a finds the step that best fits the provided step.
	 *
	 * If prettyStep is true, the step size is chosen as close as possible to the
	 * provided step, but being a round value like 1, 2, 5, 10, 20, 50, ....
	 *
	 * Example usage:
	 *   var step = new StepNumber(0, 10, 2.5, true);
	 *   step.start();
	 *   while (!step.end()) {
	 *   alert(step.getCurrent());
	 *   step.next();
	 *   }
	 *
	 * Version: 1.0
	 *
	 * @param {number} start     The start value
	 * @param {number} end     The end value
	 * @param {number} step    Optional. Step size. Must be a positive value.
	 * @param {boolean} prettyStep Optional. If true, the step size is rounded
	 *               To a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
	 */
	function StepNumber(start, end, step, prettyStep) {
	  // set default values
	  this._start = 0;
	  this._end = 0;
	  this._step = 1;
	  this.prettyStep = true;
	  this.precision = 5;

	  this._current = 0;
	  this.setRange(start, end, step, prettyStep);
	}

	/**
	 * Check for input values, to prevent disasters from happening
	 *
	 * Source: http://stackoverflow.com/a/1830844
	 *
	 * @param {string} n
	 * @returns {boolean}
	 */
	StepNumber.prototype.isNumeric = function (n) {
	  return !isNaN(parseFloat(n)) && isFinite(n);
	};

	/**
	 * Set a new range: start, end and step.
	 *
	 * @param {number} start     The start value
	 * @param {number} end     The end value
	 * @param {number} step    Optional. Step size. Must be a positive value.
	 * @param {boolean} prettyStep Optional. If true, the step size is rounded
	 *               To a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
	 */
	StepNumber.prototype.setRange = function (start, end, step, prettyStep) {
	  if (!this.isNumeric(start)) {
	    throw new Error('Parameter \'start\' is not numeric; value: ' + start);
	  }
	  if (!this.isNumeric(end)) {
	    throw new Error('Parameter \'end\' is not numeric; value: ' + start);
	  }
	  if (!this.isNumeric(step)) {
	    throw new Error('Parameter \'step\' is not numeric; value: ' + start);
	  }

	  this._start = start ? start : 0;
	  this._end = end ? end : 0;

	  this.setStep(step, prettyStep);
	};

	/**
	 * Set a new step size
	 * @param {number} step    New step size. Must be a positive value
	 * @param {boolean} prettyStep Optional. If true, the provided step is rounded
	 *               to a pretty step size (like 1, 2, 5, 10, 20, 50, ...)
	 */
	StepNumber.prototype.setStep = function (step, prettyStep) {
	  if (step === undefined || step <= 0) return;

	  if (prettyStep !== undefined) this.prettyStep = prettyStep;

	  if (this.prettyStep === true) this._step = StepNumber.calculatePrettyStep(step);else this._step = step;
	};

	/**
	 * Calculate a nice step size, closest to the desired step size.
	 * Returns a value in one of the ranges 1*10^n, 2*10^n, or 5*10^n, where n is an
	 * integer Number. For example 1, 2, 5, 10, 20, 50, etc...
	 * @param {number}  step  Desired step size
	 * @return {number}     Nice step size
	 */
	StepNumber.calculatePrettyStep = function (step) {
	  var log10 = function log10(x) {
	    return Math.log(x) / Math.LN10;
	  };

	  // try three steps (multiple of 1, 2, or 5
	  var step1 = Math.pow(10, Math.round(log10(step))),
	      step2 = 2 * Math.pow(10, Math.round(log10(step / 2))),
	      step5 = 5 * Math.pow(10, Math.round(log10(step / 5)));

	  // choose the best step (closest to minimum step)
	  var prettyStep = step1;
	  if (Math.abs(step2 - step) <= Math.abs(prettyStep - step)) prettyStep = step2;
	  if (Math.abs(step5 - step) <= Math.abs(prettyStep - step)) prettyStep = step5;

	  // for safety
	  if (prettyStep <= 0) {
	    prettyStep = 1;
	  }

	  return prettyStep;
	};

	/**
	 * returns the current value of the step
	 * @return {number} current value
	 */
	StepNumber.prototype.getCurrent = function () {
	  return parseFloat(this._current.toPrecision(this.precision));
	};

	/**
	 * returns the current step size
	 * @return {number} current step size
	 */
	StepNumber.prototype.getStep = function () {
	  return this._step;
	};

	/**
	 * Set the current to its starting value.
	 *
	 * By default, this will be the largest value smaller than start, which
	 * is a multiple of the step size.
	 *
	 * Parameters checkFirst is optional, default false.
	 * If set to true, move the current value one step if smaller than start.
	 *
	 * @param {boolean} [checkFirst=false]
	 */
	StepNumber.prototype.start = function (checkFirst) {
	  if (checkFirst === undefined) {
	    checkFirst = false;
	  }

	  this._current = this._start - this._start % this._step;

	  if (checkFirst) {
	    if (this.getCurrent() < this._start) {
	      this.next();
	    }
	  }
	};

	/**
	 * Do a step, add the step size to the current value
	 */
	StepNumber.prototype.next = function () {
	  this._current += this._step;
	};

	/**
	 * Returns true whether the end is reached
	 * @return {boolean}  True if the current value has passed the end value.
	 */
	StepNumber.prototype.end = function () {
	  return this._current > this._end;
	};

	module.exports = StepNumber;

	/***/ }),
	/* 94 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	////////////////////////////////////////////////////////////////////////////////
	// This modules handles the options for Graph3d.
	//
	////////////////////////////////////////////////////////////////////////////////
	var util = __webpack_require__(2);
	var Camera = __webpack_require__(95);
	var Point3d = __webpack_require__(34);

	// enumerate the available styles
	var STYLE = {
	  BAR: 0,
	  BARCOLOR: 1,
	  BARSIZE: 2,
	  DOT: 3,
	  DOTLINE: 4,
	  DOTCOLOR: 5,
	  DOTSIZE: 6,
	  GRID: 7,
	  LINE: 8,
	  SURFACE: 9
	};

	// The string representations of the styles
	var STYLENAME = {
	  'dot': STYLE.DOT,
	  'dot-line': STYLE.DOTLINE,
	  'dot-color': STYLE.DOTCOLOR,
	  'dot-size': STYLE.DOTSIZE,
	  'line': STYLE.LINE,
	  'grid': STYLE.GRID,
	  'surface': STYLE.SURFACE,
	  'bar': STYLE.BAR,
	  'bar-color': STYLE.BARCOLOR,
	  'bar-size': STYLE.BARSIZE
	};

	/**
	 * Field names in the options hash which are of relevance to the user.
	 *
	 * Specifically, these are the fields which require no special handling,
	 * and can be directly copied over.
	 */
	var OPTIONKEYS = ['width', 'height', 'filterLabel', 'legendLabel', 'xLabel', 'yLabel', 'zLabel', 'xValueLabel', 'yValueLabel', 'zValueLabel', 'showXAxis', 'showYAxis', 'showZAxis', 'showGrid', 'showPerspective', 'showShadow', 'keepAspectRatio', 'verticalRatio', 'dotSizeRatio', 'dotSizeMinFraction', 'dotSizeMaxFraction', 'showAnimationControls', 'animationInterval', 'animationPreload', 'animationAutoStart', 'axisColor', 'gridColor', 'xCenter', 'yCenter'];

	/**
	 * Field names in the options hash which are of relevance to the user.
	 *
	 * Same as OPTIONKEYS, but internally these fields are stored with 
	 * prefix 'default' in the name.
	 */
	var PREFIXEDOPTIONKEYS = ['xBarWidth', 'yBarWidth', 'valueMin', 'valueMax', 'xMin', 'xMax', 'xStep', 'yMin', 'yMax', 'yStep', 'zMin', 'zMax', 'zStep'];

	// Placeholder for DEFAULTS reference
	var DEFAULTS = undefined;

	/**
	 * Check if given hash is empty.
	 *
	 * Source: http://stackoverflow.com/a/679937
	 *
	 * @param {object} obj
	 * @returns {boolean}
	 */
	function isEmpty(obj) {
	  for (var prop in obj) {
	    if (obj.hasOwnProperty(prop)) return false;
	  }

	  return true;
	}

	/**
	 * Make first letter of parameter upper case.
	 *
	 * Source: http://stackoverflow.com/a/1026087
	 *
	 * @param {string} str
	 * @returns {string}
	 */
	function capitalize(str) {
	  if (str === undefined || str === "" || typeof str != "string") {
	    return str;
	  }

	  return str.charAt(0).toUpperCase() + str.slice(1);
	}

	/**
	 * Add a prefix to a field name, taking style guide into account
	 *
	 * @param {string} prefix
	 * @param {string} fieldName
	 * @returns {string}
	 */
	function prefixFieldName(prefix, fieldName) {
	  if (prefix === undefined || prefix === "") {
	    return fieldName;
	  }

	  return prefix + capitalize(fieldName);
	}

	/**
	 * Forcibly copy fields from src to dst in a controlled manner.
	 *
	 * A given field in dst will always be overwitten. If this field
	 * is undefined or not present in src, the field in dst will 
	 * be explicitly set to undefined.
	 * 
	 * The intention here is to be able to reset all option fields.
	 * 
	 * Only the fields mentioned in array 'fields' will be handled.
	 *
	 * @param {object} src
	 * @param {object} dst
	 * @param {array<string>} fields array with names of fields to copy
	 * @param {string} [prefix] prefix to use for the target fields.
	 */
	function forceCopy(src, dst, fields, prefix) {
	  var srcKey;
	  var dstKey;

	  for (var i = 0; i < fields.length; ++i) {
	    srcKey = fields[i];
	    dstKey = prefixFieldName(prefix, srcKey);

	    dst[dstKey] = src[srcKey];
	  }
	}

	/**
	 * Copy fields from src to dst in a safe and controlled manner.
	 *
	 * Only the fields mentioned in array 'fields' will be copied over,
	 * and only if these are actually defined.
	 *
	 * @param {object} src
	 * @param {object} dst
	 * @param {array<string>} fields array with names of fields to copy
	 * @param {string} [prefix] prefix to use for the target fields.
	 */
	function safeCopy(src, dst, fields, prefix) {
	  var srcKey;
	  var dstKey;

	  for (var i = 0; i < fields.length; ++i) {
	    srcKey = fields[i];
	    if (src[srcKey] === undefined) continue;

	    dstKey = prefixFieldName(prefix, srcKey);

	    dst[dstKey] = src[srcKey];
	  }
	}

	/**
	 * Initialize dst with the values in src.
	 *
	 * src is the hash with the default values. 
	 * A reference DEFAULTS to this hash is stored locally for 
	 * further handling.
	 *
	 * For now, dst is assumed to be a Graph3d instance.
	 * @param {object} src
	 * @param {object} dst
	 */
	function setDefaults(src, dst) {
	  if (src === undefined || isEmpty(src)) {
	    throw new Error('No DEFAULTS passed');
	  }
	  if (dst === undefined) {
	    throw new Error('No dst passed');
	  }

	  // Remember defaults for future reference
	  DEFAULTS = src;

	  // Handle the defaults which can be simply copied over
	  forceCopy(src, dst, OPTIONKEYS);
	  forceCopy(src, dst, PREFIXEDOPTIONKEYS, 'default');

	  // Handle the more complex ('special') fields
	  setSpecialSettings(src, dst);

	  // Following are internal fields, not part of the user settings
	  dst.margin = 10; // px
	  dst.showGrayBottom = false; // TODO: this does not work correctly
	  dst.showTooltip = false;
	  dst.onclick_callback = null;
	  dst.eye = new Point3d(0, 0, -1); // TODO: set eye.z about 3/4 of the width of the window?
	}

	/**
	 *
	 * @param {object} options
	 * @param {object} dst
	 */
	function setOptions(options, dst) {
	  if (options === undefined) {
	    return;
	  }
	  if (dst === undefined) {
	    throw new Error('No dst passed');
	  }

	  if (DEFAULTS === undefined || isEmpty(DEFAULTS)) {
	    throw new Error('DEFAULTS not set for module Settings');
	  }

	  // Handle the parameters which can be simply copied over
	  safeCopy(options, dst, OPTIONKEYS);
	  safeCopy(options, dst, PREFIXEDOPTIONKEYS, 'default');

	  // Handle the more complex ('special') fields
	  setSpecialSettings(options, dst);
	}

	/**
	 * Special handling for certain parameters
	 *
	 * 'Special' here means: setting requires more than a simple copy
	 *
	 * @param {object} src
	 * @param {object} dst
	 */
	function setSpecialSettings(src, dst) {
	  if (src.backgroundColor !== undefined) {
	    setBackgroundColor(src.backgroundColor, dst);
	  }

	  setDataColor(src.dataColor, dst);
	  setStyle(src.style, dst);
	  setShowLegend(src.showLegend, dst);
	  setCameraPosition(src.cameraPosition, dst);

	  // As special fields go, this is an easy one; just a translation of the name.
	  // Can't use this.tooltip directly, because that field exists internally
	  if (src.tooltip !== undefined) {
	    dst.showTooltip = src.tooltip;
	  }
	  if (src.onclick != undefined) {
	    dst.onclick_callback = src.onclick;
	  }

	  if (src.tooltipStyle !== undefined) {
	    util.selectiveDeepExtend(['tooltipStyle'], dst, src);
	  }
	}

	/**
	 * Set the value of setting 'showLegend'
	 *
	 * This depends on the value of the style fields, so it must be called
	 * after the style field has been initialized.
	 *
	 * @param {boolean} showLegend
	 * @param {object} dst
	 */
	function setShowLegend(showLegend, dst) {
	  if (showLegend === undefined) {
	    // If the default was auto, make a choice for this field
	    var isAutoByDefault = DEFAULTS.showLegend === undefined;

	    if (isAutoByDefault) {
	      // these styles default to having legends
	      var isLegendGraphStyle = dst.style === STYLE.DOTCOLOR || dst.style === STYLE.DOTSIZE;

	      dst.showLegend = isLegendGraphStyle;
	    } else {
	      // Leave current value as is
	    }
	  } else {
	    dst.showLegend = showLegend;
	  }
	}

	/**
	 * Retrieve the style index from given styleName
	 * @param {string} styleName  Style name such as 'dot', 'grid', 'dot-line'
	 * @return {number} styleNumber Enumeration value representing the style, or -1
	 *                when not found
	 */
	function getStyleNumberByName(styleName) {
	  var number = STYLENAME[styleName];

	  if (number === undefined) {
	    return -1;
	  }

	  return number;
	}

	/**
	 * Check if given number is a valid style number.
	 *
	 * @param {string | number} style
	 * @return {boolean} true if valid, false otherwise
	 */
	function checkStyleNumber(style) {
	  var valid = false;

	  for (var n in STYLE) {
	    if (STYLE[n] === style) {
	      valid = true;
	      break;
	    }
	  }

	  return valid;
	}

	/**
	 *
	 * @param {string | number} style
	 * @param {Object} dst
	 */
	function setStyle(style, dst) {
	  if (style === undefined) {
	    return; // Nothing to do
	  }

	  var styleNumber;

	  if (typeof style === 'string') {
	    styleNumber = getStyleNumberByName(style);

	    if (styleNumber === -1) {
	      throw new Error('Style \'' + style + '\' is invalid');
	    }
	  } else {
	    // Do a pedantic check on style number value
	    if (!checkStyleNumber(style)) {
	      throw new Error('Style \'' + style + '\' is invalid');
	    }

	    styleNumber = style;
	  }

	  dst.style = styleNumber;
	}

	/**
	 * Set the background styling for the graph
	 * @param {string | {fill: string, stroke: string, strokeWidth: string}} backgroundColor
	 * @param {Object} dst
	 */
	function setBackgroundColor(backgroundColor, dst) {
	  var fill = 'white';
	  var stroke = 'gray';
	  var strokeWidth = 1;

	  if (typeof backgroundColor === 'string') {
	    fill = backgroundColor;
	    stroke = 'none';
	    strokeWidth = 0;
	  } else if ((typeof backgroundColor === 'undefined' ? 'undefined' : (0, _typeof3['default'])(backgroundColor)) === 'object') {
	    if (backgroundColor.fill !== undefined) fill = backgroundColor.fill;
	    if (backgroundColor.stroke !== undefined) stroke = backgroundColor.stroke;
	    if (backgroundColor.strokeWidth !== undefined) strokeWidth = backgroundColor.strokeWidth;
	  } else {
	    throw new Error('Unsupported type of backgroundColor');
	  }

	  dst.frame.style.backgroundColor = fill;
	  dst.frame.style.borderColor = stroke;
	  dst.frame.style.borderWidth = strokeWidth + 'px';
	  dst.frame.style.borderStyle = 'solid';
	}

	/**
	 *
	 * @param {string | Object} dataColor
	 * @param {Object} dst
	 */
	function setDataColor(dataColor, dst) {
	  if (dataColor === undefined) {
	    return; // Nothing to do
	  }

	  if (dst.dataColor === undefined) {
	    dst.dataColor = {};
	  }

	  if (typeof dataColor === 'string') {
	    dst.dataColor.fill = dataColor;
	    dst.dataColor.stroke = dataColor;
	  } else {
	    if (dataColor.fill) {
	      dst.dataColor.fill = dataColor.fill;
	    }
	    if (dataColor.stroke) {
	      dst.dataColor.stroke = dataColor.stroke;
	    }
	    if (dataColor.strokeWidth !== undefined) {
	      dst.dataColor.strokeWidth = dataColor.strokeWidth;
	    }
	  }
	}

	/**
	 *
	 * @param {Object} cameraPosition
	 * @param {Object} dst
	 */
	function setCameraPosition(cameraPosition, dst) {
	  var camPos = cameraPosition;
	  if (camPos === undefined) {
	    return;
	  }

	  if (dst.camera === undefined) {
	    dst.camera = new Camera();
	  }

	  dst.camera.setArmRotation(camPos.horizontal, camPos.vertical);
	  dst.camera.setArmLength(camPos.distance);
	}

	module.exports.STYLE = STYLE;
	module.exports.setDefaults = setDefaults;
	module.exports.setOptions = setOptions;
	module.exports.setCameraPosition = setCameraPosition;

	/***/ }),
	/* 95 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _sign = __webpack_require__(165);

	var _sign2 = _interopRequireDefault(_sign);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var Point3d = __webpack_require__(34);

	/**
	 * The camera is mounted on a (virtual) camera arm. The camera arm can rotate
	 * The camera is always looking in the direction of the origin of the arm.
	 * This way, the camera always rotates around one fixed point, the location
	 * of the camera arm.
	 *
	 * Documentation:
	 *   http://en.wikipedia.org/wiki/3D_projection
	 * @class Camera
	 */
	function Camera() {
	  this.armLocation = new Point3d();
	  this.armRotation = {};
	  this.armRotation.horizontal = 0;
	  this.armRotation.vertical = 0;
	  this.armLength = 1.7;
	  this.cameraOffset = new Point3d();
	  this.offsetMultiplier = 0.6;

	  this.cameraLocation = new Point3d();
	  this.cameraRotation = new Point3d(0.5 * Math.PI, 0, 0);

	  this.calculateCameraOrientation();
	}

	/**
	 * Set offset camera in camera coordinates
	 * @param {number} x offset by camera horisontal
	 * @param {number} y offset by camera vertical
	 */
	Camera.prototype.setOffset = function (x, y) {
	  var abs = Math.abs,
	      sign = _sign2['default'],
	      mul = this.offsetMultiplier,
	      border = this.armLength * mul;

	  if (abs(x) > border) {
	    x = sign(x) * border;
	  }
	  if (abs(y) > border) {
	    y = sign(y) * border;
	  }
	  this.cameraOffset.x = x;
	  this.cameraOffset.y = y;
	  this.calculateCameraOrientation();
	};

	/**
	 * Get camera offset by horizontal and vertical
	 * @returns {number}
	 */
	Camera.prototype.getOffset = function () {
	  return this.cameraOffset;
	};

	/**
	 * Set the location (origin) of the arm
	 * @param {number} x  Normalized value of x
	 * @param {number} y  Normalized value of y
	 * @param {number} z  Normalized value of z
	 */
	Camera.prototype.setArmLocation = function (x, y, z) {
	  this.armLocation.x = x;
	  this.armLocation.y = y;
	  this.armLocation.z = z;

	  this.calculateCameraOrientation();
	};

	/**
	 * Set the rotation of the camera arm
	 * @param {number} horizontal   The horizontal rotation, between 0 and 2*PI.
	 *                Optional, can be left undefined.
	 * @param {number} vertical   The vertical rotation, between 0 and 0.5*PI
	 *                if vertical=0.5*PI, the graph is shown from the
	 *                top. Optional, can be left undefined.
	 */
	Camera.prototype.setArmRotation = function (horizontal, vertical) {
	  if (horizontal !== undefined) {
	    this.armRotation.horizontal = horizontal;
	  }

	  if (vertical !== undefined) {
	    this.armRotation.vertical = vertical;
	    if (this.armRotation.vertical < 0) this.armRotation.vertical = 0;
	    if (this.armRotation.vertical > 0.5 * Math.PI) this.armRotation.vertical = 0.5 * Math.PI;
	  }

	  if (horizontal !== undefined || vertical !== undefined) {
	    this.calculateCameraOrientation();
	  }
	};

	/**
	 * Retrieve the current arm rotation
	 * @return {object}   An object with parameters horizontal and vertical
	 */
	Camera.prototype.getArmRotation = function () {
	  var rot = {};
	  rot.horizontal = this.armRotation.horizontal;
	  rot.vertical = this.armRotation.vertical;

	  return rot;
	};

	/**
	 * Set the (normalized) length of the camera arm.
	 * @param {number} length A length between 0.71 and 5.0
	 */
	Camera.prototype.setArmLength = function (length) {
	  if (length === undefined) return;

	  this.armLength = length;

	  // Radius must be larger than the corner of the graph,
	  // which has a distance of sqrt(0.5^2+0.5^2) = 0.71 from the center of the
	  // graph
	  if (this.armLength < 0.71) this.armLength = 0.71;
	  if (this.armLength > 5.0) this.armLength = 5.0;

	  this.setOffset(this.cameraOffset.x, this.cameraOffset.y);
	  this.calculateCameraOrientation();
	};

	/**
	 * Retrieve the arm length
	 * @return {number} length
	 */
	Camera.prototype.getArmLength = function () {
	  return this.armLength;
	};

	/**
	 * Retrieve the camera location
	 * @return {Point3d} cameraLocation
	 */
	Camera.prototype.getCameraLocation = function () {
	  return this.cameraLocation;
	};

	/**
	 * Retrieve the camera rotation
	 * @return {Point3d} cameraRotation
	 */
	Camera.prototype.getCameraRotation = function () {
	  return this.cameraRotation;
	};

	/**
	 * Calculate the location and rotation of the camera based on the
	 * position and orientation of the camera arm
	 */
	Camera.prototype.calculateCameraOrientation = function () {
	  // calculate location of the camera
	  this.cameraLocation.x = this.armLocation.x - this.armLength * Math.sin(this.armRotation.horizontal) * Math.cos(this.armRotation.vertical);
	  this.cameraLocation.y = this.armLocation.y - this.armLength * Math.cos(this.armRotation.horizontal) * Math.cos(this.armRotation.vertical);
	  this.cameraLocation.z = this.armLocation.z + this.armLength * Math.sin(this.armRotation.vertical);

	  // calculate rotation of the camera
	  this.cameraRotation.x = Math.PI / 2 - this.armRotation.vertical;
	  this.cameraRotation.y = 0;
	  this.cameraRotation.z = -this.armRotation.horizontal;

	  var xa = this.cameraRotation.x;
	  var za = this.cameraRotation.z;
	  var dx = this.cameraOffset.x;
	  var dy = this.cameraOffset.y;
	  var sin = Math.sin,
	      cos = Math.cos;

	  this.cameraLocation.x = this.cameraLocation.x + dx * cos(za) + dy * -sin(za) * cos(xa);
	  this.cameraLocation.y = this.cameraLocation.y + dx * sin(za) + dy * cos(za) * cos(xa);
	  this.cameraLocation.z = this.cameraLocation.z + dy * sin(xa);
	};

	module.exports = Camera;

	/***/ }),
	/* 96 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var DataView = __webpack_require__(12);

	/**
	 * @class Filter
	 *
	 * @param {DataGroup} dataGroup the data group 
	 * @param {number}  column             The index of the column to be filtered
	 * @param {Graph3d} graph              The graph
	 */
	function Filter(dataGroup, column, graph) {
	  this.dataGroup = dataGroup;
	  this.column = column;
	  this.graph = graph; // the parent graph

	  this.index = undefined;
	  this.value = undefined;

	  // read all distinct values and select the first one
	  this.values = dataGroup.getDistinctValues(this.column);

	  if (this.values.length > 0) {
	    this.selectValue(0);
	  }

	  // create an array with the filtered datapoints. this will be loaded afterwards
	  this.dataPoints = [];

	  this.loaded = false;
	  this.onLoadCallback = undefined;

	  if (graph.animationPreload) {
	    this.loaded = false;
	    this.loadInBackground();
	  } else {
	    this.loaded = true;
	  }
	}

	/**
	 * Return the label
	 * @return {string} label
	 */
	Filter.prototype.isLoaded = function () {
	  return this.loaded;
	};

	/**
	 * Return the loaded progress
	 * @return {number} percentage between 0 and 100
	 */
	Filter.prototype.getLoadedProgress = function () {
	  var len = this.values.length;

	  var i = 0;
	  while (this.dataPoints[i]) {
	    i++;
	  }

	  return Math.round(i / len * 100);
	};

	/**
	 * Return the label
	 * @return {string} label
	 */
	Filter.prototype.getLabel = function () {
	  return this.graph.filterLabel;
	};

	/**
	 * Return the columnIndex of the filter
	 * @return {number} columnIndex
	 */
	Filter.prototype.getColumn = function () {
	  return this.column;
	};

	/**
	 * Return the currently selected value. Returns undefined if there is no selection
	 * @return {*} value
	 */
	Filter.prototype.getSelectedValue = function () {
	  if (this.index === undefined) return undefined;

	  return this.values[this.index];
	};

	/**
	 * Retrieve all values of the filter
	 * @return {Array} values
	 */
	Filter.prototype.getValues = function () {
	  return this.values;
	};

	/**
	 * Retrieve one value of the filter
	 * @param {number}  index
	 * @return {*} value
	 */
	Filter.prototype.getValue = function (index) {
	  if (index >= this.values.length) throw new Error('Index out of range');

	  return this.values[index];
	};

	/**
	 * Retrieve the (filtered) dataPoints for the currently selected filter index
	 * @param {number} [index] (optional)
	 * @return {Array} dataPoints
	 */
	Filter.prototype._getDataPoints = function (index) {
	  if (index === undefined) index = this.index;

	  if (index === undefined) return [];

	  var dataPoints;
	  if (this.dataPoints[index]) {
	    dataPoints = this.dataPoints[index];
	  } else {
	    var f = {};
	    f.column = this.column;
	    f.value = this.values[index];

	    var dataView = new DataView(this.dataGroup.getDataSet(), { filter: function filter(item) {
	        return item[f.column] == f.value;
	      } }).get();
	    dataPoints = this.dataGroup._getDataPoints(dataView);

	    this.dataPoints[index] = dataPoints;
	  }

	  return dataPoints;
	};

	/**
	 * Set a callback function when the filter is fully loaded.
	 *
	 * @param {function} callback
	 */
	Filter.prototype.setOnLoadCallback = function (callback) {
	  this.onLoadCallback = callback;
	};

	/**
	 * Add a value to the list with available values for this filter
	 * No double entries will be created.
	 * @param {number} index
	 */
	Filter.prototype.selectValue = function (index) {
	  if (index >= this.values.length) throw new Error('Index out of range');

	  this.index = index;
	  this.value = this.values[index];
	};

	/**
	 * Load all filtered rows in the background one by one
	 * Start this method without providing an index!
	 *
	 * @param {number} [index=0]
	 */
	Filter.prototype.loadInBackground = function (index) {
	  if (index === undefined) index = 0;

	  var frame = this.graph.frame;

	  if (index < this.values.length) {
	    // create a progress box
	    if (frame.progress === undefined) {
	      frame.progress = document.createElement('DIV');
	      frame.progress.style.position = 'absolute';
	      frame.progress.style.color = 'gray';
	      frame.appendChild(frame.progress);
	    }
	    var progress = this.getLoadedProgress();
	    frame.progress.innerHTML = 'Loading animation... ' + progress + '%';
	    // TODO: this is no nice solution...
	    frame.progress.style.bottom = 60 + 'px'; // TODO: use height of slider
	    frame.progress.style.left = 10 + 'px';

	    var me = this;
	    setTimeout(function () {
	      me.loadInBackground(index + 1);
	    }, 10);
	    this.loaded = false;
	  } else {
	    this.loaded = true;

	    // remove the progress box
	    if (frame.progress !== undefined) {
	      frame.removeChild(frame.progress);
	      frame.progress = undefined;
	    }

	    if (this.onLoadCallback) this.onLoadCallback();
	  }
	};

	module.exports = Filter;

	/***/ }),
	/* 97 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var keycharm = __webpack_require__(35);
	var Emitter = __webpack_require__(44);
	var Hammer = __webpack_require__(10);
	var util = __webpack_require__(2);

	/**
	 * Turn an element into an clickToUse element.
	 * When not active, the element has a transparent overlay. When the overlay is
	 * clicked, the mode is changed to active.
	 * When active, the element is displayed with a blue border around it, and
	 * the interactive contents of the element can be used. When clicked outside
	 * the element, the elements mode is changed to inactive.
	 * @param {Element} container
	 * @constructor Activator
	 */
	function Activator(container) {
	  this.active = false;

	  this.dom = {
	    container: container
	  };

	  this.dom.overlay = document.createElement('div');
	  this.dom.overlay.className = 'vis-overlay';

	  this.dom.container.appendChild(this.dom.overlay);

	  this.hammer = Hammer(this.dom.overlay);
	  this.hammer.on('tap', this._onTapOverlay.bind(this));

	  // block all touch events (except tap)
	  var me = this;
	  var events = ['tap', 'doubletap', 'press', 'pinch', 'pan', 'panstart', 'panmove', 'panend'];
	  events.forEach(function (event) {
	    me.hammer.on(event, function (event) {
	      event.stopPropagation();
	    });
	  });

	  // attach a click event to the window, in order to deactivate when clicking outside the timeline
	  if (document && document.body) {
	    this.onClick = function (event) {
	      if (!_hasParent(event.target, container)) {
	        me.deactivate();
	      }
	    };
	    document.body.addEventListener('click', this.onClick);
	  }

	  if (this.keycharm !== undefined) {
	    this.keycharm.destroy();
	  }
	  this.keycharm = keycharm();

	  // keycharm listener only bounded when active)
	  this.escListener = this.deactivate.bind(this);
	}

	// turn into an event emitter
	Emitter(Activator.prototype);

	// The currently active activator
	Activator.current = null;

	/**
	 * Destroy the activator. Cleans up all created DOM and event listeners
	 */
	Activator.prototype.destroy = function () {
	  this.deactivate();

	  // remove dom
	  this.dom.overlay.parentNode.removeChild(this.dom.overlay);

	  // remove global event listener
	  if (this.onClick) {
	    document.body.removeEventListener('click', this.onClick);
	  }

	  // cleanup hammer instances
	  this.hammer.destroy();
	  this.hammer = null;
	  // FIXME: cleaning up hammer instances doesn't work (Timeline not removed from memory)
	};

	/**
	 * Activate the element
	 * Overlay is hidden, element is decorated with a blue shadow border
	 */
	Activator.prototype.activate = function () {
	  // we allow only one active activator at a time
	  if (Activator.current) {
	    Activator.current.deactivate();
	  }
	  Activator.current = this;

	  this.active = true;
	  this.dom.overlay.style.display = 'none';
	  util.addClassName(this.dom.container, 'vis-active');

	  this.emit('change');
	  this.emit('activate');

	  // ugly hack: bind ESC after emitting the events, as the Network rebinds all
	  // keyboard events on a 'change' event
	  this.keycharm.bind('esc', this.escListener);
	};

	/**
	 * Deactivate the element
	 * Overlay is displayed on top of the element
	 */
	Activator.prototype.deactivate = function () {
	  this.active = false;
	  this.dom.overlay.style.display = '';
	  util.removeClassName(this.dom.container, 'vis-active');
	  this.keycharm.unbind('esc', this.escListener);

	  this.emit('change');
	  this.emit('deactivate');
	};

	/**
	 * Handle a tap event: activate the container
	 * @param {Event}  event   The event
	 * @private
	 */
	Activator.prototype._onTapOverlay = function (event) {
	  // activate the container
	  this.activate();
	  event.stopPropagation();
	};

	/**
	 * Test whether the element has the requested parent element somewhere in
	 * its chain of parent nodes.
	 * @param {HTMLElement} element
	 * @param {HTMLElement} parent
	 * @returns {boolean} Returns true when the parent is found somewhere in the
	 *                    chain of parent nodes.
	 * @private
	 */
	function _hasParent(element, parent) {
	  while (element) {
	    if (element === parent) {
	      return true;
	    }
	    element = element.parentNode;
	  }
	  return false;
	}

	module.exports = Activator;

	/***/ }),
	/* 98 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	// English
	exports['en'] = {
	  current: 'current',
	  time: 'time'
	};
	exports['en_EN'] = exports['en'];
	exports['en_US'] = exports['en'];

	// Italiano
	exports['it'] = {
	  current: 'attuale',
	  time: 'tempo'
	};
	exports['it_IT'] = exports['it'];
	exports['it_CH'] = exports['it'];

	// Dutch
	exports['nl'] = {
	  current: 'huidige',
	  time: 'tijd'
	};
	exports['nl_NL'] = exports['nl'];
	exports['nl_BE'] = exports['nl'];

	// German
	exports['de'] = {
	  current: 'Aktuelle',
	  time: 'Zeit'
	};
	exports['de_DE'] = exports['de'];

	// French
	exports['fr'] = {
	  current: 'actuel',
	  time: 'heure'
	};
	exports['fr_FR'] = exports['fr'];
	exports['fr_CA'] = exports['fr'];
	exports['fr_BE'] = exports['fr'];

	// Espanol
	exports['es'] = {
	  current: 'corriente',
	  time: 'hora'
	};
	exports['es_ES'] = exports['es'];

	/***/ }),
	/* 99 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _create = __webpack_require__(29);

	var _create2 = _interopRequireDefault(_create);

	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var Hammer = __webpack_require__(10);
	var util = __webpack_require__(2);
	var DataSet = __webpack_require__(11);
	var DataView = __webpack_require__(12);
	var TimeStep = __webpack_require__(66);
	var Component = __webpack_require__(16);
	var Group = __webpack_require__(68);
	var BackgroundGroup = __webpack_require__(69);
	var BoxItem = __webpack_require__(101);
	var PointItem = __webpack_require__(102);
	var RangeItem = __webpack_require__(70);
	var BackgroundItem = __webpack_require__(103);
	var Popup = __webpack_require__(104)['default'];

	var UNGROUPED = '__ungrouped__'; // reserved group id for ungrouped items
	var BACKGROUND = '__background__'; // reserved group id for background items without group

	/**
	 * An ItemSet holds a set of items and ranges which can be displayed in a
	 * range. The width is determined by the parent of the ItemSet, and the height
	 * is determined by the size of the items.
	 * @param {{dom: Object, domProps: Object, emitter: Emitter, range: Range}} body
	 * @param {Object} [options]      See ItemSet.setOptions for the available options.
	 * @constructor ItemSet
	 * @extends Component
	 */
	function ItemSet(body, options) {
	  this.body = body;
	  this.defaultOptions = {
	    type: null, // 'box', 'point', 'range', 'background'
	    orientation: {
	      item: 'bottom' // item orientation: 'top' or 'bottom'
	    },
	    align: 'auto', // alignment of box items
	    stack: true,
	    stackSubgroups: true,
	    groupOrderSwap: function groupOrderSwap(fromGroup, toGroup, groups) {
	      // eslint-disable-line no-unused-vars
	      var targetOrder = toGroup.order;
	      toGroup.order = fromGroup.order;
	      fromGroup.order = targetOrder;
	    },
	    groupOrder: 'order',

	    selectable: true,
	    multiselect: false,
	    itemsAlwaysDraggable: {
	      item: false,
	      range: false
	    },

	    editable: {
	      updateTime: false,
	      updateGroup: false,
	      add: false,
	      remove: false,
	      overrideItems: false
	    },

	    groupEditable: {
	      order: false,
	      add: false,
	      remove: false
	    },

	    snap: TimeStep.snap,

	    // Only called when `objectData.target === 'item'.
	    onDropObjectOnItem: function onDropObjectOnItem(objectData, item, callback) {
	      callback(item);
	    },
	    onAdd: function onAdd(item, callback) {
	      callback(item);
	    },
	    onUpdate: function onUpdate(item, callback) {
	      callback(item);
	    },
	    onMove: function onMove(item, callback) {
	      callback(item);
	    },
	    onRemove: function onRemove(item, callback) {
	      callback(item);
	    },
	    onMoving: function onMoving(item, callback) {
	      callback(item);
	    },
	    onAddGroup: function onAddGroup(item, callback) {
	      callback(item);
	    },
	    onMoveGroup: function onMoveGroup(item, callback) {
	      callback(item);
	    },
	    onRemoveGroup: function onRemoveGroup(item, callback) {
	      callback(item);
	    },

	    margin: {
	      item: {
	        horizontal: 10,
	        vertical: 10
	      },
	      axis: 20
	    },

	    showTooltips: true,

	    tooltip: {
	      followMouse: false,
	      overflowMethod: 'flip'
	    },

	    tooltipOnItemUpdateTime: false
	  };

	  // options is shared by this ItemSet and all its items
	  this.options = util.extend({}, this.defaultOptions);
	  this.options.rtl = options.rtl;

	  // options for getting items from the DataSet with the correct type
	  this.itemOptions = {
	    type: { start: 'Date', end: 'Date' }
	  };

	  this.conversion = {
	    toScreen: body.util.toScreen,
	    toTime: body.util.toTime
	  };
	  this.dom = {};
	  this.props = {};
	  this.hammer = null;

	  var me = this;
	  this.itemsData = null; // DataSet
	  this.groupsData = null; // DataSet

	  // listeners for the DataSet of the items
	  this.itemListeners = {
	    'add': function add(event, params, senderId) {
	      // eslint-disable-line no-unused-vars
	      me._onAdd(params.items);
	    },
	    'update': function update(event, params, senderId) {
	      // eslint-disable-line no-unused-vars
	      me._onUpdate(params.items);
	    },
	    'remove': function remove(event, params, senderId) {
	      // eslint-disable-line no-unused-vars
	      me._onRemove(params.items);
	    }
	  };

	  // listeners for the DataSet of the groups
	  this.groupListeners = {
	    'add': function add(event, params, senderId) {
	      // eslint-disable-line no-unused-vars
	      me._onAddGroups(params.items);

	      if (me.groupsData && me.groupsData.length > 0) {
	        var groupsData = me.groupsData.getDataSet();
	        groupsData.get().forEach(function (groupData) {
	          if (groupData.nestedGroups) {
	            if (groupData.showNested != false) {
	              groupData.showNested = true;
	            }
	            var updatedGroups = [];
	            groupData.nestedGroups.forEach(function (nestedGroupId) {
	              var updatedNestedGroup = groupsData.get(nestedGroupId);
	              if (!updatedNestedGroup) {
	                return;
	              }
	              updatedNestedGroup.nestedInGroup = groupData.id;
	              if (groupData.showNested == false) {
	                updatedNestedGroup.visible = false;
	              }
	              updatedGroups = updatedGroups.concat(updatedNestedGroup);
	            });
	            groupsData.update(updatedGroups, senderId);
	          }
	        });
	      }
	    },
	    'update': function update(event, params, senderId) {
	      // eslint-disable-line no-unused-vars
	      me._onUpdateGroups(params.items);
	    },
	    'remove': function remove(event, params, senderId) {
	      // eslint-disable-line no-unused-vars
	      me._onRemoveGroups(params.items);
	    }
	  };

	  this.items = {}; // object with an Item for every data item
	  this.groups = {}; // Group object for every group
	  this.groupIds = [];

	  this.selection = []; // list with the ids of all selected nodes

	  this.popup = null;

	  this.touchParams = {}; // stores properties while dragging
	  this.groupTouchParams = {};
	  // create the HTML DOM

	  this._create();

	  this.setOptions(options);
	}

	ItemSet.prototype = new Component();

	// available item types will be registered here
	ItemSet.types = {
	  background: BackgroundItem,
	  box: BoxItem,
	  range: RangeItem,
	  point: PointItem
	};

	/**
	 * Create the HTML DOM for the ItemSet
	 */
	ItemSet.prototype._create = function () {
	  var frame = document.createElement('div');
	  frame.className = 'vis-itemset';
	  frame['timeline-itemset'] = this;
	  this.dom.frame = frame;

	  // create background panel
	  var background = document.createElement('div');
	  background.className = 'vis-background';
	  frame.appendChild(background);
	  this.dom.background = background;

	  // create foreground panel
	  var foreground = document.createElement('div');
	  foreground.className = 'vis-foreground';
	  frame.appendChild(foreground);
	  this.dom.foreground = foreground;

	  // create axis panel
	  var axis = document.createElement('div');
	  axis.className = 'vis-axis';
	  this.dom.axis = axis;

	  // create labelset
	  var labelSet = document.createElement('div');
	  labelSet.className = 'vis-labelset';
	  this.dom.labelSet = labelSet;

	  // create ungrouped Group
	  this._updateUngrouped();

	  // create background Group
	  var backgroundGroup = new BackgroundGroup(BACKGROUND, null, this);
	  backgroundGroup.show();
	  this.groups[BACKGROUND] = backgroundGroup;

	  // attach event listeners
	  // Note: we bind to the centerContainer for the case where the height
	  //       of the center container is larger than of the ItemSet, so we
	  //       can click in the empty area to create a new item or deselect an item.
	  this.hammer = new Hammer(this.body.dom.centerContainer);

	  // drag items when selected
	  this.hammer.on('hammer.input', function (event) {
	    if (event.isFirst) {
	      this._onTouch(event);
	    }
	  }.bind(this));
	  this.hammer.on('panstart', this._onDragStart.bind(this));
	  this.hammer.on('panmove', this._onDrag.bind(this));
	  this.hammer.on('panend', this._onDragEnd.bind(this));
	  this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_HORIZONTAL });

	  // single select (or unselect) when tapping an item
	  this.hammer.on('tap', this._onSelectItem.bind(this));

	  // multi select when holding mouse/touch, or on ctrl+click
	  this.hammer.on('press', this._onMultiSelectItem.bind(this));

	  // add item on doubletap
	  this.hammer.on('doubletap', this._onAddItem.bind(this));

	  if (this.options.rtl) {
	    this.groupHammer = new Hammer(this.body.dom.rightContainer);
	  } else {
	    this.groupHammer = new Hammer(this.body.dom.leftContainer);
	  }

	  this.groupHammer.on('tap', this._onGroupClick.bind(this));
	  this.groupHammer.on('panstart', this._onGroupDragStart.bind(this));
	  this.groupHammer.on('panmove', this._onGroupDrag.bind(this));
	  this.groupHammer.on('panend', this._onGroupDragEnd.bind(this));
	  this.groupHammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_VERTICAL });

	  this.body.dom.centerContainer.addEventListener('mouseover', this._onMouseOver.bind(this));
	  this.body.dom.centerContainer.addEventListener('mouseout', this._onMouseOut.bind(this));
	  this.body.dom.centerContainer.addEventListener('mousemove', this._onMouseMove.bind(this));
	  // right-click on timeline 
	  this.body.dom.centerContainer.addEventListener('contextmenu', this._onDragEnd.bind(this));

	  this.body.dom.centerContainer.addEventListener('mousewheel', this._onMouseWheel.bind(this));

	  // attach to the DOM
	  this.show();
	};

	/**
	 * Set options for the ItemSet. Existing options will be extended/overwritten.
	 * @param {Object} [options] The following options are available:
	 *                           {string} type
	 *                              Default type for the items. Choose from 'box'
	 *                              (default), 'point', 'range', or 'background'.
	 *                              The default style can be overwritten by
	 *                              individual items.
	 *                           {string} align
	 *                              Alignment for the items, only applicable for
	 *                              BoxItem. Choose 'center' (default), 'left', or
	 *                              'right'.
	 *                           {string} orientation.item
	 *                              Orientation of the item set. Choose 'top' or
	 *                              'bottom' (default).
	 *                           {Function} groupOrder
	 *                              A sorting function for ordering groups
	 *                           {boolean} stack
	 *                              If true (default), items will be stacked on
	 *                              top of each other.
	 *                           {number} margin.axis
	 *                              Margin between the axis and the items in pixels.
	 *                              Default is 20.
	 *                           {number} margin.item.horizontal
	 *                              Horizontal margin between items in pixels.
	 *                              Default is 10.
	 *                           {number} margin.item.vertical
	 *                              Vertical Margin between items in pixels.
	 *                              Default is 10.
	 *                           {number} margin.item
	 *                              Margin between items in pixels in both horizontal
	 *                              and vertical direction. Default is 10.
	 *                           {number} margin
	 *                              Set margin for both axis and items in pixels.
	 *                           {boolean} selectable
	 *                              If true (default), items can be selected.
	 *                           {boolean} multiselect
	 *                              If true, multiple items can be selected.
	 *                              False by default.
	 *                           {boolean} editable
	 *                              Set all editable options to true or false
	 *                           {boolean} editable.updateTime
	 *                              Allow dragging an item to an other moment in time
	 *                           {boolean} editable.updateGroup
	 *                              Allow dragging an item to an other group
	 *                           {boolean} editable.add
	 *                              Allow creating new items on double tap
	 *                           {boolean} editable.remove
	 *                              Allow removing items by clicking the delete button
	 *                              top right of a selected item.
	 *                           {Function(item: Item, callback: Function)} onAdd
	 *                              Callback function triggered when an item is about to be added:
	 *                              when the user double taps an empty space in the Timeline.
	 *                           {Function(item: Item, callback: Function)} onUpdate
	 *                              Callback function fired when an item is about to be updated.
	 *                              This function typically has to show a dialog where the user
	 *                              change the item. If not implemented, nothing happens.
	 *                           {Function(item: Item, callback: Function)} onMove
	 *                              Fired when an item has been moved. If not implemented,
	 *                              the move action will be accepted.
	 *                           {Function(item: Item, callback: Function)} onRemove
	 *                              Fired when an item is about to be deleted.
	 *                              If not implemented, the item will be always removed.
	 */
	ItemSet.prototype.setOptions = function (options) {
	  if (options) {
	    // copy all options that we know
	    var fields = ['type', 'rtl', 'align', 'order', 'stack', 'stackSubgroups', 'selectable', 'multiselect', 'multiselectPerGroup', 'groupOrder', 'dataAttributes', 'template', 'groupTemplate', 'visibleFrameTemplate', 'hide', 'snap', 'groupOrderSwap', 'showTooltips', 'tooltip', 'tooltipOnItemUpdateTime'];
	    util.selectiveExtend(fields, this.options, options);

	    if ('itemsAlwaysDraggable' in options) {
	      if (typeof options.itemsAlwaysDraggable === 'boolean') {
	        this.options.itemsAlwaysDraggable.item = options.itemsAlwaysDraggable;
	        this.options.itemsAlwaysDraggable.range = false;
	      } else if ((0, _typeof3['default'])(options.itemsAlwaysDraggable) === 'object') {
	        util.selectiveExtend(['item', 'range'], this.options.itemsAlwaysDraggable, options.itemsAlwaysDraggable);
	        // only allow range always draggable when item is always draggable as well
	        if (!this.options.itemsAlwaysDraggable.item) {
	          this.options.itemsAlwaysDraggable.range = false;
	        }
	      }
	    }

	    if ('orientation' in options) {
	      if (typeof options.orientation === 'string') {
	        this.options.orientation.item = options.orientation === 'top' ? 'top' : 'bottom';
	      } else if ((0, _typeof3['default'])(options.orientation) === 'object' && 'item' in options.orientation) {
	        this.options.orientation.item = options.orientation.item;
	      }
	    }

	    if ('margin' in options) {
	      if (typeof options.margin === 'number') {
	        this.options.margin.axis = options.margin;
	        this.options.margin.item.horizontal = options.margin;
	        this.options.margin.item.vertical = options.margin;
	      } else if ((0, _typeof3['default'])(options.margin) === 'object') {
	        util.selectiveExtend(['axis'], this.options.margin, options.margin);
	        if ('item' in options.margin) {
	          if (typeof options.margin.item === 'number') {
	            this.options.margin.item.horizontal = options.margin.item;
	            this.options.margin.item.vertical = options.margin.item;
	          } else if ((0, _typeof3['default'])(options.margin.item) === 'object') {
	            util.selectiveExtend(['horizontal', 'vertical'], this.options.margin.item, options.margin.item);
	          }
	        }
	      }
	    }

	    if ('editable' in options) {
	      if (typeof options.editable === 'boolean') {
	        this.options.editable.updateTime = options.editable;
	        this.options.editable.updateGroup = options.editable;
	        this.options.editable.add = options.editable;
	        this.options.editable.remove = options.editable;
	        this.options.editable.overrideItems = false;
	      } else if ((0, _typeof3['default'])(options.editable) === 'object') {
	        util.selectiveExtend(['updateTime', 'updateGroup', 'add', 'remove', 'overrideItems'], this.options.editable, options.editable);
	      }
	    }

	    if ('groupEditable' in options) {
	      if (typeof options.groupEditable === 'boolean') {
	        this.options.groupEditable.order = options.groupEditable;
	        this.options.groupEditable.add = options.groupEditable;
	        this.options.groupEditable.remove = options.groupEditable;
	      } else if ((0, _typeof3['default'])(options.groupEditable) === 'object') {
	        util.selectiveExtend(['order', 'add', 'remove'], this.options.groupEditable, options.groupEditable);
	      }
	    }

	    // callback functions
	    var addCallback = function (name) {
	      var fn = options[name];
	      if (fn) {
	        if (!(fn instanceof Function)) {
	          throw new Error('option ' + name + ' must be a function ' + name + '(item, callback)');
	        }
	        this.options[name] = fn;
	      }
	    }.bind(this);
	    ['onDropObjectOnItem', 'onAdd', 'onUpdate', 'onRemove', 'onMove', 'onMoving', 'onAddGroup', 'onMoveGroup', 'onRemoveGroup'].forEach(addCallback);

	    // force the itemSet to refresh: options like orientation and margins may be changed
	    this.markDirty();
	  }
	};

	/**
	 * Mark the ItemSet dirty so it will refresh everything with next redraw.
	 * Optionally, all items can be marked as dirty and be refreshed.
	 * @param {{refreshItems: boolean}} [options]
	 */
	ItemSet.prototype.markDirty = function (options) {
	  this.groupIds = [];

	  if (options && options.refreshItems) {
	    util.forEach(this.items, function (item) {
	      item.dirty = true;
	      if (item.displayed) item.redraw();
	    });
	  }
	};

	/**
	 * Destroy the ItemSet
	 */
	ItemSet.prototype.destroy = function () {
	  this.hide();
	  this.setItems(null);
	  this.setGroups(null);

	  this.hammer = null;

	  this.body = null;
	  this.conversion = null;
	};

	/**
	 * Hide the component from the DOM
	 */
	ItemSet.prototype.hide = function () {
	  // remove the frame containing the items
	  if (this.dom.frame.parentNode) {
	    this.dom.frame.parentNode.removeChild(this.dom.frame);
	  }

	  // remove the axis with dots
	  if (this.dom.axis.parentNode) {
	    this.dom.axis.parentNode.removeChild(this.dom.axis);
	  }

	  // remove the labelset containing all group labels
	  if (this.dom.labelSet.parentNode) {
	    this.dom.labelSet.parentNode.removeChild(this.dom.labelSet);
	  }
	};

	/**
	 * Show the component in the DOM (when not already visible).
	 */
	ItemSet.prototype.show = function () {
	  // show frame containing the items
	  if (!this.dom.frame.parentNode) {
	    this.body.dom.center.appendChild(this.dom.frame);
	  }

	  // show axis with dots
	  if (!this.dom.axis.parentNode) {
	    this.body.dom.backgroundVertical.appendChild(this.dom.axis);
	  }

	  // show labelset containing labels
	  if (!this.dom.labelSet.parentNode) {
	    if (this.options.rtl) {
	      this.body.dom.right.appendChild(this.dom.labelSet);
	    } else {
	      this.body.dom.left.appendChild(this.dom.labelSet);
	    }
	  }
	};

	/**
	 * Set selected items by their id. Replaces the current selection
	 * Unknown id's are silently ignored.
	 * @param {string[] | string} [ids] An array with zero or more id's of the items to be
	 *                                  selected, or a single item id. If ids is undefined
	 *                                  or an empty array, all items will be unselected.
	 */
	ItemSet.prototype.setSelection = function (ids) {
	  var i, ii, id, item;

	  if (ids == undefined) ids = [];
	  if (!Array.isArray(ids)) ids = [ids];

	  // unselect currently selected items
	  for (i = 0, ii = this.selection.length; i < ii; i++) {
	    id = this.selection[i];
	    item = this.items[id];
	    if (item) item.unselect();
	  }

	  // select items
	  this.selection = [];
	  for (i = 0, ii = ids.length; i < ii; i++) {
	    id = ids[i];
	    item = this.items[id];
	    if (item) {
	      this.selection.push(id);
	      item.select();
	    }
	  }
	};

	/**
	 * Get the selected items by their id
	 * @return {Array} ids  The ids of the selected items
	 */
	ItemSet.prototype.getSelection = function () {
	  return this.selection.concat([]);
	};

	/**
	 * Get the id's of the currently visible items.
	 * @returns {Array} The ids of the visible items
	 */
	ItemSet.prototype.getVisibleItems = function () {
	  var range = this.body.range.getRange();
	  var right, left;

	  if (this.options.rtl) {
	    right = this.body.util.toScreen(range.start);
	    left = this.body.util.toScreen(range.end);
	  } else {
	    left = this.body.util.toScreen(range.start);
	    right = this.body.util.toScreen(range.end);
	  }

	  var ids = [];
	  for (var groupId in this.groups) {
	    if (this.groups.hasOwnProperty(groupId)) {
	      var group = this.groups[groupId];
	      var rawVisibleItems = group.isVisible ? group.visibleItems : [];

	      // filter the "raw" set with visibleItems into a set which is really
	      // visible by pixels
	      for (var i = 0; i < rawVisibleItems.length; i++) {
	        var item = rawVisibleItems[i];
	        // TODO: also check whether visible vertically
	        if (this.options.rtl) {
	          if (item.right < left && item.right + item.width > right) {
	            ids.push(item.id);
	          }
	        } else {
	          if (item.left < right && item.left + item.width > left) {
	            ids.push(item.id);
	          }
	        }
	      }
	    }
	  }

	  return ids;
	};

	/**
	 * Deselect a selected item
	 * @param {string | number} id
	 * @private
	 */
	ItemSet.prototype._deselect = function (id) {
	  var selection = this.selection;
	  for (var i = 0, ii = selection.length; i < ii; i++) {
	    if (selection[i] == id) {
	      // non-strict comparison!
	      selection.splice(i, 1);
	      break;
	    }
	  }
	};

	/**
	 * Repaint the component
	 * @return {boolean} Returns true if the component is resized
	 */
	ItemSet.prototype.redraw = function () {
	  var margin = this.options.margin,
	      range = this.body.range,
	      asSize = util.option.asSize,
	      options = this.options,
	      orientation = options.orientation.item,
	      resized = false,
	      frame = this.dom.frame;

	  // recalculate absolute position (before redrawing groups)
	  this.props.top = this.body.domProps.top.height + this.body.domProps.border.top;

	  if (this.options.rtl) {
	    this.props.right = this.body.domProps.right.width + this.body.domProps.border.right;
	  } else {
	    this.props.left = this.body.domProps.left.width + this.body.domProps.border.left;
	  }

	  // update class name
	  frame.className = 'vis-itemset';

	  // reorder the groups (if needed)
	  resized = this._orderGroups() || resized;

	  // check whether zoomed (in that case we need to re-stack everything)
	  // TODO: would be nicer to get this as a trigger from Range
	  var visibleInterval = range.end - range.start;
	  var zoomed = visibleInterval != this.lastVisibleInterval || this.props.width != this.props.lastWidth;
	  var scrolled = range.start != this.lastRangeStart;
	  var changedStackOption = options.stack != this.lastStack;
	  var changedStackSubgroupsOption = options.stackSubgroups != this.lastStackSubgroups;
	  var forceRestack = zoomed || scrolled || changedStackOption || changedStackSubgroupsOption;
	  this.lastVisibleInterval = visibleInterval;
	  this.lastRangeStart = range.start;
	  this.lastStack = options.stack;
	  this.lastStackSubgroups = options.stackSubgroups;

	  this.props.lastWidth = this.props.width;

	  var firstGroup = this._firstGroup();
	  var firstMargin = {
	    item: margin.item,
	    axis: margin.axis
	  };
	  var nonFirstMargin = {
	    item: margin.item,
	    axis: margin.item.vertical / 2
	  };
	  var height = 0;
	  var minHeight = margin.axis + margin.item.vertical;

	  // redraw the background group
	  this.groups[BACKGROUND].redraw(range, nonFirstMargin, forceRestack);

	  var redrawQueue = {};
	  var redrawQueueLength = 0;

	  // collect redraw functions
	  util.forEach(this.groups, function (group, key) {
	    if (key === BACKGROUND) return;
	    var groupMargin = group == firstGroup ? firstMargin : nonFirstMargin;
	    var returnQueue = true;
	    redrawQueue[key] = group.redraw(range, groupMargin, forceRestack, returnQueue);
	    redrawQueueLength = redrawQueue[key].length;
	  });

	  var needRedraw = redrawQueueLength > 0;
	  if (needRedraw) {
	    var redrawResults = {};

	    for (var i = 0; i < redrawQueueLength; i++) {
	      util.forEach(redrawQueue, function (fns, key) {
	        redrawResults[key] = fns[i]();
	      });
	    }

	    // redraw all regular groups
	    util.forEach(this.groups, function (group, key) {
	      if (key === BACKGROUND) return;
	      var groupResized = redrawResults[key];
	      resized = groupResized || resized;
	      height += group.height;
	    });
	    height = Math.max(height, minHeight);
	  }

	  height = Math.max(height, minHeight);

	  // update frame height
	  frame.style.height = asSize(height);

	  // calculate actual size
	  this.props.width = frame.offsetWidth;
	  this.props.height = height;

	  // reposition axis
	  this.dom.axis.style.top = asSize(orientation == 'top' ? this.body.domProps.top.height + this.body.domProps.border.top : this.body.domProps.top.height + this.body.domProps.centerContainer.height);
	  if (this.options.rtl) {
	    this.dom.axis.style.right = '0';
	  } else {
	    this.dom.axis.style.left = '0';
	  }

	  this.initialItemSetDrawn = true;
	  // check if this component is resized
	  resized = this._isResized() || resized;

	  return resized;
	};

	/**
	 * Get the first group, aligned with the axis
	 * @return {Group | null} firstGroup
	 * @private
	 */
	ItemSet.prototype._firstGroup = function () {
	  var firstGroupIndex = this.options.orientation.item == 'top' ? 0 : this.groupIds.length - 1;
	  var firstGroupId = this.groupIds[firstGroupIndex];
	  var firstGroup = this.groups[firstGroupId] || this.groups[UNGROUPED];

	  return firstGroup || null;
	};

	/**
	 * Create or delete the group holding all ungrouped items. This group is used when
	 * there are no groups specified.
	 * @protected
	 */
	ItemSet.prototype._updateUngrouped = function () {
	  var ungrouped = this.groups[UNGROUPED];
	  var item, itemId;

	  if (this.groupsData) {
	    // remove the group holding all ungrouped items
	    if (ungrouped) {
	      ungrouped.hide();
	      delete this.groups[UNGROUPED];

	      for (itemId in this.items) {
	        if (this.items.hasOwnProperty(itemId)) {
	          item = this.items[itemId];
	          item.parent && item.parent.remove(item);
	          var groupId = this._getGroupId(item.data);
	          var group = this.groups[groupId];
	          group && group.add(item) || item.hide();
	        }
	      }
	    }
	  } else {
	    // create a group holding all (unfiltered) items
	    if (!ungrouped) {
	      var id = null;
	      var data = null;
	      ungrouped = new Group(id, data, this);
	      this.groups[UNGROUPED] = ungrouped;

	      for (itemId in this.items) {
	        if (this.items.hasOwnProperty(itemId)) {
	          item = this.items[itemId];
	          ungrouped.add(item);
	        }
	      }

	      ungrouped.show();
	    }
	  }
	};

	/**
	 * Get the element for the labelset
	 * @return {HTMLElement} labelSet
	 */
	ItemSet.prototype.getLabelSet = function () {
	  return this.dom.labelSet;
	};

	/**
	 * Set items
	 * @param {vis.DataSet | null} items
	 */
	ItemSet.prototype.setItems = function (items) {
	  var me = this,
	      ids,
	      oldItemsData = this.itemsData;

	  // replace the dataset
	  if (!items) {
	    this.itemsData = null;
	  } else if (items instanceof DataSet || items instanceof DataView) {
	    this.itemsData = items;
	  } else {
	    throw new TypeError('Data must be an instance of DataSet or DataView');
	  }

	  if (oldItemsData) {
	    // unsubscribe from old dataset
	    util.forEach(this.itemListeners, function (callback, event) {
	      oldItemsData.off(event, callback);
	    });

	    // remove all drawn items
	    ids = oldItemsData.getIds();
	    this._onRemove(ids);
	  }

	  if (this.itemsData) {
	    // subscribe to new dataset
	    var id = this.id;
	    util.forEach(this.itemListeners, function (callback, event) {
	      me.itemsData.on(event, callback, id);
	    });

	    // add all new items
	    ids = this.itemsData.getIds();
	    this._onAdd(ids);

	    // update the group holding all ungrouped items
	    this._updateUngrouped();
	  }

	  this.body.emitter.emit('_change', { queue: true });
	};

	/**
	 * Get the current items
	 * @returns {vis.DataSet | null}
	 */
	ItemSet.prototype.getItems = function () {
	  return this.itemsData;
	};

	/**
	 * Set groups
	 * @param {vis.DataSet} groups
	 */
	ItemSet.prototype.setGroups = function (groups) {
	  var me = this,
	      ids;

	  // unsubscribe from current dataset
	  if (this.groupsData) {
	    util.forEach(this.groupListeners, function (callback, event) {
	      me.groupsData.off(event, callback);
	    });

	    // remove all drawn groups
	    ids = this.groupsData.getIds();
	    this.groupsData = null;
	    this._onRemoveGroups(ids); // note: this will cause a redraw
	  }

	  // replace the dataset
	  if (!groups) {
	    this.groupsData = null;
	  } else if (groups instanceof DataSet || groups instanceof DataView) {
	    this.groupsData = groups;
	  } else {
	    throw new TypeError('Data must be an instance of DataSet or DataView');
	  }

	  if (this.groupsData) {
	    // go over all groups nesting
	    var groupsData = this.groupsData;
	    if (this.groupsData instanceof DataView) {
	      groupsData = this.groupsData.getDataSet();
	    }

	    groupsData.get().forEach(function (group) {
	      if (group.nestedGroups) {
	        group.nestedGroups.forEach(function (nestedGroupId) {
	          var updatedNestedGroup = groupsData.get(nestedGroupId);
	          updatedNestedGroup.nestedInGroup = group.id;
	          if (group.showNested == false) {
	            updatedNestedGroup.visible = false;
	          }
	          groupsData.update(updatedNestedGroup);
	        });
	      }
	    });

	    // subscribe to new dataset
	    var id = this.id;
	    util.forEach(this.groupListeners, function (callback, event) {
	      me.groupsData.on(event, callback, id);
	    });

	    // draw all ms
	    ids = this.groupsData.getIds();
	    this._onAddGroups(ids);
	  }

	  // update the group holding all ungrouped items
	  this._updateUngrouped();

	  // update the order of all items in each group
	  this._order();

	  this.body.emitter.emit('_change', { queue: true });
	};

	/**
	 * Get the current groups
	 * @returns {vis.DataSet | null} groups
	 */
	ItemSet.prototype.getGroups = function () {
	  return this.groupsData;
	};

	/**
	 * Remove an item by its id
	 * @param {string | number} id
	 */
	ItemSet.prototype.removeItem = function (id) {
	  var item = this.itemsData.get(id),
	      dataset = this.itemsData.getDataSet();

	  if (item) {
	    // confirm deletion
	    this.options.onRemove(item, function (item) {
	      if (item) {
	        // remove by id here, it is possible that an item has no id defined
	        // itself, so better not delete by the item itself
	        dataset.remove(id);
	      }
	    });
	  }
	};

	/**
	 * Get the time of an item based on it's data and options.type
	 * @param {Object} itemData
	 * @returns {string} Returns the type
	 * @private
	 */
	ItemSet.prototype._getType = function (itemData) {
	  return itemData.type || this.options.type || (itemData.end ? 'range' : 'box');
	};

	/**
	 * Get the group id for an item
	 * @param {Object} itemData
	 * @returns {string} Returns the groupId
	 * @private
	 */
	ItemSet.prototype._getGroupId = function (itemData) {
	  var type = this._getType(itemData);
	  if (type == 'background' && itemData.group == undefined) {
	    return BACKGROUND;
	  } else {
	    return this.groupsData ? itemData.group : UNGROUPED;
	  }
	};

	/**
	 * Handle updated items
	 * @param {number[]} ids
	 * @protected
	 */
	ItemSet.prototype._onUpdate = function (ids) {
	  var me = this;

	  ids.forEach(function (id) {
	    var itemData = me.itemsData.get(id, me.itemOptions);
	    var item = me.items[id];
	    var type = itemData ? me._getType(itemData) : null;

	    var constructor = ItemSet.types[type];
	    var selected;

	    if (item) {
	      // update item   	
	      if (!constructor || !(item instanceof constructor)) {
	        // item type has changed, delete the item and recreate it
	        selected = item.selected; // preserve selection of this item
	        me._removeItem(item);
	        item = null;
	      } else {
	        me._updateItem(item, itemData);
	      }
	    }

	    if (!item && itemData) {
	      // create item
	      if (constructor) {
	        item = new constructor(itemData, me.conversion, me.options);
	        item.id = id; // TODO: not so nice setting id afterwards

	        me._addItem(item);
	        if (selected) {
	          this.selection.push(id);
	          item.select();
	        }
	      } else if (type == 'rangeoverflow') {
	        // TODO: deprecated since version 2.1.0 (or 3.0.0?). cleanup some day
	        throw new TypeError('Item type "rangeoverflow" is deprecated. Use css styling instead: ' + '.vis-item.vis-range .vis-item-content {overflow: visible;}');
	      } else {
	        throw new TypeError('Unknown item type "' + type + '"');
	      }
	    }
	  }.bind(this));

	  this._order();
	  this.body.emitter.emit('_change', { queue: true });
	};

	/**
	 * Handle added items
	 * @param {number[]} ids
	 * @protected
	 */
	ItemSet.prototype._onAdd = ItemSet.prototype._onUpdate;

	/**
	 * Handle removed items
	 * @param {number[]} ids
	 * @protected
	 */
	ItemSet.prototype._onRemove = function (ids) {
	  var count = 0;
	  var me = this;
	  ids.forEach(function (id) {
	    var item = me.items[id];
	    if (item) {
	      count++;
	      me._removeItem(item);
	    }
	  });

	  if (count) {
	    // update order
	    this._order();
	    this.body.emitter.emit('_change', { queue: true });
	  }
	};

	/**
	 * Update the order of item in all groups
	 * @private
	 */
	ItemSet.prototype._order = function () {
	  // reorder the items in all groups
	  // TODO: optimization: only reorder groups affected by the changed items
	  util.forEach(this.groups, function (group) {
	    group.order();
	  });
	};

	/**
	 * Handle updated groups
	 * @param {number[]} ids
	 * @private
	 */
	ItemSet.prototype._onUpdateGroups = function (ids) {
	  this._onAddGroups(ids);
	};

	/**
	 * Handle changed groups (added or updated)
	 * @param {number[]} ids
	 * @private
	 */
	ItemSet.prototype._onAddGroups = function (ids) {
	  var me = this;

	  ids.forEach(function (id) {
	    var groupData = me.groupsData.get(id);
	    var group = me.groups[id];

	    if (!group) {
	      // check for reserved ids
	      if (id == UNGROUPED || id == BACKGROUND) {
	        throw new Error('Illegal group id. ' + id + ' is a reserved id.');
	      }

	      var groupOptions = (0, _create2['default'])(me.options);
	      util.extend(groupOptions, {
	        height: null
	      });

	      group = new Group(id, groupData, me);
	      me.groups[id] = group;

	      // add items with this groupId to the new group
	      for (var itemId in me.items) {
	        if (me.items.hasOwnProperty(itemId)) {
	          var item = me.items[itemId];
	          if (item.data.group == id) {
	            group.add(item);
	          }
	        }
	      }

	      group.order();
	      group.show();
	    } else {
	      // update group
	      group.setData(groupData);
	    }
	  });

	  this.body.emitter.emit('_change', { queue: true });
	};

	/**
	 * Handle removed groups
	 * @param {number[]} ids
	 * @private
	 */
	ItemSet.prototype._onRemoveGroups = function (ids) {
	  var groups = this.groups;
	  ids.forEach(function (id) {
	    var group = groups[id];

	    if (group) {
	      group.hide();
	      delete groups[id];
	    }
	  });

	  this.markDirty();

	  this.body.emitter.emit('_change', { queue: true });
	};

	/**
	 * Reorder the groups if needed
	 * @return {boolean} changed
	 * @private
	 */
	ItemSet.prototype._orderGroups = function () {
	  if (this.groupsData) {
	    // reorder the groups
	    var groupIds = this.groupsData.getIds({
	      order: this.options.groupOrder
	    });

	    groupIds = this._orderNestedGroups(groupIds);

	    var changed = !util.equalArray(groupIds, this.groupIds);
	    if (changed) {
	      // hide all groups, removes them from the DOM
	      var groups = this.groups;
	      groupIds.forEach(function (groupId) {
	        groups[groupId].hide();
	      });

	      // show the groups again, attach them to the DOM in correct order
	      groupIds.forEach(function (groupId) {
	        groups[groupId].show();
	      });

	      this.groupIds = groupIds;
	    }

	    return changed;
	  } else {
	    return false;
	  }
	};

	/**
	 * Reorder the nested groups
	 *
	 * @param {Array.<number>} groupIds
	 * @returns {Array.<number>}
	 * @private
	 */
	ItemSet.prototype._orderNestedGroups = function (groupIds) {
	  var newGroupIdsOrder = [];

	  groupIds.forEach(function (groupId) {
	    var groupData = this.groupsData.get(groupId);
	    if (!groupData.nestedInGroup) {
	      newGroupIdsOrder.push(groupId);
	    }
	    if (groupData.nestedGroups) {
	      var nestedGroups = this.groupsData.get({
	        filter: function filter(nestedGroup) {
	          return nestedGroup.nestedInGroup == groupId;
	        },
	        order: this.options.groupOrder
	      });
	      var nestedGroupIds = nestedGroups.map(function (nestedGroup) {
	        return nestedGroup.id;
	      });
	      newGroupIdsOrder = newGroupIdsOrder.concat(nestedGroupIds);
	    }
	  }, this);
	  return newGroupIdsOrder;
	};

	/**
	 * Add a new item
	 * @param {Item} item
	 * @private
	 */
	ItemSet.prototype._addItem = function (item) {
	  this.items[item.id] = item;

	  // add to group
	  var groupId = this._getGroupId(item.data);
	  var group = this.groups[groupId];

	  if (!group) {
	    item.groupShowing = false;
	  } else if (group && group.data && group.data.showNested) {
	    item.groupShowing = true;
	  }

	  if (group) group.add(item);
	};

	/**
	 * Update an existing item
	 * @param {Item} item
	 * @param {Object} itemData
	 * @private
	 */
	ItemSet.prototype._updateItem = function (item, itemData) {
	  // update the items data (will redraw the item when displayed)
	  item.setData(itemData);

	  var groupId = this._getGroupId(item.data);
	  var group = this.groups[groupId];
	  if (!group) {
	    item.groupShowing = false;
	  } else if (group && group.data && group.data.showNested) {
	    item.groupShowing = true;
	  }
	};

	/**
	 * Delete an item from the ItemSet: remove it from the DOM, from the map
	 * with items, and from the map with visible items, and from the selection
	 * @param {Item} item
	 * @private
	 */
	ItemSet.prototype._removeItem = function (item) {
	  // remove from DOM
	  item.hide();

	  // remove from items
	  delete this.items[item.id];

	  // remove from selection
	  var index = this.selection.indexOf(item.id);
	  if (index != -1) this.selection.splice(index, 1);

	  // remove from group
	  item.parent && item.parent.remove(item);
	};

	/**
	 * Create an array containing all items being a range (having an end date)
	 * @param {Array.<Object>} array
	 * @returns {Array}
	 * @private
	 */
	ItemSet.prototype._constructByEndArray = function (array) {
	  var endArray = [];

	  for (var i = 0; i < array.length; i++) {
	    if (array[i] instanceof RangeItem) {
	      endArray.push(array[i]);
	    }
	  }
	  return endArray;
	};

	/**
	 * Register the clicked item on touch, before dragStart is initiated.
	 *
	 * dragStart is initiated from a mousemove event, AFTER the mouse/touch is
	 * already moving. Therefore, the mouse/touch can sometimes be above an other
	 * DOM element than the item itself.
	 *
	 * @param {Event} event
	 * @private
	 */
	ItemSet.prototype._onTouch = function (event) {
	  // store the touched item, used in _onDragStart
	  this.touchParams.item = this.itemFromTarget(event);
	  this.touchParams.dragLeftItem = event.target.dragLeftItem || false;
	  this.touchParams.dragRightItem = event.target.dragRightItem || false;
	  this.touchParams.itemProps = null;
	};

	/**
	 * Given an group id, returns the index it has.
	 *
	 * @param {number} groupId
	 * @returns {number} index / groupId
	 * @private
	 */
	ItemSet.prototype._getGroupIndex = function (groupId) {
	  for (var i = 0; i < this.groupIds.length; i++) {
	    if (groupId == this.groupIds[i]) return i;
	  }
	};

	/**
	 * Start dragging the selected events
	 * @param {Event} event
	 * @private
	 */
	ItemSet.prototype._onDragStart = function (event) {
	  if (this.touchParams.itemIsDragging) {
	    return;
	  }
	  var item = this.touchParams.item || null;
	  var me = this;
	  var props;

	  if (item && (item.selected || this.options.itemsAlwaysDraggable.item)) {

	    if (this.options.editable.overrideItems && !this.options.editable.updateTime && !this.options.editable.updateGroup) {
	      return;
	    }

	    // override options.editable
	    if (item.editable != null && !item.editable.updateTime && !item.editable.updateGroup && !this.options.editable.overrideItems) {
	      return;
	    }

	    var dragLeftItem = this.touchParams.dragLeftItem;
	    var dragRightItem = this.touchParams.dragRightItem;
	    this.touchParams.itemIsDragging = true;
	    this.touchParams.selectedItem = item;

	    if (dragLeftItem) {
	      props = {
	        item: dragLeftItem,
	        initialX: event.center.x,
	        dragLeft: true,
	        data: this._cloneItemData(item.data)
	      };

	      this.touchParams.itemProps = [props];
	    } else if (dragRightItem) {
	      props = {
	        item: dragRightItem,
	        initialX: event.center.x,
	        dragRight: true,
	        data: this._cloneItemData(item.data)
	      };

	      this.touchParams.itemProps = [props];
	    } else if (this.options.editable.add && (event.srcEvent.ctrlKey || event.srcEvent.metaKey)) {
	      // create a new range item when dragging with ctrl key down
	      this._onDragStartAddItem(event);
	    } else {
	      if (this.groupIds.length < 1) {
	        // Mitigates a race condition if _onDragStart() is
	        // called after markDirty() without redraw() being called between.
	        this.redraw();
	      }

	      var baseGroupIndex = this._getGroupIndex(item.data.group);

	      var itemsToDrag = this.options.itemsAlwaysDraggable.item && !item.selected ? [item.id] : this.getSelection();

	      this.touchParams.itemProps = itemsToDrag.map(function (id) {
	        var item = me.items[id];
	        var groupIndex = me._getGroupIndex(item.data.group);
	        return {
	          item: item,
	          initialX: event.center.x,
	          groupOffset: baseGroupIndex - groupIndex,
	          data: this._cloneItemData(item.data)
	        };
	      }.bind(this));
	    }

	    event.stopPropagation();
	  } else if (this.options.editable.add && (event.srcEvent.ctrlKey || event.srcEvent.metaKey)) {
	    // create a new range item when dragging with ctrl key down
	    this._onDragStartAddItem(event);
	  }
	};

	/**
	 * Start creating a new range item by dragging.
	 * @param {Event} event
	 * @private
	 */
	ItemSet.prototype._onDragStartAddItem = function (event) {
	  var xAbs;
	  var x;
	  var snap = this.options.snap || null;

	  if (this.options.rtl) {
	    xAbs = util.getAbsoluteRight(this.dom.frame);
	    x = xAbs - event.center.x + 10; // plus 10 to compensate for the drag starting as soon as you've moved 10px
	  } else {
	    xAbs = util.getAbsoluteLeft(this.dom.frame);
	    x = event.center.x - xAbs - 10; // minus 10 to compensate for the drag starting as soon as you've moved 10px
	  }

	  var time = this.body.util.toTime(x);
	  var scale = this.body.util.getScale();
	  var step = this.body.util.getStep();
	  var start = snap ? snap(time, scale, step) : time;
	  var end = start;

	  var itemData = {
	    type: 'range',
	    start: start,
	    end: end,
	    content: 'new item'
	  };

	  var id = util.randomUUID();
	  itemData[this.itemsData._fieldId] = id;

	  var group = this.groupFromTarget(event);
	  if (group) {
	    itemData.group = group.groupId;
	  }
	  var newItem = new RangeItem(itemData, this.conversion, this.options);
	  newItem.id = id; // TODO: not so nice setting id afterwards
	  newItem.data = this._cloneItemData(itemData);
	  this._addItem(newItem);
	  this.touchParams.selectedItem = newItem;

	  var props = {
	    item: newItem,
	    initialX: event.center.x,
	    data: newItem.data
	  };

	  if (this.options.rtl) {
	    props.dragLeft = true;
	  } else {
	    props.dragRight = true;
	  }
	  this.touchParams.itemProps = [props];

	  event.stopPropagation();
	};

	/**
	 * Drag selected items
	 * @param {Event} event
	 * @private
	 */
	ItemSet.prototype._onDrag = function (event) {
	  if (this.touchParams.itemProps) {
	    event.stopPropagation();

	    var me = this;
	    var snap = this.options.snap || null;
	    var xOffset;

	    if (this.options.rtl) {
	      xOffset = this.body.dom.root.offsetLeft + this.body.domProps.right.width;
	    } else {
	      xOffset = this.body.dom.root.offsetLeft + this.body.domProps.left.width;
	    }

	    var scale = this.body.util.getScale();
	    var step = this.body.util.getStep();

	    //only calculate the new group for the item that's actually dragged
	    var selectedItem = this.touchParams.selectedItem;
	    var updateGroupAllowed = (this.options.editable.overrideItems || selectedItem.editable == null) && this.options.editable.updateGroup || !this.options.editable.overrideItems && selectedItem.editable != null && selectedItem.editable.updateGroup;
	    var newGroupBase = null;
	    if (updateGroupAllowed && selectedItem) {
	      if (selectedItem.data.group != undefined) {
	        // drag from one group to another
	        var group = me.groupFromTarget(event);
	        if (group) {
	          //we know the offset for all items, so the new group for all items
	          //will be relative to this one.
	          newGroupBase = this._getGroupIndex(group.groupId);
	        }
	      }
	    }

	    // move
	    this.touchParams.itemProps.forEach(function (props) {
	      var current = me.body.util.toTime(event.center.x - xOffset);
	      var initial = me.body.util.toTime(props.initialX - xOffset);
	      var offset;
	      var initialStart;
	      var initialEnd;
	      var start;
	      var end;

	      if (this.options.rtl) {
	        offset = -(current - initial); // ms
	      } else {
	        offset = current - initial; // ms
	      }

	      var itemData = this._cloneItemData(props.item.data); // clone the data
	      if (props.item.editable != null && !props.item.editable.updateTime && !props.item.editable.updateGroup && !me.options.editable.overrideItems) {
	        return;
	      }

	      var updateTimeAllowed = (this.options.editable.overrideItems || selectedItem.editable == null) && this.options.editable.updateTime || !this.options.editable.overrideItems && selectedItem.editable != null && selectedItem.editable.updateTime;
	      if (updateTimeAllowed) {
	        if (props.dragLeft) {
	          // drag left side of a range item
	          if (this.options.rtl) {
	            if (itemData.end != undefined) {
	              initialEnd = util.convert(props.data.end, 'Date');
	              end = new Date(initialEnd.valueOf() + offset);
	              // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	              itemData.end = snap ? snap(end, scale, step) : end;
	            }
	          } else {
	            if (itemData.start != undefined) {
	              initialStart = util.convert(props.data.start, 'Date');
	              start = new Date(initialStart.valueOf() + offset);
	              // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	              itemData.start = snap ? snap(start, scale, step) : start;
	            }
	          }
	        } else if (props.dragRight) {
	          // drag right side of a range item
	          if (this.options.rtl) {
	            if (itemData.start != undefined) {
	              initialStart = util.convert(props.data.start, 'Date');
	              start = new Date(initialStart.valueOf() + offset);
	              // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	              itemData.start = snap ? snap(start, scale, step) : start;
	            }
	          } else {
	            if (itemData.end != undefined) {
	              initialEnd = util.convert(props.data.end, 'Date');
	              end = new Date(initialEnd.valueOf() + offset);
	              // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	              itemData.end = snap ? snap(end, scale, step) : end;
	            }
	          }
	        } else {
	          // drag both start and end
	          if (itemData.start != undefined) {

	            initialStart = util.convert(props.data.start, 'Date').valueOf();
	            start = new Date(initialStart + offset);

	            if (itemData.end != undefined) {
	              initialEnd = util.convert(props.data.end, 'Date');
	              var duration = initialEnd.valueOf() - initialStart.valueOf();

	              // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	              itemData.start = snap ? snap(start, scale, step) : start;
	              itemData.end = new Date(itemData.start.valueOf() + duration);
	            } else {
	              // TODO: pass a Moment instead of a Date to snap(). (Breaking change)
	              itemData.start = snap ? snap(start, scale, step) : start;
	            }
	          }
	        }
	      }

	      if (updateGroupAllowed && !props.dragLeft && !props.dragRight && newGroupBase != null) {
	        if (itemData.group != undefined) {
	          var newOffset = newGroupBase - props.groupOffset;

	          //make sure we stay in bounds
	          newOffset = Math.max(0, newOffset);
	          newOffset = Math.min(me.groupIds.length - 1, newOffset);
	          itemData.group = me.groupIds[newOffset];
	        }
	      }

	      // confirm moving the item
	      itemData = this._cloneItemData(itemData); // convert start and end to the correct type
	      me.options.onMoving(itemData, function (itemData) {
	        if (itemData) {
	          props.item.setData(this._cloneItemData(itemData, 'Date'));
	        }
	      }.bind(this));
	    }.bind(this));

	    this.body.emitter.emit('_change');
	  }
	};

	/**
	 * Move an item to another group
	 * @param {Item} item
	 * @param {string | number} groupId
	 * @private
	 */
	ItemSet.prototype._moveToGroup = function (item, groupId) {
	  var group = this.groups[groupId];
	  if (group && group.groupId != item.data.group) {
	    var oldGroup = item.parent;
	    oldGroup.remove(item);
	    oldGroup.order();

	    item.data.group = group.groupId;

	    group.add(item);
	    group.order();
	  }
	};

	/**
	 * End of dragging selected items
	 * @param {Event} event
	 * @private
	 */
	ItemSet.prototype._onDragEnd = function (event) {
	  this.touchParams.itemIsDragging = false;
	  if (this.touchParams.itemProps) {
	    event.stopPropagation();

	    var me = this;
	    var dataset = this.itemsData.getDataSet();
	    var itemProps = this.touchParams.itemProps;
	    this.touchParams.itemProps = null;

	    itemProps.forEach(function (props) {
	      var id = props.item.id;
	      var exists = me.itemsData.get(id, me.itemOptions) != null;

	      if (!exists) {
	        // add a new item
	        me.options.onAdd(props.item.data, function (itemData) {
	          me._removeItem(props.item); // remove temporary item
	          if (itemData) {
	            me.itemsData.getDataSet().add(itemData);
	          }

	          // force re-stacking of all items next redraw
	          me.body.emitter.emit('_change');
	        });
	      } else {
	        // update existing item
	        var itemData = this._cloneItemData(props.item.data); // convert start and end to the correct type
	        me.options.onMove(itemData, function (itemData) {
	          if (itemData) {
	            // apply changes
	            itemData[dataset._fieldId] = id; // ensure the item contains its id (can be undefined)
	            dataset.update(itemData);
	          } else {
	            // restore original values
	            props.item.setData(props.data);

	            me.body.emitter.emit('_change');
	          }
	        });
	      }
	    }.bind(this));
	  }
	};

	ItemSet.prototype._onGroupClick = function (event) {
	  var group = this.groupFromTarget(event);

	  if (!group || !group.nestedGroups) return;

	  var groupsData = this.groupsData.getDataSet();

	  var nestingGroup = groupsData.get(group.groupId);
	  if (nestingGroup.showNested == undefined) {
	    nestingGroup.showNested = true;
	  }
	  nestingGroup.showNested = !nestingGroup.showNested;

	  var nestedGroups = groupsData.get(group.nestedGroups).map(function (nestedGroup) {
	    nestedGroup.visible = nestingGroup.showNested;
	    return nestedGroup;
	  });

	  groupsData.update(nestedGroups.concat(nestingGroup));

	  if (nestingGroup.showNested) {
	    util.removeClassName(group.dom.label, 'collapsed');
	    util.addClassName(group.dom.label, 'expanded');
	  } else {
	    util.removeClassName(group.dom.label, 'expanded');
	    var collapsedDirClassName = this.options.rtl ? 'collapsed-rtl' : 'collapsed';
	    util.addClassName(group.dom.label, collapsedDirClassName);
	  }
	};

	ItemSet.prototype._onGroupDragStart = function (event) {
	  if (this.options.groupEditable.order) {
	    this.groupTouchParams.group = this.groupFromTarget(event);

	    if (this.groupTouchParams.group) {
	      event.stopPropagation();

	      this.groupTouchParams.originalOrder = this.groupsData.getIds({
	        order: this.options.groupOrder
	      });
	    }
	  }
	};

	ItemSet.prototype._onGroupDrag = function (event) {
	  if (this.options.groupEditable.order && this.groupTouchParams.group) {
	    event.stopPropagation();

	    var groupsData = this.groupsData;
	    if (this.groupsData instanceof DataView) {
	      groupsData = this.groupsData.getDataSet();
	    }
	    // drag from one group to another
	    var group = this.groupFromTarget(event);

	    // try to avoid toggling when groups differ in height
	    if (group && group.height != this.groupTouchParams.group.height) {
	      var movingUp = group.top < this.groupTouchParams.group.top;
	      var clientY = event.center ? event.center.y : event.clientY;
	      var targetGroupTop = util.getAbsoluteTop(group.dom.foreground);
	      var draggedGroupHeight = this.groupTouchParams.group.height;
	      if (movingUp) {
	        // skip swapping the groups when the dragged group is not below clientY afterwards
	        if (targetGroupTop + draggedGroupHeight < clientY) {
	          return;
	        }
	      } else {
	        var targetGroupHeight = group.height;
	        // skip swapping the groups when the dragged group is not below clientY afterwards
	        if (targetGroupTop + targetGroupHeight - draggedGroupHeight > clientY) {
	          return;
	        }
	      }
	    }

	    if (group && group != this.groupTouchParams.group) {
	      var targetGroup = groupsData.get(group.groupId);
	      var draggedGroup = groupsData.get(this.groupTouchParams.group.groupId);

	      // switch groups
	      if (draggedGroup && targetGroup) {
	        this.options.groupOrderSwap(draggedGroup, targetGroup, groupsData);
	        groupsData.update(draggedGroup);
	        groupsData.update(targetGroup);
	      }

	      // fetch current order of groups
	      var newOrder = groupsData.getIds({
	        order: this.options.groupOrder
	      });

	      // in case of changes since _onGroupDragStart
	      if (!util.equalArray(newOrder, this.groupTouchParams.originalOrder)) {
	        var origOrder = this.groupTouchParams.originalOrder;
	        var draggedId = this.groupTouchParams.group.groupId;
	        var numGroups = Math.min(origOrder.length, newOrder.length);
	        var curPos = 0;
	        var newOffset = 0;
	        var orgOffset = 0;
	        while (curPos < numGroups) {
	          // as long as the groups are where they should be step down along the groups order
	          while (curPos + newOffset < numGroups && curPos + orgOffset < numGroups && newOrder[curPos + newOffset] == origOrder[curPos + orgOffset]) {
	            curPos++;
	          }

	          // all ok
	          if (curPos + newOffset >= numGroups) {
	            break;
	          }

	          // not all ok
	          // if dragged group was move upwards everything below should have an offset
	          if (newOrder[curPos + newOffset] == draggedId) {
	            newOffset = 1;
	          }
	          // if dragged group was move downwards everything above should have an offset
	          else if (origOrder[curPos + orgOffset] == draggedId) {
	              orgOffset = 1;
	            }
	            // found a group (apart from dragged group) that has the wrong position -> switch with the 
	            // group at the position where other one should be, fix index arrays and continue
	            else {
	                var slippedPosition = newOrder.indexOf(origOrder[curPos + orgOffset]);
	                var switchGroup = groupsData.get(newOrder[curPos + newOffset]);
	                var shouldBeGroup = groupsData.get(origOrder[curPos + orgOffset]);
	                this.options.groupOrderSwap(switchGroup, shouldBeGroup, groupsData);
	                groupsData.update(switchGroup);
	                groupsData.update(shouldBeGroup);

	                var switchGroupId = newOrder[curPos + newOffset];
	                newOrder[curPos + newOffset] = origOrder[curPos + orgOffset];
	                newOrder[slippedPosition] = switchGroupId;

	                curPos++;
	              }
	        }
	      }
	    }
	  }
	};

	ItemSet.prototype._onGroupDragEnd = function (event) {
	  if (this.options.groupEditable.order && this.groupTouchParams.group) {
	    event.stopPropagation();

	    // update existing group
	    var me = this;
	    var id = me.groupTouchParams.group.groupId;
	    var dataset = me.groupsData.getDataSet();
	    var groupData = util.extend({}, dataset.get(id)); // clone the data
	    me.options.onMoveGroup(groupData, function (groupData) {
	      if (groupData) {
	        // apply changes
	        groupData[dataset._fieldId] = id; // ensure the group contains its id (can be undefined)
	        dataset.update(groupData);
	      } else {

	        // fetch current order of groups
	        var newOrder = dataset.getIds({
	          order: me.options.groupOrder
	        });

	        // restore original order
	        if (!util.equalArray(newOrder, me.groupTouchParams.originalOrder)) {
	          var origOrder = me.groupTouchParams.originalOrder;
	          var numGroups = Math.min(origOrder.length, newOrder.length);
	          var curPos = 0;
	          while (curPos < numGroups) {
	            // as long as the groups are where they should be step down along the groups order
	            while (curPos < numGroups && newOrder[curPos] == origOrder[curPos]) {
	              curPos++;
	            }

	            // all ok
	            if (curPos >= numGroups) {
	              break;
	            }

	            // found a group that has the wrong position -> switch with the
	            // group at the position where other one should be, fix index arrays and continue
	            var slippedPosition = newOrder.indexOf(origOrder[curPos]);
	            var switchGroup = dataset.get(newOrder[curPos]);
	            var shouldBeGroup = dataset.get(origOrder[curPos]);
	            me.options.groupOrderSwap(switchGroup, shouldBeGroup, dataset);
	            dataset.update(switchGroup);
	            dataset.update(shouldBeGroup);

	            var switchGroupId = newOrder[curPos];
	            newOrder[curPos] = origOrder[curPos];
	            newOrder[slippedPosition] = switchGroupId;

	            curPos++;
	          }
	        }
	      }
	    });

	    me.body.emitter.emit('groupDragged', { groupId: id });
	  }
	};

	/**
	 * Handle selecting/deselecting an item when tapping it
	 * @param {Event} event
	 * @private
	 */
	ItemSet.prototype._onSelectItem = function (event) {
	  if (!this.options.selectable) return;

	  var ctrlKey = event.srcEvent && (event.srcEvent.ctrlKey || event.srcEvent.metaKey);
	  var shiftKey = event.srcEvent && event.srcEvent.shiftKey;
	  if (ctrlKey || shiftKey) {
	    this._onMultiSelectItem(event);
	    return;
	  }

	  var oldSelection = this.getSelection();

	  var item = this.itemFromTarget(event);
	  var selection = item ? [item.id] : [];
	  this.setSelection(selection);

	  var newSelection = this.getSelection();

	  // emit a select event,
	  // except when old selection is empty and new selection is still empty
	  if (newSelection.length > 0 || oldSelection.length > 0) {
	    this.body.emitter.emit('select', {
	      items: newSelection,
	      event: event
	    });
	  }
	};

	/**
	 * Handle hovering an item
	 * @param {Event} event
	 * @private
	 */
	ItemSet.prototype._onMouseOver = function (event) {
	  var item = this.itemFromTarget(event);
	  if (!item) return;

	  // Item we just left
	  var related = this.itemFromRelatedTarget(event);
	  if (item === related) {
	    // We haven't changed item, just element in the item
	    return;
	  }

	  var title = item.getTitle();
	  if (this.options.showTooltips && title) {
	    if (this.popup == null) {
	      this.popup = new Popup(this.body.dom.root, this.options.tooltip.overflowMethod || 'flip');
	    }

	    this.popup.setText(title);
	    var container = this.body.dom.centerContainer;
	    this.popup.setPosition(event.clientX - util.getAbsoluteLeft(container) + container.offsetLeft, event.clientY - util.getAbsoluteTop(container) + container.offsetTop);
	    this.popup.show();
	  } else {
	    // Hovering over item without a title, hide popup
	    // Needed instead of _just_ in _onMouseOut due to #2572
	    if (this.popup != null) {
	      this.popup.hide();
	    }
	  }

	  this.body.emitter.emit('itemover', {
	    item: item.id,
	    event: event
	  });
	};
	ItemSet.prototype._onMouseOut = function (event) {
	  var item = this.itemFromTarget(event);
	  if (!item) return;

	  // Item we are going to
	  var related = this.itemFromRelatedTarget(event);
	  if (item === related) {
	    // We aren't changing item, just element in the item
	    return;
	  }

	  if (this.popup != null) {
	    this.popup.hide();
	  }

	  this.body.emitter.emit('itemout', {
	    item: item.id,
	    event: event
	  });
	};
	ItemSet.prototype._onMouseMove = function (event) {
	  var item = this.itemFromTarget(event);
	  if (!item) return;

	  if (this.options.showTooltips && this.options.tooltip.followMouse) {
	    if (this.popup) {
	      if (!this.popup.hidden) {
	        var container = this.body.dom.centerContainer;
	        this.popup.setPosition(event.clientX - util.getAbsoluteLeft(container) + container.offsetLeft, event.clientY - util.getAbsoluteTop(container) + container.offsetTop);
	        this.popup.show(); // Redraw
	      }
	    }
	  }
	};

	/**
	 * Handle mousewheel
	 * @param {Event}  event   The event
	 * @private
	 */
	ItemSet.prototype._onMouseWheel = function (event) {
	  if (this.touchParams.itemIsDragging) {
	    this._onDragEnd(event);
	  }
	};

	/**
	 * Handle updates of an item on double tap
	 * @param {vis.Item}  item   The item
	 * @private
	 */
	ItemSet.prototype._onUpdateItem = function (item) {
	  if (!this.options.selectable) return;
	  if (!this.options.editable.add) return;

	  var me = this;

	  if (item) {
	    // execute async handler to update the item (or cancel it)
	    var itemData = me.itemsData.get(item.id); // get a clone of the data from the dataset
	    this.options.onUpdate(itemData, function (itemData) {
	      if (itemData) {
	        me.itemsData.getDataSet().update(itemData);
	      }
	    });
	  }
	};

	/**
	 * Handle drop event of data on item
	 * Only called when `objectData.target === 'item'.
	 * @param {Event} event The event 
	 * @private
	 */
	ItemSet.prototype._onDropObjectOnItem = function (event) {
	  var item = this.itemFromTarget(event);
	  var objectData = JSON.parse(event.dataTransfer.getData("text"));
	  this.options.onDropObjectOnItem(objectData, item);
	};

	/**
	 * Handle creation of an item on double tap or drop of a drag event
	 * @param {Event} event   The event
	 * @private
	 */
	ItemSet.prototype._onAddItem = function (event) {
	  if (!this.options.selectable) return;
	  if (!this.options.editable.add) return;

	  var me = this;
	  var snap = this.options.snap || null;
	  var xAbs;
	  var x;
	  // add item
	  if (this.options.rtl) {
	    xAbs = util.getAbsoluteRight(this.dom.frame);
	    x = xAbs - event.center.x;
	  } else {
	    xAbs = util.getAbsoluteLeft(this.dom.frame);
	    x = event.center.x - xAbs;
	  }
	  // var xAbs = util.getAbsoluteLeft(this.dom.frame);
	  // var x = event.center.x - xAbs;
	  var start = this.body.util.toTime(x);
	  var scale = this.body.util.getScale();
	  var step = this.body.util.getStep();
	  var end;

	  var newItemData;
	  if (event.type == 'drop') {
	    newItemData = JSON.parse(event.dataTransfer.getData("text"));
	    newItemData.content = newItemData.content ? newItemData.content : 'new item';
	    newItemData.start = newItemData.start ? newItemData.start : snap ? snap(start, scale, step) : start;
	    newItemData.type = newItemData.type || 'box';
	    newItemData[this.itemsData._fieldId] = newItemData.id || util.randomUUID();

	    if (newItemData.type == 'range' && !newItemData.end) {
	      end = this.body.util.toTime(x + this.props.width / 5);
	      newItemData.end = snap ? snap(end, scale, step) : end;
	    }
	  } else {
	    newItemData = {
	      start: snap ? snap(start, scale, step) : start,
	      content: 'new item'
	    };
	    newItemData[this.itemsData._fieldId] = util.randomUUID();

	    // when default type is a range, add a default end date to the new item
	    if (this.options.type === 'range') {
	      end = this.body.util.toTime(x + this.props.width / 5);
	      newItemData.end = snap ? snap(end, scale, step) : end;
	    }
	  }

	  var group = this.groupFromTarget(event);
	  if (group) {
	    newItemData.group = group.groupId;
	  }

	  // execute async handler to customize (or cancel) adding an item
	  newItemData = this._cloneItemData(newItemData); // convert start and end to the correct type
	  this.options.onAdd(newItemData, function (item) {
	    if (item) {
	      me.itemsData.getDataSet().add(item);
	      if (event.type == 'drop') {
	        me.setSelection([item.id]);
	      }
	      // TODO: need to trigger a redraw?
	    }
	  });
	};

	/**
	 * Handle selecting/deselecting multiple items when holding an item
	 * @param {Event} event
	 * @private
	 */
	ItemSet.prototype._onMultiSelectItem = function (event) {
	  if (!this.options.selectable) return;

	  var item = this.itemFromTarget(event);

	  if (item) {
	    // multi select items (if allowed)

	    var selection = this.options.multiselect ? this.getSelection() // take current selection
	    : []; // deselect current selection

	    var shiftKey = event.srcEvent && event.srcEvent.shiftKey || false;

	    if (shiftKey && this.options.multiselect) {
	      // select all items between the old selection and the tapped item
	      var itemGroup = this.itemsData.get(item.id).group;

	      // when filtering get the group of the last selected item
	      var lastSelectedGroup = undefined;
	      if (this.options.multiselectPerGroup) {
	        if (selection.length > 0) {
	          lastSelectedGroup = this.itemsData.get(selection[0]).group;
	        }
	      }

	      // determine the selection range
	      if (!this.options.multiselectPerGroup || lastSelectedGroup == undefined || lastSelectedGroup == itemGroup) {
	        selection.push(item.id);
	      }
	      var range = ItemSet._getItemRange(this.itemsData.get(selection, this.itemOptions));

	      if (!this.options.multiselectPerGroup || lastSelectedGroup == itemGroup) {
	        // select all items within the selection range
	        selection = [];
	        for (var id in this.items) {
	          if (this.items.hasOwnProperty(id)) {
	            var _item = this.items[id];
	            var start = _item.data.start;
	            var end = _item.data.end !== undefined ? _item.data.end : start;

	            if (start >= range.min && end <= range.max && (!this.options.multiselectPerGroup || lastSelectedGroup == this.itemsData.get(_item.id).group) && !(_item instanceof BackgroundItem)) {
	              selection.push(_item.id); // do not use id but item.id, id itself is stringified
	            }
	          }
	        }
	      }
	    } else {
	      // add/remove this item from the current selection
	      var index = selection.indexOf(item.id);
	      if (index == -1) {
	        // item is not yet selected -> select it
	        selection.push(item.id);
	      } else {
	        // item is already selected -> deselect it
	        selection.splice(index, 1);
	      }
	    }

	    this.setSelection(selection);

	    this.body.emitter.emit('select', {
	      items: this.getSelection(),
	      event: event
	    });
	  }
	};

	/**
	 * Calculate the time range of a list of items
	 * @param {Array.<Object>} itemsData
	 * @return {{min: Date, max: Date}} Returns the range of the provided items
	 * @private
	 */
	ItemSet._getItemRange = function (itemsData) {
	  var max = null;
	  var min = null;

	  itemsData.forEach(function (data) {
	    if (min == null || data.start < min) {
	      min = data.start;
	    }

	    if (data.end != undefined) {
	      if (max == null || data.end > max) {
	        max = data.end;
	      }
	    } else {
	      if (max == null || data.start > max) {
	        max = data.start;
	      }
	    }
	  });

	  return {
	    min: min,
	    max: max
	  };
	};

	/**
	 * Find an item from an element:
	 * searches for the attribute 'timeline-item' in the element's tree
	 * @param {HTMLElement} element
	 * @return {Item | null} item
	 */
	ItemSet.prototype.itemFromElement = function (element) {
	  var cur = element;
	  while (cur) {
	    if (cur.hasOwnProperty('timeline-item')) {
	      return cur['timeline-item'];
	    }
	    cur = cur.parentNode;
	  }

	  return null;
	};

	/**
	 * Find an item from an event target:
	 * searches for the attribute 'timeline-item' in the event target's element tree
	 * @param {Event} event
	 * @return {Item | null} item
	 */
	ItemSet.prototype.itemFromTarget = function (event) {
	  return this.itemFromElement(event.target);
	};

	/**
	 * Find an item from an event's related target:
	 * searches for the attribute 'timeline-item' in the related target's element tree
	 * @param {Event} event
	 * @return {Item | null} item
	 */
	ItemSet.prototype.itemFromRelatedTarget = function (event) {
	  return this.itemFromElement(event.relatedTarget);
	};

	/**
	 * Find the Group from an event target:
	 * searches for the attribute 'timeline-group' in the event target's element tree
	 * @param {Event} event
	 * @return {Group | null} group
	 */
	ItemSet.prototype.groupFromTarget = function (event) {
	  var clientY = event.center ? event.center.y : event.clientY;
	  var groupIds = this.groupIds;

	  if (groupIds.length <= 0 && this.groupsData) {
	    groupIds = this.groupsData.getIds({
	      order: this.options.groupOrder
	    });
	  }

	  for (var i = 0; i < groupIds.length; i++) {
	    var groupId = groupIds[i];
	    var group = this.groups[groupId];
	    var foreground = group.dom.foreground;
	    var top = util.getAbsoluteTop(foreground);
	    if (clientY > top && clientY < top + foreground.offsetHeight) {
	      return group;
	    }

	    if (this.options.orientation.item === 'top') {
	      if (i === this.groupIds.length - 1 && clientY > top) {
	        return group;
	      }
	    } else {
	      if (i === 0 && clientY < top + foreground.offset) {
	        return group;
	      }
	    }
	  }

	  return null;
	};

	/**
	 * Find the ItemSet from an event target:
	 * searches for the attribute 'timeline-itemset' in the event target's element tree
	 * @param {Event} event
	 * @return {ItemSet | null} item
	 */
	ItemSet.itemSetFromTarget = function (event) {
	  var target = event.target;
	  while (target) {
	    if (target.hasOwnProperty('timeline-itemset')) {
	      return target['timeline-itemset'];
	    }
	    target = target.parentNode;
	  }

	  return null;
	};

	/**
	 * Clone the data of an item, and "normalize" it: convert the start and end date
	 * to the type (Date, Moment, ...) configured in the DataSet. If not configured,
	 * start and end are converted to Date.
	 * @param {Object} itemData, typically `item.data`
	 * @param {string} [type]  Optional Date type. If not provided, the type from the DataSet is taken
	 * @return {Object} The cloned object
	 * @private
	 */
	ItemSet.prototype._cloneItemData = function (itemData, type) {
	  var clone = util.extend({}, itemData);

	  if (!type) {
	    // convert start and end date to the type (Date, Moment, ...) configured in the DataSet
	    type = this.itemsData.getDataSet()._options.type;
	  }

	  if (clone.start != undefined) {
	    clone.start = util.convert(clone.start, type && type.start || 'Date');
	  }
	  if (clone.end != undefined) {
	    clone.end = util.convert(clone.end, type && type.end || 'Date');
	  }

	  return clone;
	};

	module.exports = ItemSet;

	/***/ }),
	/* 100 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	// Utility functions for ordering and stacking of items
	var EPSILON = 0.001; // used when checking collisions, to prevent round-off errors

	/**
	 * Order items by their start data
	 * @param {Item[]} items
	 */
	exports.orderByStart = function (items) {
	  items.sort(function (a, b) {
	    return a.data.start - b.data.start;
	  });
	};

	/**
	 * Order items by their end date. If they have no end date, their start date
	 * is used.
	 * @param {Item[]} items
	 */
	exports.orderByEnd = function (items) {
	  items.sort(function (a, b) {
	    var aTime = 'end' in a.data ? a.data.end : a.data.start,
	        bTime = 'end' in b.data ? b.data.end : b.data.start;

	    return aTime - bTime;
	  });
	};

	/**
	 * Adjust vertical positions of the items such that they don't overlap each
	 * other.
	 * @param {Item[]} items
	 *            All visible items
	 * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	 *            Margins between items and between items and the axis.
	 * @param {boolean} [force=false]
	 *            If true, all items will be repositioned. If false (default), only
	 *            items having a top===null will be re-stacked
	 */
	exports.stack = function (items, margin, force) {
	  if (force) {
	    // reset top position of all items
	    for (var i = 0; i < items.length; i++) {
	      items[i].top = null;
	    }
	  }

	  // calculate new, non-overlapping positions
	  for (var i = 0; i < items.length; i++) {
	    // eslint-disable-line no-redeclare
	    var item = items[i];
	    if (item.stack && item.top === null) {
	      // initialize top position
	      item.top = margin.axis;

	      do {
	        // TODO: optimize checking for overlap. when there is a gap without items,
	        //       you only need to check for items from the next item on, not from zero
	        var collidingItem = null;
	        for (var j = 0, jj = items.length; j < jj; j++) {
	          var other = items[j];
	          if (other.top !== null && other !== item && other.stack && exports.collision(item, other, margin.item, other.options.rtl)) {
	            collidingItem = other;
	            break;
	          }
	        }

	        if (collidingItem != null) {
	          // There is a collision. Reposition the items above the colliding element
	          item.top = collidingItem.top + collidingItem.height + margin.item.vertical;
	        }
	      } while (collidingItem);
	    }
	  }
	};

	/**
	 * Adjust vertical positions of the items within a single subgroup such that they 
	 * don't overlap each other.
	 * @param {Item[]} items
	 *            All items withina subgroup
	 * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	 *            Margins between items and between items and the axis.
	 * @param {subgroup} subgroup
	 *            The subgroup that is being stacked 
	 */
	exports.substack = function (items, margin, subgroup) {
	  for (var i = 0; i < items.length; i++) {
	    items[i].top = null;
	  }

	  // Set the initial height
	  var subgroupHeight = subgroup.height;

	  // calculate new, non-overlapping positions
	  for (i = 0; i < items.length; i++) {
	    var item = items[i];

	    if (item.stack && item.top === null) {
	      // initialize top position
	      item.top = item.baseTop; //margin.axis + item.baseTop;

	      do {
	        // TODO: optimize checking for overlap. when there is a gap without items,
	        //       you only need to check for items from the next item on, not from zero
	        var collidingItem = null;
	        for (var j = 0, jj = items.length; j < jj; j++) {
	          var other = items[j];
	          if (other.top !== null && other !== item /*&& other.stack*/ && exports.collision(item, other, margin.item, other.options.rtl)) {
	            collidingItem = other;
	            break;
	          }
	        }

	        if (collidingItem != null) {
	          // There is a collision. Reposition the items above the colliding element
	          item.top = collidingItem.top + collidingItem.height + margin.item.vertical; // + item.baseTop;
	        }

	        if (item.top + item.height > subgroupHeight) {
	          subgroupHeight = item.top + item.height;
	        }
	      } while (collidingItem);
	    }
	  }

	  // Set the new height
	  subgroup.height = subgroupHeight - subgroup.top + 0.5 * margin.item.vertical;
	};

	/**
	 * Adjust vertical positions of the items without stacking them
	 * @param {Item[]} items
	 *            All visible items
	 * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	 *            Margins between items and between items and the axis.
	 * @param {subgroups[]} subgroups
	 *            All subgroups
	 * @param {boolean} stackSubgroups
	 */
	exports.nostack = function (items, margin, subgroups, stackSubgroups) {
	  for (var i = 0; i < items.length; i++) {
	    if (items[i].data.subgroup == undefined) {
	      items[i].top = margin.item.vertical;
	    } else if (items[i].data.subgroup !== undefined && stackSubgroups) {
	      var newTop = 0;
	      for (var subgroup in subgroups) {
	        if (subgroups.hasOwnProperty(subgroup)) {
	          if (subgroups[subgroup].visible == true && subgroups[subgroup].index < subgroups[items[i].data.subgroup].index) {
	            newTop += subgroups[subgroup].height;
	            subgroups[items[i].data.subgroup].top = newTop;
	          }
	        }
	      }
	      items[i].top = newTop + 0.5 * margin.item.vertical;
	    }
	  }
	  if (!stackSubgroups) {
	    exports.stackSubgroups(items, margin, subgroups);
	  }
	};

	/**
	 * Adjust vertical positions of the subgroups such that they don't overlap each
	 * other.
	 * @param {Array.<vis.Item>} items
	 * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin Margins between items and between items and the axis.
	 * @param {subgroups[]} subgroups
	 *            All subgroups
	 */
	exports.stackSubgroups = function (items, margin, subgroups) {
	  for (var subgroup in subgroups) {
	    if (subgroups.hasOwnProperty(subgroup)) {

	      subgroups[subgroup].top = 0;
	      do {
	        // TODO: optimize checking for overlap. when there is a gap without items,
	        //       you only need to check for items from the next item on, not from zero
	        var collidingItem = null;
	        for (var otherSubgroup in subgroups) {
	          if (subgroups[otherSubgroup].top !== null && otherSubgroup !== subgroup && subgroups[subgroup].index > subgroups[otherSubgroup].index && exports.collisionByTimes(subgroups[subgroup], subgroups[otherSubgroup])) {
	            collidingItem = subgroups[otherSubgroup];
	            break;
	          }
	        }

	        if (collidingItem != null) {
	          // There is a collision. Reposition the subgroups above the colliding element
	          subgroups[subgroup].top = collidingItem.top + collidingItem.height;
	        }
	      } while (collidingItem);
	    }
	  }
	  for (var i = 0; i < items.length; i++) {
	    if (items[i].data.subgroup !== undefined) {
	      items[i].top = subgroups[items[i].data.subgroup].top + 0.5 * margin.item.vertical;
	    }
	  }
	};

	/**
	 * Adjust vertical positions of the subgroups such that they don't overlap each
	 * other, then stacks the contents of each subgroup individually.
	 * @param {Item[]} subgroupItems
	 *            All the items in a subgroup
	 * @param {{item: {horizontal: number, vertical: number}, axis: number}} margin
	 *            Margins between items and between items and the axis.
	 * @param {subgroups[]} subgroups
	 *            All subgroups 
	 */
	exports.stackSubgroupsWithInnerStack = function (subgroupItems, margin, subgroups) {
	  var doSubStack = false;

	  // Run subgroups in their order (if any)
	  var subgroupOrder = [];

	  for (var subgroup in subgroups) {
	    if (subgroups[subgroup].hasOwnProperty("index")) {
	      subgroupOrder[subgroups[subgroup].index] = subgroup;
	    } else {
	      subgroupOrder.push(subgroup);
	    }
	  }

	  for (var j = 0; j < subgroupOrder.length; j++) {
	    subgroup = subgroupOrder[j];
	    if (subgroups.hasOwnProperty(subgroup)) {

	      doSubStack = doSubStack || subgroups[subgroup].stack;
	      subgroups[subgroup].top = 0;

	      for (var otherSubgroup in subgroups) {
	        if (subgroups[otherSubgroup].visible && subgroups[subgroup].index > subgroups[otherSubgroup].index) {
	          subgroups[subgroup].top += subgroups[otherSubgroup].height;
	        }
	      }

	      var items = subgroupItems[subgroup];
	      for (var i = 0; i < items.length; i++) {
	        if (items[i].data.subgroup !== undefined) {
	          items[i].top = subgroups[items[i].data.subgroup].top + 0.5 * margin.item.vertical;

	          if (subgroups[subgroup].stack) {
	            items[i].baseTop = items[i].top;
	          }
	        }
	      }

	      if (doSubStack && subgroups[subgroup].stack) {
	        exports.substack(subgroupItems[subgroup], margin, subgroups[subgroup]);
	      }
	    }
	  }
	};

	/**
	 * Test if the two provided items collide
	 * The items must have parameters left, width, top, and height.
	 * @param {Item} a          The first item
	 * @param {Item} b          The second item
	 * @param {{horizontal: number, vertical: number}} margin
	 *                          An object containing a horizontal and vertical
	 *                          minimum required margin.
	 * @param {boolean} rtl
	 * @return {boolean}        true if a and b collide, else false
	 */
	exports.collision = function (a, b, margin, rtl) {
	  if (rtl) {
	    return a.right - margin.horizontal + EPSILON < b.right + b.width && a.right + a.width + margin.horizontal - EPSILON > b.right && a.top - margin.vertical + EPSILON < b.top + b.height && a.top + a.height + margin.vertical - EPSILON > b.top;
	  } else {
	    return a.left - margin.horizontal + EPSILON < b.left + b.width && a.left + a.width + margin.horizontal - EPSILON > b.left && a.top - margin.vertical + EPSILON < b.top + b.height && a.top + a.height + margin.vertical - EPSILON > b.top;
	  }
	};

	/**
	 * Test if the two provided objects collide
	 * The objects must have parameters start, end, top, and height.
	 * @param {Object} a          The first Object
	 * @param {Object} b          The second Object
	 * @return {boolean}        true if a and b collide, else false
	 */
	exports.collisionByTimes = function (a, b) {
	  return a.start <= b.start && a.end >= b.start && a.top < b.top + b.height && a.top + a.height > b.top || b.start <= a.start && b.end >= a.start && b.top < a.top + a.height && b.top + b.height > a.top;
	};

	/***/ }),
	/* 101 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var Item = __webpack_require__(38);

	/**
	 * @constructor BoxItem
	 * @extends Item
	 * @param {Object} data             Object containing parameters start
	 *                                  content, className.
	 * @param {{toScreen: function, toTime: function}} conversion
	 *                                  Conversion functions from time to screen and vice versa
	 * @param {Object} [options]        Configuration options
	 *                                  // TODO: describe available options
	 */
	function BoxItem(data, conversion, options) {
	  this.props = {
	    dot: {
	      width: 0,
	      height: 0
	    },
	    line: {
	      width: 0,
	      height: 0
	    }
	  };
	  this.options = options;
	  // validate data
	  if (data) {
	    if (data.start == undefined) {
	      throw new Error('Property "start" missing in item ' + data);
	    }
	  }

	  Item.call(this, data, conversion, options);
	}

	BoxItem.prototype = new Item(null, null, null);

	/**
	 * Check whether this item is visible inside given range
	 * @param {{start: number, end: number}} range with a timestamp for start and end
	 * @returns {boolean} True if visible
	 */
	BoxItem.prototype.isVisible = function (range) {
	  // determine visibility
	  var isVisible;
	  var align = this.options.align;
	  var widthInMs = this.width * range.getMillisecondsPerPixel();

	  if (align == 'right') {
	    isVisible = this.data.start.getTime() > range.start && this.data.start.getTime() - widthInMs < range.end;
	  } else if (align == 'left') {
	    isVisible = this.data.start.getTime() + widthInMs > range.start && this.data.start.getTime() < range.end;
	  } else {
	    // default or 'center'
	    isVisible = this.data.start.getTime() + widthInMs / 2 > range.start && this.data.start.getTime() - widthInMs / 2 < range.end;
	  }
	  return isVisible;
	};

	BoxItem.prototype._createDomElement = function () {
	  if (!this.dom) {
	    // create DOM
	    this.dom = {};

	    // create main box
	    this.dom.box = document.createElement('DIV');

	    // contents box (inside the background box). used for making margins
	    this.dom.content = document.createElement('DIV');
	    this.dom.content.className = 'vis-item-content';
	    this.dom.box.appendChild(this.dom.content);

	    // line to axis
	    this.dom.line = document.createElement('DIV');
	    this.dom.line.className = 'vis-line';

	    // dot on axis
	    this.dom.dot = document.createElement('DIV');
	    this.dom.dot.className = 'vis-dot';

	    // attach this item as attribute
	    this.dom.box['timeline-item'] = this;

	    this.dirty = true;
	  }
	};

	BoxItem.prototype._appendDomElement = function () {
	  if (!this.parent) {
	    throw new Error('Cannot redraw item: no parent attached');
	  }
	  if (!this.dom.box.parentNode) {
	    var foreground = this.parent.dom.foreground;
	    if (!foreground) throw new Error('Cannot redraw item: parent has no foreground container element');
	    foreground.appendChild(this.dom.box);
	  }
	  if (!this.dom.line.parentNode) {
	    var background = this.parent.dom.background;
	    if (!background) throw new Error('Cannot redraw item: parent has no background container element');
	    background.appendChild(this.dom.line);
	  }
	  if (!this.dom.dot.parentNode) {
	    var axis = this.parent.dom.axis;
	    if (!background) throw new Error('Cannot redraw item: parent has no axis container element');
	    axis.appendChild(this.dom.dot);
	  }
	  this.displayed = true;
	};

	BoxItem.prototype._updateDirtyDomComponents = function () {
	  // An item is marked dirty when:
	  // - the item is not yet rendered
	  // - the item's data is changed
	  // - the item is selected/deselected
	  if (this.dirty) {
	    this._updateContents(this.dom.content);
	    this._updateDataAttributes(this.dom.box);
	    this._updateStyle(this.dom.box);

	    var editable = this.editable.updateTime || this.editable.updateGroup;

	    // update class
	    var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '') + (editable ? ' vis-editable' : ' vis-readonly');
	    this.dom.box.className = 'vis-item vis-box' + className;
	    this.dom.line.className = 'vis-item vis-line' + className;
	    this.dom.dot.className = 'vis-item vis-dot' + className;
	  }
	};

	BoxItem.prototype._getDomComponentsSizes = function () {
	  return {
	    previous: {
	      right: this.dom.box.style.right,
	      left: this.dom.box.style.left
	    },
	    dot: {
	      height: this.dom.dot.offsetHeight,
	      width: this.dom.dot.offsetWidth
	    },
	    line: {
	      width: this.dom.line.offsetWidth
	    },
	    box: {
	      width: this.dom.box.offsetWidth,
	      height: this.dom.box.offsetHeight
	    }
	  };
	};

	BoxItem.prototype._updateDomComponentsSizes = function (sizes) {
	  if (this.options.rtl) {
	    this.dom.box.style.right = "0px";
	  } else {
	    this.dom.box.style.left = "0px";
	  }

	  // recalculate size
	  this.props.dot.height = sizes.dot.height;
	  this.props.dot.width = sizes.dot.width;
	  this.props.line.width = sizes.line.width;
	  this.width = sizes.box.width;
	  this.height = sizes.box.height;

	  // restore previous position
	  if (this.options.rtl) {
	    this.dom.box.style.right = sizes.previous.right;
	  } else {
	    this.dom.box.style.left = sizes.previous.left;
	  }

	  this.dirty = false;
	};

	BoxItem.prototype._repaintDomAdditionals = function () {
	  this._repaintOnItemUpdateTimeTooltip(this.dom.box);
	  this._repaintDragCenter();
	  this._repaintDeleteButton(this.dom.box);
	};

	/**
	 * Repaint the item
	 * @param {boolean} [returnQueue=false]  return the queue
	 * @return {boolean} the redraw queue if returnQueue=true
	 */
	BoxItem.prototype.redraw = function (returnQueue) {
	  var sizes;
	  var queue = [
	  // create item DOM
	  this._createDomElement.bind(this),

	  // append DOM to parent DOM
	  this._appendDomElement.bind(this),

	  // update dirty DOM
	  this._updateDirtyDomComponents.bind(this), function () {
	    if (this.dirty) {
	      sizes = this._getDomComponentsSizes();
	    }
	  }.bind(this), function () {
	    if (this.dirty) {
	      this._updateDomComponentsSizes.bind(this)(sizes);
	    }
	  }.bind(this),

	  // repaint DOM additionals
	  this._repaintDomAdditionals.bind(this)];

	  if (returnQueue) {
	    return queue;
	  } else {
	    var result;
	    queue.forEach(function (fn) {
	      result = fn();
	    });
	    return result;
	  }
	};

	/**
	 * Show the item in the DOM (when not already displayed). The items DOM will
	 * be created when needed.
	 */
	BoxItem.prototype.show = function () {
	  if (!this.displayed) {
	    this.redraw();
	  }
	};

	/**
	 * Hide the item from the DOM (when visible)
	 */
	BoxItem.prototype.hide = function () {
	  if (this.displayed) {
	    var dom = this.dom;

	    if (dom.box.parentNode) dom.box.parentNode.removeChild(dom.box);
	    if (dom.line.parentNode) dom.line.parentNode.removeChild(dom.line);
	    if (dom.dot.parentNode) dom.dot.parentNode.removeChild(dom.dot);

	    this.displayed = false;
	  }
	};

	/**
	 * Reposition the item horizontally
	 * @Override
	 */
	BoxItem.prototype.repositionX = function () {
	  var start = this.conversion.toScreen(this.data.start);
	  var align = this.options.align;

	  // calculate left position of the box
	  if (align == 'right') {
	    if (this.options.rtl) {
	      this.right = start - this.width;

	      // reposition box, line, and dot
	      this.dom.box.style.right = this.right + 'px';
	      this.dom.line.style.right = start - this.props.line.width + 'px';
	      this.dom.dot.style.right = start - this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
	    } else {
	      this.left = start - this.width;

	      // reposition box, line, and dot
	      this.dom.box.style.left = this.left + 'px';
	      this.dom.line.style.left = start - this.props.line.width + 'px';
	      this.dom.dot.style.left = start - this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
	    }
	  } else if (align == 'left') {
	    if (this.options.rtl) {
	      this.right = start;

	      // reposition box, line, and dot
	      this.dom.box.style.right = this.right + 'px';
	      this.dom.line.style.right = start + 'px';
	      this.dom.dot.style.right = start + this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
	    } else {
	      this.left = start;

	      // reposition box, line, and dot
	      this.dom.box.style.left = this.left + 'px';
	      this.dom.line.style.left = start + 'px';
	      this.dom.dot.style.left = start + this.props.line.width / 2 - this.props.dot.width / 2 + 'px';
	    }
	  } else {
	    // default or 'center'
	    if (this.options.rtl) {
	      this.right = start - this.width / 2;

	      // reposition box, line, and dot
	      this.dom.box.style.right = this.right + 'px';
	      this.dom.line.style.right = start - this.props.line.width + 'px';
	      this.dom.dot.style.right = start - this.props.dot.width / 2 + 'px';
	    } else {
	      this.left = start - this.width / 2;

	      // reposition box, line, and dot
	      this.dom.box.style.left = this.left + 'px';
	      this.dom.line.style.left = start - this.props.line.width / 2 + 'px';
	      this.dom.dot.style.left = start - this.props.dot.width / 2 + 'px';
	    }
	  }
	};

	/**
	 * Reposition the item vertically
	 * @Override
	 */
	BoxItem.prototype.repositionY = function () {
	  var orientation = this.options.orientation.item;
	  var box = this.dom.box;
	  var line = this.dom.line;
	  var dot = this.dom.dot;

	  if (orientation == 'top') {
	    box.style.top = (this.top || 0) + 'px';

	    line.style.top = '0';
	    line.style.height = this.parent.top + this.top + 1 + 'px';
	    line.style.bottom = '';
	  } else {
	    // orientation 'bottom'
	    var itemSetHeight = this.parent.itemSet.props.height; // TODO: this is nasty
	    var lineHeight = itemSetHeight - this.parent.top - this.parent.height + this.top;

	    box.style.top = (this.parent.height - this.top - this.height || 0) + 'px';
	    line.style.top = itemSetHeight - lineHeight + 'px';
	    line.style.bottom = '0';
	  }

	  dot.style.top = -this.props.dot.height / 2 + 'px';
	};

	/**
	 * Return the width of the item left from its start date
	 * @return {number}
	 */
	BoxItem.prototype.getWidthLeft = function () {
	  return this.width / 2;
	};

	/**
	 * Return the width of the item right from its start date
	 * @return {number}
	 */
	BoxItem.prototype.getWidthRight = function () {
	  return this.width / 2;
	};

	module.exports = BoxItem;

	/***/ }),
	/* 102 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var Item = __webpack_require__(38);

	/**
	 * @constructor PointItem
	 * @extends Item
	 * @param {Object} data             Object containing parameters start
	 *                                  content, className.
	 * @param {{toScreen: function, toTime: function}} conversion
	 *                                  Conversion functions from time to screen and vice versa
	 * @param {Object} [options]        Configuration options
	 *                                  // TODO: describe available options
	 */
	function PointItem(data, conversion, options) {
	  this.props = {
	    dot: {
	      top: 0,
	      width: 0,
	      height: 0
	    },
	    content: {
	      height: 0,
	      marginLeft: 0,
	      marginRight: 0
	    }
	  };
	  this.options = options;
	  // validate data
	  if (data) {
	    if (data.start == undefined) {
	      throw new Error('Property "start" missing in item ' + data);
	    }
	  }

	  Item.call(this, data, conversion, options);
	}

	PointItem.prototype = new Item(null, null, null);

	/**
	 * Check whether this item is visible inside given range
	 * @param {{start: number, end: number}} range with a timestamp for start and end
	 * @returns {boolean} True if visible
	 */
	PointItem.prototype.isVisible = function (range) {
	  // determine visibility
	  var widthInMs = this.width * range.getMillisecondsPerPixel();

	  return this.data.start.getTime() + widthInMs > range.start && this.data.start < range.end;
	};

	PointItem.prototype._createDomElement = function () {
	  if (!this.dom) {
	    // create DOM
	    this.dom = {};

	    // background box
	    this.dom.point = document.createElement('div');
	    // className is updated in redraw()

	    // contents box, right from the dot
	    this.dom.content = document.createElement('div');
	    this.dom.content.className = 'vis-item-content';
	    this.dom.point.appendChild(this.dom.content);

	    // dot at start
	    this.dom.dot = document.createElement('div');
	    this.dom.point.appendChild(this.dom.dot);

	    // attach this item as attribute
	    this.dom.point['timeline-item'] = this;

	    this.dirty = true;
	  }
	};

	PointItem.prototype._appendDomElement = function () {
	  if (!this.parent) {
	    throw new Error('Cannot redraw item: no parent attached');
	  }
	  if (!this.dom.point.parentNode) {
	    var foreground = this.parent.dom.foreground;
	    if (!foreground) {
	      throw new Error('Cannot redraw item: parent has no foreground container element');
	    }
	    foreground.appendChild(this.dom.point);
	  }
	  this.displayed = true;
	};

	PointItem.prototype._updateDirtyDomComponents = function () {
	  // An item is marked dirty when:
	  // - the item is not yet rendered
	  // - the item's data is changed
	  // - the item is selected/deselected
	  if (this.dirty) {
	    this._updateContents(this.dom.content);
	    this._updateDataAttributes(this.dom.point);
	    this._updateStyle(this.dom.point);

	    var editable = this.editable.updateTime || this.editable.updateGroup;
	    // update class
	    var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '') + (editable ? ' vis-editable' : ' vis-readonly');
	    this.dom.point.className = 'vis-item vis-point' + className;
	    this.dom.dot.className = 'vis-item vis-dot' + className;
	  }
	};

	PointItem.prototype._getDomComponentsSizes = function () {
	  return {
	    dot: {
	      width: this.dom.dot.offsetWidth,
	      height: this.dom.dot.offsetHeight
	    },
	    content: {
	      width: this.dom.content.offsetWidth,
	      height: this.dom.content.offsetHeight
	    },
	    point: {
	      width: this.dom.point.offsetWidth,
	      height: this.dom.point.offsetHeight
	    }
	  };
	};

	PointItem.prototype._updateDomComponentsSizes = function (sizes) {
	  // recalculate size of dot and contents
	  this.props.dot.width = sizes.dot.width;
	  this.props.dot.height = sizes.dot.height;
	  this.props.content.height = sizes.content.height;

	  // resize contents
	  if (this.options.rtl) {
	    this.dom.content.style.marginRight = 2 * this.props.dot.width + 'px';
	  } else {
	    this.dom.content.style.marginLeft = 2 * this.props.dot.width + 'px';
	  }
	  //this.dom.content.style.marginRight = ... + 'px'; // TODO: margin right

	  // recalculate size
	  this.width = sizes.point.width;
	  this.height = sizes.point.height;

	  // reposition the dot
	  this.dom.dot.style.top = (this.height - this.props.dot.height) / 2 + 'px';
	  if (this.options.rtl) {
	    this.dom.dot.style.right = this.props.dot.width / 2 + 'px';
	  } else {
	    this.dom.dot.style.left = this.props.dot.width / 2 + 'px';
	  }

	  this.dirty = false;
	};

	PointItem.prototype._repaintDomAdditionals = function () {
	  this._repaintOnItemUpdateTimeTooltip(this.dom.point);
	  this._repaintDragCenter();
	  this._repaintDeleteButton(this.dom.point);
	};

	/**
	 * Repaint the item
	 * @param {boolean} [returnQueue=false]  return the queue
	 * @return {boolean} the redraw queue if returnQueue=true
	 */
	PointItem.prototype.redraw = function (returnQueue) {
	  var sizes;
	  var queue = [
	  // create item DOM
	  this._createDomElement.bind(this),

	  // append DOM to parent DOM
	  this._appendDomElement.bind(this),

	  // update dirty DOM
	  this._updateDirtyDomComponents.bind(this), function () {
	    if (this.dirty) {
	      sizes = this._getDomComponentsSizes();
	    }
	  }.bind(this), function () {
	    if (this.dirty) {
	      this._updateDomComponentsSizes.bind(this)(sizes);
	    }
	  }.bind(this),

	  // repaint DOM additionals
	  this._repaintDomAdditionals.bind(this)];

	  if (returnQueue) {
	    return queue;
	  } else {
	    var result;
	    queue.forEach(function (fn) {
	      result = fn();
	    });
	    return result;
	  }
	};

	/**
	 * Show the item in the DOM (when not already visible). The items DOM will
	 * be created when needed.
	 */
	PointItem.prototype.show = function () {
	  if (!this.displayed) {
	    this.redraw();
	  }
	};

	/**
	 * Hide the item from the DOM (when visible)
	 */
	PointItem.prototype.hide = function () {
	  if (this.displayed) {
	    if (this.dom.point.parentNode) {
	      this.dom.point.parentNode.removeChild(this.dom.point);
	    }

	    this.displayed = false;
	  }
	};

	/**
	 * Reposition the item horizontally
	 * @Override
	 */
	PointItem.prototype.repositionX = function () {
	  var start = this.conversion.toScreen(this.data.start);

	  if (this.options.rtl) {
	    this.right = start - this.props.dot.width;

	    // reposition point
	    this.dom.point.style.right = this.right + 'px';
	  } else {
	    this.left = start - this.props.dot.width;

	    // reposition point
	    this.dom.point.style.left = this.left + 'px';
	  }
	};

	/**
	 * Reposition the item vertically
	 * @Override
	 */
	PointItem.prototype.repositionY = function () {
	  var orientation = this.options.orientation.item;
	  var point = this.dom.point;
	  if (orientation == 'top') {
	    point.style.top = this.top + 'px';
	  } else {
	    point.style.top = this.parent.height - this.top - this.height + 'px';
	  }
	};

	/**
	 * Return the width of the item left from its start date
	 * @return {number}
	 */
	PointItem.prototype.getWidthLeft = function () {
	  return this.props.dot.width;
	};

	/**
	 * Return the width of the item right from  its start date
	 * @return {number}
	 */
	PointItem.prototype.getWidthRight = function () {
	  return this.props.dot.width;
	};

	module.exports = PointItem;

	/***/ }),
	/* 103 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var Item = __webpack_require__(38);
	var BackgroundGroup = __webpack_require__(69);
	var RangeItem = __webpack_require__(70);

	/**
	 * @constructor BackgroundItem
	 * @extends Item
	 * @param {Object} data             Object containing parameters start, end
	 *                                  content, className.
	 * @param {{toScreen: function, toTime: function}} conversion
	 *                                  Conversion functions from time to screen and vice versa
	 * @param {Object} [options]        Configuration options
	 *                                  // TODO: describe options
	 * // TODO: implement support for the BackgroundItem just having a start, then being displayed as a sort of an annotation
	 */
	function BackgroundItem(data, conversion, options) {
	  this.props = {
	    content: {
	      width: 0
	    }
	  };
	  this.overflow = false; // if contents can overflow (css styling), this flag is set to true

	  // validate data
	  if (data) {
	    if (data.start == undefined) {
	      throw new Error('Property "start" missing in item ' + data.id);
	    }
	    if (data.end == undefined) {
	      throw new Error('Property "end" missing in item ' + data.id);
	    }
	  }

	  Item.call(this, data, conversion, options);
	}

	BackgroundItem.prototype = new Item(null, null, null);

	BackgroundItem.prototype.baseClassName = 'vis-item vis-background';

	BackgroundItem.prototype.stack = false;

	/**
	 * Check whether this item is visible inside given range
	 * @param {vis.Range} range with a timestamp for start and end
	 * @returns {boolean} True if visible
	 */
	BackgroundItem.prototype.isVisible = function (range) {
	  // determine visibility
	  return this.data.start < range.end && this.data.end > range.start;
	};

	BackgroundItem.prototype._createDomElement = function () {
	  if (!this.dom) {
	    // create DOM
	    this.dom = {};

	    // background box
	    this.dom.box = document.createElement('div');
	    // className is updated in redraw()

	    // frame box (to prevent the item contents from overflowing
	    this.dom.frame = document.createElement('div');
	    this.dom.frame.className = 'vis-item-overflow';
	    this.dom.box.appendChild(this.dom.frame);

	    // contents box
	    this.dom.content = document.createElement('div');
	    this.dom.content.className = 'vis-item-content';
	    this.dom.frame.appendChild(this.dom.content);

	    // Note: we do NOT attach this item as attribute to the DOM,
	    //       such that background items cannot be selected
	    //this.dom.box['timeline-item'] = this;

	    this.dirty = true;
	  }
	};

	BackgroundItem.prototype._appendDomElement = function () {
	  if (!this.parent) {
	    throw new Error('Cannot redraw item: no parent attached');
	  }
	  if (!this.dom.box.parentNode) {
	    var background = this.parent.dom.background;
	    if (!background) {
	      throw new Error('Cannot redraw item: parent has no background container element');
	    }
	    background.appendChild(this.dom.box);
	  }
	  this.displayed = true;
	};

	BackgroundItem.prototype._updateDirtyDomComponents = function () {
	  // update dirty DOM. An item is marked dirty when:
	  // - the item is not yet rendered
	  // - the item's data is changed
	  // - the item is selected/deselected
	  if (this.dirty) {
	    this._updateContents(this.dom.content);
	    this._updateDataAttributes(this.dom.content);
	    this._updateStyle(this.dom.box);

	    // update class
	    var className = (this.data.className ? ' ' + this.data.className : '') + (this.selected ? ' vis-selected' : '');
	    this.dom.box.className = this.baseClassName + className;
	  }
	};

	BackgroundItem.prototype._getDomComponentsSizes = function () {
	  // determine from css whether this box has overflow
	  this.overflow = window.getComputedStyle(this.dom.content).overflow !== 'hidden';
	  return {
	    content: {
	      width: this.dom.content.offsetWidth
	    }
	  };
	};

	BackgroundItem.prototype._updateDomComponentsSizes = function (sizes) {
	  // recalculate size
	  this.props.content.width = sizes.content.width;
	  this.height = 0; // set height zero, so this item will be ignored when stacking items

	  this.dirty = false;
	};

	BackgroundItem.prototype._repaintDomAdditionals = function () {};

	/**
	 * Repaint the item
	 * @param {boolean} [returnQueue=false]  return the queue
	 * @return {boolean} the redraw result or the redraw queue if returnQueue=true
	 */
	BackgroundItem.prototype.redraw = function (returnQueue) {
	  var sizes;
	  var queue = [
	  // create item DOM
	  this._createDomElement.bind(this),

	  // append DOM to parent DOM
	  this._appendDomElement.bind(this), this._updateDirtyDomComponents.bind(this), function () {
	    if (this.dirty) {
	      sizes = this._getDomComponentsSizes.bind(this)();
	    }
	  }.bind(this), function () {
	    if (this.dirty) {
	      this._updateDomComponentsSizes.bind(this)(sizes);
	    }
	  }.bind(this),

	  // repaint DOM additionals
	  this._repaintDomAdditionals.bind(this)];

	  if (returnQueue) {
	    return queue;
	  } else {
	    var result;
	    queue.forEach(function (fn) {
	      result = fn();
	    });
	    return result;
	  }
	};

	/**
	 * Show the item in the DOM (when not already visible). The items DOM will
	 * be created when needed.
	 */
	BackgroundItem.prototype.show = RangeItem.prototype.show;

	/**
	 * Hide the item from the DOM (when visible)
	 * @return {Boolean} changed
	 */
	BackgroundItem.prototype.hide = RangeItem.prototype.hide;

	/**
	 * Reposition the item horizontally
	 * @Override
	 */
	BackgroundItem.prototype.repositionX = RangeItem.prototype.repositionX;

	/**
	 * Reposition the item vertically
	 * @Override
	 */
	BackgroundItem.prototype.repositionY = function (margin) {
	  // eslint-disable-line no-unused-vars
	  var height;
	  var orientation = this.options.orientation.item;

	  // special positioning for subgroups
	  if (this.data.subgroup !== undefined) {
	    // TODO: instead of calculating the top position of the subgroups here for every BackgroundItem, calculate the top of the subgroup once in Itemset
	    var itemSubgroup = this.data.subgroup;

	    this.dom.box.style.height = this.parent.subgroups[itemSubgroup].height + 'px';

	    if (orientation == 'top') {
	      this.dom.box.style.top = this.parent.top + this.parent.subgroups[itemSubgroup].top + 'px';
	    } else {
	      this.dom.box.style.top = this.parent.top + this.parent.height - this.parent.subgroups[itemSubgroup].top - this.parent.subgroups[itemSubgroup].height + 'px';
	    }
	    this.dom.box.style.bottom = '';
	  }
	  // and in the case of no subgroups:
	  else {
	      // we want backgrounds with groups to only show in groups.
	      if (this.parent instanceof BackgroundGroup) {
	        // if the item is not in a group:
	        height = Math.max(this.parent.height, this.parent.itemSet.body.domProps.center.height, this.parent.itemSet.body.domProps.centerContainer.height);
	        this.dom.box.style.bottom = orientation == 'bottom' ? '0' : '';
	        this.dom.box.style.top = orientation == 'top' ? '0' : '';
	      } else {
	        height = this.parent.height;
	        // same alignment for items when orientation is top or bottom
	        this.dom.box.style.top = this.parent.top + 'px';
	        this.dom.box.style.bottom = '';
	      }
	    }
	  this.dom.box.style.height = height + 'px';
	};

	module.exports = BackgroundItem;

	/***/ }),
	/* 104 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Popup is a class to create a popup window with some text
	 */
	var Popup = function () {
	  /**
	   * @param {Element} container       The container object.
	   * @param {string}  overflowMethod  How the popup should act to overflowing ('flip' or 'cap')
	   */
	  function Popup(container, overflowMethod) {
	    (0, _classCallCheck3['default'])(this, Popup);

	    this.container = container;
	    this.overflowMethod = overflowMethod || 'cap';

	    this.x = 0;
	    this.y = 0;
	    this.padding = 5;
	    this.hidden = false;

	    // create the frame
	    this.frame = document.createElement('div');
	    this.frame.className = 'vis-tooltip';
	    this.container.appendChild(this.frame);
	  }

	  /**
	   * @param {number} x   Horizontal position of the popup window
	   * @param {number} y   Vertical position of the popup window
	   */


	  (0, _createClass3['default'])(Popup, [{
	    key: 'setPosition',
	    value: function setPosition(x, y) {
	      this.x = parseInt(x);
	      this.y = parseInt(y);
	    }

	    /**
	     * Set the content for the popup window. This can be HTML code or text.
	     * @param {string | Element} content
	     */

	  }, {
	    key: 'setText',
	    value: function setText(content) {
	      if (content instanceof Element) {
	        this.frame.innerHTML = '';
	        this.frame.appendChild(content);
	      } else {
	        this.frame.innerHTML = content; // string containing text or HTML
	      }
	    }

	    /**
	     * Show the popup window
	     * @param {boolean} [doShow]    Show or hide the window
	     */

	  }, {
	    key: 'show',
	    value: function show(doShow) {
	      if (doShow === undefined) {
	        doShow = true;
	      }

	      if (doShow === true) {
	        var height = this.frame.clientHeight;
	        var width = this.frame.clientWidth;
	        var maxHeight = this.frame.parentNode.clientHeight;
	        var maxWidth = this.frame.parentNode.clientWidth;

	        var left = 0,
	            top = 0;

	        if (this.overflowMethod == 'flip') {
	          var isLeft = false,
	              isTop = true; // Where around the position it's located

	          if (this.y - height < this.padding) {
	            isTop = false;
	          }

	          if (this.x + width > maxWidth - this.padding) {
	            isLeft = true;
	          }

	          if (isLeft) {
	            left = this.x - width;
	          } else {
	            left = this.x;
	          }

	          if (isTop) {
	            top = this.y - height;
	          } else {
	            top = this.y;
	          }
	        } else {
	          top = this.y - height;
	          if (top + height + this.padding > maxHeight) {
	            top = maxHeight - height - this.padding;
	          }
	          if (top < this.padding) {
	            top = this.padding;
	          }

	          left = this.x;
	          if (left + width + this.padding > maxWidth) {
	            left = maxWidth - width - this.padding;
	          }
	          if (left < this.padding) {
	            left = this.padding;
	          }
	        }

	        this.frame.style.left = left + "px";
	        this.frame.style.top = top + "px";
	        this.frame.style.visibility = "visible";
	        this.hidden = false;
	      } else {
	        this.hide();
	      }
	    }

	    /**
	     * Hide the popup window
	     */

	  }, {
	    key: 'hide',
	    value: function hide() {
	      this.hidden = true;
	      this.frame.style.left = "0";
	      this.frame.style.top = "0";
	      this.frame.style.visibility = "hidden";
	    }

	    /**
	     * Remove the popup window
	     */

	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.frame.parentNode.removeChild(this.frame); // Remove element from DOM
	    }
	  }]);
	  return Popup;
	}();

	exports['default'] = Popup;

	/***/ }),
	/* 105 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * This object contains all possible options. It will check if the types are correct, if required if the option is one
	 * of the allowed values.
	 *
	 * __any__ means that the name of the property does not matter.
	 * __type__ is a required field for all objects and contains the allowed types of all objects
	 */
	var string = 'string';
	var bool = 'boolean';
	var number = 'number';
	var array = 'array';
	var date = 'date';
	var object = 'object'; // should only be in a __type__ property
	var dom = 'dom';
	var moment = 'moment';
	var any = 'any';

	var allOptions = {
	  configure: {
	    enabled: { 'boolean': bool },
	    filter: { 'boolean': bool, 'function': 'function' },
	    container: { dom: dom },
	    __type__: { object: object, 'boolean': bool, 'function': 'function' }
	  },

	  //globals :
	  align: { string: string },
	  rtl: { 'boolean': bool, 'undefined': 'undefined' },
	  rollingMode: {
	    follow: { 'boolean': bool },
	    offset: { number: number, 'undefined': 'undefined' },
	    __type__: { object: object }
	  },
	  verticalScroll: { 'boolean': bool, 'undefined': 'undefined' },
	  horizontalScroll: { 'boolean': bool, 'undefined': 'undefined' },
	  autoResize: { 'boolean': bool },
	  throttleRedraw: { number: number }, // TODO: DEPRICATED see https://github.com/almende/vis/issues/2511
	  clickToUse: { 'boolean': bool },
	  dataAttributes: { string: string, array: array },
	  editable: {
	    add: { 'boolean': bool, 'undefined': 'undefined' },
	    remove: { 'boolean': bool, 'undefined': 'undefined' },
	    updateGroup: { 'boolean': bool, 'undefined': 'undefined' },
	    updateTime: { 'boolean': bool, 'undefined': 'undefined' },
	    overrideItems: { 'boolean': bool, 'undefined': 'undefined' },
	    __type__: { 'boolean': bool, object: object }
	  },
	  end: { number: number, date: date, string: string, moment: moment },
	  format: {
	    minorLabels: {
	      millisecond: { string: string, 'undefined': 'undefined' },
	      second: { string: string, 'undefined': 'undefined' },
	      minute: { string: string, 'undefined': 'undefined' },
	      hour: { string: string, 'undefined': 'undefined' },
	      weekday: { string: string, 'undefined': 'undefined' },
	      day: { string: string, 'undefined': 'undefined' },
	      week: { string: string, 'undefined': 'undefined' },
	      month: { string: string, 'undefined': 'undefined' },
	      year: { string: string, 'undefined': 'undefined' },
	      __type__: { object: object, 'function': 'function' }
	    },
	    majorLabels: {
	      millisecond: { string: string, 'undefined': 'undefined' },
	      second: { string: string, 'undefined': 'undefined' },
	      minute: { string: string, 'undefined': 'undefined' },
	      hour: { string: string, 'undefined': 'undefined' },
	      weekday: { string: string, 'undefined': 'undefined' },
	      day: { string: string, 'undefined': 'undefined' },
	      week: { string: string, 'undefined': 'undefined' },
	      month: { string: string, 'undefined': 'undefined' },
	      year: { string: string, 'undefined': 'undefined' },
	      __type__: { object: object, 'function': 'function' }
	    },
	    __type__: { object: object }
	  },
	  moment: { 'function': 'function' },
	  groupOrder: { string: string, 'function': 'function' },
	  groupEditable: {
	    add: { 'boolean': bool, 'undefined': 'undefined' },
	    remove: { 'boolean': bool, 'undefined': 'undefined' },
	    order: { 'boolean': bool, 'undefined': 'undefined' },
	    __type__: { 'boolean': bool, object: object }
	  },
	  groupOrderSwap: { 'function': 'function' },
	  height: { string: string, number: number },
	  hiddenDates: {
	    start: { date: date, number: number, string: string, moment: moment },
	    end: { date: date, number: number, string: string, moment: moment },
	    repeat: { string: string },
	    __type__: { object: object, array: array }
	  },
	  itemsAlwaysDraggable: {
	    item: { 'boolean': bool, 'undefined': 'undefined' },
	    range: { 'boolean': bool, 'undefined': 'undefined' },
	    __type__: { 'boolean': bool, object: object }
	  },
	  limitSize: { 'boolean': bool },
	  locale: { string: string },
	  locales: {
	    __any__: { any: any },
	    __type__: { object: object }
	  },
	  margin: {
	    axis: { number: number },
	    item: {
	      horizontal: { number: number, 'undefined': 'undefined' },
	      vertical: { number: number, 'undefined': 'undefined' },
	      __type__: { object: object, number: number }
	    },
	    __type__: { object: object, number: number }
	  },
	  max: { date: date, number: number, string: string, moment: moment },
	  maxHeight: { number: number, string: string },
	  maxMinorChars: { number: number },
	  min: { date: date, number: number, string: string, moment: moment },
	  minHeight: { number: number, string: string },
	  moveable: { 'boolean': bool },
	  multiselect: { 'boolean': bool },
	  multiselectPerGroup: { 'boolean': bool },
	  onAdd: { 'function': 'function' },
	  onDropObjectOnItem: { 'function': 'function' },
	  onUpdate: { 'function': 'function' },
	  onMove: { 'function': 'function' },
	  onMoving: { 'function': 'function' },
	  onRemove: { 'function': 'function' },
	  onAddGroup: { 'function': 'function' },
	  onMoveGroup: { 'function': 'function' },
	  onRemoveGroup: { 'function': 'function' },
	  onInitialDrawComplete: { 'function': 'function' },
	  order: { 'function': 'function' },
	  orientation: {
	    axis: { string: string, 'undefined': 'undefined' },
	    item: { string: string, 'undefined': 'undefined' },
	    __type__: { string: string, object: object }
	  },
	  selectable: { 'boolean': bool },
	  showCurrentTime: { 'boolean': bool },
	  showMajorLabels: { 'boolean': bool },
	  showMinorLabels: { 'boolean': bool },
	  stack: { 'boolean': bool },
	  stackSubgroups: { 'boolean': bool },
	  snap: { 'function': 'function', 'null': 'null' },
	  start: { date: date, number: number, string: string, moment: moment },
	  template: { 'function': 'function' },
	  groupTemplate: { 'function': 'function' },
	  visibleFrameTemplate: { string: string, 'function': 'function' },
	  showTooltips: { 'boolean': bool },
	  tooltip: {
	    followMouse: { 'boolean': bool },
	    overflowMethod: { 'string': ['cap', 'flip'] },
	    __type__: { object: object }
	  },
	  tooltipOnItemUpdateTime: {
	    template: { 'function': 'function' },
	    __type__: { 'boolean': bool, object: object }
	  },
	  timeAxis: {
	    scale: { string: string, 'undefined': 'undefined' },
	    step: { number: number, 'undefined': 'undefined' },
	    __type__: { object: object }
	  },
	  type: { string: string },
	  width: { string: string, number: number },
	  zoomable: { 'boolean': bool },
	  zoomKey: { string: ['ctrlKey', 'altKey', 'metaKey', ''] },
	  zoomMax: { number: number },
	  zoomMin: { number: number },

	  __type__: { object: object }
	};

	var configureOptions = {
	  global: {
	    align: ['center', 'left', 'right'],
	    direction: false,
	    autoResize: true,
	    clickToUse: false,
	    // dataAttributes: ['all'], // FIXME: can be 'all' or string[]
	    editable: {
	      add: false,
	      remove: false,
	      updateGroup: false,
	      updateTime: false
	    },
	    end: '',
	    format: {
	      minorLabels: {
	        millisecond: 'SSS',
	        second: 's',
	        minute: 'HH:mm',
	        hour: 'HH:mm',
	        weekday: 'ddd D',
	        day: 'D',
	        week: 'w',
	        month: 'MMM',
	        year: 'YYYY'
	      },
	      majorLabels: {
	        millisecond: 'HH:mm:ss',
	        second: 'D MMMM HH:mm',
	        minute: 'ddd D MMMM',
	        hour: 'ddd D MMMM',
	        weekday: 'MMMM YYYY',
	        day: 'MMMM YYYY',
	        week: 'MMMM YYYY',
	        month: 'YYYY',
	        year: ''
	      }
	    },

	    //groupOrder: {string, 'function': 'function'},
	    groupsDraggable: false,
	    height: '',
	    //hiddenDates: {object, array},
	    locale: '',
	    margin: {
	      axis: [20, 0, 100, 1],
	      item: {
	        horizontal: [10, 0, 100, 1],
	        vertical: [10, 0, 100, 1]
	      }
	    },
	    max: '',
	    maxHeight: '',
	    maxMinorChars: [7, 0, 20, 1],
	    min: '',
	    minHeight: '',
	    moveable: false,
	    multiselect: false,
	    multiselectPerGroup: false,
	    //onAdd: {'function': 'function'},
	    //onUpdate: {'function': 'function'},
	    //onMove: {'function': 'function'},
	    //onMoving: {'function': 'function'},
	    //onRename: {'function': 'function'},
	    //order: {'function': 'function'},
	    orientation: {
	      axis: ['both', 'bottom', 'top'],
	      item: ['bottom', 'top']
	    },
	    selectable: true,
	    showCurrentTime: false,
	    showMajorLabels: true,
	    showMinorLabels: true,
	    stack: true,
	    stackSubgroups: true,
	    //snap: {'function': 'function', nada},
	    start: '',
	    //template: {'function': 'function'},
	    //timeAxis: {
	    //  scale: ['millisecond', 'second', 'minute', 'hour', 'weekday', 'day', 'week', 'month', 'year'],
	    //  step: [1, 1, 10, 1]
	    //},
	    showTooltips: true,
	    tooltip: {
	      followMouse: false,
	      overflowMethod: 'flip'
	    },
	    tooltipOnItemUpdateTime: false,
	    type: ['box', 'point', 'range', 'background'],
	    width: '100%',
	    zoomable: true,
	    zoomKey: ['ctrlKey', 'altKey', 'metaKey', ''],
	    zoomMax: [315360000000000, 10, 315360000000000, 1],
	    zoomMin: [10, 10, 315360000000000, 1]
	  }
	};

	exports.allOptions = allOptions;
	exports.configureOptions = configureOptions;

	/***/ }),
	/* 106 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);
	var DOMutil = __webpack_require__(14);
	var DataSet = __webpack_require__(11);
	var DataView = __webpack_require__(12);
	var Component = __webpack_require__(16);
	var DataAxis = __webpack_require__(107);
	var GraphGroup = __webpack_require__(109);
	var Legend = __webpack_require__(112);
	var Bars = __webpack_require__(110);
	var Lines = __webpack_require__(111);
	var Points = __webpack_require__(72);

	var UNGROUPED = '__ungrouped__'; // reserved group id for ungrouped items

	/**
	 * This is the constructor of the LineGraph. It requires a Timeline body and options.
	 *
	 * @param {vis.Timeline.body} body
	 * @param {Object} options
	 * @constructor LineGraph
	 * @extends Component
	 */
	function LineGraph(body, options) {
	  this.id = util.randomUUID();
	  this.body = body;

	  this.defaultOptions = {
	    yAxisOrientation: 'left',
	    defaultGroup: 'default',
	    sort: true,
	    sampling: true,
	    stack: false,
	    graphHeight: '400px',
	    shaded: {
	      enabled: false,
	      orientation: 'bottom' // top, bottom, zero
	    },
	    style: 'line', // line, bar
	    barChart: {
	      width: 50,
	      sideBySide: false,
	      align: 'center' // left, center, right
	    },
	    interpolation: {
	      enabled: true,
	      parametrization: 'centripetal', // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
	      alpha: 0.5
	    },
	    drawPoints: {
	      enabled: true,
	      size: 6,
	      style: 'square' // square, circle
	    },
	    dataAxis: {}, //Defaults are done on DataAxis level
	    legend: {}, //Defaults are done on Legend level
	    groups: {
	      visibility: {}
	    }
	  };

	  // options is shared by this lineGraph and all its items
	  this.options = util.extend({}, this.defaultOptions);
	  this.dom = {};
	  this.props = {};
	  this.hammer = null;
	  this.groups = {};
	  this.abortedGraphUpdate = false;
	  this.updateSVGheight = false;
	  this.updateSVGheightOnResize = false;
	  this.forceGraphUpdate = true;

	  var me = this;
	  this.itemsData = null; // DataSet
	  this.groupsData = null; // DataSet

	  // listeners for the DataSet of the items
	  this.itemListeners = {
	    'add': function add(event, params, senderId) {
	      // eslint-disable-line no-unused-vars
	      me._onAdd(params.items);
	    },
	    'update': function update(event, params, senderId) {
	      // eslint-disable-line no-unused-vars
	      me._onUpdate(params.items);
	    },
	    'remove': function remove(event, params, senderId) {
	      // eslint-disable-line no-unused-vars
	      me._onRemove(params.items);
	    }
	  };

	  // listeners for the DataSet of the groups
	  this.groupListeners = {
	    'add': function add(event, params, senderId) {
	      // eslint-disable-line no-unused-vars
	      me._onAddGroups(params.items);
	    },
	    'update': function update(event, params, senderId) {
	      // eslint-disable-line no-unused-vars
	      me._onUpdateGroups(params.items);
	    },
	    'remove': function remove(event, params, senderId) {
	      // eslint-disable-line no-unused-vars
	      me._onRemoveGroups(params.items);
	    }
	  };

	  this.items = {}; // object with an Item for every data item
	  this.selection = []; // list with the ids of all selected nodes
	  this.lastStart = this.body.range.start;
	  this.touchParams = {}; // stores properties while dragging

	  this.svgElements = {};
	  this.setOptions(options);
	  this.groupsUsingDefaultStyles = [0];
	  this.body.emitter.on('rangechanged', function () {
	    me.lastStart = me.body.range.start;
	    me.svg.style.left = util.option.asSize(-me.props.width);

	    me.forceGraphUpdate = true;
	    //Is this local redraw necessary? (Core also does a change event!)
	    me.redraw.call(me);
	  });

	  // create the HTML DOM
	  this._create();
	  this.framework = { svg: this.svg, svgElements: this.svgElements, options: this.options, groups: this.groups };
	}

	LineGraph.prototype = new Component();

	/**
	 * Create the HTML DOM for the ItemSet
	 */
	LineGraph.prototype._create = function () {
	  var frame = document.createElement('div');
	  frame.className = 'vis-line-graph';
	  this.dom.frame = frame;

	  // create svg element for graph drawing.
	  this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
	  this.svg.style.position = 'relative';
	  this.svg.style.height = ('' + this.options.graphHeight).replace('px', '') + 'px';
	  this.svg.style.display = 'block';
	  frame.appendChild(this.svg);

	  // data axis
	  this.options.dataAxis.orientation = 'left';
	  this.yAxisLeft = new DataAxis(this.body, this.options.dataAxis, this.svg, this.options.groups);

	  this.options.dataAxis.orientation = 'right';
	  this.yAxisRight = new DataAxis(this.body, this.options.dataAxis, this.svg, this.options.groups);
	  delete this.options.dataAxis.orientation;

	  // legends
	  this.legendLeft = new Legend(this.body, this.options.legend, 'left', this.options.groups);
	  this.legendRight = new Legend(this.body, this.options.legend, 'right', this.options.groups);

	  this.show();
	};

	/**
	 * set the options of the LineGraph. the mergeOptions is used for subObjects that have an enabled element.
	 * @param {object} options
	 */
	LineGraph.prototype.setOptions = function (options) {
	  if (options) {
	    var fields = ['sampling', 'defaultGroup', 'stack', 'height', 'graphHeight', 'yAxisOrientation', 'style', 'barChart', 'dataAxis', 'sort', 'groups'];
	    if (options.graphHeight === undefined && options.height !== undefined) {
	      this.updateSVGheight = true;
	      this.updateSVGheightOnResize = true;
	    } else if (this.body.domProps.centerContainer.height !== undefined && options.graphHeight !== undefined) {
	      if (parseInt((options.graphHeight + '').replace("px", '')) < this.body.domProps.centerContainer.height) {
	        this.updateSVGheight = true;
	      }
	    }
	    util.selectiveDeepExtend(fields, this.options, options);
	    util.mergeOptions(this.options, options, 'interpolation');
	    util.mergeOptions(this.options, options, 'drawPoints');
	    util.mergeOptions(this.options, options, 'shaded');
	    util.mergeOptions(this.options, options, 'legend');

	    if (options.interpolation) {
	      if ((0, _typeof3['default'])(options.interpolation) == 'object') {
	        if (options.interpolation.parametrization) {
	          if (options.interpolation.parametrization == 'uniform') {
	            this.options.interpolation.alpha = 0;
	          } else if (options.interpolation.parametrization == 'chordal') {
	            this.options.interpolation.alpha = 1.0;
	          } else {
	            this.options.interpolation.parametrization = 'centripetal';
	            this.options.interpolation.alpha = 0.5;
	          }
	        }
	      }
	    }

	    if (this.yAxisLeft) {
	      if (options.dataAxis !== undefined) {
	        this.yAxisLeft.setOptions(this.options.dataAxis);
	        this.yAxisRight.setOptions(this.options.dataAxis);
	      }
	    }

	    if (this.legendLeft) {
	      if (options.legend !== undefined) {
	        this.legendLeft.setOptions(this.options.legend);
	        this.legendRight.setOptions(this.options.legend);
	      }
	    }

	    if (this.groups.hasOwnProperty(UNGROUPED)) {
	      this.groups[UNGROUPED].setOptions(options);
	    }
	  }

	  // this is used to redraw the graph if the visibility of the groups is changed.
	  if (this.dom.frame) {
	    //not on initial run?
	    this.forceGraphUpdate = true;
	    this.body.emitter.emit("_change", { queue: true });
	  }
	};

	/**
	 * Hide the component from the DOM
	 */
	LineGraph.prototype.hide = function () {
	  // remove the frame containing the items
	  if (this.dom.frame.parentNode) {
	    this.dom.frame.parentNode.removeChild(this.dom.frame);
	  }
	};

	/**
	 * Show the component in the DOM (when not already visible).
	 */
	LineGraph.prototype.show = function () {
	  // show frame containing the items
	  if (!this.dom.frame.parentNode) {
	    this.body.dom.center.appendChild(this.dom.frame);
	  }
	};

	/**
	 * Set items
	 * @param {vis.DataSet | null} items
	 */
	LineGraph.prototype.setItems = function (items) {
	  var me = this,
	      ids,
	      oldItemsData = this.itemsData;

	  // replace the dataset
	  if (!items) {
	    this.itemsData = null;
	  } else if (items instanceof DataSet || items instanceof DataView) {
	    this.itemsData = items;
	  } else {
	    throw new TypeError('Data must be an instance of DataSet or DataView');
	  }

	  if (oldItemsData) {
	    // unsubscribe from old dataset
	    util.forEach(this.itemListeners, function (callback, event) {
	      oldItemsData.off(event, callback);
	    });

	    // remove all drawn items
	    ids = oldItemsData.getIds();
	    this._onRemove(ids);
	  }

	  if (this.itemsData) {
	    // subscribe to new dataset
	    var id = this.id;
	    util.forEach(this.itemListeners, function (callback, event) {
	      me.itemsData.on(event, callback, id);
	    });

	    // add all new items
	    ids = this.itemsData.getIds();
	    this._onAdd(ids);
	  }
	};

	/**
	 * Set groups
	 * @param {vis.DataSet} groups
	 */
	LineGraph.prototype.setGroups = function (groups) {
	  var me = this;
	  var ids;

	  // unsubscribe from current dataset
	  if (this.groupsData) {
	    util.forEach(this.groupListeners, function (callback, event) {
	      me.groupsData.off(event, callback);
	    });

	    // remove all drawn groups
	    ids = this.groupsData.getIds();
	    this.groupsData = null;
	    for (var i = 0; i < ids.length; i++) {
	      this._removeGroup(ids[i]);
	    }
	  }

	  // replace the dataset
	  if (!groups) {
	    this.groupsData = null;
	  } else if (groups instanceof DataSet || groups instanceof DataView) {
	    this.groupsData = groups;
	  } else {
	    throw new TypeError('Data must be an instance of DataSet or DataView');
	  }

	  if (this.groupsData) {
	    // subscribe to new dataset
	    var id = this.id;
	    util.forEach(this.groupListeners, function (callback, event) {
	      me.groupsData.on(event, callback, id);
	    });

	    // draw all ms
	    ids = this.groupsData.getIds();
	    this._onAddGroups(ids);
	  }
	};

	LineGraph.prototype._onUpdate = function (ids) {
	  this._updateAllGroupData(ids);
	};
	LineGraph.prototype._onAdd = function (ids) {
	  this._onUpdate(ids);
	};
	LineGraph.prototype._onRemove = function (ids) {
	  this._onUpdate(ids);
	};
	LineGraph.prototype._onUpdateGroups = function (groupIds) {
	  this._updateAllGroupData(null, groupIds);
	};
	LineGraph.prototype._onAddGroups = function (groupIds) {
	  this._onUpdateGroups(groupIds);
	};

	/**
	 * this cleans the group out off the legends and the dataaxis, updates the ungrouped and updates the graph
	 * @param {Array} groupIds
	 * @private
	 */
	LineGraph.prototype._onRemoveGroups = function (groupIds) {
	  for (var i = 0; i < groupIds.length; i++) {
	    this._removeGroup(groupIds[i]);
	  }
	  this.forceGraphUpdate = true;
	  this.body.emitter.emit("_change", { queue: true });
	};

	/**
	 * this cleans the group out off the legends and the dataaxis
	 * @param {vis.GraphGroup.id} groupId
	 * @private
	 */
	LineGraph.prototype._removeGroup = function (groupId) {
	  if (this.groups.hasOwnProperty(groupId)) {
	    if (this.groups[groupId].options.yAxisOrientation == 'right') {
	      this.yAxisRight.removeGroup(groupId);
	      this.legendRight.removeGroup(groupId);
	      this.legendRight.redraw();
	    } else {
	      this.yAxisLeft.removeGroup(groupId);
	      this.legendLeft.removeGroup(groupId);
	      this.legendLeft.redraw();
	    }
	    delete this.groups[groupId];
	  }
	};

	/**
	 * update a group object with the group dataset entree
	 *
	 * @param {vis.GraphGroup} group
	 * @param {vis.GraphGroup.id} groupId
	 * @private
	 */
	LineGraph.prototype._updateGroup = function (group, groupId) {
	  if (!this.groups.hasOwnProperty(groupId)) {
	    this.groups[groupId] = new GraphGroup(group, groupId, this.options, this.groupsUsingDefaultStyles);
	    if (this.groups[groupId].options.yAxisOrientation == 'right') {
	      this.yAxisRight.addGroup(groupId, this.groups[groupId]);
	      this.legendRight.addGroup(groupId, this.groups[groupId]);
	    } else {
	      this.yAxisLeft.addGroup(groupId, this.groups[groupId]);
	      this.legendLeft.addGroup(groupId, this.groups[groupId]);
	    }
	  } else {
	    this.groups[groupId].update(group);
	    if (this.groups[groupId].options.yAxisOrientation == 'right') {
	      this.yAxisRight.updateGroup(groupId, this.groups[groupId]);
	      this.legendRight.updateGroup(groupId, this.groups[groupId]);
	      //If yAxisOrientation changed, clean out the group from the other axis.
	      this.yAxisLeft.removeGroup(groupId);
	      this.legendLeft.removeGroup(groupId);
	    } else {
	      this.yAxisLeft.updateGroup(groupId, this.groups[groupId]);
	      this.legendLeft.updateGroup(groupId, this.groups[groupId]);
	      //If yAxisOrientation changed, clean out the group from the other axis.
	      this.yAxisRight.removeGroup(groupId);
	      this.legendRight.removeGroup(groupId);
	    }
	  }
	  this.legendLeft.redraw();
	  this.legendRight.redraw();
	};

	/**
	 * this updates all groups, it is used when there is an update the the itemset.
	 *
	 * @param  {Array} ids
	 * @param  {Array} groupIds
	 * @private
	 */
	LineGraph.prototype._updateAllGroupData = function (ids, groupIds) {
	  if (this.itemsData != null) {
	    var groupsContent = {};
	    var items = this.itemsData.get();
	    var fieldId = this.itemsData._fieldId;
	    var idMap = {};
	    if (ids) {
	      ids.map(function (id) {
	        idMap[id] = id;
	      });
	    }

	    //pre-Determine array sizes, for more efficient memory claim
	    var groupCounts = {};
	    for (var i = 0; i < items.length; i++) {
	      var item = items[i];
	      var groupId = item.group;
	      if (groupId === null || groupId === undefined) {
	        groupId = UNGROUPED;
	      }
	      groupCounts.hasOwnProperty(groupId) ? groupCounts[groupId]++ : groupCounts[groupId] = 1;
	    }

	    //Pre-load arrays from existing groups if items are not changed (not in ids)
	    var existingItemsMap = {};
	    if (!groupIds && ids) {
	      for (groupId in this.groups) {
	        if (this.groups.hasOwnProperty(groupId)) {
	          group = this.groups[groupId];
	          var existing_items = group.getItems();

	          groupsContent[groupId] = existing_items.filter(function (item) {
	            existingItemsMap[item[fieldId]] = item[fieldId];
	            return item[fieldId] !== idMap[item[fieldId]];
	          });
	          var newLength = groupCounts[groupId];
	          groupCounts[groupId] -= groupsContent[groupId].length;
	          if (groupsContent[groupId].length < newLength) {
	            groupsContent[groupId][newLength - 1] = {};
	          }
	        }
	      }
	    }

	    //Now insert data into the arrays.
	    for (i = 0; i < items.length; i++) {
	      item = items[i];
	      groupId = item.group;
	      if (groupId === null || groupId === undefined) {
	        groupId = UNGROUPED;
	      }
	      if (!groupIds && ids && item[fieldId] !== idMap[item[fieldId]] && existingItemsMap.hasOwnProperty(item[fieldId])) {
	        continue;
	      }
	      if (!groupsContent.hasOwnProperty(groupId)) {
	        groupsContent[groupId] = new Array(groupCounts[groupId]);
	      }
	      //Copy data (because of unmodifiable DataView input.
	      var extended = util.bridgeObject(item);
	      extended.x = util.convert(item.x, 'Date');
	      extended.end = util.convert(item.end, 'Date');
	      extended.orginalY = item.y; //real Y
	      extended.y = Number(item.y);
	      extended[fieldId] = item[fieldId];

	      var index = groupsContent[groupId].length - groupCounts[groupId]--;
	      groupsContent[groupId][index] = extended;
	    }

	    //Make sure all groups are present, to allow removal of old groups
	    for (groupId in this.groups) {
	      if (this.groups.hasOwnProperty(groupId)) {
	        if (!groupsContent.hasOwnProperty(groupId)) {
	          groupsContent[groupId] = new Array(0);
	        }
	      }
	    }

	    //Update legendas, style and axis
	    for (groupId in groupsContent) {
	      if (groupsContent.hasOwnProperty(groupId)) {
	        if (groupsContent[groupId].length == 0) {
	          if (this.groups.hasOwnProperty(groupId)) {
	            this._removeGroup(groupId);
	          }
	        } else {
	          var group = undefined;
	          if (this.groupsData != undefined) {
	            group = this.groupsData.get(groupId);
	          }
	          if (group == undefined) {
	            group = { id: groupId, content: this.options.defaultGroup + groupId };
	          }
	          this._updateGroup(group, groupId);
	          this.groups[groupId].setItems(groupsContent[groupId]);
	        }
	      }
	    }
	    this.forceGraphUpdate = true;
	    this.body.emitter.emit("_change", { queue: true });
	  }
	};

	/**
	 * Redraw the component, mandatory function
	 * @return {boolean} Returns true if the component is resized
	 */
	LineGraph.prototype.redraw = function () {
	  var resized = false;

	  // calculate actual size and position
	  this.props.width = this.dom.frame.offsetWidth;
	  this.props.height = this.body.domProps.centerContainer.height - this.body.domProps.border.top - this.body.domProps.border.bottom;

	  // check if this component is resized
	  resized = this._isResized() || resized;

	  // check whether zoomed (in that case we need to re-stack everything)
	  var visibleInterval = this.body.range.end - this.body.range.start;
	  var zoomed = visibleInterval != this.lastVisibleInterval;
	  this.lastVisibleInterval = visibleInterval;

	  // the svg element is three times as big as the width, this allows for fully dragging left and right
	  // without reloading the graph. the controls for this are bound to events in the constructor
	  if (resized == true) {
	    this.svg.style.width = util.option.asSize(3 * this.props.width);
	    this.svg.style.left = util.option.asSize(-this.props.width);

	    // if the height of the graph is set as proportional, change the height of the svg
	    if ((this.options.height + '').indexOf("%") != -1 || this.updateSVGheightOnResize == true) {
	      this.updateSVGheight = true;
	    }
	  }

	  // update the height of the graph on each redraw of the graph.
	  if (this.updateSVGheight == true) {
	    if (this.options.graphHeight != this.props.height + 'px') {
	      this.options.graphHeight = this.props.height + 'px';
	      this.svg.style.height = this.props.height + 'px';
	    }
	    this.updateSVGheight = false;
	  } else {
	    this.svg.style.height = ('' + this.options.graphHeight).replace('px', '') + 'px';
	  }

	  // zoomed is here to ensure that animations are shown correctly.
	  if (resized == true || zoomed == true || this.abortedGraphUpdate == true || this.forceGraphUpdate == true) {
	    resized = this._updateGraph() || resized;
	    this.forceGraphUpdate = false;
	  } else {
	    // move the whole svg while dragging
	    if (this.lastStart != 0) {
	      var offset = this.body.range.start - this.lastStart;
	      var range = this.body.range.end - this.body.range.start;
	      if (this.props.width != 0) {
	        var rangePerPixelInv = this.props.width / range;
	        var xOffset = offset * rangePerPixelInv;
	        this.svg.style.left = -this.props.width - xOffset + 'px';
	      }
	    }
	  }
	  this.legendLeft.redraw();
	  this.legendRight.redraw();
	  return resized;
	};

	LineGraph.prototype._getSortedGroupIds = function () {
	  // getting group Ids
	  var grouplist = [];
	  for (var groupId in this.groups) {
	    if (this.groups.hasOwnProperty(groupId)) {
	      var group = this.groups[groupId];
	      if (group.visible == true && (this.options.groups.visibility[groupId] === undefined || this.options.groups.visibility[groupId] == true)) {
	        grouplist.push({ id: groupId, zIndex: group.options.zIndex });
	      }
	    }
	  }
	  util.insertSort(grouplist, function (a, b) {
	    var az = a.zIndex;
	    var bz = b.zIndex;
	    if (az === undefined) az = 0;
	    if (bz === undefined) bz = 0;
	    return az == bz ? 0 : az < bz ? -1 : 1;
	  });
	  var groupIds = new Array(grouplist.length);
	  for (var i = 0; i < grouplist.length; i++) {
	    groupIds[i] = grouplist[i].id;
	  }
	  return groupIds;
	};

	/**
	 * Update and redraw the graph.
	 *
	 * @returns {boolean}
	 * @private
	 */
	LineGraph.prototype._updateGraph = function () {
	  // reset the svg elements
	  DOMutil.prepareElements(this.svgElements);
	  if (this.props.width != 0 && this.itemsData != null) {
	    var group, i;
	    var groupRanges = {};
	    var changeCalled = false;
	    // this is the range of the SVG canvas
	    var minDate = this.body.util.toGlobalTime(-this.body.domProps.root.width);
	    var maxDate = this.body.util.toGlobalTime(2 * this.body.domProps.root.width);

	    // getting group Ids
	    var groupIds = this._getSortedGroupIds();
	    if (groupIds.length > 0) {
	      var groupsData = {};

	      // fill groups data, this only loads the data we require based on the timewindow
	      this._getRelevantData(groupIds, groupsData, minDate, maxDate);

	      // apply sampling, if disabled, it will pass through this function.
	      this._applySampling(groupIds, groupsData);

	      // we transform the X coordinates to detect collisions
	      for (i = 0; i < groupIds.length; i++) {
	        this._convertXcoordinates(groupsData[groupIds[i]]);
	      }

	      // now all needed data has been collected we start the processing.
	      this._getYRanges(groupIds, groupsData, groupRanges);

	      // update the Y axis first, we use this data to draw at the correct Y points
	      changeCalled = this._updateYAxis(groupIds, groupRanges);

	      //  at changeCalled, abort this update cycle as the graph needs another update with new Width input from the Redraw container.
	      //  Cleanup SVG elements on abort.
	      if (changeCalled == true) {
	        DOMutil.cleanupElements(this.svgElements);
	        this.abortedGraphUpdate = true;
	        return true;
	      }
	      this.abortedGraphUpdate = false;

	      // With the yAxis scaled correctly, use this to get the Y values of the points.
	      var below = undefined;
	      for (i = 0; i < groupIds.length; i++) {
	        group = this.groups[groupIds[i]];
	        if (this.options.stack === true && this.options.style === 'line') {
	          if (group.options.excludeFromStacking == undefined || !group.options.excludeFromStacking) {
	            if (below != undefined) {
	              this._stack(groupsData[group.id], groupsData[below.id]);
	              if (group.options.shaded.enabled == true && group.options.shaded.orientation !== "group") {
	                if (group.options.shaded.orientation == "top" && below.options.shaded.orientation !== "group") {
	                  below.options.shaded.orientation = "group";
	                  below.options.shaded.groupId = group.id;
	                } else {
	                  group.options.shaded.orientation = "group";
	                  group.options.shaded.groupId = below.id;
	                }
	              }
	            }
	            below = group;
	          }
	        }
	        this._convertYcoordinates(groupsData[groupIds[i]], group);
	      }

	      //Precalculate paths and draw shading if appropriate. This will make sure the shading is always behind any lines.
	      var paths = {};
	      for (i = 0; i < groupIds.length; i++) {
	        group = this.groups[groupIds[i]];
	        if (group.options.style === 'line' && group.options.shaded.enabled == true) {
	          var dataset = groupsData[groupIds[i]];
	          if (dataset == null || dataset.length == 0) {
	            continue;
	          }
	          if (!paths.hasOwnProperty(groupIds[i])) {
	            paths[groupIds[i]] = Lines.calcPath(dataset, group);
	          }
	          if (group.options.shaded.orientation === "group") {
	            var subGroupId = group.options.shaded.groupId;
	            if (groupIds.indexOf(subGroupId) === -1) {
	              console.log(group.id + ": Unknown shading group target given:" + subGroupId);
	              continue;
	            }
	            if (!paths.hasOwnProperty(subGroupId)) {
	              paths[subGroupId] = Lines.calcPath(groupsData[subGroupId], this.groups[subGroupId]);
	            }
	            Lines.drawShading(paths[groupIds[i]], group, paths[subGroupId], this.framework);
	          } else {
	            Lines.drawShading(paths[groupIds[i]], group, undefined, this.framework);
	          }
	        }
	      }

	      // draw the groups, calculating paths if still necessary.
	      Bars.draw(groupIds, groupsData, this.framework);
	      for (i = 0; i < groupIds.length; i++) {
	        group = this.groups[groupIds[i]];
	        if (groupsData[groupIds[i]].length > 0) {
	          switch (group.options.style) {
	            case "line":
	              if (!paths.hasOwnProperty(groupIds[i])) {
	                paths[groupIds[i]] = Lines.calcPath(groupsData[groupIds[i]], group);
	              }
	              Lines.draw(paths[groupIds[i]], group, this.framework);
	            // eslint-disable-line no-fallthrough
	            case "point":
	            // eslint-disable-line no-fallthrough
	            case "points":
	              if (group.options.style == "point" || group.options.style == "points" || group.options.drawPoints.enabled == true) {
	                Points.draw(groupsData[groupIds[i]], group, this.framework);
	              }
	              break;
	            case "bar":
	            // bar needs to be drawn enmasse
	            // eslint-disable-line no-fallthrough
	            default:
	            //do nothing...
	          }
	        }
	      }
	    }
	  }

	  // cleanup unused svg elements
	  DOMutil.cleanupElements(this.svgElements);
	  return false;
	};

	LineGraph.prototype._stack = function (data, subData) {
	  var index, dx, dy, subPrevPoint, subNextPoint;
	  index = 0;
	  // for each data point we look for a matching on in the set below
	  for (var j = 0; j < data.length; j++) {
	    subPrevPoint = undefined;
	    subNextPoint = undefined;
	    // we look for time matches or a before-after point
	    for (var k = index; k < subData.length; k++) {
	      // if times match exactly
	      if (subData[k].x === data[j].x) {
	        subPrevPoint = subData[k];
	        subNextPoint = subData[k];
	        index = k;
	        break;
	      } else if (subData[k].x > data[j].x) {
	        // overshoot
	        subNextPoint = subData[k];
	        if (k == 0) {
	          subPrevPoint = subNextPoint;
	        } else {
	          subPrevPoint = subData[k - 1];
	        }
	        index = k;
	        break;
	      }
	    }
	    // in case the last data point has been used, we assume it stays like this.
	    if (subNextPoint === undefined) {
	      subPrevPoint = subData[subData.length - 1];
	      subNextPoint = subData[subData.length - 1];
	    }
	    // linear interpolation
	    dx = subNextPoint.x - subPrevPoint.x;
	    dy = subNextPoint.y - subPrevPoint.y;
	    if (dx == 0) {
	      data[j].y = data[j].orginalY + subNextPoint.y;
	    } else {
	      data[j].y = data[j].orginalY + dy / dx * (data[j].x - subPrevPoint.x) + subPrevPoint.y; // ax + b where b is data[j].y
	    }
	  }
	};

	/**
	 * first select and preprocess the data from the datasets.
	 * the groups have their preselection of data, we now loop over this data to see
	 * what data we need to draw. Sorted data is much faster.
	 * more optimization is possible by doing the sampling before and using the binary search
	 * to find the end date to determine the increment.
	 *
	 * @param {array}  groupIds
	 * @param {object} groupsData
	 * @param {date}   minDate
	 * @param {date}   maxDate
	 * @private
	 */
	LineGraph.prototype._getRelevantData = function (groupIds, groupsData, minDate, maxDate) {
	  var group, i, j, item;
	  if (groupIds.length > 0) {
	    for (i = 0; i < groupIds.length; i++) {
	      group = this.groups[groupIds[i]];
	      var itemsData = group.getItems();
	      // optimization for sorted data
	      if (group.options.sort == true) {
	        var dateComparator = function dateComparator(a, b) {
	          return a.getTime() == b.getTime() ? 0 : a < b ? -1 : 1;
	        };
	        var first = Math.max(0, util.binarySearchValue(itemsData, minDate, 'x', 'before', dateComparator));
	        var last = Math.min(itemsData.length, util.binarySearchValue(itemsData, maxDate, 'x', 'after', dateComparator) + 1);
	        if (last <= 0) {
	          last = itemsData.length;
	        }
	        var dataContainer = new Array(last - first);
	        for (j = first; j < last; j++) {
	          item = group.itemsData[j];
	          dataContainer[j - first] = item;
	        }
	        groupsData[groupIds[i]] = dataContainer;
	      } else {
	        // If unsorted data, all data is relevant, just returning entire structure
	        groupsData[groupIds[i]] = group.itemsData;
	      }
	    }
	  }
	};

	/**
	 *
	 * @param {Array.<vis.GraphGroup.id>} groupIds
	 * @param {vis.DataSet} groupsData
	 * @private
	 */
	LineGraph.prototype._applySampling = function (groupIds, groupsData) {
	  var group;
	  if (groupIds.length > 0) {
	    for (var i = 0; i < groupIds.length; i++) {
	      group = this.groups[groupIds[i]];
	      if (group.options.sampling == true) {
	        var dataContainer = groupsData[groupIds[i]];
	        if (dataContainer.length > 0) {
	          var increment = 1;
	          var amountOfPoints = dataContainer.length;

	          // the global screen is used because changing the width of the yAxis may affect the increment, resulting in an endless loop
	          // of width changing of the yAxis.
	          //TODO: This assumes sorted data, but that's not guaranteed!
	          var xDistance = this.body.util.toGlobalScreen(dataContainer[dataContainer.length - 1].x) - this.body.util.toGlobalScreen(dataContainer[0].x);
	          var pointsPerPixel = amountOfPoints / xDistance;
	          increment = Math.min(Math.ceil(0.2 * amountOfPoints), Math.max(1, Math.round(pointsPerPixel)));

	          var sampledData = new Array(amountOfPoints);
	          for (var j = 0; j < amountOfPoints; j += increment) {
	            var idx = Math.round(j / increment);
	            sampledData[idx] = dataContainer[j];
	          }
	          groupsData[groupIds[i]] = sampledData.splice(0, Math.round(amountOfPoints / increment));
	        }
	      }
	    }
	  }
	};

	/**
	 *
	 * @param {Array.<vis.GraphGroup.id>} groupIds
	 * @param {vis.DataSet} groupsData
	 * @param {object} groupRanges  | this is being filled here
	 * @private
	 */
	LineGraph.prototype._getYRanges = function (groupIds, groupsData, groupRanges) {
	  var groupData, group, i;
	  var combinedDataLeft = [];
	  var combinedDataRight = [];
	  var options;
	  if (groupIds.length > 0) {
	    for (i = 0; i < groupIds.length; i++) {
	      groupData = groupsData[groupIds[i]];
	      options = this.groups[groupIds[i]].options;
	      if (groupData.length > 0) {
	        group = this.groups[groupIds[i]];
	        // if bar graphs are stacked, their range need to be handled differently and accumulated over all groups.
	        if (options.stack === true && options.style === 'bar') {
	          if (options.yAxisOrientation === 'left') {
	            combinedDataLeft = combinedDataLeft.concat(groupData);
	          } else {
	            combinedDataRight = combinedDataRight.concat(groupData);
	          }
	        } else {
	          groupRanges[groupIds[i]] = group.getYRange(groupData, groupIds[i]);
	        }
	      }
	    }

	    // if bar graphs are stacked, their range need to be handled differently and accumulated over all groups.
	    Bars.getStackedYRange(combinedDataLeft, groupRanges, groupIds, '__barStackLeft', 'left');
	    Bars.getStackedYRange(combinedDataRight, groupRanges, groupIds, '__barStackRight', 'right');
	  }
	};

	/**
	 * this sets the Y ranges for the Y axis. It also determines which of the axis should be shown or hidden.
	 * @param {Array.<vis.GraphGroup.id>} groupIds
	 * @param {Object} groupRanges
	 * @returns {boolean} resized
	 * @private
	 */
	LineGraph.prototype._updateYAxis = function (groupIds, groupRanges) {
	  var resized = false;
	  var yAxisLeftUsed = false;
	  var yAxisRightUsed = false;
	  var minLeft = 1e9,
	      minRight = 1e9,
	      maxLeft = -1e9,
	      maxRight = -1e9,
	      minVal,
	      maxVal;
	  // if groups are present
	  if (groupIds.length > 0) {
	    // this is here to make sure that if there are no items in the axis but there are groups, that there is no infinite draw/redraw loop.
	    for (var i = 0; i < groupIds.length; i++) {
	      var group = this.groups[groupIds[i]];
	      if (group && group.options.yAxisOrientation != 'right') {
	        yAxisLeftUsed = true;
	        minLeft = 1e9;
	        maxLeft = -1e9;
	      } else if (group && group.options.yAxisOrientation) {
	        yAxisRightUsed = true;
	        minRight = 1e9;
	        maxRight = -1e9;
	      }
	    }

	    // if there are items:
	    for (i = 0; i < groupIds.length; i++) {
	      if (groupRanges.hasOwnProperty(groupIds[i])) {
	        if (groupRanges[groupIds[i]].ignore !== true) {
	          minVal = groupRanges[groupIds[i]].min;
	          maxVal = groupRanges[groupIds[i]].max;

	          if (groupRanges[groupIds[i]].yAxisOrientation != 'right') {
	            yAxisLeftUsed = true;
	            minLeft = minLeft > minVal ? minVal : minLeft;
	            maxLeft = maxLeft < maxVal ? maxVal : maxLeft;
	          } else {
	            yAxisRightUsed = true;
	            minRight = minRight > minVal ? minVal : minRight;
	            maxRight = maxRight < maxVal ? maxVal : maxRight;
	          }
	        }
	      }
	    }

	    if (yAxisLeftUsed == true) {
	      this.yAxisLeft.setRange(minLeft, maxLeft);
	    }
	    if (yAxisRightUsed == true) {
	      this.yAxisRight.setRange(minRight, maxRight);
	    }
	  }
	  resized = this._toggleAxisVisiblity(yAxisLeftUsed, this.yAxisLeft) || resized;
	  resized = this._toggleAxisVisiblity(yAxisRightUsed, this.yAxisRight) || resized;

	  if (yAxisRightUsed == true && yAxisLeftUsed == true) {
	    this.yAxisLeft.drawIcons = true;
	    this.yAxisRight.drawIcons = true;
	  } else {
	    this.yAxisLeft.drawIcons = false;
	    this.yAxisRight.drawIcons = false;
	  }
	  this.yAxisRight.master = !yAxisLeftUsed;
	  this.yAxisRight.masterAxis = this.yAxisLeft;

	  if (this.yAxisRight.master == false) {
	    if (yAxisRightUsed == true) {
	      this.yAxisLeft.lineOffset = this.yAxisRight.width;
	    } else {
	      this.yAxisLeft.lineOffset = 0;
	    }

	    resized = this.yAxisLeft.redraw() || resized;
	    resized = this.yAxisRight.redraw() || resized;
	  } else {
	    resized = this.yAxisRight.redraw() || resized;
	  }

	  // clean the accumulated lists
	  var tempGroups = ['__barStackLeft', '__barStackRight', '__lineStackLeft', '__lineStackRight'];
	  for (i = 0; i < tempGroups.length; i++) {
	    if (groupIds.indexOf(tempGroups[i]) != -1) {
	      groupIds.splice(groupIds.indexOf(tempGroups[i]), 1);
	    }
	  }

	  return resized;
	};

	/**
	 * This shows or hides the Y axis if needed. If there is a change, the changed event is emitted by the updateYAxis function
	 *
	 * @param {boolean} axisUsed
	 * @param {vis.DataAxis}  axis
	 * @returns {boolean}
	 * @private
	 */
	LineGraph.prototype._toggleAxisVisiblity = function (axisUsed, axis) {
	  var changed = false;
	  if (axisUsed == false) {
	    if (axis.dom.frame.parentNode && axis.hidden == false) {
	      axis.hide();
	      changed = true;
	    }
	  } else {
	    if (!axis.dom.frame.parentNode && axis.hidden == true) {
	      axis.show();
	      changed = true;
	    }
	  }
	  return changed;
	};

	/**
	 * This uses the DataAxis object to generate the correct X coordinate on the SVG window. It uses the
	 * util function toScreen to get the x coordinate from the timestamp. It also pre-filters the data and get the minMax ranges for
	 * the yAxis.
	 *
	 * @param {Array.<Object>} datapoints
	 * @private
	 */
	LineGraph.prototype._convertXcoordinates = function (datapoints) {
	  var toScreen = this.body.util.toScreen;
	  for (var i = 0; i < datapoints.length; i++) {
	    datapoints[i].screen_x = toScreen(datapoints[i].x) + this.props.width;
	    datapoints[i].screen_y = datapoints[i].y; //starting point for range calculations
	    if (datapoints[i].end != undefined) {
	      datapoints[i].screen_end = toScreen(datapoints[i].end) + this.props.width;
	    } else {
	      datapoints[i].screen_end = undefined;
	    }
	  }
	};

	/**
	 * This uses the DataAxis object to generate the correct X coordinate on the SVG window. It uses the
	 * util function toScreen to get the x coordinate from the timestamp. It also pre-filters the data and get the minMax ranges for
	 * the yAxis.
	 *
	 * @param {Array.<Object>} datapoints
	 * @param {vis.GraphGroup} group
	 * @private
	 */
	LineGraph.prototype._convertYcoordinates = function (datapoints, group) {
	  var axis = this.yAxisLeft;
	  var svgHeight = Number(this.svg.style.height.replace('px', ''));
	  if (group.options.yAxisOrientation == 'right') {
	    axis = this.yAxisRight;
	  }
	  for (var i = 0; i < datapoints.length; i++) {
	    datapoints[i].screen_y = Math.round(axis.convertValue(datapoints[i].y));
	  }
	  group.setZeroPosition(Math.min(svgHeight, axis.convertValue(0)));
	};

	module.exports = LineGraph;

	/***/ }),
	/* 107 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _keys = __webpack_require__(8);

	var _keys2 = _interopRequireDefault(_keys);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);
	var DOMutil = __webpack_require__(14);
	var Component = __webpack_require__(16);
	var DataScale = __webpack_require__(108);
	/**
	 * A horizontal time axis
	 * @param {Object} body
	 * @param {Object} [options]        See DataAxis.setOptions for the available
	 *                                  options.
	 * @param {SVGElement} svg
	 * @param {vis.LineGraph.options} linegraphOptions
	 * @constructor DataAxis
	 * @extends Component
	 */
	function DataAxis(body, options, svg, linegraphOptions) {
	  this.id = util.randomUUID();
	  this.body = body;

	  this.defaultOptions = {
	    orientation: 'left', // supported: 'left', 'right'
	    showMinorLabels: true,
	    showMajorLabels: true,
	    icons: false,
	    majorLinesOffset: 7,
	    minorLinesOffset: 4,
	    labelOffsetX: 10,
	    labelOffsetY: 2,
	    iconWidth: 20,
	    width: '40px',
	    visible: true,
	    alignZeros: true,
	    left: {
	      range: { min: undefined, max: undefined },
	      format: function format(value) {
	        return '' + parseFloat(value.toPrecision(3));
	      },
	      title: { text: undefined, style: undefined }
	    },
	    right: {
	      range: { min: undefined, max: undefined },
	      format: function format(value) {
	        return '' + parseFloat(value.toPrecision(3));
	      },
	      title: { text: undefined, style: undefined }
	    }
	  };

	  this.linegraphOptions = linegraphOptions;
	  this.linegraphSVG = svg;
	  this.props = {};
	  this.DOMelements = { // dynamic elements
	    lines: {},
	    labels: {},
	    title: {}
	  };

	  this.dom = {};
	  this.scale = undefined;
	  this.range = { start: 0, end: 0 };

	  this.options = util.extend({}, this.defaultOptions);
	  this.conversionFactor = 1;

	  this.setOptions(options);
	  this.width = Number(('' + this.options.width).replace("px", ""));
	  this.minWidth = this.width;
	  this.height = this.linegraphSVG.getBoundingClientRect().height;
	  this.hidden = false;

	  this.stepPixels = 25;
	  this.zeroCrossing = -1;
	  this.amountOfSteps = -1;

	  this.lineOffset = 0;
	  this.master = true;
	  this.masterAxis = null;
	  this.svgElements = {};
	  this.iconsRemoved = false;

	  this.groups = {};
	  this.amountOfGroups = 0;

	  // create the HTML DOM
	  this._create();
	  this.framework = { svg: this.svg, svgElements: this.svgElements, options: this.options, groups: this.groups };

	  var me = this;
	  this.body.emitter.on("verticalDrag", function () {
	    me.dom.lineContainer.style.top = me.body.domProps.scrollTop + 'px';
	  });
	}

	DataAxis.prototype = new Component();

	DataAxis.prototype.addGroup = function (label, graphOptions) {
	  if (!this.groups.hasOwnProperty(label)) {
	    this.groups[label] = graphOptions;
	  }
	  this.amountOfGroups += 1;
	};

	DataAxis.prototype.updateGroup = function (label, graphOptions) {
	  if (!this.groups.hasOwnProperty(label)) {
	    this.amountOfGroups += 1;
	  }
	  this.groups[label] = graphOptions;
	};

	DataAxis.prototype.removeGroup = function (label) {
	  if (this.groups.hasOwnProperty(label)) {
	    delete this.groups[label];
	    this.amountOfGroups -= 1;
	  }
	};

	DataAxis.prototype.setOptions = function (options) {
	  if (options) {
	    var redraw = false;
	    if (this.options.orientation != options.orientation && options.orientation !== undefined) {
	      redraw = true;
	    }
	    var fields = ['orientation', 'showMinorLabels', 'showMajorLabels', 'icons', 'majorLinesOffset', 'minorLinesOffset', 'labelOffsetX', 'labelOffsetY', 'iconWidth', 'width', 'visible', 'left', 'right', 'alignZeros'];
	    util.selectiveDeepExtend(fields, this.options, options);

	    this.minWidth = Number(('' + this.options.width).replace("px", ""));
	    if (redraw === true && this.dom.frame) {
	      this.hide();
	      this.show();
	    }
	  }
	};

	/**
	 * Create the HTML DOM for the DataAxis
	 */
	DataAxis.prototype._create = function () {
	  this.dom.frame = document.createElement('div');
	  this.dom.frame.style.width = this.options.width;
	  this.dom.frame.style.height = this.height;

	  this.dom.lineContainer = document.createElement('div');
	  this.dom.lineContainer.style.width = '100%';
	  this.dom.lineContainer.style.height = this.height;
	  this.dom.lineContainer.style.position = 'relative';

	  // create svg element for graph drawing.
	  this.svg = document.createElementNS('http://www.w3.org/2000/svg', "svg");
	  this.svg.style.position = "absolute";
	  this.svg.style.top = '0px';
	  this.svg.style.height = '100%';
	  this.svg.style.width = '100%';
	  this.svg.style.display = "block";
	  this.dom.frame.appendChild(this.svg);
	};

	DataAxis.prototype._redrawGroupIcons = function () {
	  DOMutil.prepareElements(this.svgElements);

	  var x;
	  var iconWidth = this.options.iconWidth;
	  var iconHeight = 15;
	  var iconOffset = 4;
	  var y = iconOffset + 0.5 * iconHeight;

	  if (this.options.orientation === 'left') {
	    x = iconOffset;
	  } else {
	    x = this.width - iconWidth - iconOffset;
	  }

	  var groupArray = (0, _keys2['default'])(this.groups);
	  groupArray.sort(function (a, b) {
	    return a < b ? -1 : 1;
	  });

	  for (var i = 0; i < groupArray.length; i++) {
	    var groupId = groupArray[i];
	    if (this.groups[groupId].visible === true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] === true)) {
	      this.groups[groupId].getLegend(iconWidth, iconHeight, this.framework, x, y);
	      y += iconHeight + iconOffset;
	    }
	  }

	  DOMutil.cleanupElements(this.svgElements);
	  this.iconsRemoved = false;
	};

	DataAxis.prototype._cleanupIcons = function () {
	  if (this.iconsRemoved === false) {
	    DOMutil.prepareElements(this.svgElements);
	    DOMutil.cleanupElements(this.svgElements);
	    this.iconsRemoved = true;
	  }
	};

	/**
	 * Create the HTML DOM for the DataAxis
	 */
	DataAxis.prototype.show = function () {
	  this.hidden = false;
	  if (!this.dom.frame.parentNode) {
	    if (this.options.orientation === 'left') {
	      this.body.dom.left.appendChild(this.dom.frame);
	    } else {
	      this.body.dom.right.appendChild(this.dom.frame);
	    }
	  }

	  if (!this.dom.lineContainer.parentNode) {
	    this.body.dom.backgroundHorizontal.appendChild(this.dom.lineContainer);
	  }
	};

	/**
	 * Create the HTML DOM for the DataAxis
	 */
	DataAxis.prototype.hide = function () {
	  this.hidden = true;
	  if (this.dom.frame.parentNode) {
	    this.dom.frame.parentNode.removeChild(this.dom.frame);
	  }

	  if (this.dom.lineContainer.parentNode) {
	    this.dom.lineContainer.parentNode.removeChild(this.dom.lineContainer);
	  }
	};

	/**
	 * Set a range (start and end)
	 * @param {number} start
	 * @param {number} end
	 */
	DataAxis.prototype.setRange = function (start, end) {
	  this.range.start = start;
	  this.range.end = end;
	};

	/**
	 * Repaint the component
	 * @return {boolean} Returns true if the component is resized
	 */
	DataAxis.prototype.redraw = function () {
	  var resized = false;
	  var activeGroups = 0;

	  // Make sure the line container adheres to the vertical scrolling.
	  this.dom.lineContainer.style.top = this.body.domProps.scrollTop + 'px';

	  for (var groupId in this.groups) {
	    if (this.groups.hasOwnProperty(groupId)) {
	      if (this.groups[groupId].visible === true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] === true)) {
	        activeGroups++;
	      }
	    }
	  }
	  if (this.amountOfGroups === 0 || activeGroups === 0) {
	    this.hide();
	  } else {
	    this.show();
	    this.height = Number(this.linegraphSVG.style.height.replace("px", ""));

	    // svg offsetheight did not work in firefox and explorer...
	    this.dom.lineContainer.style.height = this.height + 'px';
	    this.width = this.options.visible === true ? Number(('' + this.options.width).replace("px", "")) : 0;

	    var props = this.props;
	    var frame = this.dom.frame;

	    // update classname
	    frame.className = 'vis-data-axis';

	    // calculate character width and height
	    this._calculateCharSize();

	    var orientation = this.options.orientation;
	    var showMinorLabels = this.options.showMinorLabels;
	    var showMajorLabels = this.options.showMajorLabels;

	    // determine the width and height of the elements for the axis
	    props.minorLabelHeight = showMinorLabels ? props.minorCharHeight : 0;
	    props.majorLabelHeight = showMajorLabels ? props.majorCharHeight : 0;

	    props.minorLineWidth = this.body.dom.backgroundHorizontal.offsetWidth - this.lineOffset - this.width + 2 * this.options.minorLinesOffset;
	    props.minorLineHeight = 1;
	    props.majorLineWidth = this.body.dom.backgroundHorizontal.offsetWidth - this.lineOffset - this.width + 2 * this.options.majorLinesOffset;
	    props.majorLineHeight = 1;

	    //  take frame offline while updating (is almost twice as fast)
	    if (orientation === 'left') {
	      frame.style.top = '0';
	      frame.style.left = '0';
	      frame.style.bottom = '';
	      frame.style.width = this.width + 'px';
	      frame.style.height = this.height + "px";
	      this.props.width = this.body.domProps.left.width;
	      this.props.height = this.body.domProps.left.height;
	    } else {
	      // right
	      frame.style.top = '';
	      frame.style.bottom = '0';
	      frame.style.left = '0';
	      frame.style.width = this.width + 'px';
	      frame.style.height = this.height + "px";
	      this.props.width = this.body.domProps.right.width;
	      this.props.height = this.body.domProps.right.height;
	    }

	    resized = this._redrawLabels();
	    resized = this._isResized() || resized;

	    if (this.options.icons === true) {
	      this._redrawGroupIcons();
	    } else {
	      this._cleanupIcons();
	    }

	    this._redrawTitle(orientation);
	  }
	  return resized;
	};

	/**
	 * Repaint major and minor text labels and vertical grid lines
	 *
	 * @returns {boolean}
	 * @private
	 */
	DataAxis.prototype._redrawLabels = function () {
	  var _this = this;

	  var resized = false;
	  DOMutil.prepareElements(this.DOMelements.lines);
	  DOMutil.prepareElements(this.DOMelements.labels);
	  var orientation = this.options['orientation'];
	  var customRange = this.options[orientation].range != undefined ? this.options[orientation].range : {};

	  //Override range with manual options:
	  var autoScaleEnd = true;
	  if (customRange.max != undefined) {
	    this.range.end = customRange.max;
	    autoScaleEnd = false;
	  }
	  var autoScaleStart = true;
	  if (customRange.min != undefined) {
	    this.range.start = customRange.min;
	    autoScaleStart = false;
	  }

	  this.scale = new DataScale(this.range.start, this.range.end, autoScaleStart, autoScaleEnd, this.dom.frame.offsetHeight, this.props.majorCharHeight, this.options.alignZeros, this.options[orientation].format);

	  if (this.master === false && this.masterAxis != undefined) {
	    this.scale.followScale(this.masterAxis.scale);
	  }

	  //Is updated in side-effect of _redrawLabel():
	  this.maxLabelSize = 0;

	  var lines = this.scale.getLines();
	  lines.forEach(function (line) {
	    var y = line.y;
	    var isMajor = line.major;
	    if (_this.options['showMinorLabels'] && isMajor === false) {
	      _this._redrawLabel(y - 2, line.val, orientation, 'vis-y-axis vis-minor', _this.props.minorCharHeight);
	    }
	    if (isMajor) {
	      if (y >= 0) {
	        _this._redrawLabel(y - 2, line.val, orientation, 'vis-y-axis vis-major', _this.props.majorCharHeight);
	      }
	    }
	    if (_this.master === true) {
	      if (isMajor) {
	        _this._redrawLine(y, orientation, 'vis-grid vis-horizontal vis-major', _this.options.majorLinesOffset, _this.props.majorLineWidth);
	      } else {
	        _this._redrawLine(y, orientation, 'vis-grid vis-horizontal vis-minor', _this.options.minorLinesOffset, _this.props.minorLineWidth);
	      }
	    }
	  });

	  // Note that title is rotated, so we're using the height, not width!
	  var titleWidth = 0;
	  if (this.options[orientation].title !== undefined && this.options[orientation].title.text !== undefined) {
	    titleWidth = this.props.titleCharHeight;
	  }
	  var offset = this.options.icons === true ? Math.max(this.options.iconWidth, titleWidth) + this.options.labelOffsetX + 15 : titleWidth + this.options.labelOffsetX + 15;

	  // this will resize the yAxis to accommodate the labels.
	  if (this.maxLabelSize > this.width - offset && this.options.visible === true) {
	    this.width = this.maxLabelSize + offset;
	    this.options.width = this.width + "px";
	    DOMutil.cleanupElements(this.DOMelements.lines);
	    DOMutil.cleanupElements(this.DOMelements.labels);
	    this.redraw();
	    resized = true;
	  }
	  // this will resize the yAxis if it is too big for the labels.
	  else if (this.maxLabelSize < this.width - offset && this.options.visible === true && this.width > this.minWidth) {
	      this.width = Math.max(this.minWidth, this.maxLabelSize + offset);
	      this.options.width = this.width + "px";
	      DOMutil.cleanupElements(this.DOMelements.lines);
	      DOMutil.cleanupElements(this.DOMelements.labels);
	      this.redraw();
	      resized = true;
	    } else {
	      DOMutil.cleanupElements(this.DOMelements.lines);
	      DOMutil.cleanupElements(this.DOMelements.labels);
	      resized = false;
	    }

	  return resized;
	};

	DataAxis.prototype.convertValue = function (value) {
	  return this.scale.convertValue(value);
	};

	DataAxis.prototype.screenToValue = function (x) {
	  return this.scale.screenToValue(x);
	};

	/**
	 * Create a label for the axis at position x
	 *
	 * @param {number} y
	 * @param {string} text
	 * @param {'top'|'right'|'bottom'|'left'} orientation
	 * @param {string} className
	 * @param {number} characterHeight
	 * @private
	 */
	DataAxis.prototype._redrawLabel = function (y, text, orientation, className, characterHeight) {
	  // reuse redundant label
	  var label = DOMutil.getDOMElement('div', this.DOMelements.labels, this.dom.frame); //this.dom.redundant.labels.shift();
	  label.className = className;
	  label.innerHTML = text;
	  if (orientation === 'left') {
	    label.style.left = '-' + this.options.labelOffsetX + 'px';
	    label.style.textAlign = "right";
	  } else {
	    label.style.right = '-' + this.options.labelOffsetX + 'px';
	    label.style.textAlign = "left";
	  }

	  label.style.top = y - 0.5 * characterHeight + this.options.labelOffsetY + 'px';

	  text += '';

	  var largestWidth = Math.max(this.props.majorCharWidth, this.props.minorCharWidth);
	  if (this.maxLabelSize < text.length * largestWidth) {
	    this.maxLabelSize = text.length * largestWidth;
	  }
	};

	/**
	 * Create a minor line for the axis at position y
	 * @param {number} y
	 * @param {'top'|'right'|'bottom'|'left'} orientation
	 * @param {string} className
	 * @param {number} offset
	 * @param {number} width
	 */
	DataAxis.prototype._redrawLine = function (y, orientation, className, offset, width) {
	  if (this.master === true) {
	    var line = DOMutil.getDOMElement('div', this.DOMelements.lines, this.dom.lineContainer); //this.dom.redundant.lines.shift();
	    line.className = className;
	    line.innerHTML = '';

	    if (orientation === 'left') {
	      line.style.left = this.width - offset + 'px';
	    } else {
	      line.style.right = this.width - offset + 'px';
	    }

	    line.style.width = width + 'px';
	    line.style.top = y + 'px';
	  }
	};

	/**
	 * Create a title for the axis
	 * @private
	 * @param {'top'|'right'|'bottom'|'left'} orientation
	 */
	DataAxis.prototype._redrawTitle = function (orientation) {
	  DOMutil.prepareElements(this.DOMelements.title);

	  // Check if the title is defined for this axes
	  if (this.options[orientation].title !== undefined && this.options[orientation].title.text !== undefined) {
	    var title = DOMutil.getDOMElement('div', this.DOMelements.title, this.dom.frame);
	    title.className = 'vis-y-axis vis-title vis-' + orientation;
	    title.innerHTML = this.options[orientation].title.text;

	    // Add style - if provided
	    if (this.options[orientation].title.style !== undefined) {
	      util.addCssText(title, this.options[orientation].title.style);
	    }

	    if (orientation === 'left') {
	      title.style.left = this.props.titleCharHeight + 'px';
	    } else {
	      title.style.right = this.props.titleCharHeight + 'px';
	    }

	    title.style.width = this.height + 'px';
	  }

	  // we need to clean up in case we did not use all elements.
	  DOMutil.cleanupElements(this.DOMelements.title);
	};

	/**
	 * Determine the size of text on the axis (both major and minor axis).
	 * The size is calculated only once and then cached in this.props.
	 * @private
	 */
	DataAxis.prototype._calculateCharSize = function () {
	  // determine the char width and height on the minor axis
	  if (!('minorCharHeight' in this.props)) {
	    var textMinor = document.createTextNode('0');
	    var measureCharMinor = document.createElement('div');
	    measureCharMinor.className = 'vis-y-axis vis-minor vis-measure';
	    measureCharMinor.appendChild(textMinor);
	    this.dom.frame.appendChild(measureCharMinor);

	    this.props.minorCharHeight = measureCharMinor.clientHeight;
	    this.props.minorCharWidth = measureCharMinor.clientWidth;

	    this.dom.frame.removeChild(measureCharMinor);
	  }

	  if (!('majorCharHeight' in this.props)) {
	    var textMajor = document.createTextNode('0');
	    var measureCharMajor = document.createElement('div');
	    measureCharMajor.className = 'vis-y-axis vis-major vis-measure';
	    measureCharMajor.appendChild(textMajor);
	    this.dom.frame.appendChild(measureCharMajor);

	    this.props.majorCharHeight = measureCharMajor.clientHeight;
	    this.props.majorCharWidth = measureCharMajor.clientWidth;

	    this.dom.frame.removeChild(measureCharMajor);
	  }

	  if (!('titleCharHeight' in this.props)) {
	    var textTitle = document.createTextNode('0');
	    var measureCharTitle = document.createElement('div');
	    measureCharTitle.className = 'vis-y-axis vis-title vis-measure';
	    measureCharTitle.appendChild(textTitle);
	    this.dom.frame.appendChild(measureCharTitle);

	    this.props.titleCharHeight = measureCharTitle.clientHeight;
	    this.props.titleCharWidth = measureCharTitle.clientWidth;

	    this.dom.frame.removeChild(measureCharTitle);
	  }
	};

	module.exports = DataAxis;

	/***/ }),
	/* 108 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/**
	 *
	 * @param {number} start
	 * @param {number} end
	 * @param {boolean} autoScaleStart
	 * @param {boolean} autoScaleEnd
	 * @param {number} containerHeight
	 * @param {number} majorCharHeight
	 * @param {boolean} zeroAlign
	 * @param {function} formattingFunction
	 * @constructor DataScale
	 */
	function DataScale(start, end, autoScaleStart, autoScaleEnd, containerHeight, majorCharHeight) {
	  var zeroAlign = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
	  var formattingFunction = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;

	  this.majorSteps = [1, 2, 5, 10];
	  this.minorSteps = [0.25, 0.5, 1, 2];
	  this.customLines = null;

	  this.containerHeight = containerHeight;
	  this.majorCharHeight = majorCharHeight;
	  this._start = start;
	  this._end = end;

	  this.scale = 1;
	  this.minorStepIdx = -1;
	  this.magnitudefactor = 1;
	  this.determineScale();

	  this.zeroAlign = zeroAlign;
	  this.autoScaleStart = autoScaleStart;
	  this.autoScaleEnd = autoScaleEnd;

	  this.formattingFunction = formattingFunction;

	  if (autoScaleStart || autoScaleEnd) {
	    var me = this;
	    var roundToMinor = function roundToMinor(value) {
	      var rounded = value - value % (me.magnitudefactor * me.minorSteps[me.minorStepIdx]);
	      if (value % (me.magnitudefactor * me.minorSteps[me.minorStepIdx]) > 0.5 * (me.magnitudefactor * me.minorSteps[me.minorStepIdx])) {
	        return rounded + me.magnitudefactor * me.minorSteps[me.minorStepIdx];
	      } else {
	        return rounded;
	      }
	    };
	    if (autoScaleStart) {
	      this._start -= this.magnitudefactor * 2 * this.minorSteps[this.minorStepIdx];
	      this._start = roundToMinor(this._start);
	    }

	    if (autoScaleEnd) {
	      this._end += this.magnitudefactor * this.minorSteps[this.minorStepIdx];
	      this._end = roundToMinor(this._end);
	    }
	    this.determineScale();
	  }
	}

	DataScale.prototype.setCharHeight = function (majorCharHeight) {
	  this.majorCharHeight = majorCharHeight;
	};

	DataScale.prototype.setHeight = function (containerHeight) {
	  this.containerHeight = containerHeight;
	};

	DataScale.prototype.determineScale = function () {
	  var range = this._end - this._start;
	  this.scale = this.containerHeight / range;
	  var minimumStepValue = this.majorCharHeight / this.scale;
	  var orderOfMagnitude = range > 0 ? Math.round(Math.log(range) / Math.LN10) : 0;

	  this.minorStepIdx = -1;
	  this.magnitudefactor = Math.pow(10, orderOfMagnitude);

	  var start = 0;
	  if (orderOfMagnitude < 0) {
	    start = orderOfMagnitude;
	  }

	  var solutionFound = false;
	  for (var l = start; Math.abs(l) <= Math.abs(orderOfMagnitude); l++) {
	    this.magnitudefactor = Math.pow(10, l);
	    for (var j = 0; j < this.minorSteps.length; j++) {
	      var stepSize = this.magnitudefactor * this.minorSteps[j];
	      if (stepSize >= minimumStepValue) {
	        solutionFound = true;
	        this.minorStepIdx = j;
	        break;
	      }
	    }
	    if (solutionFound === true) {
	      break;
	    }
	  }
	};

	DataScale.prototype.is_major = function (value) {
	  return value % (this.magnitudefactor * this.majorSteps[this.minorStepIdx]) === 0;
	};

	DataScale.prototype.getStep = function () {
	  return this.magnitudefactor * this.minorSteps[this.minorStepIdx];
	};

	DataScale.prototype.getFirstMajor = function () {
	  var majorStep = this.magnitudefactor * this.majorSteps[this.minorStepIdx];
	  return this.convertValue(this._start + (majorStep - this._start % majorStep) % majorStep);
	};

	DataScale.prototype.formatValue = function (current) {
	  var returnValue = current.toPrecision(5);
	  if (typeof this.formattingFunction === 'function') {
	    returnValue = this.formattingFunction(current);
	  }

	  if (typeof returnValue === 'number') {
	    return '' + returnValue;
	  } else if (typeof returnValue === 'string') {
	    return returnValue;
	  } else {
	    return current.toPrecision(5);
	  }
	};

	DataScale.prototype.getLines = function () {
	  var lines = [];
	  var step = this.getStep();
	  var bottomOffset = (step - this._start % step) % step;
	  for (var i = this._start + bottomOffset; this._end - i > 0.00001; i += step) {
	    if (i != this._start) {
	      //Skip the bottom line
	      lines.push({ major: this.is_major(i), y: this.convertValue(i), val: this.formatValue(i) });
	    }
	  }
	  return lines;
	};

	DataScale.prototype.followScale = function (other) {
	  var oldStepIdx = this.minorStepIdx;
	  var oldStart = this._start;
	  var oldEnd = this._end;

	  var me = this;
	  var increaseMagnitude = function increaseMagnitude() {
	    me.magnitudefactor *= 2;
	  };
	  var decreaseMagnitude = function decreaseMagnitude() {
	    me.magnitudefactor /= 2;
	  };

	  if (other.minorStepIdx <= 1 && this.minorStepIdx <= 1 || other.minorStepIdx > 1 && this.minorStepIdx > 1) {
	    //easy, no need to change stepIdx nor multiplication factor
	  } else if (other.minorStepIdx < this.minorStepIdx) {
	    //I'm 5, they are 4 per major.
	    this.minorStepIdx = 1;
	    if (oldStepIdx == 2) {
	      increaseMagnitude();
	    } else {
	      increaseMagnitude();
	      increaseMagnitude();
	    }
	  } else {
	    //I'm 4, they are 5 per major
	    this.minorStepIdx = 2;
	    if (oldStepIdx == 1) {
	      decreaseMagnitude();
	    } else {
	      decreaseMagnitude();
	      decreaseMagnitude();
	    }
	  }

	  //Get masters stats:
	  var otherZero = other.convertValue(0);
	  var otherStep = other.getStep() * other.scale;

	  var done = false;
	  var count = 0;
	  //Loop until magnitude is correct for given constrains.
	  while (!done && count++ < 5) {

	    //Get my stats:
	    this.scale = otherStep / (this.minorSteps[this.minorStepIdx] * this.magnitudefactor);
	    var newRange = this.containerHeight / this.scale;

	    //For the case the magnitudefactor has changed:
	    this._start = oldStart;
	    this._end = this._start + newRange;

	    var myOriginalZero = this._end * this.scale;
	    var majorStep = this.magnitudefactor * this.majorSteps[this.minorStepIdx];
	    var majorOffset = this.getFirstMajor() - other.getFirstMajor();

	    if (this.zeroAlign) {
	      var zeroOffset = otherZero - myOriginalZero;
	      this._end += zeroOffset / this.scale;
	      this._start = this._end - newRange;
	    } else {
	      if (!this.autoScaleStart) {
	        this._start += majorStep - majorOffset / this.scale;
	        this._end = this._start + newRange;
	      } else {
	        this._start -= majorOffset / this.scale;
	        this._end = this._start + newRange;
	      }
	    }
	    if (!this.autoScaleEnd && this._end > oldEnd + 0.00001) {
	      //Need to decrease magnitude to prevent scale overshoot! (end)
	      decreaseMagnitude();
	      done = false;
	      continue;
	    }
	    if (!this.autoScaleStart && this._start < oldStart - 0.00001) {
	      if (this.zeroAlign && oldStart >= 0) {
	        console.warn("Can't adhere to given 'min' range, due to zeroalign");
	      } else {
	        //Need to decrease magnitude to prevent scale overshoot! (start)
	        decreaseMagnitude();
	        done = false;
	        continue;
	      }
	    }
	    if (this.autoScaleStart && this.autoScaleEnd && newRange < oldEnd - oldStart) {
	      increaseMagnitude();
	      done = false;
	      continue;
	    }
	    done = true;
	  }
	};

	DataScale.prototype.convertValue = function (value) {
	  return this.containerHeight - (value - this._start) * this.scale;
	};

	DataScale.prototype.screenToValue = function (pixels) {
	  return (this.containerHeight - pixels) / this.scale + this._start;
	};

	module.exports = DataScale;

	/***/ }),
	/* 109 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);
	var Bars = __webpack_require__(110);
	var Lines = __webpack_require__(111);
	var Points = __webpack_require__(72);

	/**
	 * /**
	 * @param {object} group            | the object of the group from the dataset
	 * @param {string} groupId          | ID of the group
	 * @param {object} options          | the default options
	 * @param {array} groupsUsingDefaultStyles  | this array has one entree.
	 *                                            It is passed as an array so it is passed by reference.
	 *                                            It enumerates through the default styles
	 * @constructor GraphGroup
	 */
	function GraphGroup(group, groupId, options, groupsUsingDefaultStyles) {
	  this.id = groupId;
	  var fields = ['sampling', 'style', 'sort', 'yAxisOrientation', 'barChart', 'drawPoints', 'shaded', 'interpolation', 'zIndex', 'excludeFromStacking', 'excludeFromLegend'];
	  this.options = util.selectiveBridgeObject(fields, options);
	  this.usingDefaultStyle = group.className === undefined;
	  this.groupsUsingDefaultStyles = groupsUsingDefaultStyles;
	  this.zeroPosition = 0;
	  this.update(group);
	  if (this.usingDefaultStyle == true) {
	    this.groupsUsingDefaultStyles[0] += 1;
	  }
	  this.itemsData = [];
	  this.visible = group.visible === undefined ? true : group.visible;
	}

	/**
	 * this loads a reference to all items in this group into this group.
	 * @param {array} items
	 */
	GraphGroup.prototype.setItems = function (items) {
	  if (items != null) {
	    this.itemsData = items;
	    if (this.options.sort == true) {
	      util.insertSort(this.itemsData, function (a, b) {
	        return a.x > b.x ? 1 : -1;
	      });
	    }
	  } else {
	    this.itemsData = [];
	  }
	};

	GraphGroup.prototype.getItems = function () {
	  return this.itemsData;
	};

	/**
	 * this is used for barcharts and shading, this way, we only have to calculate it once.
	 * @param {number} pos
	 */
	GraphGroup.prototype.setZeroPosition = function (pos) {
	  this.zeroPosition = pos;
	};

	/**
	 * set the options of the graph group over the default options.
	 * @param {Object} options
	 */
	GraphGroup.prototype.setOptions = function (options) {
	  if (options !== undefined) {
	    var fields = ['sampling', 'style', 'sort', 'yAxisOrientation', 'barChart', 'zIndex', 'excludeFromStacking', 'excludeFromLegend'];
	    util.selectiveDeepExtend(fields, this.options, options);

	    // if the group's drawPoints is a function delegate the callback to the onRender property
	    if (typeof options.drawPoints == 'function') {
	      options.drawPoints = {
	        onRender: options.drawPoints
	      };
	    }

	    util.mergeOptions(this.options, options, 'interpolation');
	    util.mergeOptions(this.options, options, 'drawPoints');
	    util.mergeOptions(this.options, options, 'shaded');

	    if (options.interpolation) {
	      if ((0, _typeof3['default'])(options.interpolation) == 'object') {
	        if (options.interpolation.parametrization) {
	          if (options.interpolation.parametrization == 'uniform') {
	            this.options.interpolation.alpha = 0;
	          } else if (options.interpolation.parametrization == 'chordal') {
	            this.options.interpolation.alpha = 1.0;
	          } else {
	            this.options.interpolation.parametrization = 'centripetal';
	            this.options.interpolation.alpha = 0.5;
	          }
	        }
	      }
	    }
	  }
	};

	/**
	 * this updates the current group class with the latest group dataset entree, used in _updateGroup in linegraph
	 * @param {vis.Group} group
	 */
	GraphGroup.prototype.update = function (group) {
	  this.group = group;
	  this.content = group.content || 'graph';
	  this.className = group.className || this.className || 'vis-graph-group' + this.groupsUsingDefaultStyles[0] % 10;
	  this.visible = group.visible === undefined ? true : group.visible;
	  this.style = group.style;
	  this.setOptions(group.options);
	};

	/**
	 * return the legend entree for this group.
	 *
	 * @param {number} iconWidth
	 * @param {number} iconHeight
	 * @param {{svg: (*|Element), svgElements: Object, options: Object, groups: Array.<Object>}} framework
	 * @param {number} x
	 * @param {number} y
	 * @returns {{icon: (*|Element), label: (*|string), orientation: *}}
	 */
	GraphGroup.prototype.getLegend = function (iconWidth, iconHeight, framework, x, y) {
	  if (framework == undefined || framework == null) {
	    var svg = document.createElementNS('http://www.w3.org/2000/svg', "svg");
	    framework = { svg: svg, svgElements: {}, options: this.options, groups: [this] };
	  }
	  if (x == undefined || x == null) {
	    x = 0;
	  }
	  if (y == undefined || y == null) {
	    y = 0.5 * iconHeight;
	  }
	  switch (this.options.style) {
	    case "line":
	      Lines.drawIcon(this, x, y, iconWidth, iconHeight, framework);
	      break;
	    case "points": //explicit no break
	    case "point":
	      Points.drawIcon(this, x, y, iconWidth, iconHeight, framework);
	      break;
	    case "bar":
	      Bars.drawIcon(this, x, y, iconWidth, iconHeight, framework);
	      break;
	  }
	  return { icon: framework.svg, label: this.content, orientation: this.options.yAxisOrientation };
	};

	GraphGroup.prototype.getYRange = function (groupData) {
	  var yMin = groupData[0].y;
	  var yMax = groupData[0].y;
	  for (var j = 0; j < groupData.length; j++) {
	    yMin = yMin > groupData[j].y ? groupData[j].y : yMin;
	    yMax = yMax < groupData[j].y ? groupData[j].y : yMax;
	  }
	  return { min: yMin, max: yMax, yAxisOrientation: this.options.yAxisOrientation };
	};

	module.exports = GraphGroup;

	/***/ }),
	/* 110 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var DOMutil = __webpack_require__(14);
	var Points = __webpack_require__(72);

	/**
	 *
	 * @param {vis.GraphGroup.id} groupId
	 * @param {Object} options   // TODO: Describe options
	 * @constructor Bargraph
	 */
	function Bargraph(groupId, options) {// eslint-disable-line no-unused-vars
	}

	Bargraph.drawIcon = function (group, x, y, iconWidth, iconHeight, framework) {
	  var fillHeight = iconHeight * 0.5;
	  var outline = DOMutil.getSVGElement("rect", framework.svgElements, framework.svg);
	  outline.setAttributeNS(null, "x", x);
	  outline.setAttributeNS(null, "y", y - fillHeight);
	  outline.setAttributeNS(null, "width", iconWidth);
	  outline.setAttributeNS(null, "height", 2 * fillHeight);
	  outline.setAttributeNS(null, "class", "vis-outline");

	  var barWidth = Math.round(0.3 * iconWidth);
	  var originalWidth = group.options.barChart.width;
	  var scale = originalWidth / barWidth;
	  var bar1Height = Math.round(0.4 * iconHeight);
	  var bar2Height = Math.round(0.75 * iconHeight);

	  var offset = Math.round((iconWidth - 2 * barWidth) / 3);

	  DOMutil.drawBar(x + 0.5 * barWidth + offset, y + fillHeight - bar1Height - 1, barWidth, bar1Height, group.className + ' vis-bar', framework.svgElements, framework.svg, group.style);
	  DOMutil.drawBar(x + 1.5 * barWidth + offset + 2, y + fillHeight - bar2Height - 1, barWidth, bar2Height, group.className + ' vis-bar', framework.svgElements, framework.svg, group.style);

	  if (group.options.drawPoints.enabled == true) {
	    var groupTemplate = {
	      style: group.options.drawPoints.style,
	      styles: group.options.drawPoints.styles,
	      size: group.options.drawPoints.size / scale,
	      className: group.className
	    };
	    DOMutil.drawPoint(x + 0.5 * barWidth + offset, y + fillHeight - bar1Height - 1, groupTemplate, framework.svgElements, framework.svg);
	    DOMutil.drawPoint(x + 1.5 * barWidth + offset + 2, y + fillHeight - bar2Height - 1, groupTemplate, framework.svgElements, framework.svg);
	  }
	};

	/**
	 * draw a bar graph
	 *
	 * @param {Array.<vis.GraphGroup.id>} groupIds
	 * @param {Object} processedGroupData
	 * @param {{svg: Object, svgElements: Array.<Object>, options: Object, groups: Array.<vis.Group>}} framework
	 */
	Bargraph.draw = function (groupIds, processedGroupData, framework) {
	  var combinedData = [];
	  var intersections = {};
	  var coreDistance;
	  var key, drawData;
	  var group;
	  var i, j;
	  var barPoints = 0;

	  // combine all barchart data
	  for (i = 0; i < groupIds.length; i++) {
	    group = framework.groups[groupIds[i]];
	    if (group.options.style === 'bar') {
	      if (group.visible === true && (framework.options.groups.visibility[groupIds[i]] === undefined || framework.options.groups.visibility[groupIds[i]] === true)) {
	        for (j = 0; j < processedGroupData[groupIds[i]].length; j++) {
	          combinedData.push({
	            screen_x: processedGroupData[groupIds[i]][j].screen_x,
	            screen_end: processedGroupData[groupIds[i]][j].screen_end,
	            screen_y: processedGroupData[groupIds[i]][j].screen_y,
	            x: processedGroupData[groupIds[i]][j].x,
	            end: processedGroupData[groupIds[i]][j].end,
	            y: processedGroupData[groupIds[i]][j].y,
	            groupId: groupIds[i],
	            label: processedGroupData[groupIds[i]][j].label
	          });
	          barPoints += 1;
	        }
	      }
	    }
	  }

	  if (barPoints === 0) {
	    return;
	  }

	  // sort by time and by group
	  combinedData.sort(function (a, b) {
	    if (a.screen_x === b.screen_x) {
	      return a.groupId < b.groupId ? -1 : 1;
	    } else {
	      return a.screen_x - b.screen_x;
	    }
	  });

	  // get intersections
	  Bargraph._getDataIntersections(intersections, combinedData);

	  // plot barchart
	  for (i = 0; i < combinedData.length; i++) {
	    group = framework.groups[combinedData[i].groupId];
	    var minWidth = group.options.barChart.minWidth != undefined ? group.options.barChart.minWidth : 0.1 * group.options.barChart.width;

	    key = combinedData[i].screen_x;
	    var heightOffset = 0;
	    if (intersections[key] === undefined) {
	      if (i + 1 < combinedData.length) {
	        coreDistance = Math.abs(combinedData[i + 1].screen_x - key);
	      }
	      drawData = Bargraph._getSafeDrawData(coreDistance, group, minWidth);
	    } else {
	      var nextKey = i + (intersections[key].amount - intersections[key].resolved);
	      if (nextKey < combinedData.length) {
	        coreDistance = Math.abs(combinedData[nextKey].screen_x - key);
	      }
	      drawData = Bargraph._getSafeDrawData(coreDistance, group, minWidth);
	      intersections[key].resolved += 1;

	      if (group.options.stack === true && group.options.excludeFromStacking !== true) {
	        if (combinedData[i].screen_y < group.zeroPosition) {
	          heightOffset = intersections[key].accumulatedNegative;
	          intersections[key].accumulatedNegative += group.zeroPosition - combinedData[i].screen_y;
	        } else {
	          heightOffset = intersections[key].accumulatedPositive;
	          intersections[key].accumulatedPositive += group.zeroPosition - combinedData[i].screen_y;
	        }
	      } else if (group.options.barChart.sideBySide === true) {
	        drawData.width = drawData.width / intersections[key].amount;
	        drawData.offset += intersections[key].resolved * drawData.width - 0.5 * drawData.width * (intersections[key].amount + 1);
	      }
	    }

	    var dataWidth = drawData.width;
	    var start = combinedData[i].screen_x;

	    // are we drawing explicit boxes? (we supplied an end value)
	    if (combinedData[i].screen_end != undefined) {
	      dataWidth = combinedData[i].screen_end - combinedData[i].screen_x;
	      start += dataWidth * 0.5;
	    } else {
	      start += drawData.offset;
	    }

	    DOMutil.drawBar(start, combinedData[i].screen_y - heightOffset, dataWidth, group.zeroPosition - combinedData[i].screen_y, group.className + ' vis-bar', framework.svgElements, framework.svg, group.style);

	    // draw points
	    if (group.options.drawPoints.enabled === true) {
	      var pointData = {
	        screen_x: combinedData[i].screen_x,
	        screen_y: combinedData[i].screen_y - heightOffset,
	        x: combinedData[i].x,
	        y: combinedData[i].y,
	        groupId: combinedData[i].groupId,
	        label: combinedData[i].label
	      };
	      Points.draw([pointData], group, framework, drawData.offset);
	      //DOMutil.drawPoint(combinedData[i].x + drawData.offset, combinedData[i].y, group, framework.svgElements, framework.svg);
	    }
	  }
	};

	/**
	 * Fill the intersections object with counters of how many datapoints share the same x coordinates
	 * @param {Object} intersections
	 * @param {Array.<Object>} combinedData
	 * @private
	 */
	Bargraph._getDataIntersections = function (intersections, combinedData) {
	  // get intersections
	  var coreDistance;
	  for (var i = 0; i < combinedData.length; i++) {
	    if (i + 1 < combinedData.length) {
	      coreDistance = Math.abs(combinedData[i + 1].screen_x - combinedData[i].screen_x);
	    }
	    if (i > 0) {
	      coreDistance = Math.min(coreDistance, Math.abs(combinedData[i - 1].screen_x - combinedData[i].screen_x));
	    }
	    if (coreDistance === 0) {
	      if (intersections[combinedData[i].screen_x] === undefined) {
	        intersections[combinedData[i].screen_x] = {
	          amount: 0,
	          resolved: 0,
	          accumulatedPositive: 0,
	          accumulatedNegative: 0
	        };
	      }
	      intersections[combinedData[i].screen_x].amount += 1;
	    }
	  }
	};

	/**
	 * Get the width and offset for bargraphs based on the coredistance between datapoints
	 *
	 * @param {number} coreDistance
	 * @param {vis.Group} group
	 * @param {number} minWidth
	 * @returns {{width: number, offset: number}}
	 * @private
	 */
	Bargraph._getSafeDrawData = function (coreDistance, group, minWidth) {
	  var width, offset;
	  if (coreDistance < group.options.barChart.width && coreDistance > 0) {
	    width = coreDistance < minWidth ? minWidth : coreDistance;

	    offset = 0; // recalculate offset with the new width;
	    if (group.options.barChart.align === 'left') {
	      offset -= 0.5 * coreDistance;
	    } else if (group.options.barChart.align === 'right') {
	      offset += 0.5 * coreDistance;
	    }
	  } else {
	    // default settings
	    width = group.options.barChart.width;
	    offset = 0;
	    if (group.options.barChart.align === 'left') {
	      offset -= 0.5 * group.options.barChart.width;
	    } else if (group.options.barChart.align === 'right') {
	      offset += 0.5 * group.options.barChart.width;
	    }
	  }

	  return { width: width, offset: offset };
	};

	Bargraph.getStackedYRange = function (combinedData, groupRanges, groupIds, groupLabel, orientation) {
	  if (combinedData.length > 0) {
	    // sort by time and by group
	    combinedData.sort(function (a, b) {
	      if (a.screen_x === b.screen_x) {
	        return a.groupId < b.groupId ? -1 : 1;
	      } else {
	        return a.screen_x - b.screen_x;
	      }
	    });
	    var intersections = {};

	    Bargraph._getDataIntersections(intersections, combinedData);
	    groupRanges[groupLabel] = Bargraph._getStackedYRange(intersections, combinedData);
	    groupRanges[groupLabel].yAxisOrientation = orientation;
	    groupIds.push(groupLabel);
	  }
	};

	Bargraph._getStackedYRange = function (intersections, combinedData) {
	  var key;
	  var yMin = combinedData[0].screen_y;
	  var yMax = combinedData[0].screen_y;
	  for (var i = 0; i < combinedData.length; i++) {
	    key = combinedData[i].screen_x;
	    if (intersections[key] === undefined) {
	      yMin = yMin > combinedData[i].screen_y ? combinedData[i].screen_y : yMin;
	      yMax = yMax < combinedData[i].screen_y ? combinedData[i].screen_y : yMax;
	    } else {
	      if (combinedData[i].screen_y < 0) {
	        intersections[key].accumulatedNegative += combinedData[i].screen_y;
	      } else {
	        intersections[key].accumulatedPositive += combinedData[i].screen_y;
	      }
	    }
	  }
	  for (var xpos in intersections) {
	    if (intersections.hasOwnProperty(xpos)) {
	      yMin = yMin > intersections[xpos].accumulatedNegative ? intersections[xpos].accumulatedNegative : yMin;
	      yMin = yMin > intersections[xpos].accumulatedPositive ? intersections[xpos].accumulatedPositive : yMin;
	      yMax = yMax < intersections[xpos].accumulatedNegative ? intersections[xpos].accumulatedNegative : yMax;
	      yMax = yMax < intersections[xpos].accumulatedPositive ? intersections[xpos].accumulatedPositive : yMax;
	    }
	  }

	  return { min: yMin, max: yMax };
	};

	module.exports = Bargraph;

	/***/ }),
	/* 111 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var DOMutil = __webpack_require__(14);

	/**
	 *
	 * @param {vis.GraphGroup.id} groupId
	 * @param {Object} options   // TODO: Describe options
	 * @constructor Line
	 */
	function Line(groupId, options) {// eslint-disable-line no-unused-vars
	}

	Line.calcPath = function (dataset, group) {
	    if (dataset != null) {
	        if (dataset.length > 0) {
	            var d = [];

	            // construct path from dataset
	            if (group.options.interpolation.enabled == true) {
	                d = Line._catmullRom(dataset, group);
	            } else {
	                d = Line._linear(dataset);
	            }
	            return d;
	        }
	    }
	};

	Line.drawIcon = function (group, x, y, iconWidth, iconHeight, framework) {
	    var fillHeight = iconHeight * 0.5;
	    var path, fillPath;

	    var outline = DOMutil.getSVGElement("rect", framework.svgElements, framework.svg);
	    outline.setAttributeNS(null, "x", x);
	    outline.setAttributeNS(null, "y", y - fillHeight);
	    outline.setAttributeNS(null, "width", iconWidth);
	    outline.setAttributeNS(null, "height", 2 * fillHeight);
	    outline.setAttributeNS(null, "class", "vis-outline");

	    path = DOMutil.getSVGElement("path", framework.svgElements, framework.svg);
	    path.setAttributeNS(null, "class", group.className);
	    if (group.style !== undefined) {
	        path.setAttributeNS(null, "style", group.style);
	    }

	    path.setAttributeNS(null, "d", "M" + x + "," + y + " L" + (x + iconWidth) + "," + y + "");
	    if (group.options.shaded.enabled == true) {
	        fillPath = DOMutil.getSVGElement("path", framework.svgElements, framework.svg);
	        if (group.options.shaded.orientation == 'top') {
	            fillPath.setAttributeNS(null, "d", "M" + x + ", " + (y - fillHeight) + "L" + x + "," + y + " L" + (x + iconWidth) + "," + y + " L" + (x + iconWidth) + "," + (y - fillHeight));
	        } else {
	            fillPath.setAttributeNS(null, "d", "M" + x + "," + y + " " + "L" + x + "," + (y + fillHeight) + " " + "L" + (x + iconWidth) + "," + (y + fillHeight) + "L" + (x + iconWidth) + "," + y);
	        }
	        fillPath.setAttributeNS(null, "class", group.className + " vis-icon-fill");
	        if (group.options.shaded.style !== undefined && group.options.shaded.style !== "") {
	            fillPath.setAttributeNS(null, "style", group.options.shaded.style);
	        }
	    }

	    if (group.options.drawPoints.enabled == true) {
	        var groupTemplate = {
	            style: group.options.drawPoints.style,
	            styles: group.options.drawPoints.styles,
	            size: group.options.drawPoints.size,
	            className: group.className
	        };
	        DOMutil.drawPoint(x + 0.5 * iconWidth, y, groupTemplate, framework.svgElements, framework.svg);
	    }
	};

	Line.drawShading = function (pathArray, group, subPathArray, framework) {
	    // append shading to the path
	    if (group.options.shaded.enabled == true) {
	        var svgHeight = Number(framework.svg.style.height.replace('px', ''));
	        var fillPath = DOMutil.getSVGElement('path', framework.svgElements, framework.svg);
	        var type = "L";
	        if (group.options.interpolation.enabled == true) {
	            type = "C";
	        }
	        var dFill;
	        var zero = 0;
	        if (group.options.shaded.orientation == 'top') {
	            zero = 0;
	        } else if (group.options.shaded.orientation == 'bottom') {
	            zero = svgHeight;
	        } else {
	            zero = Math.min(Math.max(0, group.zeroPosition), svgHeight);
	        }
	        if (group.options.shaded.orientation == 'group' && subPathArray != null && subPathArray != undefined) {
	            dFill = 'M' + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false) + ' L' + subPathArray[subPathArray.length - 1][0] + "," + subPathArray[subPathArray.length - 1][1] + " " + this.serializePath(subPathArray, type, true) + subPathArray[0][0] + "," + subPathArray[0][1] + " Z";
	        } else {
	            dFill = 'M' + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false) + ' V' + zero + ' H' + pathArray[0][0] + " Z";
	        }

	        fillPath.setAttributeNS(null, 'class', group.className + ' vis-fill');
	        if (group.options.shaded.style !== undefined) {
	            fillPath.setAttributeNS(null, 'style', group.options.shaded.style);
	        }
	        fillPath.setAttributeNS(null, 'd', dFill);
	    }
	};

	/**
	 * draw a line graph
	 *
	 * @param {Array.<Object>} pathArray
	 * @param {vis.Group} group
	 * @param {{svg: Object, svgElements: Array.<Object>, options: Object, groups: Array.<vis.Group>}} framework
	 */
	Line.draw = function (pathArray, group, framework) {
	    if (pathArray != null && pathArray != undefined) {
	        var path = DOMutil.getSVGElement('path', framework.svgElements, framework.svg);
	        path.setAttributeNS(null, "class", group.className);
	        if (group.style !== undefined) {
	            path.setAttributeNS(null, "style", group.style);
	        }

	        var type = "L";
	        if (group.options.interpolation.enabled == true) {
	            type = "C";
	        }
	        // copy properties to path for drawing.
	        path.setAttributeNS(null, 'd', 'M' + pathArray[0][0] + "," + pathArray[0][1] + " " + this.serializePath(pathArray, type, false));
	    }
	};

	Line.serializePath = function (pathArray, type, inverse) {
	    if (pathArray.length < 2) {
	        //Too little data to create a path.
	        return "";
	    }
	    var d = type;
	    var i;
	    if (inverse) {
	        for (i = pathArray.length - 2; i > 0; i--) {
	            d += pathArray[i][0] + "," + pathArray[i][1] + " ";
	        }
	    } else {
	        for (i = 1; i < pathArray.length; i++) {
	            d += pathArray[i][0] + "," + pathArray[i][1] + " ";
	        }
	    }
	    return d;
	};

	/**
	 * This uses an uniform parametrization of the interpolation algorithm:
	 * 'On the Parameterization of Catmull-Rom Curves' by Cem Yuksel et al.
	 * @param {Array.<Object>} data
	 * @returns {string}
	 * @private
	 */
	Line._catmullRomUniform = function (data) {
	    // catmull rom
	    var p0, p1, p2, p3, bp1, bp2;
	    var d = [];
	    d.push([Math.round(data[0].screen_x), Math.round(data[0].screen_y)]);
	    var normalization = 1 / 6;
	    var length = data.length;
	    for (var i = 0; i < length - 1; i++) {

	        p0 = i == 0 ? data[0] : data[i - 1];
	        p1 = data[i];
	        p2 = data[i + 1];
	        p3 = i + 2 < length ? data[i + 2] : p2;

	        // Catmull-Rom to Cubic Bezier conversion matrix
	        //    0       1       0       0
	        //  -1/6      1      1/6      0
	        //    0      1/6      1     -1/6
	        //    0       0       1       0

	        //    bp0 = { x: p1.x,                               y: p1.y };
	        bp1 = {
	            screen_x: (-p0.screen_x + 6 * p1.screen_x + p2.screen_x) * normalization,
	            screen_y: (-p0.screen_y + 6 * p1.screen_y + p2.screen_y) * normalization
	        };
	        bp2 = {
	            screen_x: (p1.screen_x + 6 * p2.screen_x - p3.screen_x) * normalization,
	            screen_y: (p1.screen_y + 6 * p2.screen_y - p3.screen_y) * normalization
	        };
	        //    bp0 = { x: p2.x,                               y: p2.y };

	        d.push([bp1.screen_x, bp1.screen_y]);
	        d.push([bp2.screen_x, bp2.screen_y]);
	        d.push([p2.screen_x, p2.screen_y]);
	    }

	    return d;
	};

	/**
	 * This uses either the chordal or centripetal parameterization of the catmull-rom algorithm.
	 * By default, the centripetal parameterization is used because this gives the nicest results.
	 * These parameterizations are relatively heavy because the distance between 4 points have to be calculated.
	 *
	 * One optimization can be used to reuse distances since this is a sliding window approach.
	 * @param {Array.<Object>} data
	 * @param {vis.GraphGroup} group
	 * @returns {string}
	 * @private
	 */
	Line._catmullRom = function (data, group) {
	    var alpha = group.options.interpolation.alpha;
	    if (alpha == 0 || alpha === undefined) {
	        return this._catmullRomUniform(data);
	    } else {
	        var p0, p1, p2, p3, bp1, bp2, d1, d2, d3, A, B, N, M;
	        var d3powA, d2powA, d3pow2A, d2pow2A, d1pow2A, d1powA;
	        var d = [];
	        d.push([Math.round(data[0].screen_x), Math.round(data[0].screen_y)]);
	        var length = data.length;
	        for (var i = 0; i < length - 1; i++) {

	            p0 = i == 0 ? data[0] : data[i - 1];
	            p1 = data[i];
	            p2 = data[i + 1];
	            p3 = i + 2 < length ? data[i + 2] : p2;

	            d1 = Math.sqrt(Math.pow(p0.screen_x - p1.screen_x, 2) + Math.pow(p0.screen_y - p1.screen_y, 2));
	            d2 = Math.sqrt(Math.pow(p1.screen_x - p2.screen_x, 2) + Math.pow(p1.screen_y - p2.screen_y, 2));
	            d3 = Math.sqrt(Math.pow(p2.screen_x - p3.screen_x, 2) + Math.pow(p2.screen_y - p3.screen_y, 2));

	            // Catmull-Rom to Cubic Bezier conversion matrix

	            // A = 2d1^2a + 3d1^a * d2^a + d3^2a
	            // B = 2d3^2a + 3d3^a * d2^a + d2^2a

	            // [   0             1            0          0          ]
	            // [   -d2^2a /N     A/N          d1^2a /N   0          ]
	            // [   0             d3^2a /M     B/M        -d2^2a /M  ]
	            // [   0             0            1          0          ]

	            d3powA = Math.pow(d3, alpha);
	            d3pow2A = Math.pow(d3, 2 * alpha);
	            d2powA = Math.pow(d2, alpha);
	            d2pow2A = Math.pow(d2, 2 * alpha);
	            d1powA = Math.pow(d1, alpha);
	            d1pow2A = Math.pow(d1, 2 * alpha);

	            A = 2 * d1pow2A + 3 * d1powA * d2powA + d2pow2A;
	            B = 2 * d3pow2A + 3 * d3powA * d2powA + d2pow2A;
	            N = 3 * d1powA * (d1powA + d2powA);
	            if (N > 0) {
	                N = 1 / N;
	            }
	            M = 3 * d3powA * (d3powA + d2powA);
	            if (M > 0) {
	                M = 1 / M;
	            }

	            bp1 = {
	                screen_x: (-d2pow2A * p0.screen_x + A * p1.screen_x + d1pow2A * p2.screen_x) * N,
	                screen_y: (-d2pow2A * p0.screen_y + A * p1.screen_y + d1pow2A * p2.screen_y) * N
	            };

	            bp2 = {
	                screen_x: (d3pow2A * p1.screen_x + B * p2.screen_x - d2pow2A * p3.screen_x) * M,
	                screen_y: (d3pow2A * p1.screen_y + B * p2.screen_y - d2pow2A * p3.screen_y) * M
	            };

	            if (bp1.screen_x == 0 && bp1.screen_y == 0) {
	                bp1 = p1;
	            }
	            if (bp2.screen_x == 0 && bp2.screen_y == 0) {
	                bp2 = p2;
	            }
	            d.push([bp1.screen_x, bp1.screen_y]);
	            d.push([bp2.screen_x, bp2.screen_y]);
	            d.push([p2.screen_x, p2.screen_y]);
	        }

	        return d;
	    }
	};

	/**
	 * this generates the SVG path for a linear drawing between datapoints.
	 * @param {Array.<Object>} data
	 * @returns {string}
	 * @private
	 */
	Line._linear = function (data) {
	    // linear
	    var d = [];
	    for (var i = 0; i < data.length; i++) {
	        d.push([data[i].screen_x, data[i].screen_y]);
	    }
	    return d;
	};

	module.exports = Line;

	/***/ }),
	/* 112 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _keys = __webpack_require__(8);

	var _keys2 = _interopRequireDefault(_keys);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);
	var DOMutil = __webpack_require__(14);
	var Component = __webpack_require__(16);

	/**
	 * Legend for Graph2d
	 *
	 * @param {vis.Graph2d.body} body
	 * @param {vis.Graph2d.options} options
	 * @param {number} side
	 * @param {vis.LineGraph.options} linegraphOptions
	 * @constructor Legend
	 * @extends Component
	 */
	function Legend(body, options, side, linegraphOptions) {
	  this.body = body;
	  this.defaultOptions = {
	    enabled: false,
	    icons: true,
	    iconSize: 20,
	    iconSpacing: 6,
	    left: {
	      visible: true,
	      position: 'top-left' // top/bottom - left,center,right
	    },
	    right: {
	      visible: true,
	      position: 'top-right' // top/bottom - left,center,right
	    }
	  };

	  this.side = side;
	  this.options = util.extend({}, this.defaultOptions);
	  this.linegraphOptions = linegraphOptions;

	  this.svgElements = {};
	  this.dom = {};
	  this.groups = {};
	  this.amountOfGroups = 0;
	  this._create();
	  this.framework = { svg: this.svg, svgElements: this.svgElements, options: this.options, groups: this.groups };

	  this.setOptions(options);
	}

	Legend.prototype = new Component();

	Legend.prototype.clear = function () {
	  this.groups = {};
	  this.amountOfGroups = 0;
	};

	Legend.prototype.addGroup = function (label, graphOptions) {

	  // Include a group only if the group option 'excludeFromLegend: false' is not set.
	  if (graphOptions.options.excludeFromLegend != true) {
	    if (!this.groups.hasOwnProperty(label)) {
	      this.groups[label] = graphOptions;
	    }
	    this.amountOfGroups += 1;
	  }
	};

	Legend.prototype.updateGroup = function (label, graphOptions) {
	  this.groups[label] = graphOptions;
	};

	Legend.prototype.removeGroup = function (label) {
	  if (this.groups.hasOwnProperty(label)) {
	    delete this.groups[label];
	    this.amountOfGroups -= 1;
	  }
	};

	Legend.prototype._create = function () {
	  this.dom.frame = document.createElement('div');
	  this.dom.frame.className = 'vis-legend';
	  this.dom.frame.style.position = "absolute";
	  this.dom.frame.style.top = "10px";
	  this.dom.frame.style.display = "block";

	  this.dom.textArea = document.createElement('div');
	  this.dom.textArea.className = 'vis-legend-text';
	  this.dom.textArea.style.position = "relative";
	  this.dom.textArea.style.top = "0px";

	  this.svg = document.createElementNS('http://www.w3.org/2000/svg', "svg");
	  this.svg.style.position = 'absolute';
	  this.svg.style.top = 0 + 'px';
	  this.svg.style.width = this.options.iconSize + 5 + 'px';
	  this.svg.style.height = '100%';

	  this.dom.frame.appendChild(this.svg);
	  this.dom.frame.appendChild(this.dom.textArea);
	};

	/**
	 * Hide the component from the DOM
	 */
	Legend.prototype.hide = function () {
	  // remove the frame containing the items
	  if (this.dom.frame.parentNode) {
	    this.dom.frame.parentNode.removeChild(this.dom.frame);
	  }
	};

	/**
	 * Show the component in the DOM (when not already visible).
	 */
	Legend.prototype.show = function () {
	  // show frame containing the items
	  if (!this.dom.frame.parentNode) {
	    this.body.dom.center.appendChild(this.dom.frame);
	  }
	};

	Legend.prototype.setOptions = function (options) {
	  var fields = ['enabled', 'orientation', 'icons', 'left', 'right'];
	  util.selectiveDeepExtend(fields, this.options, options);
	};

	Legend.prototype.redraw = function () {
	  var activeGroups = 0;
	  var groupArray = (0, _keys2['default'])(this.groups);
	  groupArray.sort(function (a, b) {
	    return a < b ? -1 : 1;
	  });

	  for (var i = 0; i < groupArray.length; i++) {
	    var groupId = groupArray[i];
	    if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] == true)) {
	      activeGroups++;
	    }
	  }

	  if (this.options[this.side].visible == false || this.amountOfGroups == 0 || this.options.enabled == false || activeGroups == 0) {
	    this.hide();
	  } else {
	    this.show();
	    if (this.options[this.side].position == 'top-left' || this.options[this.side].position == 'bottom-left') {
	      this.dom.frame.style.left = '4px';
	      this.dom.frame.style.textAlign = "left";
	      this.dom.textArea.style.textAlign = "left";
	      this.dom.textArea.style.left = this.options.iconSize + 15 + 'px';
	      this.dom.textArea.style.right = '';
	      this.svg.style.left = 0 + 'px';
	      this.svg.style.right = '';
	    } else {
	      this.dom.frame.style.right = '4px';
	      this.dom.frame.style.textAlign = "right";
	      this.dom.textArea.style.textAlign = "right";
	      this.dom.textArea.style.right = this.options.iconSize + 15 + 'px';
	      this.dom.textArea.style.left = '';
	      this.svg.style.right = 0 + 'px';
	      this.svg.style.left = '';
	    }

	    if (this.options[this.side].position == 'top-left' || this.options[this.side].position == 'top-right') {
	      this.dom.frame.style.top = 4 - Number(this.body.dom.center.style.top.replace("px", "")) + 'px';
	      this.dom.frame.style.bottom = '';
	    } else {
	      var scrollableHeight = this.body.domProps.center.height - this.body.domProps.centerContainer.height;
	      this.dom.frame.style.bottom = 4 + scrollableHeight + Number(this.body.dom.center.style.top.replace("px", "")) + 'px';
	      this.dom.frame.style.top = '';
	    }

	    if (this.options.icons == false) {
	      this.dom.frame.style.width = this.dom.textArea.offsetWidth + 10 + 'px';
	      this.dom.textArea.style.right = '';
	      this.dom.textArea.style.left = '';
	      this.svg.style.width = '0px';
	    } else {
	      this.dom.frame.style.width = this.options.iconSize + 15 + this.dom.textArea.offsetWidth + 10 + 'px';
	      this.drawLegendIcons();
	    }

	    var content = '';
	    for (i = 0; i < groupArray.length; i++) {
	      groupId = groupArray[i];
	      if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] == true)) {
	        content += this.groups[groupId].content + '<br />';
	      }
	    }
	    this.dom.textArea.innerHTML = content;
	    this.dom.textArea.style.lineHeight = 0.75 * this.options.iconSize + this.options.iconSpacing + 'px';
	  }
	};

	Legend.prototype.drawLegendIcons = function () {
	  if (this.dom.frame.parentNode) {
	    var groupArray = (0, _keys2['default'])(this.groups);
	    groupArray.sort(function (a, b) {
	      return a < b ? -1 : 1;
	    });

	    // this resets the elements so the order is maintained
	    DOMutil.resetElements(this.svgElements);

	    var padding = window.getComputedStyle(this.dom.frame).paddingTop;
	    var iconOffset = Number(padding.replace('px', ''));
	    var x = iconOffset;
	    var iconWidth = this.options.iconSize;
	    var iconHeight = 0.75 * this.options.iconSize;
	    var y = iconOffset + 0.5 * iconHeight + 3;

	    this.svg.style.width = iconWidth + 5 + iconOffset + 'px';

	    for (var i = 0; i < groupArray.length; i++) {
	      var groupId = groupArray[i];
	      if (this.groups[groupId].visible == true && (this.linegraphOptions.visibility[groupId] === undefined || this.linegraphOptions.visibility[groupId] == true)) {
	        this.groups[groupId].getLegend(iconWidth, iconHeight, this.framework, x, y);
	        y += iconHeight + this.options.iconSpacing;
	      }
	    }
	  }
	};

	module.exports = Legend;

	/***/ }),
	/* 113 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * This object contains all possible options. It will check if the types are correct, if required if the option is one
	 * of the allowed values.
	 *
	 * __any__ means that the name of the property does not matter.
	 * __type__ is a required field for all objects and contains the allowed types of all objects
	 */
	var string = 'string';
	var bool = 'boolean';
	var number = 'number';
	var array = 'array';
	var date = 'date';
	var object = 'object'; // should only be in a __type__ property
	var dom = 'dom';
	var moment = 'moment';
	var any = 'any';

	var allOptions = {
	  configure: {
	    enabled: { 'boolean': bool },
	    filter: { 'boolean': bool, 'function': 'function' },
	    container: { dom: dom },
	    __type__: { object: object, 'boolean': bool, 'function': 'function' }
	  },

	  //globals :
	  yAxisOrientation: { string: ['left', 'right'] },
	  defaultGroup: { string: string },
	  sort: { 'boolean': bool },
	  sampling: { 'boolean': bool },
	  stack: { 'boolean': bool },
	  graphHeight: { string: string, number: number },
	  shaded: {
	    enabled: { 'boolean': bool },
	    orientation: { string: ['bottom', 'top', 'zero', 'group'] }, // top, bottom, zero, group
	    groupId: { object: object },
	    __type__: { 'boolean': bool, object: object }
	  },
	  style: { string: ['line', 'bar', 'points'] }, // line, bar
	  barChart: {
	    width: { number: number },
	    minWidth: { number: number },
	    sideBySide: { 'boolean': bool },
	    align: { string: ['left', 'center', 'right'] },
	    __type__: { object: object }
	  },
	  interpolation: {
	    enabled: { 'boolean': bool },
	    parametrization: { string: ['centripetal', 'chordal', 'uniform'] }, // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
	    alpha: { number: number },
	    __type__: { object: object, 'boolean': bool }
	  },
	  drawPoints: {
	    enabled: { 'boolean': bool },
	    onRender: { 'function': 'function' },
	    size: { number: number },
	    style: { string: ['square', 'circle'] }, // square, circle
	    __type__: { object: object, 'boolean': bool, 'function': 'function' }
	  },
	  dataAxis: {
	    showMinorLabels: { 'boolean': bool },
	    showMajorLabels: { 'boolean': bool },
	    icons: { 'boolean': bool },
	    width: { string: string, number: number },
	    visible: { 'boolean': bool },
	    alignZeros: { 'boolean': bool },
	    left: {
	      range: { min: { number: number, 'undefined': 'undefined' }, max: { number: number, 'undefined': 'undefined' }, __type__: { object: object } },
	      format: { 'function': 'function' },
	      title: { text: { string: string, number: number, 'undefined': 'undefined' }, style: { string: string, 'undefined': 'undefined' }, __type__: { object: object } },
	      __type__: { object: object }
	    },
	    right: {
	      range: { min: { number: number, 'undefined': 'undefined' }, max: { number: number, 'undefined': 'undefined' }, __type__: { object: object } },
	      format: { 'function': 'function' },
	      title: { text: { string: string, number: number, 'undefined': 'undefined' }, style: { string: string, 'undefined': 'undefined' }, __type__: { object: object } },
	      __type__: { object: object }
	    },
	    __type__: { object: object }
	  },
	  legend: {
	    enabled: { 'boolean': bool },
	    icons: { 'boolean': bool },
	    left: {
	      visible: { 'boolean': bool },
	      position: { string: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] },
	      __type__: { object: object }
	    },
	    right: {
	      visible: { 'boolean': bool },
	      position: { string: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] },
	      __type__: { object: object }
	    },
	    __type__: { object: object, 'boolean': bool }
	  },
	  groups: {
	    visibility: { any: any },
	    __type__: { object: object }
	  },

	  autoResize: { 'boolean': bool },
	  throttleRedraw: { number: number }, // TODO: DEPRICATED see https://github.com/almende/vis/issues/2511
	  clickToUse: { 'boolean': bool },
	  end: { number: number, date: date, string: string, moment: moment },
	  format: {
	    minorLabels: {
	      millisecond: { string: string, 'undefined': 'undefined' },
	      second: { string: string, 'undefined': 'undefined' },
	      minute: { string: string, 'undefined': 'undefined' },
	      hour: { string: string, 'undefined': 'undefined' },
	      weekday: { string: string, 'undefined': 'undefined' },
	      day: { string: string, 'undefined': 'undefined' },
	      month: { string: string, 'undefined': 'undefined' },
	      year: { string: string, 'undefined': 'undefined' },
	      __type__: { object: object }
	    },
	    majorLabels: {
	      millisecond: { string: string, 'undefined': 'undefined' },
	      second: { string: string, 'undefined': 'undefined' },
	      minute: { string: string, 'undefined': 'undefined' },
	      hour: { string: string, 'undefined': 'undefined' },
	      weekday: { string: string, 'undefined': 'undefined' },
	      day: { string: string, 'undefined': 'undefined' },
	      month: { string: string, 'undefined': 'undefined' },
	      year: { string: string, 'undefined': 'undefined' },
	      __type__: { object: object }
	    },
	    __type__: { object: object }
	  },
	  moment: { 'function': 'function' },
	  height: { string: string, number: number },
	  hiddenDates: {
	    start: { date: date, number: number, string: string, moment: moment },
	    end: { date: date, number: number, string: string, moment: moment },
	    repeat: { string: string },
	    __type__: { object: object, array: array }
	  },
	  locale: { string: string },
	  locales: {
	    __any__: { any: any },
	    __type__: { object: object }
	  },
	  max: { date: date, number: number, string: string, moment: moment },
	  maxHeight: { number: number, string: string },
	  maxMinorChars: { number: number },
	  min: { date: date, number: number, string: string, moment: moment },
	  minHeight: { number: number, string: string },
	  moveable: { 'boolean': bool },
	  multiselect: { 'boolean': bool },
	  orientation: { string: string },
	  showCurrentTime: { 'boolean': bool },
	  showMajorLabels: { 'boolean': bool },
	  showMinorLabels: { 'boolean': bool },
	  start: { date: date, number: number, string: string, moment: moment },
	  timeAxis: {
	    scale: { string: string, 'undefined': 'undefined' },
	    step: { number: number, 'undefined': 'undefined' },
	    __type__: { object: object }
	  },
	  width: { string: string, number: number },
	  zoomable: { 'boolean': bool },
	  zoomKey: { string: ['ctrlKey', 'altKey', 'metaKey', ''] },
	  zoomMax: { number: number },
	  zoomMin: { number: number },
	  zIndex: { number: number },
	  __type__: { object: object }
	};

	var configureOptions = {
	  global: {
	    //yAxisOrientation: ['left','right'], // TDOO: enable as soon as Grahp2d doesn't crash when changing this on the fly
	    sort: true,
	    sampling: true,
	    stack: false,
	    shaded: {
	      enabled: false,
	      orientation: ['zero', 'top', 'bottom', 'group'] // zero, top, bottom
	    },
	    style: ['line', 'bar', 'points'], // line, bar
	    barChart: {
	      width: [50, 5, 100, 5],
	      minWidth: [50, 5, 100, 5],
	      sideBySide: false,
	      align: ['left', 'center', 'right'] // left, center, right
	    },
	    interpolation: {
	      enabled: true,
	      parametrization: ['centripetal', 'chordal', 'uniform'] // uniform (alpha = 0.0), chordal (alpha = 1.0), centripetal (alpha = 0.5)
	    },
	    drawPoints: {
	      enabled: true,
	      size: [6, 2, 30, 1],
	      style: ['square', 'circle'] // square, circle
	    },
	    dataAxis: {
	      showMinorLabels: true,
	      showMajorLabels: true,
	      icons: false,
	      width: [40, 0, 200, 1],
	      visible: true,
	      alignZeros: true,
	      left: {
	        //range: {min:'undefined': 'undefined'ined,max:'undefined': 'undefined'ined},
	        //format: function (value) {return value;},
	        title: { text: '', style: '' }
	      },
	      right: {
	        //range: {min:'undefined': 'undefined'ined,max:'undefined': 'undefined'ined},
	        //format: function (value) {return value;},
	        title: { text: '', style: '' }
	      }
	    },
	    legend: {
	      enabled: false,
	      icons: true,
	      left: {
	        visible: true,
	        position: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] // top/bottom - left,right
	      },
	      right: {
	        visible: true,
	        position: ['top-right', 'bottom-right', 'top-left', 'bottom-left'] // top/bottom - left,right
	      }
	    },

	    autoResize: true,
	    clickToUse: false,
	    end: '',
	    format: {
	      minorLabels: {
	        millisecond: 'SSS',
	        second: 's',
	        minute: 'HH:mm',
	        hour: 'HH:mm',
	        weekday: 'ddd D',
	        day: 'D',
	        month: 'MMM',
	        year: 'YYYY'
	      },
	      majorLabels: {
	        millisecond: 'HH:mm:ss',
	        second: 'D MMMM HH:mm',
	        minute: 'ddd D MMMM',
	        hour: 'ddd D MMMM',
	        weekday: 'MMMM YYYY',
	        day: 'MMMM YYYY',
	        month: 'YYYY',
	        year: ''
	      }
	    },

	    height: '',
	    locale: '',
	    max: '',
	    maxHeight: '',
	    maxMinorChars: [7, 0, 20, 1],
	    min: '',
	    minHeight: '',
	    moveable: true,
	    orientation: ['both', 'bottom', 'top'],
	    showCurrentTime: false,
	    showMajorLabels: true,
	    showMinorLabels: true,
	    start: '',
	    width: '100%',
	    zoomable: true,
	    zoomKey: ['ctrlKey', 'altKey', 'metaKey', ''],
	    zoomMax: [315360000000000, 10, 315360000000000, 1],
	    zoomMin: [10, 10, 315360000000000, 1],
	    zIndex: 0
	  }
	};

	exports.allOptions = allOptions;
	exports.configureOptions = configureOptions;

	/***/ }),
	/* 114 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _create = __webpack_require__(29);

	var _create2 = _interopRequireDefault(_create);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Parse a text source containing data in DOT language into a JSON object.
	 * The object contains two lists: one with nodes and one with edges.
	 *
	 * DOT language reference: http://www.graphviz.org/doc/info/lang.html
	 *
	 * DOT language attributes: http://graphviz.org/content/attrs
	 *
	 * @param {string} data     Text containing a graph in DOT-notation
	 * @return {Object} graph   An object containing two parameters:
	 *                          {Object[]} nodes
	 *                          {Object[]} edges
	 *
	 * -------------------------------------------
	 * TODO
	 * ====
	 *
	 * For label handling, this is an incomplete implementation. From docs (quote #3015):
	 * 
	 * > the escape sequences "\n", "\l" and "\r" divide the label into lines, centered, 
	 * > left-justified, and right-justified, respectively.
	 *
	 * Source: http://www.graphviz.org/content/attrs#kescString
	 *
	 * > As another aid for readability, dot allows double-quoted strings to span multiple physical
	 * > lines using the standard C convention of a backslash immediately preceding a newline
	 * > character
	 * > In addition, double-quoted strings can be concatenated using a '+' operator.
	 * > As HTML strings can contain newline characters, which are used solely for formatting,
	 * > the language does not allow escaped newlines or concatenation operators to be used
	 * > within them.
	 *
	 * - Currently, only '\\n' is handled
	 * - Note that text explicitly says 'labels'; the dot parser currently handles escape
	 *   sequences in **all** strings.
	 */
	function parseDOT(data) {
	  dot = data;
	  return parseGraph();
	}

	// mapping of attributes from DOT (the keys) to vis.js (the values)
	var NODE_ATTR_MAPPING = {
	  'fontsize': 'font.size',
	  'fontcolor': 'font.color',
	  'labelfontcolor': 'font.color',
	  'fontname': 'font.face',
	  'color': ['color.border', 'color.background'],
	  'fillcolor': 'color.background',
	  'tooltip': 'title',
	  'labeltooltip': 'title'
	};
	var EDGE_ATTR_MAPPING = (0, _create2['default'])(NODE_ATTR_MAPPING);
	EDGE_ATTR_MAPPING.color = 'color.color';
	EDGE_ATTR_MAPPING.style = 'dashes';

	// token types enumeration
	var TOKENTYPE = {
	  NULL: 0,
	  DELIMITER: 1,
	  IDENTIFIER: 2,
	  UNKNOWN: 3
	};

	// map with all delimiters
	var DELIMITERS = {
	  '{': true,
	  '}': true,
	  '[': true,
	  ']': true,
	  ';': true,
	  '=': true,
	  ',': true,

	  '->': true,
	  '--': true
	};

	var dot = ''; // current dot file
	var index = 0; // current index in dot file
	var c = ''; // current token character in expr
	var token = ''; // current token
	var tokenType = TOKENTYPE.NULL; // type of the token

	/**
	 * Get the first character from the dot file.
	 * The character is stored into the char c. If the end of the dot file is
	 * reached, the function puts an empty string in c.
	 */
	function first() {
	  index = 0;
	  c = dot.charAt(0);
	}

	/**
	 * Get the next character from the dot file.
	 * The character is stored into the char c. If the end of the dot file is
	 * reached, the function puts an empty string in c.
	 */
	function next() {
	  index++;
	  c = dot.charAt(index);
	}

	/**
	 * Preview the next character from the dot file.
	 * @return {string} cNext
	 */
	function nextPreview() {
	  return dot.charAt(index + 1);
	}

	var regexAlphaNumeric = /[a-zA-Z_0-9.:#]/;
	/**
	 * Test whether given character is alphabetic or numeric
	 * @param {string} c
	 * @return {Boolean} isAlphaNumeric
	 */
	function isAlphaNumeric(c) {
	  return regexAlphaNumeric.test(c);
	}

	/**
	 * Merge all options of object b into object b
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 */
	function merge(a, b) {
	  if (!a) {
	    a = {};
	  }

	  if (b) {
	    for (var name in b) {
	      if (b.hasOwnProperty(name)) {
	        a[name] = b[name];
	      }
	    }
	  }
	  return a;
	}

	/**
	 * Set a value in an object, where the provided parameter name can be a
	 * path with nested parameters. For example:
	 *
	 *     var obj = {a: 2};
	 *     setValue(obj, 'b.c', 3);     // obj = {a: 2, b: {c: 3}}
	 *
	 * @param {Object} obj
	 * @param {string} path  A parameter name or dot-separated parameter path,
	 *                      like "color.highlight.border".
	 * @param {*} value
	 */
	function setValue(obj, path, value) {
	  var keys = path.split('.');
	  var o = obj;
	  while (keys.length) {
	    var key = keys.shift();
	    if (keys.length) {
	      // this isn't the end point
	      if (!o[key]) {
	        o[key] = {};
	      }
	      o = o[key];
	    } else {
	      // this is the end point
	      o[key] = value;
	    }
	  }
	}

	/**
	 * Add a node to a graph object. If there is already a node with
	 * the same id, their attributes will be merged.
	 * @param {Object} graph
	 * @param {Object} node
	 */
	function addNode(graph, node) {
	  var i, len;
	  var current = null;

	  // find root graph (in case of subgraph)
	  var graphs = [graph]; // list with all graphs from current graph to root graph
	  var root = graph;
	  while (root.parent) {
	    graphs.push(root.parent);
	    root = root.parent;
	  }

	  // find existing node (at root level) by its id
	  if (root.nodes) {
	    for (i = 0, len = root.nodes.length; i < len; i++) {
	      if (node.id === root.nodes[i].id) {
	        current = root.nodes[i];
	        break;
	      }
	    }
	  }

	  if (!current) {
	    // this is a new node
	    current = {
	      id: node.id
	    };
	    if (graph.node) {
	      // clone default attributes
	      current.attr = merge(current.attr, graph.node);
	    }
	  }

	  // add node to this (sub)graph and all its parent graphs
	  for (i = graphs.length - 1; i >= 0; i--) {
	    var g = graphs[i];

	    if (!g.nodes) {
	      g.nodes = [];
	    }
	    if (g.nodes.indexOf(current) === -1) {
	      g.nodes.push(current);
	    }
	  }

	  // merge attributes
	  if (node.attr) {
	    current.attr = merge(current.attr, node.attr);
	  }
	}

	/**
	 * Add an edge to a graph object
	 * @param {Object} graph
	 * @param {Object} edge
	 */
	function addEdge(graph, edge) {
	  if (!graph.edges) {
	    graph.edges = [];
	  }
	  graph.edges.push(edge);
	  if (graph.edge) {
	    var attr = merge({}, graph.edge); // clone default attributes
	    edge.attr = merge(attr, edge.attr); // merge attributes
	  }
	}

	/**
	 * Create an edge to a graph object
	 * @param {Object} graph
	 * @param {string | number | Object} from
	 * @param {string | number | Object} to
	 * @param {string} type
	 * @param {Object | null} attr
	 * @return {Object} edge
	 */
	function createEdge(graph, from, to, type, attr) {
	  var edge = {
	    from: from,
	    to: to,
	    type: type
	  };

	  if (graph.edge) {
	    edge.attr = merge({}, graph.edge); // clone default attributes
	  }
	  edge.attr = merge(edge.attr || {}, attr); // merge attributes

	  return edge;
	}

	/**
	 * Get next token in the current dot file.
	 * The token and token type are available as token and tokenType
	 */
	function getToken() {
	  tokenType = TOKENTYPE.NULL;
	  token = '';

	  // skip over whitespaces
	  while (c === ' ' || c === '\t' || c === '\n' || c === '\r') {
	    // space, tab, enter
	    next();
	  }

	  do {
	    var isComment = false;

	    // skip comment
	    if (c === '#') {
	      // find the previous non-space character
	      var i = index - 1;
	      while (dot.charAt(i) === ' ' || dot.charAt(i) === '\t') {
	        i--;
	      }
	      if (dot.charAt(i) === '\n' || dot.charAt(i) === '') {
	        // the # is at the start of a line, this is indeed a line comment
	        while (c != '' && c != '\n') {
	          next();
	        }
	        isComment = true;
	      }
	    }
	    if (c === '/' && nextPreview() === '/') {
	      // skip line comment
	      while (c != '' && c != '\n') {
	        next();
	      }
	      isComment = true;
	    }
	    if (c === '/' && nextPreview() === '*') {
	      // skip block comment
	      while (c != '') {
	        if (c === '*' && nextPreview() === '/') {
	          // end of block comment found. skip these last two characters
	          next();
	          next();
	          break;
	        } else {
	          next();
	        }
	      }
	      isComment = true;
	    }

	    // skip over whitespaces
	    while (c === ' ' || c === '\t' || c === '\n' || c === '\r') {
	      // space, tab, enter
	      next();
	    }
	  } while (isComment);

	  // check for end of dot file
	  if (c === '') {
	    // token is still empty
	    tokenType = TOKENTYPE.DELIMITER;
	    return;
	  }

	  // check for delimiters consisting of 2 characters
	  var c2 = c + nextPreview();
	  if (DELIMITERS[c2]) {
	    tokenType = TOKENTYPE.DELIMITER;
	    token = c2;
	    next();
	    next();
	    return;
	  }

	  // check for delimiters consisting of 1 character
	  if (DELIMITERS[c]) {
	    tokenType = TOKENTYPE.DELIMITER;
	    token = c;
	    next();
	    return;
	  }

	  // check for an identifier (number or string)
	  // TODO: more precise parsing of numbers/strings (and the port separator ':')
	  if (isAlphaNumeric(c) || c === '-') {
	    token += c;
	    next();

	    while (isAlphaNumeric(c)) {
	      token += c;
	      next();
	    }
	    if (token === 'false') {
	      token = false; // convert to boolean
	    } else if (token === 'true') {
	      token = true; // convert to boolean
	    } else if (!isNaN(Number(token))) {
	      token = Number(token); // convert to number
	    }
	    tokenType = TOKENTYPE.IDENTIFIER;
	    return;
	  }

	  // check for a string enclosed by double quotes
	  if (c === '"') {
	    next();
	    while (c != '' && (c != '"' || c === '"' && nextPreview() === '"')) {
	      if (c === '"') {
	        // skip the escape character
	        token += c;
	        next();
	      } else if (c === '\\' && nextPreview() === 'n') {
	        // Honor a newline escape sequence
	        token += '\n';
	        next();
	      } else {
	        token += c;
	      }
	      next();
	    }
	    if (c != '"') {
	      throw newSyntaxError('End of string " expected');
	    }
	    next();
	    tokenType = TOKENTYPE.IDENTIFIER;
	    return;
	  }

	  // something unknown is found, wrong characters, a syntax error
	  tokenType = TOKENTYPE.UNKNOWN;
	  while (c != '') {
	    token += c;
	    next();
	  }
	  throw new SyntaxError('Syntax error in part "' + chop(token, 30) + '"');
	}

	/**
	 * Parse a graph.
	 * @returns {Object} graph
	 */
	function parseGraph() {
	  var graph = {};

	  first();
	  getToken();

	  // optional strict keyword
	  if (token === 'strict') {
	    graph.strict = true;
	    getToken();
	  }

	  // graph or digraph keyword
	  if (token === 'graph' || token === 'digraph') {
	    graph.type = token;
	    getToken();
	  }

	  // optional graph id
	  if (tokenType === TOKENTYPE.IDENTIFIER) {
	    graph.id = token;
	    getToken();
	  }

	  // open angle bracket
	  if (token != '{') {
	    throw newSyntaxError('Angle bracket { expected');
	  }
	  getToken();

	  // statements
	  parseStatements(graph);

	  // close angle bracket
	  if (token != '}') {
	    throw newSyntaxError('Angle bracket } expected');
	  }
	  getToken();

	  // end of file
	  if (token !== '') {
	    throw newSyntaxError('End of file expected');
	  }
	  getToken();

	  // remove temporary default options
	  delete graph.node;
	  delete graph.edge;
	  delete graph.graph;

	  return graph;
	}

	/**
	 * Parse a list with statements.
	 * @param {Object} graph
	 */
	function parseStatements(graph) {
	  while (token !== '' && token != '}') {
	    parseStatement(graph);
	    if (token === ';') {
	      getToken();
	    }
	  }
	}

	/**
	 * Parse a single statement. Can be a an attribute statement, node
	 * statement, a series of node statements and edge statements, or a
	 * parameter.
	 * @param {Object} graph
	 */
	function parseStatement(graph) {
	  // parse subgraph
	  var subgraph = parseSubgraph(graph);
	  if (subgraph) {
	    // edge statements
	    parseEdge(graph, subgraph);

	    return;
	  }

	  // parse an attribute statement
	  var attr = parseAttributeStatement(graph);
	  if (attr) {
	    return;
	  }

	  // parse node
	  if (tokenType != TOKENTYPE.IDENTIFIER) {
	    throw newSyntaxError('Identifier expected');
	  }
	  var id = token; // id can be a string or a number
	  getToken();

	  if (token === '=') {
	    // id statement
	    getToken();
	    if (tokenType != TOKENTYPE.IDENTIFIER) {
	      throw newSyntaxError('Identifier expected');
	    }
	    graph[id] = token;
	    getToken();
	    // TODO: implement comma separated list with "a_list: ID=ID [','] [a_list] "
	  } else {
	    parseNodeStatement(graph, id);
	  }
	}

	/**
	 * Parse a subgraph
	 * @param {Object} graph    parent graph object
	 * @return {Object | null} subgraph
	 */
	function parseSubgraph(graph) {
	  var subgraph = null;

	  // optional subgraph keyword
	  if (token === 'subgraph') {
	    subgraph = {};
	    subgraph.type = 'subgraph';
	    getToken();

	    // optional graph id
	    if (tokenType === TOKENTYPE.IDENTIFIER) {
	      subgraph.id = token;
	      getToken();
	    }
	  }

	  // open angle bracket
	  if (token === '{') {
	    getToken();

	    if (!subgraph) {
	      subgraph = {};
	    }
	    subgraph.parent = graph;
	    subgraph.node = graph.node;
	    subgraph.edge = graph.edge;
	    subgraph.graph = graph.graph;

	    // statements
	    parseStatements(subgraph);

	    // close angle bracket
	    if (token != '}') {
	      throw newSyntaxError('Angle bracket } expected');
	    }
	    getToken();

	    // remove temporary default options
	    delete subgraph.node;
	    delete subgraph.edge;
	    delete subgraph.graph;
	    delete subgraph.parent;

	    // register at the parent graph
	    if (!graph.subgraphs) {
	      graph.subgraphs = [];
	    }
	    graph.subgraphs.push(subgraph);
	  }

	  return subgraph;
	}

	/**
	 * parse an attribute statement like "node [shape=circle fontSize=16]".
	 * Available keywords are 'node', 'edge', 'graph'.
	 * The previous list with default attributes will be replaced
	 * @param {Object} graph
	 * @returns {String | null} keyword Returns the name of the parsed attribute
	 *                                  (node, edge, graph), or null if nothing
	 *                                  is parsed.
	 */
	function parseAttributeStatement(graph) {
	  // attribute statements
	  if (token === 'node') {
	    getToken();

	    // node attributes
	    graph.node = parseAttributeList();
	    return 'node';
	  } else if (token === 'edge') {
	    getToken();

	    // edge attributes
	    graph.edge = parseAttributeList();
	    return 'edge';
	  } else if (token === 'graph') {
	    getToken();

	    // graph attributes
	    graph.graph = parseAttributeList();
	    return 'graph';
	  }

	  return null;
	}

	/**
	 * parse a node statement
	 * @param {Object} graph
	 * @param {string | number} id
	 */
	function parseNodeStatement(graph, id) {
	  // node statement
	  var node = {
	    id: id
	  };
	  var attr = parseAttributeList();
	  if (attr) {
	    node.attr = attr;
	  }
	  addNode(graph, node);

	  // edge statements
	  parseEdge(graph, id);
	}

	/**
	 * Parse an edge or a series of edges
	 * @param {Object} graph
	 * @param {string | number} from        Id of the from node
	 */
	function parseEdge(graph, from) {
	  while (token === '->' || token === '--') {
	    var to;
	    var type = token;
	    getToken();

	    var subgraph = parseSubgraph(graph);
	    if (subgraph) {
	      to = subgraph;
	    } else {
	      if (tokenType != TOKENTYPE.IDENTIFIER) {
	        throw newSyntaxError('Identifier or subgraph expected');
	      }
	      to = token;
	      addNode(graph, {
	        id: to
	      });
	      getToken();
	    }

	    // parse edge attributes
	    var attr = parseAttributeList();

	    // create edge
	    var edge = createEdge(graph, from, to, type, attr);
	    addEdge(graph, edge);

	    from = to;
	  }
	}

	/**
	 * Parse a set with attributes,
	 * for example [label="1.000", shape=solid]
	 * @return {Object | null} attr
	 */
	function parseAttributeList() {
	  var attr = null;

	  // edge styles of dot and vis
	  var edgeStyles = {
	    'dashed': true,
	    'solid': false,
	    'dotted': [1, 5]
	  };

	  while (token === '[') {
	    getToken();
	    attr = {};
	    while (token !== '' && token != ']') {
	      if (tokenType != TOKENTYPE.IDENTIFIER) {
	        throw newSyntaxError('Attribute name expected');
	      }
	      var name = token;

	      getToken();
	      if (token != '=') {
	        throw newSyntaxError('Equal sign = expected');
	      }
	      getToken();

	      if (tokenType != TOKENTYPE.IDENTIFIER) {
	        throw newSyntaxError('Attribute value expected');
	      }
	      var value = token;

	      // convert from dot style to vis
	      if (name === 'style') {
	        value = edgeStyles[value];
	      }

	      setValue(attr, name, value); // name can be a path

	      getToken();
	      if (token == ',') {
	        getToken();
	      }
	    }

	    if (token != ']') {
	      throw newSyntaxError('Bracket ] expected');
	    }
	    getToken();
	  }

	  return attr;
	}

	/**
	 * Create a syntax error with extra information on current token and index.
	 * @param {string} message
	 * @returns {SyntaxError} err
	 */
	function newSyntaxError(message) {
	  return new SyntaxError(message + ', got "' + chop(token, 30) + '" (char ' + index + ')');
	}

	/**
	 * Chop off text after a maximum length
	 * @param {string} text
	 * @param {number} maxLength
	 * @returns {String}
	 */
	function chop(text, maxLength) {
	  return text.length <= maxLength ? text : text.substr(0, 27) + '...';
	}

	/**
	 * Execute a function fn for each pair of elements in two arrays
	 * @param {Array | *} array1
	 * @param {Array | *} array2
	 * @param {function} fn
	 */
	function forEach2(array1, array2, fn) {
	  if (Array.isArray(array1)) {
	    array1.forEach(function (elem1) {
	      if (Array.isArray(array2)) {
	        array2.forEach(function (elem2) {
	          fn(elem1, elem2);
	        });
	      } else {
	        fn(elem1, array2);
	      }
	    });
	  } else {
	    if (Array.isArray(array2)) {
	      array2.forEach(function (elem2) {
	        fn(array1, elem2);
	      });
	    } else {
	      fn(array1, array2);
	    }
	  }
	}

	/**
	 * Set a nested property on an object
	 * When nested objects are missing, they will be created.
	 * For example setProp({}, 'font.color', 'red') will return {font: {color: 'red'}}
	 * @param {Object} object
	 * @param {string} path   A dot separated string like 'font.color'
	 * @param {*} value       Value for the property
	 * @return {Object} Returns the original object, allows for chaining.
	 */
	function setProp(object, path, value) {
	  var names = path.split('.');
	  var prop = names.pop();

	  // traverse over the nested objects
	  var obj = object;
	  for (var i = 0; i < names.length; i++) {
	    var name = names[i];
	    if (!(name in obj)) {
	      obj[name] = {};
	    }
	    obj = obj[name];
	  }

	  // set the property value
	  obj[prop] = value;

	  return object;
	}

	/**
	 * Convert an object with DOT attributes to their vis.js equivalents.
	 * @param {Object} attr     Object with DOT attributes
	 * @param {Object} mapping
	 * @return {Object}         Returns an object with vis.js attributes
	 */
	function convertAttr(attr, mapping) {
	  var converted = {};

	  for (var prop in attr) {
	    if (attr.hasOwnProperty(prop)) {
	      var visProp = mapping[prop];
	      if (Array.isArray(visProp)) {
	        visProp.forEach(function (visPropI) {
	          setProp(converted, visPropI, attr[prop]);
	        });
	      } else if (typeof visProp === 'string') {
	        setProp(converted, visProp, attr[prop]);
	      } else {
	        setProp(converted, prop, attr[prop]);
	      }
	    }
	  }

	  return converted;
	}

	/**
	 * Convert a string containing a graph in DOT language into a map containing
	 * with nodes and edges in the format of graph.
	 * @param {string} data         Text containing a graph in DOT-notation
	 * @return {Object} graphData
	 */
	function DOTToGraph(data) {
	  // parse the DOT file
	  var dotData = parseDOT(data);
	  var graphData = {
	    nodes: [],
	    edges: [],
	    options: {}
	  };

	  // copy the nodes
	  if (dotData.nodes) {
	    dotData.nodes.forEach(function (dotNode) {
	      var graphNode = {
	        id: dotNode.id,
	        label: String(dotNode.label || dotNode.id)
	      };
	      merge(graphNode, convertAttr(dotNode.attr, NODE_ATTR_MAPPING));
	      if (graphNode.image) {
	        graphNode.shape = 'image';
	      }
	      graphData.nodes.push(graphNode);
	    });
	  }

	  // copy the edges
	  if (dotData.edges) {
	    /**
	     * Convert an edge in DOT format to an edge with VisGraph format
	     * @param {Object} dotEdge
	     * @returns {Object} graphEdge
	     */
	    var convertEdge = function convertEdge(dotEdge) {
	      var graphEdge = {
	        from: dotEdge.from,
	        to: dotEdge.to
	      };
	      merge(graphEdge, convertAttr(dotEdge.attr, EDGE_ATTR_MAPPING));
	      graphEdge.arrows = dotEdge.type === '->' ? 'to' : undefined;

	      return graphEdge;
	    };

	    dotData.edges.forEach(function (dotEdge) {
	      var from, to;
	      if (dotEdge.from instanceof Object) {
	        from = dotEdge.from.nodes;
	      } else {
	        from = {
	          id: dotEdge.from
	        };
	      }

	      // TODO: support for attributes 'dir' and 'arrowhead' (edge arrows)

	      if (dotEdge.to instanceof Object) {
	        to = dotEdge.to.nodes;
	      } else {
	        to = {
	          id: dotEdge.to
	        };
	      }

	      if (dotEdge.from instanceof Object && dotEdge.from.edges) {
	        dotEdge.from.edges.forEach(function (subEdge) {
	          var graphEdge = convertEdge(subEdge);
	          graphData.edges.push(graphEdge);
	        });
	      }

	      forEach2(from, to, function (from, to) {
	        var subEdge = createEdge(graphData, from.id, to.id, dotEdge.type, dotEdge.attr);
	        var graphEdge = convertEdge(subEdge);
	        graphData.edges.push(graphEdge);
	      });

	      if (dotEdge.to instanceof Object && dotEdge.to.edges) {
	        dotEdge.to.edges.forEach(function (subEdge) {
	          var graphEdge = convertEdge(subEdge);
	          graphData.edges.push(graphEdge);
	        });
	      }
	    });
	  }

	  // copy the options
	  if (dotData.attr) {
	    graphData.options = dotData.attr;
	  }

	  return graphData;
	}

	// exports
	exports.parseDOT = parseDOT;
	exports.DOTToGraph = DOTToGraph;

	/***/ }),
	/* 115 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/**
	 *
	 * @param {json} gephiJSON
	 * @param {obj} optionsObj
	 * @returns {{nodes: Array, edges: Array}}
	 */
	function parseGephi(gephiJSON, optionsObj) {
	  var edges = [];
	  var nodes = [];
	  var options = {
	    edges: {
	      inheritColor: false
	    },
	    nodes: {
	      fixed: false,
	      parseColor: false
	    }
	  };

	  if (optionsObj !== undefined) {
	    if (optionsObj.fixed !== undefined) {
	      options.nodes.fixed = optionsObj.fixed;
	    }
	    if (optionsObj.parseColor !== undefined) {
	      options.nodes.parseColor = optionsObj.parseColor;
	    }
	    if (optionsObj.inheritColor !== undefined) {
	      options.edges.inheritColor = optionsObj.inheritColor;
	    }
	  }

	  var gEdges = gephiJSON.edges;
	  var gNodes = gephiJSON.nodes;
	  for (var i = 0; i < gEdges.length; i++) {
	    var edge = {};
	    var gEdge = gEdges[i];
	    edge['id'] = gEdge.id;
	    edge['from'] = gEdge.source;
	    edge['to'] = gEdge.target;
	    edge['attributes'] = gEdge.attributes;
	    edge['label'] = gEdge.label;
	    edge['title'] = gEdge.attributes !== undefined ? gEdge.attributes.title : undefined;
	    if (gEdge['type'] === 'Directed') {
	      edge['arrows'] = 'to';
	    }
	    //    edge['value'] = gEdge.attributes !== undefined ? gEdge.attributes.Weight : undefined;
	    //    edge['width'] = edge['value'] !== undefined ? undefined : edgegEdge.size;
	    if (gEdge.color && options.inheritColor === false) {
	      edge['color'] = gEdge.color;
	    }
	    edges.push(edge);
	  }

	  for (var j = 0; j < gNodes.length; j++) {
	    var node = {};
	    var gNode = gNodes[j];
	    node['id'] = gNode.id;
	    node['attributes'] = gNode.attributes;
	    node['x'] = gNode.x;
	    node['y'] = gNode.y;
	    node['label'] = gNode.label;
	    node['title'] = gNode.attributes !== undefined ? gNode.attributes.title : gNode.title;
	    if (options.nodes.parseColor === true) {
	      node['color'] = gNode.color;
	    } else {
	      node['color'] = gNode.color !== undefined ? { background: gNode.color, border: gNode.color, highlight: { background: gNode.color, border: gNode.color }, hover: { background: gNode.color, border: gNode.color } } : undefined;
	    }
	    node['size'] = gNode.size;
	    node['fixed'] = options.nodes.fixed && gNode.x !== undefined && gNode.y !== undefined;
	    nodes.push(node);
	  }

	  return { nodes: nodes, edges: edges };
	}

	exports.parseGephi = parseGephi;

	/***/ }),
	/* 116 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _CachedImage = __webpack_require__(185);

	var _CachedImage2 = _interopRequireDefault(_CachedImage);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * This callback is a callback that accepts an Image.
	 * @callback ImageCallback
	 * @param {Image} image
	 */

	/**
	 * This class loads images and keeps them stored.
	 *
	 * @param {ImageCallback} callback
	 */
	var Images = function () {
	    /**
	     * @param {ImageCallback} callback
	     */
	    function Images(callback) {
	        (0, _classCallCheck3["default"])(this, Images);

	        this.images = {};
	        this.imageBroken = {};
	        this.callback = callback;
	    }

	    /**
	     * @param {string} url                      The original Url that failed to load, if the broken image is successfully loaded it will be added to the cache using this Url as the key so that subsequent requests for this Url will return the broken image
	     * @param {string} brokenUrl                Url the broken image to try and load
	     * @param {Image} imageToLoadBrokenUrlOn   The image object
	     */


	    (0, _createClass3["default"])(Images, [{
	        key: "_tryloadBrokenUrl",
	        value: function _tryloadBrokenUrl(url, brokenUrl, imageToLoadBrokenUrlOn) {
	            //If these parameters aren't specified then exit the function because nothing constructive can be done
	            if (url === undefined || imageToLoadBrokenUrlOn === undefined) return;
	            if (brokenUrl === undefined) {
	                console.warn("No broken url image defined");
	                return;
	            }

	            //Clear the old subscription to the error event and put a new in place that only handle errors in loading the brokenImageUrl
	            imageToLoadBrokenUrlOn.onerror = function () {
	                console.error("Could not load brokenImage:", brokenUrl);
	                // cache item will contain empty image, this should be OK for default
	            };

	            //Set the source of the image to the brokenUrl, this is actually what kicks off the loading of the broken image
	            imageToLoadBrokenUrlOn.image.src = brokenUrl;
	        }

	        /**
	         *
	         * @param {vis.Image} imageToRedrawWith
	         * @private
	         */

	    }, {
	        key: "_redrawWithImage",
	        value: function _redrawWithImage(imageToRedrawWith) {
	            if (this.callback) {
	                this.callback(imageToRedrawWith);
	            }
	        }

	        /**
	         * @param {string} url          Url of the image
	         * @param {string} brokenUrl    Url of an image to use if the url image is not found
	         * @return {Image} img          The image object
	         */

	    }, {
	        key: "load",
	        value: function load(url, brokenUrl) {
	            var _this = this;

	            //Try and get the image from the cache, if successful then return the cached image   
	            var cachedImage = this.images[url];
	            if (cachedImage) return cachedImage;

	            //Create a new image
	            var img = new _CachedImage2["default"]();

	            // Need to add to cache here, otherwise final return will spawn different copies of the same image,
	            // Also, there will be multiple loads of the same image.
	            this.images[url] = img;

	            //Subscribe to the event that is raised if the image loads successfully 
	            img.image.onload = function () {
	                // Properly init the cached item and then request a redraw
	                _this._fixImageCoordinates(img.image);
	                img.init();
	                _this._redrawWithImage(img);
	            };

	            //Subscribe to the event that is raised if the image fails to load
	            img.image.onerror = function () {
	                console.error("Could not load image:", url);
	                //Try and load the image specified by the brokenUrl using
	                _this._tryloadBrokenUrl(url, brokenUrl, img);
	            };

	            //Set the source of the image to the url, this is what actually kicks off the loading of the image
	            img.image.src = url;

	            //Return the new image
	            return img;
	        }

	        /**
	         * IE11 fix -- thanks dponch!
	         *
	         * Local helper function
	         * @param {vis.Image} imageToCache
	         * @private
	         */

	    }, {
	        key: "_fixImageCoordinates",
	        value: function _fixImageCoordinates(imageToCache) {
	            if (imageToCache.width === 0) {
	                document.body.appendChild(imageToCache);
	                imageToCache.width = imageToCache.offsetWidth;
	                imageToCache.height = imageToCache.offsetHeight;
	                document.body.removeChild(imageToCache);
	            }
	        }
	    }]);
	    return Images;
	}();

	exports["default"] = Images;

	/***/ }),
	/* 117 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _slicedToArray2 = __webpack_require__(30);

	var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);
	var ComponentUtil = __webpack_require__(48)['default'];
	var LabelSplitter = __webpack_require__(191)['default'];

	/**
	 * @typedef {'bold'|'ital'|'boldital'|'mono'|'normal'} MultiFontStyle
	 *
	 * The allowed specifiers of multi-fonts.
	 */

	/**
	 * @typedef {{color:string, size:number, face:string, mod:string, vadjust:number}} MultiFontOptions
	 *
	 * The full set of options of a given multi-font.
	 */

	/**
	 * @typedef {Array.<object>} Pile
	 *
	 * Sequence of option objects, the order is significant.
	 * The sequence is used to determine the value of a given option.
	 *
	 * Usage principles:
	 *
	 *  - All search is done in the sequence of the pile.
	 *  - As soon as a value is found, the searching stops.
	 *  - prototypes are totally ignored. The idea is to add option objects used as prototypes
	 *    to the pile, in the correct order.
	 */

	/**
	 * List of special styles for multi-fonts
	 * @private
	 */
	var multiFontStyle = ['bold', 'ital', 'boldital', 'mono'];

	/**
	 * A Label to be used for Nodes or Edges.
	 */

	var Label = function () {

	  /**
	   * @param {Object} body
	   * @param {Object} options
	   * @param {boolean} [edgelabel=false]
	   */
	  function Label(body, options) {
	    var edgelabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	    (0, _classCallCheck3['default'])(this, Label);

	    this.body = body;
	    this.pointToSelf = false;
	    this.baseSize = undefined;
	    this.fontOptions = {}; // instance variable containing the *instance-local* font options
	    this.setOptions(options);
	    this.size = { top: 0, left: 0, width: 0, height: 0, yLine: 0 };
	    this.isEdgeLabel = edgelabel;
	  }

	  /**
	   * @param {Object} options the options of the parent Node-instance
	   */


	  (0, _createClass3['default'])(Label, [{
	    key: 'setOptions',
	    value: function setOptions(options) {
	      this.elementOptions = options; // Reference to the options of the parent Node-instance 

	      this.initFontOptions(options.font);

	      if (ComponentUtil.isValidLabel(options.label)) {
	        this.labelDirty = true;
	      } else {
	        // Bad label! Change the option value to prevent bad stuff happening
	        options.label = '';
	      }

	      if (options.font !== undefined && options.font !== null) {
	        // font options can be deleted at various levels
	        if (typeof options.font === 'string') {
	          this.baseSize = this.fontOptions.size;
	        } else if ((0, _typeof3['default'])(options.font) === 'object') {
	          var size = options.font.size;

	          if (size !== undefined) {
	            this.baseSize = size;
	          }
	        }
	      }
	    }

	    /**
	     * Init the font Options structure.
	     *
	     * Member fontOptions serves as an accumulator for the current font options.
	     * As such, it needs to be completely separated from the node options.
	     *
	     * @param {Object} newFontOptions the new font options to process
	     * @private
	     */

	  }, {
	    key: 'initFontOptions',
	    value: function initFontOptions(newFontOptions) {
	      var _this = this;

	      // Prepare the multi-font option objects.
	      // These will be filled in propagateFonts(), if required
	      util.forEach(multiFontStyle, function (style) {
	        _this.fontOptions[style] = {};
	      });

	      // Handle shorthand option, if present
	      if (Label.parseFontString(this.fontOptions, newFontOptions)) {
	        this.fontOptions.vadjust = 0;
	        return;
	      }

	      // Copy over the non-multifont options, if specified
	      util.forEach(newFontOptions, function (prop, n) {
	        if (prop !== undefined && prop !== null && (typeof prop === 'undefined' ? 'undefined' : (0, _typeof3['default'])(prop)) !== 'object') {
	          _this.fontOptions[n] = prop;
	        }
	      });
	    }

	    /**
	     * If in-variable is a string, parse it as a font specifier.
	     *
	     * Note that following is not done here and have to be done after the call:
	     * - No number conversion (size)
	     * - Not all font options are set (vadjust, mod)
	     *
	     * @param {Object} outOptions  out-parameter, object in which to store the parse results (if any)
	     * @param {Object} inOptions  font options to parse
	     * @return {boolean} true if font parsed as string, false otherwise
	     * @static
	     */

	  }, {
	    key: 'constrain',


	    /**
	     * Set the width and height constraints based on 'nearest' value
	     *
	     * @param {Array} pile array of option objects to consider
	     * @returns {object} the actual constraint values to use
	     * @private
	     */
	    value: function constrain(pile) {
	      // NOTE: constrainWidth and  constrainHeight never set!
	      // NOTE: for edge labels, only 'maxWdt' set
	      // Node labels can set all the fields
	      var fontOptions = {
	        constrainWidth: false,
	        maxWdt: -1,
	        minWdt: -1,
	        constrainHeight: false,
	        minHgt: -1,
	        valign: 'middle'
	      };

	      var widthConstraint = util.topMost(pile, 'widthConstraint');
	      if (typeof widthConstraint === 'number') {
	        fontOptions.maxWdt = Number(widthConstraint);
	        fontOptions.minWdt = Number(widthConstraint);
	      } else if ((typeof widthConstraint === 'undefined' ? 'undefined' : (0, _typeof3['default'])(widthConstraint)) === 'object') {
	        var widthConstraintMaximum = util.topMost(pile, ['widthConstraint', 'maximum']);
	        if (typeof widthConstraintMaximum === 'number') {
	          fontOptions.maxWdt = Number(widthConstraintMaximum);
	        }
	        var widthConstraintMinimum = util.topMost(pile, ['widthConstraint', 'minimum']);
	        if (typeof widthConstraintMinimum === 'number') {
	          fontOptions.minWdt = Number(widthConstraintMinimum);
	        }
	      }

	      var heightConstraint = util.topMost(pile, 'heightConstraint');
	      if (typeof heightConstraint === 'number') {
	        fontOptions.minHgt = Number(heightConstraint);
	      } else if ((typeof heightConstraint === 'undefined' ? 'undefined' : (0, _typeof3['default'])(heightConstraint)) === 'object') {
	        var heightConstraintMinimum = util.topMost(pile, ['heightConstraint', 'minimum']);
	        if (typeof heightConstraintMinimum === 'number') {
	          fontOptions.minHgt = Number(heightConstraintMinimum);
	        }
	        var heightConstraintValign = util.topMost(pile, ['heightConstraint', 'valign']);
	        if (typeof heightConstraintValign === 'string') {
	          if (heightConstraintValign === 'top' || heightConstraintValign === 'bottom') {
	            fontOptions.valign = heightConstraintValign;
	          }
	        }
	      }

	      return fontOptions;
	    }

	    /**
	     * Set options and update internal state
	     *
	     * @param {Object} options  options to set
	     * @param {Array}  pile     array of option objects to consider for option 'chosen'
	     */

	  }, {
	    key: 'update',
	    value: function update(options, pile) {
	      this.setOptions(options, true);
	      this.propagateFonts(pile);
	      util.deepExtend(this.fontOptions, this.constrain(pile));
	      this.fontOptions.chooser = ComponentUtil.choosify('label', pile);
	    }

	    /**
	     * When margins are set in an element, adjust sizes is called to remove them
	     * from the width/height constraints. This must be done prior to label sizing.
	     *
	     * @param {{top: number, right: number, bottom: number, left: number}} margins
	     */

	  }, {
	    key: 'adjustSizes',
	    value: function adjustSizes(margins) {
	      var widthBias = margins ? margins.right + margins.left : 0;
	      if (this.fontOptions.constrainWidth) {
	        this.fontOptions.maxWdt -= widthBias;
	        this.fontOptions.minWdt -= widthBias;
	      }
	      var heightBias = margins ? margins.top + margins.bottom : 0;
	      if (this.fontOptions.constrainHeight) {
	        this.fontOptions.minHgt -= heightBias;
	      }
	    }

	    /////////////////////////////////////////////////////////
	    // Methods for handling options piles
	    // Eventually, these will be moved to a separate class
	    /////////////////////////////////////////////////////////

	    /**
	     * Add the font members of the passed list of option objects to the pile.
	     *
	     * @param {Pile} dstPile  pile of option objects add to 
	     * @param {Pile} srcPile  pile of option objects to take font options from
	     * @private
	     */

	  }, {
	    key: 'addFontOptionsToPile',
	    value: function addFontOptionsToPile(dstPile, srcPile) {
	      for (var i = 0; i < srcPile.length; ++i) {
	        this.addFontToPile(dstPile, srcPile[i]);
	      }
	    }

	    /**
	     * Add given font option object to the list of objects (the 'pile') to consider for determining
	     * multi-font option values.
	     *
	     * @param {Pile} pile  pile of option objects to use
	     * @param {object} options  instance to add to pile
	     * @private
	     */

	  }, {
	    key: 'addFontToPile',
	    value: function addFontToPile(pile, options) {
	      if (options === undefined) return;
	      if (options.font === undefined || options.font === null) return;

	      var item = options.font;
	      pile.push(item);
	    }

	    /**
	     * Collect all own-property values from the font pile that aren't multi-font option objectss.
	     *
	     * @param {Pile} pile  pile of option objects to use
	     * @returns {object} object with all current own basic font properties
	     * @private
	     */

	  }, {
	    key: 'getBasicOptions',
	    value: function getBasicOptions(pile) {
	      var ret = {};

	      // Scans the whole pile to get all options present
	      for (var n = 0; n < pile.length; ++n) {
	        var fontOptions = pile[n];

	        // Convert shorthand if necessary
	        var tmpShorthand = {};
	        if (Label.parseFontString(tmpShorthand, fontOptions)) {
	          fontOptions = tmpShorthand;
	        }

	        util.forEach(fontOptions, function (opt, name) {
	          if (opt === undefined) return; // multi-font option need not be present 
	          if (ret.hasOwnProperty(name)) return; // Keep first value we encounter

	          if (multiFontStyle.indexOf(name) !== -1) {
	            // Skip multi-font properties but we do need the structure
	            ret[name] = {};
	          } else {
	            ret[name] = opt;
	          }
	        });
	      }

	      return ret;
	    }

	    /**
	     * Return the value for given option for the given multi-font.
	     *
	     * All available option objects are trawled in the set order to construct the option values.
	     *
	     * ---------------------------------------------------------------------
	     * ## Traversal of pile for multi-fonts
	     *
	     * The determination of multi-font option values is a special case, because any values not
	     * present in the multi-font options should by definition be taken from the main font options,
	     * i.e. from the current 'parent' object of the multi-font option.
	     *
	     * ### Search order for multi-fonts
	     *
	     * 'bold' used as example:
	     *
	     *   - search in option group 'bold' in local properties
	     *   - search in main font option group in local properties
	     *
	     * ---------------------------------------------------------------------
	     *
	     * @param {Pile} pile  pile of option objects to use
	     * @param {MultiFontStyle} multiName sub path for the multi-font
	     * @param {string} option  the option to search for, for the given multi-font
	     * @returns {string|number} the value for the given option
	     * @private
	     */

	  }, {
	    key: 'getFontOption',
	    value: function getFontOption(pile, multiName, option) {
	      var multiFont = void 0;

	      // Search multi font in local properties
	      for (var n = 0; n < pile.length; ++n) {
	        var fontOptions = pile[n];

	        if (fontOptions.hasOwnProperty(multiName)) {
	          multiFont = fontOptions[multiName];
	          if (multiFont === undefined || multiFont === null) continue;

	          // Convert shorthand if necessary
	          // TODO: inefficient to do this conversion every time; find a better way.
	          var tmpShorthand = {};
	          if (Label.parseFontString(tmpShorthand, multiFont)) {
	            multiFont = tmpShorthand;
	          }

	          if (multiFont.hasOwnProperty(option)) {
	            return multiFont[option];
	          }
	        }
	      }

	      // Option is not mentioned in the multi font options; take it from the parent font options.
	      // These have already been converted with getBasicOptions(), so use the converted values.
	      if (this.fontOptions.hasOwnProperty(option)) {
	        return this.fontOptions[option];
	      }

	      // A value **must** be found; you should never get here.
	      throw new Error("Did not find value for multi-font for property: '" + option + "'");
	    }

	    /**
	     * Return all options values for the given multi-font.
	     *
	     * All available option objects are trawled in the set order to construct the option values.
	     *
	     * @param {Pile} pile  pile of option objects to use
	     * @param {MultiFontStyle} multiName sub path for the mod-font
	     * @returns {MultiFontOptions}
	     * @private
	     */

	  }, {
	    key: 'getFontOptions',
	    value: function getFontOptions(pile, multiName) {
	      var result = {};
	      var optionNames = ['color', 'size', 'face', 'mod', 'vadjust']; // List of allowed options per multi-font

	      for (var i = 0; i < optionNames.length; ++i) {
	        var mod = optionNames[i];
	        result[mod] = this.getFontOption(pile, multiName, mod);
	      }

	      return result;
	    }

	    /////////////////////////////////////////////////////////
	    // End methods for handling options piles
	    /////////////////////////////////////////////////////////


	    /**
	     * Collapse the font options for the multi-font to single objects, from
	     * the chain of option objects passed (the 'pile').
	     *
	     * @param {Pile} pile  sequence of option objects to consider.
	     *                     First item in list assumed to be the newly set options.
	     */

	  }, {
	    key: 'propagateFonts',
	    value: function propagateFonts(pile) {
	      var _this2 = this;

	      var fontPile = []; // sequence of font objects to consider, order important

	      // Note that this.elementOptions is not used here.
	      this.addFontOptionsToPile(fontPile, pile);
	      this.fontOptions = this.getBasicOptions(fontPile);

	      // We set multifont values even if multi === false, for consistency (things break otherwise)

	      var _loop = function _loop(i) {
	        var mod = multiFontStyle[i];
	        var modOptions = _this2.fontOptions[mod];
	        var tmpMultiFontOptions = _this2.getFontOptions(fontPile, mod);

	        // Copy over found values
	        util.forEach(tmpMultiFontOptions, function (option, n) {
	          modOptions[n] = option;
	        });

	        modOptions.size = Number(modOptions.size);
	        modOptions.vadjust = Number(modOptions.vadjust);
	      };

	      for (var i = 0; i < multiFontStyle.length; ++i) {
	        _loop(i);
	      }
	    }

	    /**
	     * Main function. This is called from anything that wants to draw a label.
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} x
	     * @param {number} y
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @param {string} [baseline='middle']
	     */

	  }, {
	    key: 'draw',
	    value: function draw(ctx, x, y, selected, hover) {
	      var baseline = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'middle';

	      // if no label, return
	      if (this.elementOptions.label === undefined) return;

	      // check if we have to render the label
	      var viewFontSize = this.fontOptions.size * this.body.view.scale;
	      if (this.elementOptions.label && viewFontSize < this.elementOptions.scaling.label.drawThreshold - 1) return;

	      // This ensures that there will not be HUGE letters on screen
	      // by setting an upper limit on the visible text size (regardless of zoomLevel)
	      if (viewFontSize >= this.elementOptions.scaling.label.maxVisible) {
	        viewFontSize = Number(this.elementOptions.scaling.label.maxVisible) / this.body.view.scale;
	      }

	      // update the size cache if required
	      this.calculateLabelSize(ctx, selected, hover, x, y, baseline);
	      this._drawBackground(ctx);
	      this._drawText(ctx, x, this.size.yLine, baseline, viewFontSize);
	    }

	    /**
	     * Draws the label background
	     * @param {CanvasRenderingContext2D} ctx
	     * @private
	     */

	  }, {
	    key: '_drawBackground',
	    value: function _drawBackground(ctx) {
	      if (this.fontOptions.background !== undefined && this.fontOptions.background !== "none") {
	        ctx.fillStyle = this.fontOptions.background;
	        var size = this.getSize();
	        ctx.fillRect(size.left, size.top, size.width, size.height);
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} x
	     * @param {number} y
	     * @param {string} [baseline='middle']
	     * @param {number} viewFontSize 
	     * @private
	     */

	  }, {
	    key: '_drawText',
	    value: function _drawText(ctx, x, y) {
	      var baseline = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'middle';
	      var viewFontSize = arguments[4];

	      var _setAlignment2 = this._setAlignment(ctx, x, y, baseline);

	      var _setAlignment3 = (0, _slicedToArray3['default'])(_setAlignment2, 2);

	      x = _setAlignment3[0];
	      y = _setAlignment3[1];


	      ctx.textAlign = 'left';
	      x = x - this.size.width / 2; // Shift label 1/2-distance to the left
	      if (this.fontOptions.valign && this.size.height > this.size.labelHeight) {
	        if (this.fontOptions.valign === 'top') {
	          y -= (this.size.height - this.size.labelHeight) / 2;
	        }
	        if (this.fontOptions.valign === 'bottom') {
	          y += (this.size.height - this.size.labelHeight) / 2;
	        }
	      }

	      // draw the text
	      for (var i = 0; i < this.lineCount; i++) {
	        var line = this.lines[i];
	        if (line && line.blocks) {
	          var width = 0;
	          if (this.isEdgeLabel || this.fontOptions.align === 'center') {
	            width += (this.size.width - line.width) / 2;
	          } else if (this.fontOptions.align === 'right') {
	            width += this.size.width - line.width;
	          }
	          for (var j = 0; j < line.blocks.length; j++) {
	            var block = line.blocks[j];
	            ctx.font = block.font;

	            var _getColor2 = this._getColor(block.color, viewFontSize, block.strokeColor),
	                _getColor3 = (0, _slicedToArray3['default'])(_getColor2, 2),
	                fontColor = _getColor3[0],
	                strokeColor = _getColor3[1];

	            if (block.strokeWidth > 0) {
	              ctx.lineWidth = block.strokeWidth;
	              ctx.strokeStyle = strokeColor;
	              ctx.lineJoin = 'round';
	            }
	            ctx.fillStyle = fontColor;

	            if (block.strokeWidth > 0) {
	              ctx.strokeText(block.text, x + width, y + block.vadjust);
	            }
	            ctx.fillText(block.text, x + width, y + block.vadjust);
	            width += block.width;
	          }
	          y += line.height;
	        }
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} x
	     * @param {number} y
	     * @param {string} baseline
	     * @returns {Array.<number>}
	     * @private
	     */

	  }, {
	    key: '_setAlignment',
	    value: function _setAlignment(ctx, x, y, baseline) {
	      // check for label alignment (for edges)
	      // TODO: make alignment for nodes
	      if (this.isEdgeLabel && this.fontOptions.align !== 'horizontal' && this.pointToSelf === false) {
	        x = 0;
	        y = 0;

	        var lineMargin = 2;
	        if (this.fontOptions.align === 'top') {
	          ctx.textBaseline = 'alphabetic';
	          y -= 2 * lineMargin; // distance from edge, required because we use alphabetic. Alphabetic has less difference between browsers
	        } else if (this.fontOptions.align === 'bottom') {
	          ctx.textBaseline = 'hanging';
	          y += 2 * lineMargin; // distance from edge, required because we use hanging. Hanging has less difference between browsers
	        } else {
	          ctx.textBaseline = 'middle';
	        }
	      } else {
	        ctx.textBaseline = baseline;
	      }
	      return [x, y];
	    }

	    /**
	     * fade in when relative scale is between threshold and threshold - 1.
	     * If the relative scale would be smaller than threshold -1 the draw function would have returned before coming here.
	     *
	     * @param {string} color  The font color to use
	     * @param {number} viewFontSize
	     * @param {string} initialStrokeColor
	     * @returns {Array.<string>} An array containing the font color and stroke color
	     * @private
	     */

	  }, {
	    key: '_getColor',
	    value: function _getColor(color, viewFontSize, initialStrokeColor) {
	      var fontColor = color || '#000000';
	      var strokeColor = initialStrokeColor || '#ffffff';
	      if (viewFontSize <= this.elementOptions.scaling.label.drawThreshold) {
	        var opacity = Math.max(0, Math.min(1, 1 - (this.elementOptions.scaling.label.drawThreshold - viewFontSize)));
	        fontColor = util.overrideOpacity(fontColor, opacity);
	        strokeColor = util.overrideOpacity(strokeColor, opacity);
	      }
	      return [fontColor, strokeColor];
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @returns {{width: number, height: number}}
	     */

	  }, {
	    key: 'getTextSize',
	    value: function getTextSize(ctx) {
	      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	      this._processLabel(ctx, selected, hover);
	      return {
	        width: this.size.width,
	        height: this.size.height,
	        lineCount: this.lineCount
	      };
	    }

	    /**
	     * Get the current dimensions of the label
	     *
	     * @return {rect}
	     */

	  }, {
	    key: 'getSize',
	    value: function getSize() {
	      var lineMargin = 2;
	      var x = this.size.left; // default values which might be overridden below
	      var y = this.size.top - 0.5 * lineMargin; // idem

	      if (this.isEdgeLabel) {
	        var x2 = -this.size.width * 0.5;

	        switch (this.fontOptions.align) {
	          case 'middle':
	            x = x2;
	            y = -this.size.height * 0.5;
	            break;
	          case 'top':
	            x = x2;
	            y = -(this.size.height + lineMargin);
	            break;
	          case 'bottom':
	            x = x2;
	            y = lineMargin;
	            break;
	        }
	      }

	      var ret = {
	        left: x,
	        top: y,
	        width: this.size.width,
	        height: this.size.height
	      };

	      return ret;
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @param {number} [x=0]
	     * @param {number} [y=0]
	     * @param {'middle'|'hanging'} [baseline='middle']
	     */

	  }, {
	    key: 'calculateLabelSize',
	    value: function calculateLabelSize(ctx, selected, hover) {
	      var x = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
	      var y = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
	      var baseline = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'middle';

	      this._processLabel(ctx, selected, hover);
	      this.size.left = x - this.size.width * 0.5;
	      this.size.top = y - this.size.height * 0.5;
	      this.size.yLine = y + (1 - this.lineCount) * 0.5 * this.fontOptions.size;
	      if (baseline === "hanging") {
	        this.size.top += 0.5 * this.fontOptions.size;
	        this.size.top += 4; // distance from node, required because we use hanging. Hanging has less difference between browsers
	        this.size.yLine += 4; // distance from node
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @param {string} mod
	     * @returns {{color, size, face, mod, vadjust, strokeWidth: *, strokeColor: (*|string|allOptions.edges.font.strokeColor|{string}|allOptions.nodes.font.strokeColor|Array)}}
	     */

	  }, {
	    key: 'getFormattingValues',
	    value: function getFormattingValues(ctx, selected, hover, mod) {
	      var getValue = function getValue(fontOptions, mod, option) {
	        if (mod === "normal") {
	          if (option === 'mod') return "";
	          return fontOptions[option];
	        }

	        if (fontOptions[mod][option] !== undefined) {
	          // Grumbl leaving out test on undefined equals false for "" 
	          return fontOptions[mod][option];
	        } else {
	          // Take from parent font option
	          return fontOptions[option];
	        }
	      };

	      var values = {
	        color: getValue(this.fontOptions, mod, 'color'),
	        size: getValue(this.fontOptions, mod, 'size'),
	        face: getValue(this.fontOptions, mod, 'face'),
	        mod: getValue(this.fontOptions, mod, 'mod'),
	        vadjust: getValue(this.fontOptions, mod, 'vadjust'),
	        strokeWidth: this.fontOptions.strokeWidth,
	        strokeColor: this.fontOptions.strokeColor
	      };
	      if (selected || hover) {
	        if (mod === "normal" && this.fontOptions.chooser === true && this.elementOptions.labelHighlightBold) {
	          values.mod = 'bold';
	        } else {
	          if (typeof this.fontOptions.chooser === 'function') {
	            this.fontOptions.chooser(values, this.elementOptions.id, selected, hover);
	          }
	        }
	      }

	      var fontString = "";
	      if (values.mod !== undefined && values.mod !== "") {
	        // safeguard for undefined - this happened
	        fontString += values.mod + " ";
	      }
	      fontString += values.size + "px " + values.face;

	      ctx.font = fontString.replace(/"/g, "");
	      values.font = ctx.font;
	      values.height = values.size;
	      return values;
	    }

	    /**
	     *
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @returns {boolean}
	     */

	  }, {
	    key: 'differentState',
	    value: function differentState(selected, hover) {
	      return selected !== this.selectedState || hover !== this.hoverState;
	    }

	    /**
	     * This explodes the passed text into lines and determines the width, height and number of lines.
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @param {string} inText  the text to explode
	     * @returns {{width, height, lines}|*}
	     * @private
	     */

	  }, {
	    key: '_processLabelText',
	    value: function _processLabelText(ctx, selected, hover, inText) {
	      var splitter = new LabelSplitter(ctx, this, selected, hover);
	      return splitter.process(inText);
	    }

	    /**
	     * This explodes the label string into lines and sets the width, height and number of lines.
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @private
	     */

	  }, {
	    key: '_processLabel',
	    value: function _processLabel(ctx, selected, hover) {

	      if (this.labelDirty === false && !this.differentState(selected, hover)) return;

	      var state = this._processLabelText(ctx, selected, hover, this.elementOptions.label);

	      if (this.fontOptions.minWdt > 0 && state.width < this.fontOptions.minWdt) {
	        state.width = this.fontOptions.minWdt;
	      }

	      this.size.labelHeight = state.height;
	      if (this.fontOptions.minHgt > 0 && state.height < this.fontOptions.minHgt) {
	        state.height = this.fontOptions.minHgt;
	      }

	      this.lines = state.lines;
	      this.lineCount = state.lines.length;
	      this.size.width = state.width;
	      this.size.height = state.height;
	      this.selectedState = selected;
	      this.hoverState = hover;

	      this.labelDirty = false;
	    }

	    /**
	     * Check if this label is visible
	     *
	     * @return {boolean} true if this label will be show, false otherwise
	     */

	  }, {
	    key: 'visible',
	    value: function visible() {
	      if (this.size.width === 0 || this.size.height === 0 || this.elementOptions.label === undefined) {
	        return false; // nothing to display
	      }

	      var viewFontSize = this.fontOptions.size * this.body.view.scale;
	      if (viewFontSize < this.elementOptions.scaling.label.drawThreshold - 1) {
	        return false; // Too small or too far away to show
	      }

	      return true;
	    }
	  }], [{
	    key: 'parseFontString',
	    value: function parseFontString(outOptions, inOptions) {
	      if (!inOptions || typeof inOptions !== 'string') return false;

	      var newOptionsArray = inOptions.split(" ");

	      outOptions.size = newOptionsArray[0].replace("px", '');
	      outOptions.face = newOptionsArray[1];
	      outOptions.color = newOptionsArray[2];

	      return true;
	    }
	  }]);
	  return Label;
	}();

	exports['default'] = Label;

	/***/ }),
	/* 118 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _slicedToArray2 = __webpack_require__(30);

	var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var util = __webpack_require__(2);
	var EndPoints = __webpack_require__(119)["default"];

	/**
	 * The Base Class for all edges.
	 *
	 */

	var EdgeBase = function () {
	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function EdgeBase(options, body, labelModule) {
	    (0, _classCallCheck3["default"])(this, EdgeBase);

	    this.body = body;
	    this.labelModule = labelModule;
	    this.options = {};
	    this.setOptions(options);
	    this.colorDirty = true;
	    this.color = {};
	    this.selectionWidth = 2;
	    this.hoverWidth = 1.5;
	    this.fromPoint = this.from;
	    this.toPoint = this.to;
	  }

	  /**
	   * Connects a node to itself
	   */


	  (0, _createClass3["default"])(EdgeBase, [{
	    key: "connect",
	    value: function connect() {
	      this.from = this.body.nodes[this.options.from];
	      this.to = this.body.nodes[this.options.to];
	    }

	    /**
	     *
	     * @returns {boolean} always false
	     */

	  }, {
	    key: "cleanup",
	    value: function cleanup() {
	      return false;
	    }

	    /**
	     *
	     * @param {Object} options
	     */

	  }, {
	    key: "setOptions",
	    value: function setOptions(options) {
	      this.options = options;
	      this.from = this.body.nodes[this.options.from];
	      this.to = this.body.nodes[this.options.to];
	      this.id = this.options.id;
	    }

	    /**
	     * Redraw a edge as a line
	     * Draw this edge in the given canvas
	     * The 2d context of a HTML canvas can be retrieved by canvas.getContext("2d");
	     *
	     * @param {CanvasRenderingContext2D}   ctx
	     * @param {Array} values
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @param {Node} viaNode
	     * @private
	     */

	  }, {
	    key: "drawLine",
	    value: function drawLine(ctx, values, selected, hover, viaNode) {
	      // set style
	      ctx.strokeStyle = this.getColor(ctx, values, selected, hover);
	      ctx.lineWidth = values.width;

	      if (values.dashes !== false) {
	        this._drawDashedLine(ctx, values, viaNode);
	      } else {
	        this._drawLine(ctx, values, viaNode);
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D}   ctx
	     * @param {Array} values
	     * @param {Node} viaNode
	     * @param {{x: number, y: number}} [fromPoint]
	     * @param {{x: number, y: number}} [toPoint]
	     * @private
	     */

	  }, {
	    key: "_drawLine",
	    value: function _drawLine(ctx, values, viaNode, fromPoint, toPoint) {
	      if (this.from != this.to) {
	        // draw line
	        this._line(ctx, values, viaNode, fromPoint, toPoint);
	      } else {
	        var _getCircleData2 = this._getCircleData(ctx),
	            _getCircleData3 = (0, _slicedToArray3["default"])(_getCircleData2, 3),
	            x = _getCircleData3[0],
	            y = _getCircleData3[1],
	            radius = _getCircleData3[2];

	        this._circle(ctx, values, x, y, radius);
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {Array} values
	     * @param {Node} viaNode
	     * @param {{x: number, y: number}} [fromPoint]  TODO: Remove in next major release
	     * @param {{x: number, y: number}} [toPoint]    TODO: Remove in next major release
	     * @private
	     */

	  }, {
	    key: "_drawDashedLine",
	    value: function _drawDashedLine(ctx, values, viaNode, fromPoint, toPoint) {
	      // eslint-disable-line no-unused-vars
	      ctx.lineCap = 'round';
	      var pattern = [5, 5];
	      if (Array.isArray(values.dashes) === true) {
	        pattern = values.dashes;
	      }

	      // only firefox and chrome support this method, else we use the legacy one.
	      if (ctx.setLineDash !== undefined) {
	        ctx.save();

	        // set dash settings for chrome or firefox
	        ctx.setLineDash(pattern);
	        ctx.lineDashOffset = 0;

	        // draw the line
	        if (this.from != this.to) {
	          // draw line
	          this._line(ctx, values, viaNode);
	        } else {
	          var _getCircleData4 = this._getCircleData(ctx),
	              _getCircleData5 = (0, _slicedToArray3["default"])(_getCircleData4, 3),
	              x = _getCircleData5[0],
	              y = _getCircleData5[1],
	              radius = _getCircleData5[2];

	          this._circle(ctx, values, x, y, radius);
	        }

	        // restore the dash settings.
	        ctx.setLineDash([0]);
	        ctx.lineDashOffset = 0;
	        ctx.restore();
	      } else {
	        // unsupporting smooth lines
	        if (this.from != this.to) {
	          // draw line
	          ctx.dashedLine(this.from.x, this.from.y, this.to.x, this.to.y, pattern);
	        } else {
	          var _getCircleData6 = this._getCircleData(ctx),
	              _getCircleData7 = (0, _slicedToArray3["default"])(_getCircleData6, 3),
	              _x = _getCircleData7[0],
	              _y = _getCircleData7[1],
	              _radius = _getCircleData7[2];

	          this._circle(ctx, values, _x, _y, _radius);
	        }
	        // draw shadow if enabled
	        this.enableShadow(ctx, values);

	        ctx.stroke();

	        // disable shadows for other elements.
	        this.disableShadow(ctx, values);
	      }
	    }

	    /**
	     *
	     * @param {Node} nearNode
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {Object} options
	     * @returns {{x: number, y: number}}
	     */

	  }, {
	    key: "findBorderPosition",
	    value: function findBorderPosition(nearNode, ctx, options) {
	      if (this.from != this.to) {
	        return this._findBorderPosition(nearNode, ctx, options);
	      } else {
	        return this._findBorderPositionCircle(nearNode, ctx, options);
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @returns {{from: ({x: number, y: number, t: number}|*), to: ({x: number, y: number, t: number}|*)}}
	     */

	  }, {
	    key: "findBorderPositions",
	    value: function findBorderPositions(ctx) {
	      var from = {};
	      var to = {};
	      if (this.from != this.to) {
	        from = this._findBorderPosition(this.from, ctx);
	        to = this._findBorderPosition(this.to, ctx);
	      } else {
	        var _getCircleData$slice = this._getCircleData(ctx).slice(0, 2),
	            _getCircleData$slice2 = (0, _slicedToArray3["default"])(_getCircleData$slice, 2),
	            x = _getCircleData$slice2[0],
	            y = _getCircleData$slice2[1];

	        from = this._findBorderPositionCircle(this.from, ctx, { x: x, y: y, low: 0.25, high: 0.6, direction: -1 });
	        to = this._findBorderPositionCircle(this.from, ctx, { x: x, y: y, low: 0.6, high: 0.8, direction: 1 });
	      }
	      return { from: from, to: to };
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @returns {Array.<number>} x, y, radius
	     * @private
	     */

	  }, {
	    key: "_getCircleData",
	    value: function _getCircleData(ctx) {
	      var x = void 0,
	          y = void 0;
	      var node = this.from;
	      var radius = this.options.selfReferenceSize;

	      if (ctx !== undefined) {
	        if (node.shape.width === undefined) {
	          node.shape.resize(ctx);
	        }
	      }

	      // get circle coordinates
	      if (node.shape.width > node.shape.height) {
	        x = node.x + node.shape.width * 0.5;
	        y = node.y - radius;
	      } else {
	        x = node.x + radius;
	        y = node.y - node.shape.height * 0.5;
	      }
	      return [x, y, radius];
	    }

	    /**
	     * Get a point on a circle
	     * @param {number} x
	     * @param {number} y
	     * @param {number} radius
	     * @param {number} percentage - Value between 0 (line start) and 1 (line end)
	     * @return {Object} point
	     * @private
	     */

	  }, {
	    key: "_pointOnCircle",
	    value: function _pointOnCircle(x, y, radius, percentage) {
	      var angle = percentage * 2 * Math.PI;
	      return {
	        x: x + radius * Math.cos(angle),
	        y: y - radius * Math.sin(angle)
	      };
	    }

	    /**
	     * This function uses binary search to look for the point where the circle crosses the border of the node.
	     * @param {Node} node
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {Object} options
	     * @returns {*}
	     * @private
	     */

	  }, {
	    key: "_findBorderPositionCircle",
	    value: function _findBorderPositionCircle(node, ctx, options) {
	      var x = options.x;
	      var y = options.y;
	      var low = options.low;
	      var high = options.high;
	      var direction = options.direction;

	      var maxIterations = 10;
	      var iteration = 0;
	      var radius = this.options.selfReferenceSize;
	      var pos = void 0,
	          angle = void 0,
	          distanceToBorder = void 0,
	          distanceToPoint = void 0,
	          difference = void 0;
	      var threshold = 0.05;
	      var middle = (low + high) * 0.5;

	      while (low <= high && iteration < maxIterations) {
	        middle = (low + high) * 0.5;

	        pos = this._pointOnCircle(x, y, radius, middle);
	        angle = Math.atan2(node.y - pos.y, node.x - pos.x);
	        distanceToBorder = node.distanceToBorder(ctx, angle);
	        distanceToPoint = Math.sqrt(Math.pow(pos.x - node.x, 2) + Math.pow(pos.y - node.y, 2));
	        difference = distanceToBorder - distanceToPoint;
	        if (Math.abs(difference) < threshold) {
	          break; // found
	        } else if (difference > 0) {
	          // distance to nodes is larger than distance to border --> t needs to be bigger if we're looking at the to node.
	          if (direction > 0) {
	            low = middle;
	          } else {
	            high = middle;
	          }
	        } else {
	          if (direction > 0) {
	            high = middle;
	          } else {
	            low = middle;
	          }
	        }
	        iteration++;
	      }
	      pos.t = middle;

	      return pos;
	    }

	    /**
	     * Get the line width of the edge. Depends on width and whether one of the
	     * connected nodes is selected.
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @returns {number} width
	     * @private
	     */

	  }, {
	    key: "getLineWidth",
	    value: function getLineWidth(selected, hover) {
	      if (selected === true) {
	        return Math.max(this.selectionWidth, 0.3 / this.body.view.scale);
	      } else {
	        if (hover === true) {
	          return Math.max(this.hoverWidth, 0.3 / this.body.view.scale);
	        } else {
	          return Math.max(this.options.width, 0.3 / this.body.view.scale);
	        }
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     * @param {boolean} selected - Unused
	     * @param {boolean} hover - Unused
	     * @returns {string}
	     */

	  }, {
	    key: "getColor",
	    value: function getColor(ctx, values, selected, hover) {
	      // eslint-disable-line no-unused-vars
	      if (values.inheritsColor !== false) {
	        // when this is a loop edge, just use the 'from' method
	        if (values.inheritsColor === 'both' && this.from.id !== this.to.id) {
	          var grd = ctx.createLinearGradient(this.from.x, this.from.y, this.to.x, this.to.y);
	          var fromColor = void 0,
	              toColor = void 0;
	          fromColor = this.from.options.color.highlight.border;
	          toColor = this.to.options.color.highlight.border;

	          if (this.from.selected === false && this.to.selected === false) {
	            fromColor = util.overrideOpacity(this.from.options.color.border, values.opacity);
	            toColor = util.overrideOpacity(this.to.options.color.border, values.opacity);
	          } else if (this.from.selected === true && this.to.selected === false) {
	            toColor = this.to.options.color.border;
	          } else if (this.from.selected === false && this.to.selected === true) {
	            fromColor = this.from.options.color.border;
	          }
	          grd.addColorStop(0, fromColor);
	          grd.addColorStop(1, toColor);

	          // -------------------- this returns -------------------- //
	          return grd;
	        }

	        if (values.inheritsColor === "to") {
	          return util.overrideOpacity(this.to.options.color.border, values.opacity);
	        } else {
	          // "from"
	          return util.overrideOpacity(this.from.options.color.border, values.opacity);
	        }
	      } else {
	        return util.overrideOpacity(values.color, values.opacity);
	      }
	    }

	    /**
	     * Draw a line from a node to itself, a circle
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {Array} values
	     * @param {number} x
	     * @param {number} y
	     * @param {number} radius
	     * @private
	     */

	  }, {
	    key: "_circle",
	    value: function _circle(ctx, values, x, y, radius) {
	      // draw shadow if enabled
	      this.enableShadow(ctx, values);

	      // draw a circle
	      ctx.beginPath();
	      ctx.arc(x, y, radius, 0, 2 * Math.PI, false);
	      ctx.stroke();

	      // disable shadows for other elements.
	      this.disableShadow(ctx, values);
	    }

	    /**
	     * Calculate the distance between a point (x3,y3) and a line segment from (x1,y1) to (x2,y2).
	     * (x3,y3) is the point.
	     *
	     * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
	     *
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x3
	     * @param {number} y3
	     * @param {Node} via
	     * @param {Array} values
	     * @returns {number}
	     */

	  }, {
	    key: "getDistanceToEdge",
	    value: function getDistanceToEdge(x1, y1, x2, y2, x3, y3, via, values) {
	      // eslint-disable-line no-unused-vars
	      var returnValue = 0;
	      if (this.from != this.to) {
	        returnValue = this._getDistanceToEdge(x1, y1, x2, y2, x3, y3, via);
	      } else {
	        var _getCircleData8 = this._getCircleData(undefined),
	            _getCircleData9 = (0, _slicedToArray3["default"])(_getCircleData8, 3),
	            x = _getCircleData9[0],
	            y = _getCircleData9[1],
	            radius = _getCircleData9[2];

	        var dx = x - x3;
	        var dy = y - y3;
	        returnValue = Math.abs(Math.sqrt(dx * dx + dy * dy) - radius);
	      }

	      return returnValue;
	    }

	    /**
	     *
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x3
	     * @param {number} y3
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: "_getDistanceToLine",
	    value: function _getDistanceToLine(x1, y1, x2, y2, x3, y3) {
	      var px = x2 - x1;
	      var py = y2 - y1;
	      var something = px * px + py * py;
	      var u = ((x3 - x1) * px + (y3 - y1) * py) / something;

	      if (u > 1) {
	        u = 1;
	      } else if (u < 0) {
	        u = 0;
	      }

	      var x = x1 + u * px;
	      var y = y1 + u * py;
	      var dx = x - x3;
	      var dy = y - y3;

	      //# Note: If the actual distance does not matter,
	      //# if you only want to compare what this function
	      //# returns to other results of this function, you
	      //# can just return the squared distance instead
	      //# (i.e. remove the sqrt) to gain a little performance

	      return Math.sqrt(dx * dx + dy * dy);
	    }

	    /**
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {string} position
	     * @param {Node} viaNode
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @param {Array} values
	     * @returns {{point: *, core: {x: number, y: number}, angle: *, length: number, type: *}}
	     */

	  }, {
	    key: "getArrowData",
	    value: function getArrowData(ctx, position, viaNode, selected, hover, values) {
	      // set lets
	      var angle = void 0;
	      var arrowPoint = void 0;
	      var node1 = void 0;
	      var node2 = void 0;
	      var guideOffset = void 0;
	      var scaleFactor = void 0;
	      var type = void 0;
	      var lineWidth = values.width;

	      if (position === 'from') {
	        node1 = this.from;
	        node2 = this.to;
	        guideOffset = 0.1;
	        scaleFactor = values.fromArrowScale;
	        type = values.fromArrowType;
	      } else if (position === 'to') {
	        node1 = this.to;
	        node2 = this.from;
	        guideOffset = -0.1;
	        scaleFactor = values.toArrowScale;
	        type = values.toArrowType;
	      } else {
	        node1 = this.to;
	        node2 = this.from;
	        scaleFactor = values.middleArrowScale;
	        type = values.middleArrowType;
	      }

	      // if not connected to itself
	      if (node1 != node2) {
	        if (position !== 'middle') {
	          // draw arrow head
	          if (this.options.smooth.enabled === true) {
	            arrowPoint = this.findBorderPosition(node1, ctx, { via: viaNode });
	            var guidePos = this.getPoint(Math.max(0.0, Math.min(1.0, arrowPoint.t + guideOffset)), viaNode);
	            angle = Math.atan2(arrowPoint.y - guidePos.y, arrowPoint.x - guidePos.x);
	          } else {
	            angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
	            arrowPoint = this.findBorderPosition(node1, ctx);
	          }
	        } else {
	          angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
	          arrowPoint = this.getPoint(0.5, viaNode); // this is 0.6 to account for the size of the arrow.
	        }
	      } else {
	        // draw circle
	        var _getCircleData10 = this._getCircleData(ctx),
	            _getCircleData11 = (0, _slicedToArray3["default"])(_getCircleData10, 3),
	            x = _getCircleData11[0],
	            y = _getCircleData11[1],
	            radius = _getCircleData11[2];

	        if (position === 'from') {
	          arrowPoint = this.findBorderPosition(this.from, ctx, { x: x, y: y, low: 0.25, high: 0.6, direction: -1 });
	          angle = arrowPoint.t * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
	        } else if (position === 'to') {
	          arrowPoint = this.findBorderPosition(this.from, ctx, { x: x, y: y, low: 0.6, high: 1.0, direction: 1 });
	          angle = arrowPoint.t * -2 * Math.PI + 1.5 * Math.PI - 1.1 * Math.PI;
	        } else {
	          arrowPoint = this._pointOnCircle(x, y, radius, 0.175);
	          angle = 3.9269908169872414; // === 0.175 * -2 * Math.PI + 1.5 * Math.PI + 0.1 * Math.PI;
	        }
	      }

	      if (position === 'middle' && scaleFactor < 0) lineWidth *= -1; // reversed middle arrow
	      var length = 15 * scaleFactor + 3 * lineWidth; // 3* lineWidth is the width of the edge.

	      var xi = arrowPoint.x - length * 0.9 * Math.cos(angle);
	      var yi = arrowPoint.y - length * 0.9 * Math.sin(angle);
	      var arrowCore = { x: xi, y: yi };

	      return { point: arrowPoint, core: arrowCore, angle: angle, length: length, type: type };
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @param {Object} arrowData
	     */

	  }, {
	    key: "drawArrowHead",
	    value: function drawArrowHead(ctx, values, selected, hover, arrowData) {
	      // set style
	      ctx.strokeStyle = this.getColor(ctx, values, selected, hover);
	      ctx.fillStyle = ctx.strokeStyle;
	      ctx.lineWidth = values.width;

	      EndPoints.draw(ctx, arrowData);

	      // draw shadow if enabled
	      this.enableShadow(ctx, values);
	      ctx.fill();
	      // disable shadows for other elements.
	      this.disableShadow(ctx, values);
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: "enableShadow",
	    value: function enableShadow(ctx, values) {
	      if (values.shadow === true) {
	        ctx.shadowColor = values.shadowColor;
	        ctx.shadowBlur = values.shadowSize;
	        ctx.shadowOffsetX = values.shadowX;
	        ctx.shadowOffsetY = values.shadowY;
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: "disableShadow",
	    value: function disableShadow(ctx, values) {
	      if (values.shadow === true) {
	        ctx.shadowColor = 'rgba(0,0,0,0)';
	        ctx.shadowBlur = 0;
	        ctx.shadowOffsetX = 0;
	        ctx.shadowOffsetY = 0;
	      }
	    }
	  }]);
	  return EdgeBase;
	}();

	exports["default"] = EdgeBase;

	/***/ }),
	/* 119 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/** ============================================================================
	 * Location of all the endpoint drawing routines.
	 *
	 * Every endpoint has its own drawing routine, which contains an endpoint definition.
	 *
	 * The endpoint definitions must have the following properies:
	 *
	 * - (0,0) is the connection point to the node it attaches to
	 * - The endpoints are orientated to the positive x-direction
	 * - The length of the endpoint is at most 1
	 *
	 * As long as the endpoint classes remain simple and not too numerous, they will
	 * be contained within this module.
	 * All classes here except `EndPoints` should be considered as private to this module.
	 *
	 * -----------------------------------------------------------------------------
	 * ### Further Actions
	 *
	 * After adding a new endpoint here, you also need to do the following things:
	 *
	 * - Add the new endpoint name to `network/options.js` in array `endPoints`.
	 * - Add the new endpoint name to the documentation.
	 *   Scan for 'arrows.to.type` and add it to the description.
	 * - Add the endpoint to the examples. At the very least, add it to example
	 *   `edgeStyles/arrowTypes`.
	 * ============================================================================= */

	// NOTE: When a typedef is isolated in a separate comment block, an actual description is generated for it,
	//       using the rest of the commenting in the code block. Usage of typedef in other comments then
	//       link to there. TIL.
	//
	//       Also noteworthy, all typedef's set up in this manner are collected in a single, global page 'global.html'.
	//       In other words, it doesn't matter *where* the typedef's are defined in the code.
	//
	//
	// TODO: add descriptive commenting to given typedef's

	/**
	 * @typedef {{type:string, point:Point, angle:number, length:number}} ArrowData
	 *
	 * Object containing instantiation data for a given endpoint.
	 */

	/**
	 * @typedef {{x:number, y:number}} Point
	 * 
	 * A point in view-coordinates.
	 */

	/**
	 * Common methods for endpoints
	 *
	 * @class
	 */
	var EndPoint = function () {
	  function EndPoint() {
	    (0, _classCallCheck3['default'])(this, EndPoint);
	  }

	  (0, _createClass3['default'])(EndPoint, null, [{
	    key: 'transform',


	    /**
	     * Apply transformation on points for display.
	     *
	     * The following is done:
	     * - rotate by the specified angle
	     * - multiply the (normalized) coordinates by the passed length
	     * - offset by the target coordinates
	     *
	     * @param {Array<Point>} points
	     * @param {ArrowData} arrowData
	     * @static
	     */
	    value: function transform(points, arrowData) {
	      if (!(points instanceof Array)) {
	        points = [points];
	      }

	      var x = arrowData.point.x;
	      var y = arrowData.point.y;
	      var angle = arrowData.angle;
	      var length = arrowData.length;

	      for (var i = 0; i < points.length; ++i) {
	        var p = points[i];
	        var xt = p.x * Math.cos(angle) - p.y * Math.sin(angle);
	        var yt = p.x * Math.sin(angle) + p.y * Math.cos(angle);

	        p.x = x + length * xt;
	        p.y = y + length * yt;
	      }
	    }

	    /**
	     * Draw a closed path using the given real coordinates.
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {Array.<Point>} points
	     * @static
	     */

	  }, {
	    key: 'drawPath',
	    value: function drawPath(ctx, points) {
	      ctx.beginPath();
	      ctx.moveTo(points[0].x, points[0].y);
	      for (var i = 1; i < points.length; ++i) {
	        ctx.lineTo(points[i].x, points[i].y);
	      }
	      ctx.closePath();
	    }
	  }]);
	  return EndPoint;
	}();

	/**
	 * Drawing methods for the arrow endpoint.
	 * @extends EndPoint
	 */


	var Arrow = function (_EndPoint) {
	  (0, _inherits3['default'])(Arrow, _EndPoint);

	  function Arrow() {
	    (0, _classCallCheck3['default'])(this, Arrow);
	    return (0, _possibleConstructorReturn3['default'])(this, (Arrow.__proto__ || (0, _getPrototypeOf2['default'])(Arrow)).apply(this, arguments));
	  }

	  (0, _createClass3['default'])(Arrow, null, [{
	    key: 'draw',


	    /**
	     * Draw this shape at the end of a line.
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {ArrowData} arrowData
	     * @static
	     */
	    value: function draw(ctx, arrowData) {
	      // Normalized points of closed path, in the order that they should be drawn.
	      // (0, 0) is the attachment point, and the point around which should be rotated
	      var points = [{ x: 0, y: 0 }, { x: -1, y: 0.3 }, { x: -0.9, y: 0 }, { x: -1, y: -0.3 }];

	      EndPoint.transform(points, arrowData);
	      EndPoint.drawPath(ctx, points);
	    }
	  }]);
	  return Arrow;
	}(EndPoint);

	/**
	 * Drawing methods for the circle endpoint.
	 */


	var Circle = function () {
	  function Circle() {
	    (0, _classCallCheck3['default'])(this, Circle);
	  }

	  (0, _createClass3['default'])(Circle, null, [{
	    key: 'draw',


	    /**
	     * Draw this shape at the end of a line.
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {ArrowData} arrowData
	     * @static
	     */
	    value: function draw(ctx, arrowData) {
	      var point = { x: -0.4, y: 0 };

	      EndPoint.transform(point, arrowData);
	      ctx.circle(point.x, point.y, arrowData.length * 0.4);
	    }
	  }]);
	  return Circle;
	}();

	/**
	 * Drawing methods for the bar endpoint.
	 */


	var Bar = function () {
	  function Bar() {
	    (0, _classCallCheck3['default'])(this, Bar);
	  }

	  (0, _createClass3['default'])(Bar, null, [{
	    key: 'draw',


	    /**
	     * Draw this shape at the end of a line.
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {ArrowData} arrowData
	     * @static
	     */
	    value: function draw(ctx, arrowData) {
	      /*
	          var points = [
	            {x:0, y:0.5},
	            {x:0, y:-0.5}
	          ];
	      
	          EndPoint.transform(points, arrowData);
	          ctx.beginPath();
	          ctx.moveTo(points[0].x, points[0].y);
	          ctx.lineTo(points[1].x, points[1].y);
	          ctx.stroke();
	      */

	      var points = [{ x: 0, y: 0.5 }, { x: 0, y: -0.5 }, { x: -0.15, y: -0.5 }, { x: -0.15, y: 0.5 }];

	      EndPoint.transform(points, arrowData);
	      EndPoint.drawPath(ctx, points);
	    }
	  }]);
	  return Bar;
	}();

	/**
	 * Drawing methods for the endpoints.
	 */


	var EndPoints = function () {
	  function EndPoints() {
	    (0, _classCallCheck3['default'])(this, EndPoints);
	  }

	  (0, _createClass3['default'])(EndPoints, null, [{
	    key: 'draw',


	    /**
	     * Draw an endpoint
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {ArrowData} arrowData
	     * @static
	     */
	    value: function draw(ctx, arrowData) {
	      var type;
	      if (arrowData.type) {
	        type = arrowData.type.toLowerCase();
	      }

	      switch (type) {
	        case 'circle':
	          Circle.draw(ctx, arrowData);
	          break;
	        case 'bar':
	          Bar.draw(ctx, arrowData);
	          break;
	        case 'arrow': // fall-through
	        default:
	          Arrow.draw(ctx, arrowData);
	      }
	    }
	  }]);
	  return EndPoints;
	}();

	exports['default'] = EndPoints;

	/***/ }),
	/* 120 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * Barnes Hut Solver
	 */
	var BarnesHutSolver = function () {
	  /**
	   * @param {Object} body
	   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
	   * @param {Object} options
	   */
	  function BarnesHutSolver(body, physicsBody, options) {
	    (0, _classCallCheck3["default"])(this, BarnesHutSolver);

	    this.body = body;
	    this.physicsBody = physicsBody;
	    this.barnesHutTree;
	    this.setOptions(options);
	    this.randomSeed = 5;

	    // debug: show grid
	    // this.body.emitter.on("afterDrawing", (ctx) => {this._debug(ctx,'#ff0000')})
	  }

	  /**
	   *
	   * @param {Object} options
	   */


	  (0, _createClass3["default"])(BarnesHutSolver, [{
	    key: "setOptions",
	    value: function setOptions(options) {
	      this.options = options;
	      this.thetaInversed = 1 / this.options.theta;

	      // if 1 then min distance = 0.5, if 0.5 then min distance = 0.5 + 0.5*node.shape.radius
	      this.overlapAvoidanceFactor = 1 - Math.max(0, Math.min(1, this.options.avoidOverlap));
	    }

	    /**
	     *
	     * @returns {number} random integer
	     */

	  }, {
	    key: "seededRandom",
	    value: function seededRandom() {
	      var x = Math.sin(this.randomSeed++) * 10000;
	      return x - Math.floor(x);
	    }

	    /**
	     * This function calculates the forces the nodes apply on each other based on a gravitational model.
	     * The Barnes Hut method is used to speed up this N-body simulation.
	     *
	     * @private
	     */

	  }, {
	    key: "solve",
	    value: function solve() {
	      if (this.options.gravitationalConstant !== 0 && this.physicsBody.physicsNodeIndices.length > 0) {
	        var node = void 0;
	        var nodes = this.body.nodes;
	        var nodeIndices = this.physicsBody.physicsNodeIndices;
	        var nodeCount = nodeIndices.length;

	        // create the tree
	        var barnesHutTree = this._formBarnesHutTree(nodes, nodeIndices);

	        // for debugging
	        this.barnesHutTree = barnesHutTree;

	        // place the nodes one by one recursively
	        for (var i = 0; i < nodeCount; i++) {
	          node = nodes[nodeIndices[i]];
	          if (node.options.mass > 0) {
	            // starting with root is irrelevant, it never passes the BarnesHutSolver condition
	            this._getForceContributions(barnesHutTree.root, node);
	          }
	        }
	      }
	    }

	    /**
	     * @param {Object} parentBranch
	     * @param {Node} node
	     * @private
	     */

	  }, {
	    key: "_getForceContributions",
	    value: function _getForceContributions(parentBranch, node) {
	      this._getForceContribution(parentBranch.children.NW, node);
	      this._getForceContribution(parentBranch.children.NE, node);
	      this._getForceContribution(parentBranch.children.SW, node);
	      this._getForceContribution(parentBranch.children.SE, node);
	    }

	    /**
	     * This function traverses the barnesHutTree. It checks when it can approximate distant nodes with their center of mass.
	     * If a region contains a single node, we check if it is not itself, then we apply the force.
	     *
	     * @param {Object} parentBranch
	     * @param {Node} node
	     * @private
	     */

	  }, {
	    key: "_getForceContribution",
	    value: function _getForceContribution(parentBranch, node) {
	      // we get no force contribution from an empty region
	      if (parentBranch.childrenCount > 0) {
	        var dx = void 0,
	            dy = void 0,
	            distance = void 0;

	        // get the distance from the center of mass to the node.
	        dx = parentBranch.centerOfMass.x - node.x;
	        dy = parentBranch.centerOfMass.y - node.y;
	        distance = Math.sqrt(dx * dx + dy * dy);

	        // BarnesHutSolver condition
	        // original condition : s/d < theta = passed  ===  d/s > 1/theta = passed
	        // calcSize = 1/s --> d * 1/s > 1/theta = passed
	        if (distance * parentBranch.calcSize > this.thetaInversed) {
	          this._calculateForces(distance, dx, dy, node, parentBranch);
	        } else {
	          // Did not pass the condition, go into children if available
	          if (parentBranch.childrenCount === 4) {
	            this._getForceContributions(parentBranch, node);
	          } else {
	            // parentBranch must have only one node, if it was empty we wouldnt be here
	            if (parentBranch.children.data.id != node.id) {
	              // if it is not self
	              this._calculateForces(distance, dx, dy, node, parentBranch);
	            }
	          }
	        }
	      }
	    }

	    /**
	     * Calculate the forces based on the distance.
	     *
	     * @param {number} distance
	     * @param {number} dx
	     * @param {number} dy
	     * @param {Node} node
	     * @param {Object} parentBranch
	     * @private
	     */

	  }, {
	    key: "_calculateForces",
	    value: function _calculateForces(distance, dx, dy, node, parentBranch) {
	      if (distance === 0) {
	        distance = 0.1;
	        dx = distance;
	      }

	      if (this.overlapAvoidanceFactor < 1 && node.shape.radius) {
	        distance = Math.max(0.1 + this.overlapAvoidanceFactor * node.shape.radius, distance - node.shape.radius);
	      }

	      // the dividing by the distance cubed instead of squared allows us to get the fx and fy components without sines and cosines
	      // it is shorthand for gravityforce with distance squared and fx = dx/distance * gravityForce
	      var gravityForce = this.options.gravitationalConstant * parentBranch.mass * node.options.mass / Math.pow(distance, 3);
	      var fx = dx * gravityForce;
	      var fy = dy * gravityForce;

	      this.physicsBody.forces[node.id].x += fx;
	      this.physicsBody.forces[node.id].y += fy;
	    }

	    /**
	     * This function constructs the barnesHut tree recursively. It creates the root, splits it and starts placing the nodes.
	     *
	     * @param {Array.<Node>} nodes
	     * @param {Array.<number>} nodeIndices
	     * @returns {{root: {centerOfMass: {x: number, y: number}, mass: number, range: {minX: number, maxX: number, minY: number, maxY: number}, size: number, calcSize: number, children: {data: null}, maxWidth: number, level: number, childrenCount: number}}} BarnesHutTree
	     * @private
	     */

	  }, {
	    key: "_formBarnesHutTree",
	    value: function _formBarnesHutTree(nodes, nodeIndices) {
	      var node = void 0;
	      var nodeCount = nodeIndices.length;

	      var minX = nodes[nodeIndices[0]].x;
	      var minY = nodes[nodeIndices[0]].y;
	      var maxX = nodes[nodeIndices[0]].x;
	      var maxY = nodes[nodeIndices[0]].y;

	      // get the range of the nodes
	      for (var i = 1; i < nodeCount; i++) {
	        var _node = nodes[nodeIndices[i]];
	        var x = _node.x;
	        var y = _node.y;
	        if (_node.options.mass > 0) {
	          if (x < minX) {
	            minX = x;
	          }
	          if (x > maxX) {
	            maxX = x;
	          }
	          if (y < minY) {
	            minY = y;
	          }
	          if (y > maxY) {
	            maxY = y;
	          }
	        }
	      }
	      // make the range a square
	      var sizeDiff = Math.abs(maxX - minX) - Math.abs(maxY - minY); // difference between X and Y
	      if (sizeDiff > 0) {
	        minY -= 0.5 * sizeDiff;
	        maxY += 0.5 * sizeDiff;
	      } // xSize > ySize
	      else {
	          minX += 0.5 * sizeDiff;
	          maxX -= 0.5 * sizeDiff;
	        } // xSize < ySize


	      var minimumTreeSize = 1e-5;
	      var rootSize = Math.max(minimumTreeSize, Math.abs(maxX - minX));
	      var halfRootSize = 0.5 * rootSize;
	      var centerX = 0.5 * (minX + maxX),
	          centerY = 0.5 * (minY + maxY);

	      // construct the barnesHutTree
	      var barnesHutTree = {
	        root: {
	          centerOfMass: { x: 0, y: 0 },
	          mass: 0,
	          range: {
	            minX: centerX - halfRootSize, maxX: centerX + halfRootSize,
	            minY: centerY - halfRootSize, maxY: centerY + halfRootSize
	          },
	          size: rootSize,
	          calcSize: 1 / rootSize,
	          children: { data: null },
	          maxWidth: 0,
	          level: 0,
	          childrenCount: 4
	        }
	      };
	      this._splitBranch(barnesHutTree.root);

	      // place the nodes one by one recursively
	      for (var _i = 0; _i < nodeCount; _i++) {
	        node = nodes[nodeIndices[_i]];
	        if (node.options.mass > 0) {
	          this._placeInTree(barnesHutTree.root, node);
	        }
	      }

	      // make global
	      return barnesHutTree;
	    }

	    /**
	     * this updates the mass of a branch. this is increased by adding a node.
	     *
	     * @param {Object} parentBranch
	     * @param {Node} node
	     * @private
	     */

	  }, {
	    key: "_updateBranchMass",
	    value: function _updateBranchMass(parentBranch, node) {
	      var centerOfMass = parentBranch.centerOfMass;
	      var totalMass = parentBranch.mass + node.options.mass;
	      var totalMassInv = 1 / totalMass;

	      centerOfMass.x = centerOfMass.x * parentBranch.mass + node.x * node.options.mass;
	      centerOfMass.x *= totalMassInv;

	      centerOfMass.y = centerOfMass.y * parentBranch.mass + node.y * node.options.mass;
	      centerOfMass.y *= totalMassInv;

	      parentBranch.mass = totalMass;
	      var biggestSize = Math.max(Math.max(node.height, node.radius), node.width);
	      parentBranch.maxWidth = parentBranch.maxWidth < biggestSize ? biggestSize : parentBranch.maxWidth;
	    }

	    /**
	     * determine in which branch the node will be placed.
	     *
	     * @param {Object} parentBranch
	     * @param {Node} node
	     * @param {boolean} skipMassUpdate
	     * @private
	     */

	  }, {
	    key: "_placeInTree",
	    value: function _placeInTree(parentBranch, node, skipMassUpdate) {
	      if (skipMassUpdate != true || skipMassUpdate === undefined) {
	        // update the mass of the branch.
	        this._updateBranchMass(parentBranch, node);
	      }

	      var range = parentBranch.children.NW.range;
	      var region = void 0;
	      if (range.maxX > node.x) {
	        // in NW or SW
	        if (range.maxY > node.y) {
	          region = "NW";
	        } else {
	          region = "SW";
	        }
	      } else {
	        // in NE or SE
	        if (range.maxY > node.y) {
	          region = "NE";
	        } else {
	          region = "SE";
	        }
	      }

	      this._placeInRegion(parentBranch, node, region);
	    }

	    /**
	     * actually place the node in a region (or branch)
	     *
	     * @param {Object} parentBranch
	     * @param {Node} node
	     * @param {'NW'| 'NE' | 'SW' | 'SE'} region
	     * @private
	     */

	  }, {
	    key: "_placeInRegion",
	    value: function _placeInRegion(parentBranch, node, region) {
	      var children = parentBranch.children[region];

	      switch (children.childrenCount) {
	        case 0:
	          // place node here
	          children.children.data = node;
	          children.childrenCount = 1;
	          this._updateBranchMass(children, node);
	          break;
	        case 1:
	          // convert into children
	          // if there are two nodes exactly overlapping (on init, on opening of cluster etc.)
	          // we move one node a little bit and we do not put it in the tree.
	          if (children.children.data.x === node.x && children.children.data.y === node.y) {
	            node.x += this.seededRandom();
	            node.y += this.seededRandom();
	          } else {
	            this._splitBranch(children);
	            this._placeInTree(children, node);
	          }
	          break;
	        case 4:
	          // place in branch
	          this._placeInTree(children, node);
	          break;
	      }
	    }

	    /**
	     * this function splits a branch into 4 sub branches. If the branch contained a node, we place it in the subbranch
	     * after the split is complete.
	     *
	     * @param {Object} parentBranch
	     * @private
	     */

	  }, {
	    key: "_splitBranch",
	    value: function _splitBranch(parentBranch) {
	      // if the branch is shaded with a node, replace the node in the new subset.
	      var containedNode = null;
	      if (parentBranch.childrenCount === 1) {
	        containedNode = parentBranch.children.data;
	        parentBranch.mass = 0;
	        parentBranch.centerOfMass.x = 0;
	        parentBranch.centerOfMass.y = 0;
	      }
	      parentBranch.childrenCount = 4;
	      parentBranch.children.data = null;
	      this._insertRegion(parentBranch, "NW");
	      this._insertRegion(parentBranch, "NE");
	      this._insertRegion(parentBranch, "SW");
	      this._insertRegion(parentBranch, "SE");

	      if (containedNode != null) {
	        this._placeInTree(parentBranch, containedNode);
	      }
	    }

	    /**
	     * This function subdivides the region into four new segments.
	     * Specifically, this inserts a single new segment.
	     * It fills the children section of the parentBranch
	     *
	     * @param {Object} parentBranch
	     * @param {'NW'| 'NE' | 'SW' | 'SE'} region
	     * @private
	     */

	  }, {
	    key: "_insertRegion",
	    value: function _insertRegion(parentBranch, region) {
	      var minX = void 0,
	          maxX = void 0,
	          minY = void 0,
	          maxY = void 0;
	      var childSize = 0.5 * parentBranch.size;
	      switch (region) {
	        case "NW":
	          minX = parentBranch.range.minX;
	          maxX = parentBranch.range.minX + childSize;
	          minY = parentBranch.range.minY;
	          maxY = parentBranch.range.minY + childSize;
	          break;
	        case "NE":
	          minX = parentBranch.range.minX + childSize;
	          maxX = parentBranch.range.maxX;
	          minY = parentBranch.range.minY;
	          maxY = parentBranch.range.minY + childSize;
	          break;
	        case "SW":
	          minX = parentBranch.range.minX;
	          maxX = parentBranch.range.minX + childSize;
	          minY = parentBranch.range.minY + childSize;
	          maxY = parentBranch.range.maxY;
	          break;
	        case "SE":
	          minX = parentBranch.range.minX + childSize;
	          maxX = parentBranch.range.maxX;
	          minY = parentBranch.range.minY + childSize;
	          maxY = parentBranch.range.maxY;
	          break;
	      }

	      parentBranch.children[region] = {
	        centerOfMass: { x: 0, y: 0 },
	        mass: 0,
	        range: { minX: minX, maxX: maxX, minY: minY, maxY: maxY },
	        size: 0.5 * parentBranch.size,
	        calcSize: 2 * parentBranch.calcSize,
	        children: { data: null },
	        maxWidth: 0,
	        level: parentBranch.level + 1,
	        childrenCount: 0
	      };
	    }

	    //---------------------------  DEBUGGING BELOW  ---------------------------//


	    /**
	     * This function is for debugging purposed, it draws the tree.
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {string} color
	     * @private
	     */

	  }, {
	    key: "_debug",
	    value: function _debug(ctx, color) {
	      if (this.barnesHutTree !== undefined) {

	        ctx.lineWidth = 1;

	        this._drawBranch(this.barnesHutTree.root, ctx, color);
	      }
	    }

	    /**
	     * This function is for debugging purposes. It draws the branches recursively.
	     *
	     * @param {Object} branch
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {string} color
	     * @private
	     */

	  }, {
	    key: "_drawBranch",
	    value: function _drawBranch(branch, ctx, color) {
	      if (color === undefined) {
	        color = "#FF0000";
	      }

	      if (branch.childrenCount === 4) {
	        this._drawBranch(branch.children.NW, ctx);
	        this._drawBranch(branch.children.NE, ctx);
	        this._drawBranch(branch.children.SE, ctx);
	        this._drawBranch(branch.children.SW, ctx);
	      }
	      ctx.strokeStyle = color;
	      ctx.beginPath();
	      ctx.moveTo(branch.range.minX, branch.range.minY);
	      ctx.lineTo(branch.range.maxX, branch.range.minY);
	      ctx.stroke();

	      ctx.beginPath();
	      ctx.moveTo(branch.range.maxX, branch.range.minY);
	      ctx.lineTo(branch.range.maxX, branch.range.maxY);
	      ctx.stroke();

	      ctx.beginPath();
	      ctx.moveTo(branch.range.maxX, branch.range.maxY);
	      ctx.lineTo(branch.range.minX, branch.range.maxY);
	      ctx.stroke();

	      ctx.beginPath();
	      ctx.moveTo(branch.range.minX, branch.range.maxY);
	      ctx.lineTo(branch.range.minX, branch.range.minY);
	      ctx.stroke();

	      /*
	       if (branch.mass > 0) {
	       ctx.circle(branch.centerOfMass.x, branch.centerOfMass.y, 3*branch.mass);
	       ctx.stroke();
	       }
	       */
	    }
	  }]);
	  return BarnesHutSolver;
	}();

	exports["default"] = BarnesHutSolver;

	/***/ }),
	/* 121 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * Central Gravity Solver
	 */
	var CentralGravitySolver = function () {
	  /**
	   * @param {Object} body
	   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
	   * @param {Object} options
	   */
	  function CentralGravitySolver(body, physicsBody, options) {
	    (0, _classCallCheck3["default"])(this, CentralGravitySolver);

	    this.body = body;
	    this.physicsBody = physicsBody;
	    this.setOptions(options);
	  }

	  /**
	   *
	   * @param {Object} options
	   */


	  (0, _createClass3["default"])(CentralGravitySolver, [{
	    key: "setOptions",
	    value: function setOptions(options) {
	      this.options = options;
	    }

	    /**
	     * Calculates forces for each node
	     */

	  }, {
	    key: "solve",
	    value: function solve() {
	      var dx = void 0,
	          dy = void 0,
	          distance = void 0,
	          node = void 0;
	      var nodes = this.body.nodes;
	      var nodeIndices = this.physicsBody.physicsNodeIndices;
	      var forces = this.physicsBody.forces;

	      for (var i = 0; i < nodeIndices.length; i++) {
	        var nodeId = nodeIndices[i];
	        node = nodes[nodeId];
	        dx = -node.x;
	        dy = -node.y;
	        distance = Math.sqrt(dx * dx + dy * dy);

	        this._calculateForces(distance, dx, dy, forces, node);
	      }
	    }

	    /**
	     * Calculate the forces based on the distance.
	     * @param {number} distance
	     * @param {number} dx
	     * @param {number} dy
	     * @param {Object<Node.id, vis.Node>} forces
	     * @param {Node} node
	     * @private
	     */

	  }, {
	    key: "_calculateForces",
	    value: function _calculateForces(distance, dx, dy, forces, node) {
	      var gravityForce = distance === 0 ? 0 : this.options.centralGravity / distance;
	      forces[node.id].x = dx * gravityForce;
	      forces[node.id].y = dy * gravityForce;
	    }
	  }]);
	  return CentralGravitySolver;
	}();

	exports["default"] = CentralGravitySolver;

	/***/ }),
	/* 122 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * This object contains all possible options. It will check if the types are correct, if required if the option is one
	 * of the allowed values.
	 *
	 * __any__ means that the name of the property does not matter.
	 * __type__ is a required field for all objects and contains the allowed types of all objects
	 */
	var string = 'string';
	var bool = 'boolean';
	var number = 'number';
	var array = 'array';
	var object = 'object'; // should only be in a __type__ property
	var dom = 'dom';
	var any = 'any';

	// List of endpoints
	var endPoints = ['arrow', 'circle', 'bar'];

	var allOptions = {
	  configure: {
	    enabled: { boolean: bool },
	    filter: { boolean: bool, string: string, array: array, 'function': 'function' },
	    container: { dom: dom },
	    showButton: { boolean: bool },
	    __type__: { object: object, boolean: bool, string: string, array: array, 'function': 'function' }
	  },
	  edges: {
	    arrows: {
	      to: { enabled: { boolean: bool }, scaleFactor: { number: number }, type: { string: endPoints }, __type__: { object: object, boolean: bool } },
	      middle: { enabled: { boolean: bool }, scaleFactor: { number: number }, type: { string: endPoints }, __type__: { object: object, boolean: bool } },
	      from: { enabled: { boolean: bool }, scaleFactor: { number: number }, type: { string: endPoints }, __type__: { object: object, boolean: bool } },
	      __type__: { string: ['from', 'to', 'middle'], object: object }
	    },
	    arrowStrikethrough: { boolean: bool },
	    chosen: {
	      label: { boolean: bool, 'function': 'function' },
	      edge: { boolean: bool, 'function': 'function' },
	      __type__: { object: object, boolean: bool }
	    },
	    color: {
	      color: { string: string },
	      highlight: { string: string },
	      hover: { string: string },
	      inherit: { string: ['from', 'to', 'both'], boolean: bool },
	      opacity: { number: number },
	      __type__: { object: object, string: string }
	    },
	    dashes: { boolean: bool, array: array },
	    font: {
	      color: { string: string },
	      size: { number: number }, // px
	      face: { string: string },
	      background: { string: string },
	      strokeWidth: { number: number }, // px
	      strokeColor: { string: string },
	      align: { string: ['horizontal', 'top', 'middle', 'bottom'] },
	      vadjust: { number: number },
	      multi: { boolean: bool, string: string },
	      bold: {
	        color: { string: string },
	        size: { number: number }, // px
	        face: { string: string },
	        mod: { string: string },
	        vadjust: { number: number },
	        __type__: { object: object, string: string }
	      },
	      boldital: {
	        color: { string: string },
	        size: { number: number }, // px
	        face: { string: string },
	        mod: { string: string },
	        vadjust: { number: number },
	        __type__: { object: object, string: string }
	      },
	      ital: {
	        color: { string: string },
	        size: { number: number }, // px
	        face: { string: string },
	        mod: { string: string },
	        vadjust: { number: number },
	        __type__: { object: object, string: string }
	      },
	      mono: {
	        color: { string: string },
	        size: { number: number }, // px
	        face: { string: string },
	        mod: { string: string },
	        vadjust: { number: number },
	        __type__: { object: object, string: string }
	      },
	      __type__: { object: object, string: string }
	    },
	    hidden: { boolean: bool },
	    hoverWidth: { 'function': 'function', number: number },
	    label: { string: string, 'undefined': 'undefined' },
	    labelHighlightBold: { boolean: bool },
	    length: { number: number, 'undefined': 'undefined' },
	    physics: { boolean: bool },
	    scaling: {
	      min: { number: number },
	      max: { number: number },
	      label: {
	        enabled: { boolean: bool },
	        min: { number: number },
	        max: { number: number },
	        maxVisible: { number: number },
	        drawThreshold: { number: number },
	        __type__: { object: object, boolean: bool }
	      },
	      customScalingFunction: { 'function': 'function' },
	      __type__: { object: object }
	    },
	    selectionWidth: { 'function': 'function', number: number },
	    selfReferenceSize: { number: number },
	    shadow: {
	      enabled: { boolean: bool },
	      color: { string: string },
	      size: { number: number },
	      x: { number: number },
	      y: { number: number },
	      __type__: { object: object, boolean: bool }
	    },
	    smooth: {
	      enabled: { boolean: bool },
	      type: { string: ['dynamic', 'continuous', 'discrete', 'diagonalCross', 'straightCross', 'horizontal', 'vertical', 'curvedCW', 'curvedCCW', 'cubicBezier'] },
	      roundness: { number: number },
	      forceDirection: { string: ['horizontal', 'vertical', 'none'], boolean: bool },
	      __type__: { object: object, boolean: bool }
	    },
	    title: { string: string, 'undefined': 'undefined' },
	    width: { number: number },
	    widthConstraint: {
	      maximum: { number: number },
	      __type__: { object: object, boolean: bool, number: number }
	    },
	    value: { number: number, 'undefined': 'undefined' },
	    __type__: { object: object }
	  },
	  groups: {
	    useDefaultGroups: { boolean: bool },
	    __any__: 'get from nodes, will be overwritten below',
	    __type__: { object: object }
	  },
	  interaction: {
	    dragNodes: { boolean: bool },
	    dragView: { boolean: bool },
	    hideEdgesOnDrag: { boolean: bool },
	    hideNodesOnDrag: { boolean: bool },
	    hover: { boolean: bool },
	    keyboard: {
	      enabled: { boolean: bool },
	      speed: { x: { number: number }, y: { number: number }, zoom: { number: number }, __type__: { object: object } },
	      bindToWindow: { boolean: bool },
	      __type__: { object: object, boolean: bool }
	    },
	    multiselect: { boolean: bool },
	    navigationButtons: { boolean: bool },
	    selectable: { boolean: bool },
	    selectConnectedEdges: { boolean: bool },
	    hoverConnectedEdges: { boolean: bool },
	    tooltipDelay: { number: number },
	    zoomView: { boolean: bool },
	    __type__: { object: object }
	  },
	  layout: {
	    randomSeed: { 'undefined': 'undefined', number: number },
	    improvedLayout: { boolean: bool },
	    hierarchical: {
	      enabled: { boolean: bool },
	      levelSeparation: { number: number },
	      nodeSpacing: { number: number },
	      treeSpacing: { number: number },
	      blockShifting: { boolean: bool },
	      edgeMinimization: { boolean: bool },
	      parentCentralization: { boolean: bool },
	      direction: { string: ['UD', 'DU', 'LR', 'RL'] }, // UD, DU, LR, RL
	      sortMethod: { string: ['hubsize', 'directed'] }, // hubsize, directed
	      __type__: { object: object, boolean: bool }
	    },
	    __type__: { object: object }
	  },
	  manipulation: {
	    enabled: { boolean: bool },
	    initiallyActive: { boolean: bool },
	    addNode: { boolean: bool, 'function': 'function' },
	    addEdge: { boolean: bool, 'function': 'function' },
	    editNode: { 'function': 'function' },
	    editEdge: {
	      editWithoutDrag: { 'function': 'function' },
	      __type__: { object: object, boolean: bool, 'function': 'function' }
	    },
	    deleteNode: { boolean: bool, 'function': 'function' },
	    deleteEdge: { boolean: bool, 'function': 'function' },
	    controlNodeStyle: 'get from nodes, will be overwritten below',
	    __type__: { object: object, boolean: bool }
	  },
	  nodes: {
	    borderWidth: { number: number },
	    borderWidthSelected: { number: number, 'undefined': 'undefined' },
	    brokenImage: { string: string, 'undefined': 'undefined' },
	    chosen: {
	      label: { boolean: bool, 'function': 'function' },
	      node: { boolean: bool, 'function': 'function' },
	      __type__: { object: object, boolean: bool }
	    },
	    color: {
	      border: { string: string },
	      background: { string: string },
	      highlight: {
	        border: { string: string },
	        background: { string: string },
	        __type__: { object: object, string: string }
	      },
	      hover: {
	        border: { string: string },
	        background: { string: string },
	        __type__: { object: object, string: string }
	      },
	      __type__: { object: object, string: string }
	    },
	    fixed: {
	      x: { boolean: bool },
	      y: { boolean: bool },
	      __type__: { object: object, boolean: bool }
	    },
	    font: {
	      align: { string: string },
	      color: { string: string },
	      size: { number: number }, // px
	      face: { string: string },
	      background: { string: string },
	      strokeWidth: { number: number }, // px
	      strokeColor: { string: string },
	      vadjust: { number: number },
	      multi: { boolean: bool, string: string },
	      bold: {
	        color: { string: string },
	        size: { number: number }, // px
	        face: { string: string },
	        mod: { string: string },
	        vadjust: { number: number },
	        __type__: { object: object, string: string }
	      },
	      boldital: {
	        color: { string: string },
	        size: { number: number }, // px
	        face: { string: string },
	        mod: { string: string },
	        vadjust: { number: number },
	        __type__: { object: object, string: string }
	      },
	      ital: {
	        color: { string: string },
	        size: { number: number }, // px
	        face: { string: string },
	        mod: { string: string },
	        vadjust: { number: number },
	        __type__: { object: object, string: string }
	      },
	      mono: {
	        color: { string: string },
	        size: { number: number }, // px
	        face: { string: string },
	        mod: { string: string },
	        vadjust: { number: number },
	        __type__: { object: object, string: string }
	      },
	      __type__: { object: object, string: string }
	    },
	    group: { string: string, number: number, 'undefined': 'undefined' },
	    heightConstraint: {
	      minimum: { number: number },
	      valign: { string: string },
	      __type__: { object: object, boolean: bool, number: number }
	    },
	    hidden: { boolean: bool },
	    icon: {
	      face: { string: string },
	      code: { string: string }, //'\uf007',
	      size: { number: number }, //50,
	      color: { string: string },
	      __type__: { object: object }
	    },
	    id: { string: string, number: number },
	    image: {
	      selected: { string: string, 'undefined': 'undefined' }, // --> URL
	      unselected: { string: string, 'undefined': 'undefined' }, // --> URL
	      __type__: { object: object, string: string }
	    },
	    label: { string: string, 'undefined': 'undefined' },
	    labelHighlightBold: { boolean: bool },
	    level: { number: number, 'undefined': 'undefined' },
	    margin: {
	      top: { number: number },
	      right: { number: number },
	      bottom: { number: number },
	      left: { number: number },
	      __type__: { object: object, number: number }
	    },
	    mass: { number: number },
	    physics: { boolean: bool },
	    scaling: {
	      min: { number: number },
	      max: { number: number },
	      label: {
	        enabled: { boolean: bool },
	        min: { number: number },
	        max: { number: number },
	        maxVisible: { number: number },
	        drawThreshold: { number: number },
	        __type__: { object: object, boolean: bool }
	      },
	      customScalingFunction: { 'function': 'function' },
	      __type__: { object: object }
	    },
	    shadow: {
	      enabled: { boolean: bool },
	      color: { string: string },
	      size: { number: number },
	      x: { number: number },
	      y: { number: number },
	      __type__: { object: object, boolean: bool }
	    },
	    shape: { string: ['ellipse', 'circle', 'database', 'box', 'text', 'image', 'circularImage', 'diamond', 'dot', 'star', 'triangle', 'triangleDown', 'square', 'icon', 'hexagon'] },
	    shapeProperties: {
	      borderDashes: { boolean: bool, array: array },
	      borderRadius: { number: number },
	      interpolation: { boolean: bool },
	      useImageSize: { boolean: bool },
	      useBorderWithImage: { boolean: bool },
	      __type__: { object: object }
	    },
	    size: { number: number },
	    title: { string: string, dom: dom, 'undefined': 'undefined' },
	    value: { number: number, 'undefined': 'undefined' },
	    widthConstraint: {
	      minimum: { number: number },
	      maximum: { number: number },
	      __type__: { object: object, boolean: bool, number: number }
	    },
	    x: { number: number },
	    y: { number: number },
	    __type__: { object: object }
	  },
	  physics: {
	    enabled: { boolean: bool },
	    barnesHut: {
	      gravitationalConstant: { number: number },
	      centralGravity: { number: number },
	      springLength: { number: number },
	      springConstant: { number: number },
	      damping: { number: number },
	      avoidOverlap: { number: number },
	      __type__: { object: object }
	    },
	    forceAtlas2Based: {
	      gravitationalConstant: { number: number },
	      centralGravity: { number: number },
	      springLength: { number: number },
	      springConstant: { number: number },
	      damping: { number: number },
	      avoidOverlap: { number: number },
	      __type__: { object: object }
	    },
	    repulsion: {
	      centralGravity: { number: number },
	      springLength: { number: number },
	      springConstant: { number: number },
	      nodeDistance: { number: number },
	      damping: { number: number },
	      __type__: { object: object }
	    },
	    hierarchicalRepulsion: {
	      centralGravity: { number: number },
	      springLength: { number: number },
	      springConstant: { number: number },
	      nodeDistance: { number: number },
	      damping: { number: number },
	      __type__: { object: object }
	    },
	    maxVelocity: { number: number },
	    minVelocity: { number: number }, // px/s
	    solver: { string: ['barnesHut', 'repulsion', 'hierarchicalRepulsion', 'forceAtlas2Based'] },
	    stabilization: {
	      enabled: { boolean: bool },
	      iterations: { number: number }, // maximum number of iteration to stabilize
	      updateInterval: { number: number },
	      onlyDynamicEdges: { boolean: bool },
	      fit: { boolean: bool },
	      __type__: { object: object, boolean: bool }
	    },
	    timestep: { number: number },
	    adaptiveTimestep: { boolean: bool },
	    __type__: { object: object, boolean: bool }
	  },

	  //globals :
	  autoResize: { boolean: bool },
	  clickToUse: { boolean: bool },
	  locale: { string: string },
	  locales: {
	    __any__: { any: any },
	    __type__: { object: object }
	  },
	  height: { string: string },
	  width: { string: string },
	  __type__: { object: object }
	};

	allOptions.groups.__any__ = allOptions.nodes;
	allOptions.manipulation.controlNodeStyle = allOptions.nodes;

	var configureOptions = {
	  nodes: {
	    borderWidth: [1, 0, 10, 1],
	    borderWidthSelected: [2, 0, 10, 1],
	    color: {
	      border: ['color', '#2B7CE9'],
	      background: ['color', '#97C2FC'],
	      highlight: {
	        border: ['color', '#2B7CE9'],
	        background: ['color', '#D2E5FF']
	      },
	      hover: {
	        border: ['color', '#2B7CE9'],
	        background: ['color', '#D2E5FF']
	      }
	    },
	    fixed: {
	      x: false,
	      y: false
	    },
	    font: {
	      color: ['color', '#343434'],
	      size: [14, 0, 100, 1], // px
	      face: ['arial', 'verdana', 'tahoma'],
	      background: ['color', 'none'],
	      strokeWidth: [0, 0, 50, 1], // px
	      strokeColor: ['color', '#ffffff']
	    },
	    //group: 'string',
	    hidden: false,
	    labelHighlightBold: true,
	    //icon: {
	    //  face: 'string',  //'FontAwesome',
	    //  code: 'string',  //'\uf007',
	    //  size: [50, 0, 200, 1],  //50,
	    //  color: ['color','#2B7CE9']   //'#aa00ff'
	    //},
	    //image: 'string', // --> URL
	    physics: true,
	    scaling: {
	      min: [10, 0, 200, 1],
	      max: [30, 0, 200, 1],
	      label: {
	        enabled: false,
	        min: [14, 0, 200, 1],
	        max: [30, 0, 200, 1],
	        maxVisible: [30, 0, 200, 1],
	        drawThreshold: [5, 0, 20, 1]
	      }
	    },
	    shadow: {
	      enabled: false,
	      color: 'rgba(0,0,0,0.5)',
	      size: [10, 0, 20, 1],
	      x: [5, -30, 30, 1],
	      y: [5, -30, 30, 1]
	    },
	    shape: ['ellipse', 'box', 'circle', 'database', 'diamond', 'dot', 'square', 'star', 'text', 'triangle', 'triangleDown', 'hexagon'],
	    shapeProperties: {
	      borderDashes: false,
	      borderRadius: [6, 0, 20, 1],
	      interpolation: true,
	      useImageSize: false
	    },
	    size: [25, 0, 200, 1]
	  },
	  edges: {
	    arrows: {
	      to: { enabled: false, scaleFactor: [1, 0, 3, 0.05], type: 'arrow' },
	      middle: { enabled: false, scaleFactor: [1, 0, 3, 0.05], type: 'arrow' },
	      from: { enabled: false, scaleFactor: [1, 0, 3, 0.05], type: 'arrow' }
	    },
	    arrowStrikethrough: true,
	    color: {
	      color: ['color', '#848484'],
	      highlight: ['color', '#848484'],
	      hover: ['color', '#848484'],
	      inherit: ['from', 'to', 'both', true, false],
	      opacity: [1, 0, 1, 0.05]
	    },
	    dashes: false,
	    font: {
	      color: ['color', '#343434'],
	      size: [14, 0, 100, 1], // px
	      face: ['arial', 'verdana', 'tahoma'],
	      background: ['color', 'none'],
	      strokeWidth: [2, 0, 50, 1], // px
	      strokeColor: ['color', '#ffffff'],
	      align: ['horizontal', 'top', 'middle', 'bottom']
	    },
	    hidden: false,
	    hoverWidth: [1.5, 0, 5, 0.1],
	    labelHighlightBold: true,
	    physics: true,
	    scaling: {
	      min: [1, 0, 100, 1],
	      max: [15, 0, 100, 1],
	      label: {
	        enabled: true,
	        min: [14, 0, 200, 1],
	        max: [30, 0, 200, 1],
	        maxVisible: [30, 0, 200, 1],
	        drawThreshold: [5, 0, 20, 1]
	      }
	    },
	    selectionWidth: [1.5, 0, 5, 0.1],
	    selfReferenceSize: [20, 0, 200, 1],
	    shadow: {
	      enabled: false,
	      color: 'rgba(0,0,0,0.5)',
	      size: [10, 0, 20, 1],
	      x: [5, -30, 30, 1],
	      y: [5, -30, 30, 1]
	    },
	    smooth: {
	      enabled: true,
	      type: ['dynamic', 'continuous', 'discrete', 'diagonalCross', 'straightCross', 'horizontal', 'vertical', 'curvedCW', 'curvedCCW', 'cubicBezier'],
	      forceDirection: ['horizontal', 'vertical', 'none'],
	      roundness: [0.5, 0, 1, 0.05]
	    },
	    width: [1, 0, 30, 1]
	  },
	  layout: {
	    //randomSeed: [0, 0, 500, 1],
	    //improvedLayout: true,
	    hierarchical: {
	      enabled: false,
	      levelSeparation: [150, 20, 500, 5],
	      nodeSpacing: [100, 20, 500, 5],
	      treeSpacing: [200, 20, 500, 5],
	      blockShifting: true,
	      edgeMinimization: true,
	      parentCentralization: true,
	      direction: ['UD', 'DU', 'LR', 'RL'], // UD, DU, LR, RL
	      sortMethod: ['hubsize', 'directed'] // hubsize, directed
	    }
	  },
	  interaction: {
	    dragNodes: true,
	    dragView: true,
	    hideEdgesOnDrag: false,
	    hideNodesOnDrag: false,
	    hover: false,
	    keyboard: {
	      enabled: false,
	      speed: { x: [10, 0, 40, 1], y: [10, 0, 40, 1], zoom: [0.02, 0, 0.1, 0.005] },
	      bindToWindow: true
	    },
	    multiselect: false,
	    navigationButtons: false,
	    selectable: true,
	    selectConnectedEdges: true,
	    hoverConnectedEdges: true,
	    tooltipDelay: [300, 0, 1000, 25],
	    zoomView: true
	  },
	  manipulation: {
	    enabled: false,
	    initiallyActive: false
	  },
	  physics: {
	    enabled: true,
	    barnesHut: {
	      //theta: [0.5, 0.1, 1, 0.05],
	      gravitationalConstant: [-2000, -30000, 0, 50],
	      centralGravity: [0.3, 0, 10, 0.05],
	      springLength: [95, 0, 500, 5],
	      springConstant: [0.04, 0, 1.2, 0.005],
	      damping: [0.09, 0, 1, 0.01],
	      avoidOverlap: [0, 0, 1, 0.01]
	    },
	    forceAtlas2Based: {
	      //theta: [0.5, 0.1, 1, 0.05],
	      gravitationalConstant: [-50, -500, 0, 1],
	      centralGravity: [0.01, 0, 1, 0.005],
	      springLength: [95, 0, 500, 5],
	      springConstant: [0.08, 0, 1.2, 0.005],
	      damping: [0.4, 0, 1, 0.01],
	      avoidOverlap: [0, 0, 1, 0.01]
	    },
	    repulsion: {
	      centralGravity: [0.2, 0, 10, 0.05],
	      springLength: [200, 0, 500, 5],
	      springConstant: [0.05, 0, 1.2, 0.005],
	      nodeDistance: [100, 0, 500, 5],
	      damping: [0.09, 0, 1, 0.01]
	    },
	    hierarchicalRepulsion: {
	      centralGravity: [0.2, 0, 10, 0.05],
	      springLength: [100, 0, 500, 5],
	      springConstant: [0.01, 0, 1.2, 0.005],
	      nodeDistance: [120, 0, 500, 5],
	      damping: [0.09, 0, 1, 0.01]
	    },
	    maxVelocity: [50, 0, 150, 1],
	    minVelocity: [0.1, 0.01, 0.5, 0.01],
	    solver: ['barnesHut', 'forceAtlas2Based', 'repulsion', 'hierarchicalRepulsion'],
	    timestep: [0.5, 0.01, 1, 0.01]
	    //adaptiveTimestep: true
	  }
	};

	exports.allOptions = allOptions;
	exports.configureOptions = configureOptions;

	/***/ }),
	/* 123 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var util = __webpack_require__(2);

	// Graph3d
	util.extend(exports, __webpack_require__(159));

	// Timeline & Graph2d
	util.extend(exports, __webpack_require__(177));

	// Network
	util.extend(exports, __webpack_require__(181));

	/***/ }),
	/* 124 */
	/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(49);
	__webpack_require__(60);
	module.exports = __webpack_require__(136);


	/***/ }),
	/* 125 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var addToUnscopables = __webpack_require__(126);
	var step = __webpack_require__(127);
	var Iterators = __webpack_require__(31);
	var toIObject = __webpack_require__(25);

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(79)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');


	/***/ }),
	/* 126 */
	/***/ (function(module, exports) {

	module.exports = function () { /* empty */ };


	/***/ }),
	/* 127 */
	/***/ (function(module, exports) {

	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};


	/***/ }),
	/* 128 */
	/***/ (function(module, exports) {

	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};


	/***/ }),
	/* 129 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var create = __webpack_require__(54);
	var descriptor = __webpack_require__(39);
	var setToStringTag = __webpack_require__(59);
	var IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(26)(IteratorPrototype, __webpack_require__(13)('iterator'), function () { return this; });

	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};


	/***/ }),
	/* 130 */
	/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(20);
	var anObject = __webpack_require__(27);
	var getKeys = __webpack_require__(33);

	module.exports = __webpack_require__(21) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};


	/***/ }),
	/* 131 */
	/***/ (function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(25);
	var toLength = __webpack_require__(132);
	var toAbsoluteIndex = __webpack_require__(133);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};


	/***/ }),
	/* 132 */
	/***/ (function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(55);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};


	/***/ }),
	/* 133 */
	/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(55);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};


	/***/ }),
	/* 134 */
	/***/ (function(module, exports, __webpack_require__) {

	var document = __webpack_require__(18).document;
	module.exports = document && document.documentElement;


	/***/ }),
	/* 135 */
	/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(55);
	var defined = __webpack_require__(51);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};


	/***/ }),
	/* 136 */
	/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(27);
	var get = __webpack_require__(137);
	module.exports = __webpack_require__(7).getIterator = function (it) {
	  var iterFn = get(it);
	  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};


	/***/ }),
	/* 137 */
	/***/ (function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(86);
	var ITERATOR = __webpack_require__(13)('iterator');
	var Iterators = __webpack_require__(31);
	module.exports = __webpack_require__(7).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};


	/***/ }),
	/* 138 */
	/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(139);
	var $Object = __webpack_require__(7).Object;
	module.exports = function create(P, D) {
	  return $Object.create(P, D);
	};


	/***/ }),
	/* 139 */
	/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(17);
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', { create: __webpack_require__(54) });


	/***/ }),
	/* 140 */
	/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(141);
	module.exports = __webpack_require__(7).Object.keys;


	/***/ }),
	/* 141 */
	/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(41);
	var $keys = __webpack_require__(33);

	__webpack_require__(87)('keys', function () {
	  return function keys(it) {
	    return $keys(toObject(it));
	  };
	});


	/***/ }),
	/* 142 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(143), __esModule: true };

	/***/ }),
	/* 143 */
	/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(60);
	__webpack_require__(49);
	module.exports = __webpack_require__(61).f('iterator');


	/***/ }),
	/* 144 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(145), __esModule: true };

	/***/ }),
	/* 145 */
	/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(146);
	__webpack_require__(151);
	__webpack_require__(152);
	__webpack_require__(153);
	module.exports = __webpack_require__(7).Symbol;


	/***/ }),
	/* 146 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	// ECMAScript 6 symbols shim
	var global = __webpack_require__(18);
	var has = __webpack_require__(22);
	var DESCRIPTORS = __webpack_require__(21);
	var $export = __webpack_require__(17);
	var redefine = __webpack_require__(83);
	var META = __webpack_require__(147).KEY;
	var $fails = __webpack_require__(28);
	var shared = __webpack_require__(57);
	var setToStringTag = __webpack_require__(59);
	var uid = __webpack_require__(40);
	var wks = __webpack_require__(13);
	var wksExt = __webpack_require__(61);
	var wksDefine = __webpack_require__(62);
	var enumKeys = __webpack_require__(148);
	var isArray = __webpack_require__(149);
	var anObject = __webpack_require__(27);
	var toIObject = __webpack_require__(25);
	var toPrimitive = __webpack_require__(53);
	var createDesc = __webpack_require__(39);
	var _create = __webpack_require__(54);
	var gOPNExt = __webpack_require__(150);
	var $GOPD = __webpack_require__(89);
	var $DP = __webpack_require__(20);
	var $keys = __webpack_require__(33);
	var gOPD = $GOPD.f;
	var dP = $DP.f;
	var gOPN = gOPNExt.f;
	var $Symbol = global.Symbol;
	var $JSON = global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE = 'prototype';
	var HIDDEN = wks('_hidden');
	var TO_PRIMITIVE = wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = shared('symbol-registry');
	var AllSymbols = shared('symbols');
	var OPSymbols = shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE];
	var USE_NATIVE = typeof $Symbol == 'function';
	var QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function () { return dP(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;

	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};

	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, { enumerable: createDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};

	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });

	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  __webpack_require__(88).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(42).f = $propertyIsEnumerable;
	  __webpack_require__(63).f = $getOwnPropertySymbols;

	  if (DESCRIPTORS && !__webpack_require__(52)) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }

	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}

	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

	for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});

	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    replacer = args[1];
	    if (typeof replacer == 'function') $replacer = replacer;
	    if ($replacer || !isArray(replacer)) replacer = function (key, value) {
	      if ($replacer) value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});

	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(26)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);


	/***/ }),
	/* 147 */
	/***/ (function(module, exports, __webpack_require__) {

	var META = __webpack_require__(40)('meta');
	var isObject = __webpack_require__(32);
	var has = __webpack_require__(22);
	var setDesc = __webpack_require__(20).f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !__webpack_require__(28)(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};


	/***/ }),
	/* 148 */
	/***/ (function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(33);
	var gOPS = __webpack_require__(63);
	var pIE = __webpack_require__(42);
	module.exports = function (it) {
	  var result = getKeys(it);
	  var getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = pIE.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};


	/***/ }),
	/* 149 */
	/***/ (function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(50);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};


	/***/ }),
	/* 150 */
	/***/ (function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(25);
	var gOPN = __webpack_require__(88).f;
	var toString = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};

	module.exports.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


	/***/ }),
	/* 151 */
	/***/ (function(module, exports) {



	/***/ }),
	/* 152 */
	/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(62)('asyncIterator');


	/***/ }),
	/* 153 */
	/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(62)('observable');


	/***/ }),
	/* 154 */
	/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js
	//! version : 2.19.1
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com

	;(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, (function () { 'use strict';

	var hookCallback;

	function hooks () {
	    return hookCallback.apply(null, arguments);
	}

	// This is done to register the method called with moment()
	// without creating circular dependencies.
	function setHookCallback (callback) {
	    hookCallback = callback;
	}

	function isArray(input) {
	    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	}

	function isObject(input) {
	    // IE8 will treat undefined and null as object if it wasn't for
	    // input != null
	    return input != null && Object.prototype.toString.call(input) === '[object Object]';
	}

	function isObjectEmpty(obj) {
	    if (Object.getOwnPropertyNames) {
	        return (Object.getOwnPropertyNames(obj).length === 0);
	    } else {
	        var k;
	        for (k in obj) {
	            if (obj.hasOwnProperty(k)) {
	                return false;
	            }
	        }
	        return true;
	    }
	}

	function isUndefined(input) {
	    return input === void 0;
	}

	function isNumber(input) {
	    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
	}

	function isDate(input) {
	    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	}

	function map(arr, fn) {
	    var res = [], i;
	    for (i = 0; i < arr.length; ++i) {
	        res.push(fn(arr[i], i));
	    }
	    return res;
	}

	function hasOwnProp(a, b) {
	    return Object.prototype.hasOwnProperty.call(a, b);
	}

	function extend(a, b) {
	    for (var i in b) {
	        if (hasOwnProp(b, i)) {
	            a[i] = b[i];
	        }
	    }

	    if (hasOwnProp(b, 'toString')) {
	        a.toString = b.toString;
	    }

	    if (hasOwnProp(b, 'valueOf')) {
	        a.valueOf = b.valueOf;
	    }

	    return a;
	}

	function createUTC (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, true).utc();
	}

	function defaultParsingFlags() {
	    // We need to deep clone this object.
	    return {
	        empty           : false,
	        unusedTokens    : [],
	        unusedInput     : [],
	        overflow        : -2,
	        charsLeftOver   : 0,
	        nullInput       : false,
	        invalidMonth    : null,
	        invalidFormat   : false,
	        userInvalidated : false,
	        iso             : false,
	        parsedDateParts : [],
	        meridiem        : null,
	        rfc2822         : false,
	        weekdayMismatch : false
	    };
	}

	function getParsingFlags(m) {
	    if (m._pf == null) {
	        m._pf = defaultParsingFlags();
	    }
	    return m._pf;
	}

	var some;
	if (Array.prototype.some) {
	    some = Array.prototype.some;
	} else {
	    some = function (fun) {
	        var t = Object(this);
	        var len = t.length >>> 0;

	        for (var i = 0; i < len; i++) {
	            if (i in t && fun.call(this, t[i], i, t)) {
	                return true;
	            }
	        }

	        return false;
	    };
	}

	function isValid(m) {
	    if (m._isValid == null) {
	        var flags = getParsingFlags(m);
	        var parsedParts = some.call(flags.parsedDateParts, function (i) {
	            return i != null;
	        });
	        var isNowValid = !isNaN(m._d.getTime()) &&
	            flags.overflow < 0 &&
	            !flags.empty &&
	            !flags.invalidMonth &&
	            !flags.invalidWeekday &&
	            !flags.weekdayMismatch &&
	            !flags.nullInput &&
	            !flags.invalidFormat &&
	            !flags.userInvalidated &&
	            (!flags.meridiem || (flags.meridiem && parsedParts));

	        if (m._strict) {
	            isNowValid = isNowValid &&
	                flags.charsLeftOver === 0 &&
	                flags.unusedTokens.length === 0 &&
	                flags.bigHour === undefined;
	        }

	        if (Object.isFrozen == null || !Object.isFrozen(m)) {
	            m._isValid = isNowValid;
	        }
	        else {
	            return isNowValid;
	        }
	    }
	    return m._isValid;
	}

	function createInvalid (flags) {
	    var m = createUTC(NaN);
	    if (flags != null) {
	        extend(getParsingFlags(m), flags);
	    }
	    else {
	        getParsingFlags(m).userInvalidated = true;
	    }

	    return m;
	}

	// Plugins that add properties should also add the key here (null value),
	// so we can properly clone ourselves.
	var momentProperties = hooks.momentProperties = [];

	function copyConfig(to, from) {
	    var i, prop, val;

	    if (!isUndefined(from._isAMomentObject)) {
	        to._isAMomentObject = from._isAMomentObject;
	    }
	    if (!isUndefined(from._i)) {
	        to._i = from._i;
	    }
	    if (!isUndefined(from._f)) {
	        to._f = from._f;
	    }
	    if (!isUndefined(from._l)) {
	        to._l = from._l;
	    }
	    if (!isUndefined(from._strict)) {
	        to._strict = from._strict;
	    }
	    if (!isUndefined(from._tzm)) {
	        to._tzm = from._tzm;
	    }
	    if (!isUndefined(from._isUTC)) {
	        to._isUTC = from._isUTC;
	    }
	    if (!isUndefined(from._offset)) {
	        to._offset = from._offset;
	    }
	    if (!isUndefined(from._pf)) {
	        to._pf = getParsingFlags(from);
	    }
	    if (!isUndefined(from._locale)) {
	        to._locale = from._locale;
	    }

	    if (momentProperties.length > 0) {
	        for (i = 0; i < momentProperties.length; i++) {
	            prop = momentProperties[i];
	            val = from[prop];
	            if (!isUndefined(val)) {
	                to[prop] = val;
	            }
	        }
	    }

	    return to;
	}

	var updateInProgress = false;

	// Moment prototype object
	function Moment(config) {
	    copyConfig(this, config);
	    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	    if (!this.isValid()) {
	        this._d = new Date(NaN);
	    }
	    // Prevent infinite loop in case updateOffset creates new moment
	    // objects.
	    if (updateInProgress === false) {
	        updateInProgress = true;
	        hooks.updateOffset(this);
	        updateInProgress = false;
	    }
	}

	function isMoment (obj) {
	    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	}

	function absFloor (number) {
	    if (number < 0) {
	        // -0 -> 0
	        return Math.ceil(number) || 0;
	    } else {
	        return Math.floor(number);
	    }
	}

	function toInt(argumentForCoercion) {
	    var coercedNumber = +argumentForCoercion,
	        value = 0;

	    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	        value = absFloor(coercedNumber);
	    }

	    return value;
	}

	// compare two arrays, return the number of differences
	function compareArrays(array1, array2, dontConvert) {
	    var len = Math.min(array1.length, array2.length),
	        lengthDiff = Math.abs(array1.length - array2.length),
	        diffs = 0,
	        i;
	    for (i = 0; i < len; i++) {
	        if ((dontConvert && array1[i] !== array2[i]) ||
	            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	            diffs++;
	        }
	    }
	    return diffs + lengthDiff;
	}

	function warn(msg) {
	    if (hooks.suppressDeprecationWarnings === false &&
	            (typeof console !==  'undefined') && console.warn) {
	        console.warn('Deprecation warning: ' + msg);
	    }
	}

	function deprecate(msg, fn) {
	    var firstTime = true;

	    return extend(function () {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(null, msg);
	        }
	        if (firstTime) {
	            var args = [];
	            var arg;
	            for (var i = 0; i < arguments.length; i++) {
	                arg = '';
	                if (typeof arguments[i] === 'object') {
	                    arg += '\n[' + i + '] ';
	                    for (var key in arguments[0]) {
	                        arg += key + ': ' + arguments[0][key] + ', ';
	                    }
	                    arg = arg.slice(0, -2); // Remove trailing comma and space
	                } else {
	                    arg = arguments[i];
	                }
	                args.push(arg);
	            }
	            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
	            firstTime = false;
	        }
	        return fn.apply(this, arguments);
	    }, fn);
	}

	var deprecations = {};

	function deprecateSimple(name, msg) {
	    if (hooks.deprecationHandler != null) {
	        hooks.deprecationHandler(name, msg);
	    }
	    if (!deprecations[name]) {
	        warn(msg);
	        deprecations[name] = true;
	    }
	}

	hooks.suppressDeprecationWarnings = false;
	hooks.deprecationHandler = null;

	function isFunction(input) {
	    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	}

	function set (config) {
	    var prop, i;
	    for (i in config) {
	        prop = config[i];
	        if (isFunction(prop)) {
	            this[i] = prop;
	        } else {
	            this['_' + i] = prop;
	        }
	    }
	    this._config = config;
	    // Lenient ordinal parsing accepts just a number in addition to
	    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
	    // TODO: Remove "ordinalParse" fallback in next major release.
	    this._dayOfMonthOrdinalParseLenient = new RegExp(
	        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
	            '|' + (/\d{1,2}/).source);
	}

	function mergeConfigs(parentConfig, childConfig) {
	    var res = extend({}, parentConfig), prop;
	    for (prop in childConfig) {
	        if (hasOwnProp(childConfig, prop)) {
	            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                res[prop] = {};
	                extend(res[prop], parentConfig[prop]);
	                extend(res[prop], childConfig[prop]);
	            } else if (childConfig[prop] != null) {
	                res[prop] = childConfig[prop];
	            } else {
	                delete res[prop];
	            }
	        }
	    }
	    for (prop in parentConfig) {
	        if (hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject(parentConfig[prop])) {
	            // make sure changes to properties don't modify parent config
	            res[prop] = extend({}, res[prop]);
	        }
	    }
	    return res;
	}

	function Locale(config) {
	    if (config != null) {
	        this.set(config);
	    }
	}

	var keys;

	if (Object.keys) {
	    keys = Object.keys;
	} else {
	    keys = function (obj) {
	        var i, res = [];
	        for (i in obj) {
	            if (hasOwnProp(obj, i)) {
	                res.push(i);
	            }
	        }
	        return res;
	    };
	}

	var defaultCalendar = {
	    sameDay : '[Today at] LT',
	    nextDay : '[Tomorrow at] LT',
	    nextWeek : 'dddd [at] LT',
	    lastDay : '[Yesterday at] LT',
	    lastWeek : '[Last] dddd [at] LT',
	    sameElse : 'L'
	};

	function calendar (key, mom, now) {
	    var output = this._calendar[key] || this._calendar['sameElse'];
	    return isFunction(output) ? output.call(mom, now) : output;
	}

	var defaultLongDateFormat = {
	    LTS  : 'h:mm:ss A',
	    LT   : 'h:mm A',
	    L    : 'MM/DD/YYYY',
	    LL   : 'MMMM D, YYYY',
	    LLL  : 'MMMM D, YYYY h:mm A',
	    LLLL : 'dddd, MMMM D, YYYY h:mm A'
	};

	function longDateFormat (key) {
	    var format = this._longDateFormat[key],
	        formatUpper = this._longDateFormat[key.toUpperCase()];

	    if (format || !formatUpper) {
	        return format;
	    }

	    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	        return val.slice(1);
	    });

	    return this._longDateFormat[key];
	}

	var defaultInvalidDate = 'Invalid date';

	function invalidDate () {
	    return this._invalidDate;
	}

	var defaultOrdinal = '%d';
	var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

	function ordinal (number) {
	    return this._ordinal.replace('%d', number);
	}

	var defaultRelativeTime = {
	    future : 'in %s',
	    past   : '%s ago',
	    s  : 'a few seconds',
	    ss : '%d seconds',
	    m  : 'a minute',
	    mm : '%d minutes',
	    h  : 'an hour',
	    hh : '%d hours',
	    d  : 'a day',
	    dd : '%d days',
	    M  : 'a month',
	    MM : '%d months',
	    y  : 'a year',
	    yy : '%d years'
	};

	function relativeTime (number, withoutSuffix, string, isFuture) {
	    var output = this._relativeTime[string];
	    return (isFunction(output)) ?
	        output(number, withoutSuffix, string, isFuture) :
	        output.replace(/%d/i, number);
	}

	function pastFuture (diff, output) {
	    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	}

	var aliases = {};

	function addUnitAlias (unit, shorthand) {
	    var lowerCase = unit.toLowerCase();
	    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	}

	function normalizeUnits(units) {
	    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	}

	function normalizeObjectUnits(inputObject) {
	    var normalizedInput = {},
	        normalizedProp,
	        prop;

	    for (prop in inputObject) {
	        if (hasOwnProp(inputObject, prop)) {
	            normalizedProp = normalizeUnits(prop);
	            if (normalizedProp) {
	                normalizedInput[normalizedProp] = inputObject[prop];
	            }
	        }
	    }

	    return normalizedInput;
	}

	var priorities = {};

	function addUnitPriority(unit, priority) {
	    priorities[unit] = priority;
	}

	function getPrioritizedUnits(unitsObj) {
	    var units = [];
	    for (var u in unitsObj) {
	        units.push({unit: u, priority: priorities[u]});
	    }
	    units.sort(function (a, b) {
	        return a.priority - b.priority;
	    });
	    return units;
	}

	function zeroFill(number, targetLength, forceSign) {
	    var absNumber = '' + Math.abs(number),
	        zerosToFill = targetLength - absNumber.length,
	        sign = number >= 0;
	    return (sign ? (forceSign ? '+' : '') : '-') +
	        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	}

	var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

	var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

	var formatFunctions = {};

	var formatTokenFunctions = {};

	// token:    'M'
	// padded:   ['MM', 2]
	// ordinal:  'Mo'
	// callback: function () { this.month() + 1 }
	function addFormatToken (token, padded, ordinal, callback) {
	    var func = callback;
	    if (typeof callback === 'string') {
	        func = function () {
	            return this[callback]();
	        };
	    }
	    if (token) {
	        formatTokenFunctions[token] = func;
	    }
	    if (padded) {
	        formatTokenFunctions[padded[0]] = function () {
	            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	        };
	    }
	    if (ordinal) {
	        formatTokenFunctions[ordinal] = function () {
	            return this.localeData().ordinal(func.apply(this, arguments), token);
	        };
	    }
	}

	function removeFormattingTokens(input) {
	    if (input.match(/\[[\s\S]/)) {
	        return input.replace(/^\[|\]$/g, '');
	    }
	    return input.replace(/\\/g, '');
	}

	function makeFormatFunction(format) {
	    var array = format.match(formattingTokens), i, length;

	    for (i = 0, length = array.length; i < length; i++) {
	        if (formatTokenFunctions[array[i]]) {
	            array[i] = formatTokenFunctions[array[i]];
	        } else {
	            array[i] = removeFormattingTokens(array[i]);
	        }
	    }

	    return function (mom) {
	        var output = '', i;
	        for (i = 0; i < length; i++) {
	            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
	        }
	        return output;
	    };
	}

	// format date using native date object
	function formatMoment(m, format) {
	    if (!m.isValid()) {
	        return m.localeData().invalidDate();
	    }

	    format = expandFormat(format, m.localeData());
	    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

	    return formatFunctions[format](m);
	}

	function expandFormat(format, locale) {
	    var i = 5;

	    function replaceLongDateFormatTokens(input) {
	        return locale.longDateFormat(input) || input;
	    }

	    localFormattingTokens.lastIndex = 0;
	    while (i >= 0 && localFormattingTokens.test(format)) {
	        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	        localFormattingTokens.lastIndex = 0;
	        i -= 1;
	    }

	    return format;
	}

	var match1         = /\d/;            //       0 - 9
	var match2         = /\d\d/;          //      00 - 99
	var match3         = /\d{3}/;         //     000 - 999
	var match4         = /\d{4}/;         //    0000 - 9999
	var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	var match1to2      = /\d\d?/;         //       0 - 99
	var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	var match1to3      = /\d{1,3}/;       //       0 - 999
	var match1to4      = /\d{1,4}/;       //       0 - 9999
	var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

	var matchUnsigned  = /\d+/;           //       0 - inf
	var matchSigned    = /[+-]?\d+/;      //    -inf - inf

	var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

	var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

	// any word (or two) characters or numbers including two/three word month in arabic.
	// includes scottish gaelic two word and hyphenated months
	var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


	var regexes = {};

	function addRegexToken (token, regex, strictRegex) {
	    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	        return (isStrict && strictRegex) ? strictRegex : regex;
	    };
	}

	function getParseRegexForToken (token, config) {
	    if (!hasOwnProp(regexes, token)) {
	        return new RegExp(unescapeFormat(token));
	    }

	    return regexes[token](config._strict, config._locale);
	}

	// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	function unescapeFormat(s) {
	    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	        return p1 || p2 || p3 || p4;
	    }));
	}

	function regexEscape(s) {
	    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	}

	var tokens = {};

	function addParseToken (token, callback) {
	    var i, func = callback;
	    if (typeof token === 'string') {
	        token = [token];
	    }
	    if (isNumber(callback)) {
	        func = function (input, array) {
	            array[callback] = toInt(input);
	        };
	    }
	    for (i = 0; i < token.length; i++) {
	        tokens[token[i]] = func;
	    }
	}

	function addWeekParseToken (token, callback) {
	    addParseToken(token, function (input, array, config, token) {
	        config._w = config._w || {};
	        callback(input, config._w, config, token);
	    });
	}

	function addTimeToArrayFromToken(token, input, config) {
	    if (input != null && hasOwnProp(tokens, token)) {
	        tokens[token](input, config._a, config, token);
	    }
	}

	var YEAR = 0;
	var MONTH = 1;
	var DATE = 2;
	var HOUR = 3;
	var MINUTE = 4;
	var SECOND = 5;
	var MILLISECOND = 6;
	var WEEK = 7;
	var WEEKDAY = 8;

	// FORMATTING

	addFormatToken('Y', 0, 0, function () {
	    var y = this.year();
	    return y <= 9999 ? '' + y : '+' + y;
	});

	addFormatToken(0, ['YY', 2], 0, function () {
	    return this.year() % 100;
	});

	addFormatToken(0, ['YYYY',   4],       0, 'year');
	addFormatToken(0, ['YYYYY',  5],       0, 'year');
	addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	// ALIASES

	addUnitAlias('year', 'y');

	// PRIORITIES

	addUnitPriority('year', 1);

	// PARSING

	addRegexToken('Y',      matchSigned);
	addRegexToken('YY',     match1to2, match2);
	addRegexToken('YYYY',   match1to4, match4);
	addRegexToken('YYYYY',  match1to6, match6);
	addRegexToken('YYYYYY', match1to6, match6);

	addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	addParseToken('YYYY', function (input, array) {
	    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	});
	addParseToken('YY', function (input, array) {
	    array[YEAR] = hooks.parseTwoDigitYear(input);
	});
	addParseToken('Y', function (input, array) {
	    array[YEAR] = parseInt(input, 10);
	});

	// HELPERS

	function daysInYear(year) {
	    return isLeapYear(year) ? 366 : 365;
	}

	function isLeapYear(year) {
	    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	}

	// HOOKS

	hooks.parseTwoDigitYear = function (input) {
	    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	};

	// MOMENTS

	var getSetYear = makeGetSet('FullYear', true);

	function getIsLeapYear () {
	    return isLeapYear(this.year());
	}

	function makeGetSet (unit, keepTime) {
	    return function (value) {
	        if (value != null) {
	            set$1(this, unit, value);
	            hooks.updateOffset(this, keepTime);
	            return this;
	        } else {
	            return get(this, unit);
	        }
	    };
	}

	function get (mom, unit) {
	    return mom.isValid() ?
	        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	}

	function set$1 (mom, unit, value) {
	    if (mom.isValid() && !isNaN(value)) {
	        if (unit === 'FullYear' && isLeapYear(mom.year())) {
	            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
	        }
	        else {
	            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	        }
	    }
	}

	// MOMENTS

	function stringGet (units) {
	    units = normalizeUnits(units);
	    if (isFunction(this[units])) {
	        return this[units]();
	    }
	    return this;
	}


	function stringSet (units, value) {
	    if (typeof units === 'object') {
	        units = normalizeObjectUnits(units);
	        var prioritized = getPrioritizedUnits(units);
	        for (var i = 0; i < prioritized.length; i++) {
	            this[prioritized[i].unit](units[prioritized[i].unit]);
	        }
	    } else {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units](value);
	        }
	    }
	    return this;
	}

	function mod(n, x) {
	    return ((n % x) + x) % x;
	}

	var indexOf;

	if (Array.prototype.indexOf) {
	    indexOf = Array.prototype.indexOf;
	} else {
	    indexOf = function (o) {
	        // I know
	        var i;
	        for (i = 0; i < this.length; ++i) {
	            if (this[i] === o) {
	                return i;
	            }
	        }
	        return -1;
	    };
	}

	function daysInMonth(year, month) {
	    if (isNaN(year) || isNaN(month)) {
	        return NaN;
	    }
	    var modMonth = mod(month, 12);
	    year += (month - modMonth) / 12;
	    return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
	}

	// FORMATTING

	addFormatToken('M', ['MM', 2], 'Mo', function () {
	    return this.month() + 1;
	});

	addFormatToken('MMM', 0, 0, function (format) {
	    return this.localeData().monthsShort(this, format);
	});

	addFormatToken('MMMM', 0, 0, function (format) {
	    return this.localeData().months(this, format);
	});

	// ALIASES

	addUnitAlias('month', 'M');

	// PRIORITY

	addUnitPriority('month', 8);

	// PARSING

	addRegexToken('M',    match1to2);
	addRegexToken('MM',   match1to2, match2);
	addRegexToken('MMM',  function (isStrict, locale) {
	    return locale.monthsShortRegex(isStrict);
	});
	addRegexToken('MMMM', function (isStrict, locale) {
	    return locale.monthsRegex(isStrict);
	});

	addParseToken(['M', 'MM'], function (input, array) {
	    array[MONTH] = toInt(input) - 1;
	});

	addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	    var month = config._locale.monthsParse(input, token, config._strict);
	    // if we didn't find a month name, mark the date as invalid.
	    if (month != null) {
	        array[MONTH] = month;
	    } else {
	        getParsingFlags(config).invalidMonth = input;
	    }
	});

	// LOCALES

	var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
	var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	function localeMonths (m, format) {
	    if (!m) {
	        return isArray(this._months) ? this._months :
	            this._months['standalone'];
	    }
	    return isArray(this._months) ? this._months[m.month()] :
	        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	}

	var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	function localeMonthsShort (m, format) {
	    if (!m) {
	        return isArray(this._monthsShort) ? this._monthsShort :
	            this._monthsShort['standalone'];
	    }
	    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	}

	function handleStrictParse(monthName, format, strict) {
	    var i, ii, mom, llc = monthName.toLocaleLowerCase();
	    if (!this._monthsParse) {
	        // this is not used
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	        for (i = 0; i < 12; ++i) {
	            mom = createUTC([2000, i]);
	            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	        }
	    }

	    if (strict) {
	        if (format === 'MMM') {
	            ii = indexOf.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'MMM') {
	            ii = indexOf.call(this._shortMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf.call(this._longMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}

	function localeMonthsParse (monthName, format, strict) {
	    var i, mom, regex;

	    if (this._monthsParseExact) {
	        return handleStrictParse.call(this, monthName, format, strict);
	    }

	    if (!this._monthsParse) {
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	    }

	    // TODO: add sorting
	    // Sorting makes sure if one month (or abbr) is a prefix of another
	    // see sorting in computeMonthsParse
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        if (strict && !this._longMonthsParse[i]) {
	            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	        }
	        if (!strict && !this._monthsParse[i]) {
	            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (!strict && this._monthsParse[i].test(monthName)) {
	            return i;
	        }
	    }
	}

	// MOMENTS

	function setMonth (mom, value) {
	    var dayOfMonth;

	    if (!mom.isValid()) {
	        // No op
	        return mom;
	    }

	    if (typeof value === 'string') {
	        if (/^\d+$/.test(value)) {
	            value = toInt(value);
	        } else {
	            value = mom.localeData().monthsParse(value);
	            // TODO: Another silent failure?
	            if (!isNumber(value)) {
	                return mom;
	            }
	        }
	    }

	    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	    return mom;
	}

	function getSetMonth (value) {
	    if (value != null) {
	        setMonth(this, value);
	        hooks.updateOffset(this, true);
	        return this;
	    } else {
	        return get(this, 'Month');
	    }
	}

	function getDaysInMonth () {
	    return daysInMonth(this.year(), this.month());
	}

	var defaultMonthsShortRegex = matchWord;
	function monthsShortRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsShortStrictRegex;
	        } else {
	            return this._monthsShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsShortRegex')) {
	            this._monthsShortRegex = defaultMonthsShortRegex;
	        }
	        return this._monthsShortStrictRegex && isStrict ?
	            this._monthsShortStrictRegex : this._monthsShortRegex;
	    }
	}

	var defaultMonthsRegex = matchWord;
	function monthsRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsStrictRegex;
	        } else {
	            return this._monthsRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            this._monthsRegex = defaultMonthsRegex;
	        }
	        return this._monthsStrictRegex && isStrict ?
	            this._monthsStrictRegex : this._monthsRegex;
	    }
	}

	function computeMonthsParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }

	    var shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom;
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        shortPieces.push(this.monthsShort(mom, ''));
	        longPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.monthsShort(mom, ''));
	    }
	    // Sorting makes sure if one month (or abbr) is a prefix of another it
	    // will match the longer piece.
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 12; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	    }
	    for (i = 0; i < 24; i++) {
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }

	    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._monthsShortRegex = this._monthsRegex;
	    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	}

	function createDate (y, m, d, h, M, s, ms) {
	    // can't just apply() to create a date:
	    // https://stackoverflow.com/q/181348
	    var date = new Date(y, m, d, h, M, s, ms);

	    // the date constructor remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	        date.setFullYear(y);
	    }
	    return date;
	}

	function createUTCDate (y) {
	    var date = new Date(Date.UTC.apply(null, arguments));

	    // the Date.UTC function remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	        date.setUTCFullYear(y);
	    }
	    return date;
	}

	// start-of-first-week - start-of-year
	function firstWeekOffset(year, dow, doy) {
	    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	        fwd = 7 + dow - doy,
	        // first-week day local weekday -- which local weekday is fwd
	        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

	    return -fwdlw + fwd - 1;
	}

	// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	    var localWeekday = (7 + weekday - dow) % 7,
	        weekOffset = firstWeekOffset(year, dow, doy),
	        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	        resYear, resDayOfYear;

	    if (dayOfYear <= 0) {
	        resYear = year - 1;
	        resDayOfYear = daysInYear(resYear) + dayOfYear;
	    } else if (dayOfYear > daysInYear(year)) {
	        resYear = year + 1;
	        resDayOfYear = dayOfYear - daysInYear(year);
	    } else {
	        resYear = year;
	        resDayOfYear = dayOfYear;
	    }

	    return {
	        year: resYear,
	        dayOfYear: resDayOfYear
	    };
	}

	function weekOfYear(mom, dow, doy) {
	    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	        resWeek, resYear;

	    if (week < 1) {
	        resYear = mom.year() - 1;
	        resWeek = week + weeksInYear(resYear, dow, doy);
	    } else if (week > weeksInYear(mom.year(), dow, doy)) {
	        resWeek = week - weeksInYear(mom.year(), dow, doy);
	        resYear = mom.year() + 1;
	    } else {
	        resYear = mom.year();
	        resWeek = week;
	    }

	    return {
	        week: resWeek,
	        year: resYear
	    };
	}

	function weeksInYear(year, dow, doy) {
	    var weekOffset = firstWeekOffset(year, dow, doy),
	        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	}

	// FORMATTING

	addFormatToken('w', ['ww', 2], 'wo', 'week');
	addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	// ALIASES

	addUnitAlias('week', 'w');
	addUnitAlias('isoWeek', 'W');

	// PRIORITIES

	addUnitPriority('week', 5);
	addUnitPriority('isoWeek', 5);

	// PARSING

	addRegexToken('w',  match1to2);
	addRegexToken('ww', match1to2, match2);
	addRegexToken('W',  match1to2);
	addRegexToken('WW', match1to2, match2);

	addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	    week[token.substr(0, 1)] = toInt(input);
	});

	// HELPERS

	// LOCALES

	function localeWeek (mom) {
	    return weekOfYear(mom, this._week.dow, this._week.doy).week;
	}

	var defaultLocaleWeek = {
	    dow : 0, // Sunday is the first day of the week.
	    doy : 6  // The week that contains Jan 1st is the first week of the year.
	};

	function localeFirstDayOfWeek () {
	    return this._week.dow;
	}

	function localeFirstDayOfYear () {
	    return this._week.doy;
	}

	// MOMENTS

	function getSetWeek (input) {
	    var week = this.localeData().week(this);
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}

	function getSetISOWeek (input) {
	    var week = weekOfYear(this, 1, 4).week;
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}

	// FORMATTING

	addFormatToken('d', 0, 'do', 'day');

	addFormatToken('dd', 0, 0, function (format) {
	    return this.localeData().weekdaysMin(this, format);
	});

	addFormatToken('ddd', 0, 0, function (format) {
	    return this.localeData().weekdaysShort(this, format);
	});

	addFormatToken('dddd', 0, 0, function (format) {
	    return this.localeData().weekdays(this, format);
	});

	addFormatToken('e', 0, 0, 'weekday');
	addFormatToken('E', 0, 0, 'isoWeekday');

	// ALIASES

	addUnitAlias('day', 'd');
	addUnitAlias('weekday', 'e');
	addUnitAlias('isoWeekday', 'E');

	// PRIORITY
	addUnitPriority('day', 11);
	addUnitPriority('weekday', 11);
	addUnitPriority('isoWeekday', 11);

	// PARSING

	addRegexToken('d',    match1to2);
	addRegexToken('e',    match1to2);
	addRegexToken('E',    match1to2);
	addRegexToken('dd',   function (isStrict, locale) {
	    return locale.weekdaysMinRegex(isStrict);
	});
	addRegexToken('ddd',   function (isStrict, locale) {
	    return locale.weekdaysShortRegex(isStrict);
	});
	addRegexToken('dddd',   function (isStrict, locale) {
	    return locale.weekdaysRegex(isStrict);
	});

	addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	    var weekday = config._locale.weekdaysParse(input, token, config._strict);
	    // if we didn't get a weekday name, mark the date as invalid
	    if (weekday != null) {
	        week.d = weekday;
	    } else {
	        getParsingFlags(config).invalidWeekday = input;
	    }
	});

	addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	    week[token] = toInt(input);
	});

	// HELPERS

	function parseWeekday(input, locale) {
	    if (typeof input !== 'string') {
	        return input;
	    }

	    if (!isNaN(input)) {
	        return parseInt(input, 10);
	    }

	    input = locale.weekdaysParse(input);
	    if (typeof input === 'number') {
	        return input;
	    }

	    return null;
	}

	function parseIsoWeekday(input, locale) {
	    if (typeof input === 'string') {
	        return locale.weekdaysParse(input) % 7 || 7;
	    }
	    return isNaN(input) ? null : input;
	}

	// LOCALES

	var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	function localeWeekdays (m, format) {
	    if (!m) {
	        return isArray(this._weekdays) ? this._weekdays :
	            this._weekdays['standalone'];
	    }
	    return isArray(this._weekdays) ? this._weekdays[m.day()] :
	        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	}

	var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	function localeWeekdaysShort (m) {
	    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	}

	var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	function localeWeekdaysMin (m) {
	    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	}

	function handleStrictParse$1(weekdayName, format, strict) {
	    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._minWeekdaysParse = [];

	        for (i = 0; i < 7; ++i) {
	            mom = createUTC([2000, 1]).day(i);
	            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	        }
	    }

	    if (strict) {
	        if (format === 'dddd') {
	            ii = indexOf.call(this._weekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'dddd') {
	            ii = indexOf.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf.call(this._minWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}

	function localeWeekdaysParse (weekdayName, format, strict) {
	    var i, mom, regex;

	    if (this._weekdaysParseExact) {
	        return handleStrictParse$1.call(this, weekdayName, format, strict);
	    }

	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._minWeekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._fullWeekdaysParse = [];
	    }

	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already

	        mom = createUTC([2000, 1]).day(i);
	        if (strict && !this._fullWeekdaysParse[i]) {
	            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
	            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
	            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
	        }
	        if (!this._weekdaysParse[i]) {
	            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	            return i;
	        }
	    }
	}

	// MOMENTS

	function getSetDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	    if (input != null) {
	        input = parseWeekday(input, this.localeData());
	        return this.add(input - day, 'd');
	    } else {
	        return day;
	    }
	}

	function getSetLocaleDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	    return input == null ? weekday : this.add(input - weekday, 'd');
	}

	function getSetISODayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }

	    // behaves the same as moment#day except
	    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	    // as a setter, sunday should belong to the previous week.

	    if (input != null) {
	        var weekday = parseIsoWeekday(input, this.localeData());
	        return this.day(this.day() % 7 ? weekday : weekday - 7);
	    } else {
	        return this.day() || 7;
	    }
	}

	var defaultWeekdaysRegex = matchWord;
	function weekdaysRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysStrictRegex;
	        } else {
	            return this._weekdaysRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            this._weekdaysRegex = defaultWeekdaysRegex;
	        }
	        return this._weekdaysStrictRegex && isStrict ?
	            this._weekdaysStrictRegex : this._weekdaysRegex;
	    }
	}

	var defaultWeekdaysShortRegex = matchWord;
	function weekdaysShortRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysShortStrictRegex;
	        } else {
	            return this._weekdaysShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	        }
	        return this._weekdaysShortStrictRegex && isStrict ?
	            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	    }
	}

	var defaultWeekdaysMinRegex = matchWord;
	function weekdaysMinRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysMinStrictRegex;
	        } else {
	            return this._weekdaysMinRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	        }
	        return this._weekdaysMinStrictRegex && isStrict ?
	            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	    }
	}


	function computeWeekdaysParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }

	    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom, minp, shortp, longp;
	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, 1]).day(i);
	        minp = this.weekdaysMin(mom, '');
	        shortp = this.weekdaysShort(mom, '');
	        longp = this.weekdays(mom, '');
	        minPieces.push(minp);
	        shortPieces.push(shortp);
	        longPieces.push(longp);
	        mixedPieces.push(minp);
	        mixedPieces.push(shortp);
	        mixedPieces.push(longp);
	    }
	    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	    // will match the longer piece.
	    minPieces.sort(cmpLenRev);
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 7; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }

	    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._weekdaysShortRegex = this._weekdaysRegex;
	    this._weekdaysMinRegex = this._weekdaysRegex;

	    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	}

	// FORMATTING

	function hFormat() {
	    return this.hours() % 12 || 12;
	}

	function kFormat() {
	    return this.hours() || 24;
	}

	addFormatToken('H', ['HH', 2], 0, 'hour');
	addFormatToken('h', ['hh', 2], 0, hFormat);
	addFormatToken('k', ['kk', 2], 0, kFormat);

	addFormatToken('hmm', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	});

	addFormatToken('hmmss', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});

	addFormatToken('Hmm', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2);
	});

	addFormatToken('Hmmss', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});

	function meridiem (token, lowercase) {
	    addFormatToken(token, 0, 0, function () {
	        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	    });
	}

	meridiem('a', true);
	meridiem('A', false);

	// ALIASES

	addUnitAlias('hour', 'h');

	// PRIORITY
	addUnitPriority('hour', 13);

	// PARSING

	function matchMeridiem (isStrict, locale) {
	    return locale._meridiemParse;
	}

	addRegexToken('a',  matchMeridiem);
	addRegexToken('A',  matchMeridiem);
	addRegexToken('H',  match1to2);
	addRegexToken('h',  match1to2);
	addRegexToken('k',  match1to2);
	addRegexToken('HH', match1to2, match2);
	addRegexToken('hh', match1to2, match2);
	addRegexToken('kk', match1to2, match2);

	addRegexToken('hmm', match3to4);
	addRegexToken('hmmss', match5to6);
	addRegexToken('Hmm', match3to4);
	addRegexToken('Hmmss', match5to6);

	addParseToken(['H', 'HH'], HOUR);
	addParseToken(['k', 'kk'], function (input, array, config) {
	    var kInput = toInt(input);
	    array[HOUR] = kInput === 24 ? 0 : kInput;
	});
	addParseToken(['a', 'A'], function (input, array, config) {
	    config._isPm = config._locale.isPM(input);
	    config._meridiem = input;
	});
	addParseToken(['h', 'hh'], function (input, array, config) {
	    array[HOUR] = toInt(input);
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('Hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	});
	addParseToken('Hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	});

	// LOCALES

	function localeIsPM (input) {
	    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	    // Using charAt should be more compatible.
	    return ((input + '').toLowerCase().charAt(0) === 'p');
	}

	var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	function localeMeridiem (hours, minutes, isLower) {
	    if (hours > 11) {
	        return isLower ? 'pm' : 'PM';
	    } else {
	        return isLower ? 'am' : 'AM';
	    }
	}


	// MOMENTS

	// Setting the hour should keep the time, because the user explicitly
	// specified which hour he wants. So trying to maintain the same hour (in
	// a new timezone) makes sense. Adding/subtracting hours does not follow
	// this rule.
	var getSetHour = makeGetSet('Hours', true);

	// months
	// week
	// weekdays
	// meridiem
	var baseConfig = {
	    calendar: defaultCalendar,
	    longDateFormat: defaultLongDateFormat,
	    invalidDate: defaultInvalidDate,
	    ordinal: defaultOrdinal,
	    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	    relativeTime: defaultRelativeTime,

	    months: defaultLocaleMonths,
	    monthsShort: defaultLocaleMonthsShort,

	    week: defaultLocaleWeek,

	    weekdays: defaultLocaleWeekdays,
	    weekdaysMin: defaultLocaleWeekdaysMin,
	    weekdaysShort: defaultLocaleWeekdaysShort,

	    meridiemParse: defaultLocaleMeridiemParse
	};

	// internal storage for locale config files
	var locales = {};
	var localeFamilies = {};
	var globalLocale;

	function normalizeLocale(key) {
	    return key ? key.toLowerCase().replace('_', '-') : key;
	}

	// pick the locale from the array
	// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	function chooseLocale(names) {
	    var i = 0, j, next, locale, split;

	    while (i < names.length) {
	        split = normalizeLocale(names[i]).split('-');
	        j = split.length;
	        next = normalizeLocale(names[i + 1]);
	        next = next ? next.split('-') : null;
	        while (j > 0) {
	            locale = loadLocale(split.slice(0, j).join('-'));
	            if (locale) {
	                return locale;
	            }
	            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                //the next array item is better than a shallower substring of this one
	                break;
	            }
	            j--;
	        }
	        i++;
	    }
	    return null;
	}

	function loadLocale(name) {
	    var oldLocale = null;
	    // TODO: Find a better way to register and load all the locales in Node
	    if (!locales[name] && (typeof module !== 'undefined') &&
	            module && module.exports) {
	        try {
	            oldLocale = globalLocale._abbr;
	            var aliasedRequire = require;
	            !(function webpackMissingModule() { var e = new Error("Cannot find module \"./locale\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());
	            getSetGlobalLocale(oldLocale);
	        } catch (e) {}
	    }
	    return locales[name];
	}

	// This function will load locale and then set the global locale.  If
	// no arguments are passed in, it will simply return the current global
	// locale key.
	function getSetGlobalLocale (key, values) {
	    var data;
	    if (key) {
	        if (isUndefined(values)) {
	            data = getLocale(key);
	        }
	        else {
	            data = defineLocale(key, values);
	        }

	        if (data) {
	            // moment.duration._locale = moment._locale = data;
	            globalLocale = data;
	        }
	    }

	    return globalLocale._abbr;
	}

	function defineLocale (name, config) {
	    if (config !== null) {
	        var parentConfig = baseConfig;
	        config.abbr = name;
	        if (locales[name] != null) {
	            deprecateSimple('defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                    'an existing locale. moment.defineLocale(localeName, ' +
	                    'config) should only be used for creating a new locale ' +
	                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	            parentConfig = locales[name]._config;
	        } else if (config.parentLocale != null) {
	            if (locales[config.parentLocale] != null) {
	                parentConfig = locales[config.parentLocale]._config;
	            } else {
	                if (!localeFamilies[config.parentLocale]) {
	                    localeFamilies[config.parentLocale] = [];
	                }
	                localeFamilies[config.parentLocale].push({
	                    name: name,
	                    config: config
	                });
	                return null;
	            }
	        }
	        locales[name] = new Locale(mergeConfigs(parentConfig, config));

	        if (localeFamilies[name]) {
	            localeFamilies[name].forEach(function (x) {
	                defineLocale(x.name, x.config);
	            });
	        }

	        // backwards compat for now: also set the locale
	        // make sure we set the locale AFTER all child locales have been
	        // created, so we won't end up with the child locale set.
	        getSetGlobalLocale(name);


	        return locales[name];
	    } else {
	        // useful for testing
	        delete locales[name];
	        return null;
	    }
	}

	function updateLocale(name, config) {
	    if (config != null) {
	        var locale, parentConfig = baseConfig;
	        // MERGE
	        if (locales[name] != null) {
	            parentConfig = locales[name]._config;
	        }
	        config = mergeConfigs(parentConfig, config);
	        locale = new Locale(config);
	        locale.parentLocale = locales[name];
	        locales[name] = locale;

	        // backwards compat for now: also set the locale
	        getSetGlobalLocale(name);
	    } else {
	        // pass null for config to unupdate, useful for tests
	        if (locales[name] != null) {
	            if (locales[name].parentLocale != null) {
	                locales[name] = locales[name].parentLocale;
	            } else if (locales[name] != null) {
	                delete locales[name];
	            }
	        }
	    }
	    return locales[name];
	}

	// returns locale data
	function getLocale (key) {
	    var locale;

	    if (key && key._locale && key._locale._abbr) {
	        key = key._locale._abbr;
	    }

	    if (!key) {
	        return globalLocale;
	    }

	    if (!isArray(key)) {
	        //short-circuit everything else
	        locale = loadLocale(key);
	        if (locale) {
	            return locale;
	        }
	        key = [key];
	    }

	    return chooseLocale(key);
	}

	function listLocales() {
	    return keys(locales);
	}

	function checkOverflow (m) {
	    var overflow;
	    var a = m._a;

	    if (a && getParsingFlags(m).overflow === -2) {
	        overflow =
	            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	            -1;

	        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	            overflow = DATE;
	        }
	        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	            overflow = WEEK;
	        }
	        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	            overflow = WEEKDAY;
	        }

	        getParsingFlags(m).overflow = overflow;
	    }

	    return m;
	}

	// Pick the first defined of two or three arguments.
	function defaults(a, b, c) {
	    if (a != null) {
	        return a;
	    }
	    if (b != null) {
	        return b;
	    }
	    return c;
	}

	function currentDateArray(config) {
	    // hooks is actually the exported moment object
	    var nowValue = new Date(hooks.now());
	    if (config._useUTC) {
	        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	    }
	    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	}

	// convert an array to a date.
	// the array should mirror the parameters below
	// note: all values past the year are optional and will default to the lowest possible value.
	// [year, month, day , hour, minute, second, millisecond]
	function configFromArray (config) {
	    var i, date, input = [], currentDate, yearToUse;

	    if (config._d) {
	        return;
	    }

	    currentDate = currentDateArray(config);

	    //compute day of the year from weeks and weekdays
	    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	        dayOfYearFromWeekInfo(config);
	    }

	    //if the day of the year is set, figure out what it is
	    if (config._dayOfYear != null) {
	        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
	            getParsingFlags(config)._overflowDayOfYear = true;
	        }

	        date = createUTCDate(yearToUse, 0, config._dayOfYear);
	        config._a[MONTH] = date.getUTCMonth();
	        config._a[DATE] = date.getUTCDate();
	    }

	    // Default to current date.
	    // * if no year, month, day of month are given, default to today
	    // * if day of month is given, default month and year
	    // * if month is given, default only year
	    // * if year is given, don't default anything
	    for (i = 0; i < 3 && config._a[i] == null; ++i) {
	        config._a[i] = input[i] = currentDate[i];
	    }

	    // Zero out whatever was not defaulted, including time
	    for (; i < 7; i++) {
	        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	    }

	    // Check for 24:00:00.000
	    if (config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0) {
	        config._nextDay = true;
	        config._a[HOUR] = 0;
	    }

	    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	    // Apply timezone offset from input. The actual utcOffset can be changed
	    // with parseZone.
	    if (config._tzm != null) {
	        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	    }

	    if (config._nextDay) {
	        config._a[HOUR] = 24;
	    }

	    // check for mismatching day of week
	    if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== config._d.getDay()) {
	        getParsingFlags(config).weekdayMismatch = true;
	    }
	}

	function dayOfYearFromWeekInfo(config) {
	    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

	    w = config._w;
	    if (w.GG != null || w.W != null || w.E != null) {
	        dow = 1;
	        doy = 4;

	        // TODO: We need to take the current isoWeekYear, but that depends on
	        // how we interpret now (local, utc, fixed offset). So create
	        // a now version of current config (take local/utc/offset flags, and
	        // create now).
	        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
	        week = defaults(w.W, 1);
	        weekday = defaults(w.E, 1);
	        if (weekday < 1 || weekday > 7) {
	            weekdayOverflow = true;
	        }
	    } else {
	        dow = config._locale._week.dow;
	        doy = config._locale._week.doy;

	        var curWeek = weekOfYear(createLocal(), dow, doy);

	        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

	        // Default to current week.
	        week = defaults(w.w, curWeek.week);

	        if (w.d != null) {
	            // weekday -- low day numbers are considered next week
	            weekday = w.d;
	            if (weekday < 0 || weekday > 6) {
	                weekdayOverflow = true;
	            }
	        } else if (w.e != null) {
	            // local weekday -- counting starts from begining of week
	            weekday = w.e + dow;
	            if (w.e < 0 || w.e > 6) {
	                weekdayOverflow = true;
	            }
	        } else {
	            // default to begining of week
	            weekday = dow;
	        }
	    }
	    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	        getParsingFlags(config)._overflowWeeks = true;
	    } else if (weekdayOverflow != null) {
	        getParsingFlags(config)._overflowWeekday = true;
	    } else {
	        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	        config._a[YEAR] = temp.year;
	        config._dayOfYear = temp.dayOfYear;
	    }
	}

	// iso 8601 regex
	// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

	var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

	var isoDates = [
	    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	    ['YYYY-DDD', /\d{4}-\d{3}/],
	    ['YYYY-MM', /\d{4}-\d\d/, false],
	    ['YYYYYYMMDD', /[+-]\d{10}/],
	    ['YYYYMMDD', /\d{8}/],
	    // YYYYMM is NOT allowed by the standard
	    ['GGGG[W]WWE', /\d{4}W\d{3}/],
	    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	    ['YYYYDDD', /\d{7}/]
	];

	// iso time formats and regexes
	var isoTimes = [
	    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	    ['HH:mm', /\d\d:\d\d/],
	    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	    ['HHmmss', /\d\d\d\d\d\d/],
	    ['HHmm', /\d\d\d\d/],
	    ['HH', /\d\d/]
	];

	var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

	// date from iso format
	function configFromISO(config) {
	    var i, l,
	        string = config._i,
	        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	        allowTime, dateFormat, timeFormat, tzFormat;

	    if (match) {
	        getParsingFlags(config).iso = true;

	        for (i = 0, l = isoDates.length; i < l; i++) {
	            if (isoDates[i][1].exec(match[1])) {
	                dateFormat = isoDates[i][0];
	                allowTime = isoDates[i][2] !== false;
	                break;
	            }
	        }
	        if (dateFormat == null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[3]) {
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(match[3])) {
	                    // match[2] should be 'T' or space
	                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                    break;
	                }
	            }
	            if (timeFormat == null) {
	                config._isValid = false;
	                return;
	            }
	        }
	        if (!allowTime && timeFormat != null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[4]) {
	            if (tzRegex.exec(match[4])) {
	                tzFormat = 'Z';
	            } else {
	                config._isValid = false;
	                return;
	            }
	        }
	        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	        configFromStringAndFormat(config);
	    } else {
	        config._isValid = false;
	    }
	}

	// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
	var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

	function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
	    var result = [
	        untruncateYear(yearStr),
	        defaultLocaleMonthsShort.indexOf(monthStr),
	        parseInt(dayStr, 10),
	        parseInt(hourStr, 10),
	        parseInt(minuteStr, 10)
	    ];

	    if (secondStr) {
	        result.push(parseInt(secondStr, 10));
	    }

	    return result;
	}

	function untruncateYear(yearStr) {
	    var year = parseInt(yearStr, 10);
	    if (year <= 49) {
	        return 2000 + year;
	    } else if (year <= 999) {
	        return 1900 + year;
	    }
	    return year;
	}

	function preprocessRFC2822(s) {
	    // Remove comments and folding whitespace and replace multiple-spaces with a single space
	    return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').trim();
	}

	function checkWeekday(weekdayStr, parsedInput, config) {
	    if (weekdayStr) {
	        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
	        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
	            weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
	        if (weekdayProvided !== weekdayActual) {
	            getParsingFlags(config).weekdayMismatch = true;
	            config._isValid = false;
	            return false;
	        }
	    }
	    return true;
	}

	var obsOffsets = {
	    UT: 0,
	    GMT: 0,
	    EDT: -4 * 60,
	    EST: -5 * 60,
	    CDT: -5 * 60,
	    CST: -6 * 60,
	    MDT: -6 * 60,
	    MST: -7 * 60,
	    PDT: -7 * 60,
	    PST: -8 * 60
	};

	function calculateOffset(obsOffset, militaryOffset, numOffset) {
	    if (obsOffset) {
	        return obsOffsets[obsOffset];
	    } else if (militaryOffset) {
	        // the only allowed military tz is Z
	        return 0;
	    } else {
	        var hm = parseInt(numOffset, 10);
	        var m = hm % 100, h = (hm - m) / 100;
	        return h * 60 + m;
	    }
	}

	// date and time from ref 2822 format
	function configFromRFC2822(config) {
	    var match = rfc2822.exec(preprocessRFC2822(config._i));
	    if (match) {
	        var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
	        if (!checkWeekday(match[1], parsedArray, config)) {
	            return;
	        }

	        config._a = parsedArray;
	        config._tzm = calculateOffset(match[8], match[9], match[10]);

	        config._d = createUTCDate.apply(null, config._a);
	        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

	        getParsingFlags(config).rfc2822 = true;
	    } else {
	        config._isValid = false;
	    }
	}

	// date from iso format or fallback
	function configFromString(config) {
	    var matched = aspNetJsonRegex.exec(config._i);

	    if (matched !== null) {
	        config._d = new Date(+matched[1]);
	        return;
	    }

	    configFromISO(config);
	    if (config._isValid === false) {
	        delete config._isValid;
	    } else {
	        return;
	    }

	    configFromRFC2822(config);
	    if (config._isValid === false) {
	        delete config._isValid;
	    } else {
	        return;
	    }

	    // Final attempt, use Input Fallback
	    hooks.createFromInputFallback(config);
	}

	hooks.createFromInputFallback = deprecate(
	    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
	    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
	    'discouraged and will be removed in an upcoming major release. Please refer to ' +
	    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	    function (config) {
	        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	    }
	);

	// constant that refers to the ISO standard
	hooks.ISO_8601 = function () {};

	// constant that refers to the RFC 2822 form
	hooks.RFC_2822 = function () {};

	// date from string and format string
	function configFromStringAndFormat(config) {
	    // TODO: Move this to another part of the creation flow to prevent circular deps
	    if (config._f === hooks.ISO_8601) {
	        configFromISO(config);
	        return;
	    }
	    if (config._f === hooks.RFC_2822) {
	        configFromRFC2822(config);
	        return;
	    }
	    config._a = [];
	    getParsingFlags(config).empty = true;

	    // This array is used to make a Date, either with `new Date` or `Date.UTC`
	    var string = '' + config._i,
	        i, parsedInput, tokens, token, skipped,
	        stringLength = string.length,
	        totalParsedInputLength = 0;

	    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

	    for (i = 0; i < tokens.length; i++) {
	        token = tokens[i];
	        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	        // console.log('token', token, 'parsedInput', parsedInput,
	        //         'regex', getParseRegexForToken(token, config));
	        if (parsedInput) {
	            skipped = string.substr(0, string.indexOf(parsedInput));
	            if (skipped.length > 0) {
	                getParsingFlags(config).unusedInput.push(skipped);
	            }
	            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	            totalParsedInputLength += parsedInput.length;
	        }
	        // don't parse if it's not a known token
	        if (formatTokenFunctions[token]) {
	            if (parsedInput) {
	                getParsingFlags(config).empty = false;
	            }
	            else {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	            addTimeToArrayFromToken(token, parsedInput, config);
	        }
	        else if (config._strict && !parsedInput) {
	            getParsingFlags(config).unusedTokens.push(token);
	        }
	    }

	    // add remaining unparsed input length to the string
	    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	    if (string.length > 0) {
	        getParsingFlags(config).unusedInput.push(string);
	    }

	    // clear _12h flag if hour is <= 12
	    if (config._a[HOUR] <= 12 &&
	        getParsingFlags(config).bigHour === true &&
	        config._a[HOUR] > 0) {
	        getParsingFlags(config).bigHour = undefined;
	    }

	    getParsingFlags(config).parsedDateParts = config._a.slice(0);
	    getParsingFlags(config).meridiem = config._meridiem;
	    // handle meridiem
	    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

	    configFromArray(config);
	    checkOverflow(config);
	}


	function meridiemFixWrap (locale, hour, meridiem) {
	    var isPm;

	    if (meridiem == null) {
	        // nothing to do
	        return hour;
	    }
	    if (locale.meridiemHour != null) {
	        return locale.meridiemHour(hour, meridiem);
	    } else if (locale.isPM != null) {
	        // Fallback
	        isPm = locale.isPM(meridiem);
	        if (isPm && hour < 12) {
	            hour += 12;
	        }
	        if (!isPm && hour === 12) {
	            hour = 0;
	        }
	        return hour;
	    } else {
	        // this is not supposed to happen
	        return hour;
	    }
	}

	// date from string and array of format strings
	function configFromStringAndArray(config) {
	    var tempConfig,
	        bestMoment,

	        scoreToBeat,
	        i,
	        currentScore;

	    if (config._f.length === 0) {
	        getParsingFlags(config).invalidFormat = true;
	        config._d = new Date(NaN);
	        return;
	    }

	    for (i = 0; i < config._f.length; i++) {
	        currentScore = 0;
	        tempConfig = copyConfig({}, config);
	        if (config._useUTC != null) {
	            tempConfig._useUTC = config._useUTC;
	        }
	        tempConfig._f = config._f[i];
	        configFromStringAndFormat(tempConfig);

	        if (!isValid(tempConfig)) {
	            continue;
	        }

	        // if there is any input that was not parsed add a penalty for that format
	        currentScore += getParsingFlags(tempConfig).charsLeftOver;

	        //or tokens
	        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	        getParsingFlags(tempConfig).score = currentScore;

	        if (scoreToBeat == null || currentScore < scoreToBeat) {
	            scoreToBeat = currentScore;
	            bestMoment = tempConfig;
	        }
	    }

	    extend(config, bestMoment || tempConfig);
	}

	function configFromObject(config) {
	    if (config._d) {
	        return;
	    }

	    var i = normalizeObjectUnits(config._i);
	    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	        return obj && parseInt(obj, 10);
	    });

	    configFromArray(config);
	}

	function createFromConfig (config) {
	    var res = new Moment(checkOverflow(prepareConfig(config)));
	    if (res._nextDay) {
	        // Adding is smart enough around DST
	        res.add(1, 'd');
	        res._nextDay = undefined;
	    }

	    return res;
	}

	function prepareConfig (config) {
	    var input = config._i,
	        format = config._f;

	    config._locale = config._locale || getLocale(config._l);

	    if (input === null || (format === undefined && input === '')) {
	        return createInvalid({nullInput: true});
	    }

	    if (typeof input === 'string') {
	        config._i = input = config._locale.preparse(input);
	    }

	    if (isMoment(input)) {
	        return new Moment(checkOverflow(input));
	    } else if (isDate(input)) {
	        config._d = input;
	    } else if (isArray(format)) {
	        configFromStringAndArray(config);
	    } else if (format) {
	        configFromStringAndFormat(config);
	    }  else {
	        configFromInput(config);
	    }

	    if (!isValid(config)) {
	        config._d = null;
	    }

	    return config;
	}

	function configFromInput(config) {
	    var input = config._i;
	    if (isUndefined(input)) {
	        config._d = new Date(hooks.now());
	    } else if (isDate(input)) {
	        config._d = new Date(input.valueOf());
	    } else if (typeof input === 'string') {
	        configFromString(config);
	    } else if (isArray(input)) {
	        config._a = map(input.slice(0), function (obj) {
	            return parseInt(obj, 10);
	        });
	        configFromArray(config);
	    } else if (isObject(input)) {
	        configFromObject(config);
	    } else if (isNumber(input)) {
	        // from milliseconds
	        config._d = new Date(input);
	    } else {
	        hooks.createFromInputFallback(config);
	    }
	}

	function createLocalOrUTC (input, format, locale, strict, isUTC) {
	    var c = {};

	    if (locale === true || locale === false) {
	        strict = locale;
	        locale = undefined;
	    }

	    if ((isObject(input) && isObjectEmpty(input)) ||
	            (isArray(input) && input.length === 0)) {
	        input = undefined;
	    }
	    // object construction must be done this way.
	    // https://github.com/moment/moment/issues/1423
	    c._isAMomentObject = true;
	    c._useUTC = c._isUTC = isUTC;
	    c._l = locale;
	    c._i = input;
	    c._f = format;
	    c._strict = strict;

	    return createFromConfig(c);
	}

	function createLocal (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, false);
	}

	var prototypeMin = deprecate(
	    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other < this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);

	var prototypeMax = deprecate(
	    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other > this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);

	// Pick a moment m from moments so that m[fn](other) is true for all
	// other. This relies on the function fn to be transitive.
	//
	// moments should either be an array of moment objects or an array, whose
	// first element is an array of moment objects.
	function pickBy(fn, moments) {
	    var res, i;
	    if (moments.length === 1 && isArray(moments[0])) {
	        moments = moments[0];
	    }
	    if (!moments.length) {
	        return createLocal();
	    }
	    res = moments[0];
	    for (i = 1; i < moments.length; ++i) {
	        if (!moments[i].isValid() || moments[i][fn](res)) {
	            res = moments[i];
	        }
	    }
	    return res;
	}

	// TODO: Use [].sort instead?
	function min () {
	    var args = [].slice.call(arguments, 0);

	    return pickBy('isBefore', args);
	}

	function max () {
	    var args = [].slice.call(arguments, 0);

	    return pickBy('isAfter', args);
	}

	var now = function () {
	    return Date.now ? Date.now() : +(new Date());
	};

	var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

	function isDurationValid(m) {
	    for (var key in m) {
	        if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
	            return false;
	        }
	    }

	    var unitHasDecimal = false;
	    for (var i = 0; i < ordering.length; ++i) {
	        if (m[ordering[i]]) {
	            if (unitHasDecimal) {
	                return false; // only allow non-integers for smallest unit
	            }
	            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	                unitHasDecimal = true;
	            }
	        }
	    }

	    return true;
	}

	function isValid$1() {
	    return this._isValid;
	}

	function createInvalid$1() {
	    return createDuration(NaN);
	}

	function Duration (duration) {
	    var normalizedInput = normalizeObjectUnits(duration),
	        years = normalizedInput.year || 0,
	        quarters = normalizedInput.quarter || 0,
	        months = normalizedInput.month || 0,
	        weeks = normalizedInput.week || 0,
	        days = normalizedInput.day || 0,
	        hours = normalizedInput.hour || 0,
	        minutes = normalizedInput.minute || 0,
	        seconds = normalizedInput.second || 0,
	        milliseconds = normalizedInput.millisecond || 0;

	    this._isValid = isDurationValid(normalizedInput);

	    // representation for dateAddRemove
	    this._milliseconds = +milliseconds +
	        seconds * 1e3 + // 1000
	        minutes * 6e4 + // 1000 * 60
	        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	    // Because of dateAddRemove treats 24 hours as different from a
	    // day when working around DST, we need to store them separately
	    this._days = +days +
	        weeks * 7;
	    // It is impossible to translate months into days without knowing
	    // which months you are are talking about, so we have to store
	    // it separately.
	    this._months = +months +
	        quarters * 3 +
	        years * 12;

	    this._data = {};

	    this._locale = getLocale();

	    this._bubble();
	}

	function isDuration (obj) {
	    return obj instanceof Duration;
	}

	function absRound (number) {
	    if (number < 0) {
	        return Math.round(-1 * number) * -1;
	    } else {
	        return Math.round(number);
	    }
	}

	// FORMATTING

	function offset (token, separator) {
	    addFormatToken(token, 0, 0, function () {
	        var offset = this.utcOffset();
	        var sign = '+';
	        if (offset < 0) {
	            offset = -offset;
	            sign = '-';
	        }
	        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	    });
	}

	offset('Z', ':');
	offset('ZZ', '');

	// PARSING

	addRegexToken('Z',  matchShortOffset);
	addRegexToken('ZZ', matchShortOffset);
	addParseToken(['Z', 'ZZ'], function (input, array, config) {
	    config._useUTC = true;
	    config._tzm = offsetFromString(matchShortOffset, input);
	});

	// HELPERS

	// timezone chunker
	// '+10:00' > ['10',  '00']
	// '-1530'  > ['-15', '30']
	var chunkOffset = /([\+\-]|\d\d)/gi;

	function offsetFromString(matcher, string) {
	    var matches = (string || '').match(matcher);

	    if (matches === null) {
	        return null;
	    }

	    var chunk   = matches[matches.length - 1] || [];
	    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	    var minutes = +(parts[1] * 60) + toInt(parts[2]);

	    return minutes === 0 ?
	      0 :
	      parts[0] === '+' ? minutes : -minutes;
	}

	// Return a moment from input, that is local/utc/zone equivalent to model.
	function cloneWithOffset(input, model) {
	    var res, diff;
	    if (model._isUTC) {
	        res = model.clone();
	        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
	        // Use low-level api, because this fn is low-level api.
	        res._d.setTime(res._d.valueOf() + diff);
	        hooks.updateOffset(res, false);
	        return res;
	    } else {
	        return createLocal(input).local();
	    }
	}

	function getDateOffset (m) {
	    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	    // https://github.com/moment/moment/pull/1871
	    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	}

	// HOOKS

	// This function will be called whenever a moment is mutated.
	// It is intended to keep the offset in sync with the timezone.
	hooks.updateOffset = function () {};

	// MOMENTS

	// keepLocalTime = true means only change the timezone, without
	// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	// +0200, so we adjust the time as needed, to be valid.
	//
	// Keeping the time actually adds/subtracts (one hour)
	// from the actual represented time. That is why we call updateOffset
	// a second time. In case it wants us to change the offset again
	// _changeInProgress == true case, then we have to adjust, because
	// there is no such time in the given timezone.
	function getSetOffset (input, keepLocalTime, keepMinutes) {
	    var offset = this._offset || 0,
	        localAdjust;
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    if (input != null) {
	        if (typeof input === 'string') {
	            input = offsetFromString(matchShortOffset, input);
	            if (input === null) {
	                return this;
	            }
	        } else if (Math.abs(input) < 16 && !keepMinutes) {
	            input = input * 60;
	        }
	        if (!this._isUTC && keepLocalTime) {
	            localAdjust = getDateOffset(this);
	        }
	        this._offset = input;
	        this._isUTC = true;
	        if (localAdjust != null) {
	            this.add(localAdjust, 'm');
	        }
	        if (offset !== input) {
	            if (!keepLocalTime || this._changeInProgress) {
	                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
	            } else if (!this._changeInProgress) {
	                this._changeInProgress = true;
	                hooks.updateOffset(this, true);
	                this._changeInProgress = null;
	            }
	        }
	        return this;
	    } else {
	        return this._isUTC ? offset : getDateOffset(this);
	    }
	}

	function getSetZone (input, keepLocalTime) {
	    if (input != null) {
	        if (typeof input !== 'string') {
	            input = -input;
	        }

	        this.utcOffset(input, keepLocalTime);

	        return this;
	    } else {
	        return -this.utcOffset();
	    }
	}

	function setOffsetToUTC (keepLocalTime) {
	    return this.utcOffset(0, keepLocalTime);
	}

	function setOffsetToLocal (keepLocalTime) {
	    if (this._isUTC) {
	        this.utcOffset(0, keepLocalTime);
	        this._isUTC = false;

	        if (keepLocalTime) {
	            this.subtract(getDateOffset(this), 'm');
	        }
	    }
	    return this;
	}

	function setOffsetToParsedOffset () {
	    if (this._tzm != null) {
	        this.utcOffset(this._tzm, false, true);
	    } else if (typeof this._i === 'string') {
	        var tZone = offsetFromString(matchOffset, this._i);
	        if (tZone != null) {
	            this.utcOffset(tZone);
	        }
	        else {
	            this.utcOffset(0, true);
	        }
	    }
	    return this;
	}

	function hasAlignedHourOffset (input) {
	    if (!this.isValid()) {
	        return false;
	    }
	    input = input ? createLocal(input).utcOffset() : 0;

	    return (this.utcOffset() - input) % 60 === 0;
	}

	function isDaylightSavingTime () {
	    return (
	        this.utcOffset() > this.clone().month(0).utcOffset() ||
	        this.utcOffset() > this.clone().month(5).utcOffset()
	    );
	}

	function isDaylightSavingTimeShifted () {
	    if (!isUndefined(this._isDSTShifted)) {
	        return this._isDSTShifted;
	    }

	    var c = {};

	    copyConfig(c, this);
	    c = prepareConfig(c);

	    if (c._a) {
	        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	        this._isDSTShifted = this.isValid() &&
	            compareArrays(c._a, other.toArray()) > 0;
	    } else {
	        this._isDSTShifted = false;
	    }

	    return this._isDSTShifted;
	}

	function isLocal () {
	    return this.isValid() ? !this._isUTC : false;
	}

	function isUtcOffset () {
	    return this.isValid() ? this._isUTC : false;
	}

	function isUtc () {
	    return this.isValid() ? this._isUTC && this._offset === 0 : false;
	}

	// ASP.NET json date format regex
	var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

	// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	// and further modified to allow for strings containing both week and day
	var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

	function createDuration (input, key) {
	    var duration = input,
	        // matching against regexp is expensive, do it on demand
	        match = null,
	        sign,
	        ret,
	        diffRes;

	    if (isDuration(input)) {
	        duration = {
	            ms : input._milliseconds,
	            d  : input._days,
	            M  : input._months
	        };
	    } else if (isNumber(input)) {
	        duration = {};
	        if (key) {
	            duration[key] = input;
	        } else {
	            duration.milliseconds = input;
	        }
	    } else if (!!(match = aspNetRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : 1;
	        duration = {
	            y  : 0,
	            d  : toInt(match[DATE])                         * sign,
	            h  : toInt(match[HOUR])                         * sign,
	            m  : toInt(match[MINUTE])                       * sign,
	            s  : toInt(match[SECOND])                       * sign,
	            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	        };
	    } else if (!!(match = isoRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;
	        duration = {
	            y : parseIso(match[2], sign),
	            M : parseIso(match[3], sign),
	            w : parseIso(match[4], sign),
	            d : parseIso(match[5], sign),
	            h : parseIso(match[6], sign),
	            m : parseIso(match[7], sign),
	            s : parseIso(match[8], sign)
	        };
	    } else if (duration == null) {// checks for null or undefined
	        duration = {};
	    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

	        duration = {};
	        duration.ms = diffRes.milliseconds;
	        duration.M = diffRes.months;
	    }

	    ret = new Duration(duration);

	    if (isDuration(input) && hasOwnProp(input, '_locale')) {
	        ret._locale = input._locale;
	    }

	    return ret;
	}

	createDuration.fn = Duration.prototype;
	createDuration.invalid = createInvalid$1;

	function parseIso (inp, sign) {
	    // We'd normally use ~~inp for this, but unfortunately it also
	    // converts floats to ints.
	    // inp may be undefined, so careful calling replace on it.
	    var res = inp && parseFloat(inp.replace(',', '.'));
	    // apply sign while we're at it
	    return (isNaN(res) ? 0 : res) * sign;
	}

	function positiveMomentsDifference(base, other) {
	    var res = {milliseconds: 0, months: 0};

	    res.months = other.month() - base.month() +
	        (other.year() - base.year()) * 12;
	    if (base.clone().add(res.months, 'M').isAfter(other)) {
	        --res.months;
	    }

	    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

	    return res;
	}

	function momentsDifference(base, other) {
	    var res;
	    if (!(base.isValid() && other.isValid())) {
	        return {milliseconds: 0, months: 0};
	    }

	    other = cloneWithOffset(other, base);
	    if (base.isBefore(other)) {
	        res = positiveMomentsDifference(base, other);
	    } else {
	        res = positiveMomentsDifference(other, base);
	        res.milliseconds = -res.milliseconds;
	        res.months = -res.months;
	    }

	    return res;
	}

	// TODO: remove 'name' arg after deprecation is removed
	function createAdder(direction, name) {
	    return function (val, period) {
	        var dur, tmp;
	        //invert the arguments, but complain about it
	        if (period !== null && !isNaN(+period)) {
	            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
	            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	            tmp = val; val = period; period = tmp;
	        }

	        val = typeof val === 'string' ? +val : val;
	        dur = createDuration(val, period);
	        addSubtract(this, dur, direction);
	        return this;
	    };
	}

	function addSubtract (mom, duration, isAdding, updateOffset) {
	    var milliseconds = duration._milliseconds,
	        days = absRound(duration._days),
	        months = absRound(duration._months);

	    if (!mom.isValid()) {
	        // No op
	        return;
	    }

	    updateOffset = updateOffset == null ? true : updateOffset;

	    if (months) {
	        setMonth(mom, get(mom, 'Month') + months * isAdding);
	    }
	    if (days) {
	        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	    }
	    if (milliseconds) {
	        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	    }
	    if (updateOffset) {
	        hooks.updateOffset(mom, days || months);
	    }
	}

	var add      = createAdder(1, 'add');
	var subtract = createAdder(-1, 'subtract');

	function getCalendarFormat(myMoment, now) {
	    var diff = myMoment.diff(now, 'days', true);
	    return diff < -6 ? 'sameElse' :
	            diff < -1 ? 'lastWeek' :
	            diff < 0 ? 'lastDay' :
	            diff < 1 ? 'sameDay' :
	            diff < 2 ? 'nextDay' :
	            diff < 7 ? 'nextWeek' : 'sameElse';
	}

	function calendar$1 (time, formats) {
	    // We want to compare the start of today, vs this.
	    // Getting start-of-today depends on whether we're local/utc/offset or not.
	    var now = time || createLocal(),
	        sod = cloneWithOffset(now, this).startOf('day'),
	        format = hooks.calendarFormat(this, sod) || 'sameElse';

	    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

	    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
	}

	function clone () {
	    return new Moment(this);
	}

	function isAfter (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() > localInput.valueOf();
	    } else {
	        return localInput.valueOf() < this.clone().startOf(units).valueOf();
	    }
	}

	function isBefore (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() < localInput.valueOf();
	    } else {
	        return this.clone().endOf(units).valueOf() < localInput.valueOf();
	    }
	}

	function isBetween (from, to, units, inclusivity) {
	    inclusivity = inclusivity || '()';
	    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
	        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	}

	function isSame (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input),
	        inputMs;
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(units || 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() === localInput.valueOf();
	    } else {
	        inputMs = localInput.valueOf();
	        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	    }
	}

	function isSameOrAfter (input, units) {
	    return this.isSame(input, units) || this.isAfter(input,units);
	}

	function isSameOrBefore (input, units) {
	    return this.isSame(input, units) || this.isBefore(input,units);
	}

	function diff (input, units, asFloat) {
	    var that,
	        zoneDelta,
	        delta, output;

	    if (!this.isValid()) {
	        return NaN;
	    }

	    that = cloneWithOffset(input, this);

	    if (!that.isValid()) {
	        return NaN;
	    }

	    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

	    units = normalizeUnits(units);

	    switch (units) {
	        case 'year': output = monthDiff(this, that) / 12; break;
	        case 'month': output = monthDiff(this, that); break;
	        case 'quarter': output = monthDiff(this, that) / 3; break;
	        case 'second': output = (this - that) / 1e3; break; // 1000
	        case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
	        case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
	        case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
	        case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
	        default: output = this - that;
	    }

	    return asFloat ? output : absFloor(output);
	}

	function monthDiff (a, b) {
	    // difference in months
	    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	        // b is in (anchor - 1 month, anchor + 1 month)
	        anchor = a.clone().add(wholeMonthDiff, 'months'),
	        anchor2, adjust;

	    if (b - anchor < 0) {
	        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor - anchor2);
	    } else {
	        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor2 - anchor);
	    }

	    //check for negative zero, return zero if negative zero
	    return -(wholeMonthDiff + adjust) || 0;
	}

	hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

	function toString () {
	    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	}

	function toISOString() {
	    if (!this.isValid()) {
	        return null;
	    }
	    var m = this.clone().utc();
	    if (m.year() < 0 || m.year() > 9999) {
	        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	    }
	    if (isFunction(Date.prototype.toISOString)) {
	        // native implementation is ~50x faster, use it when we can
	        return this.toDate().toISOString();
	    }
	    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	}

	/**
	 * Return a human readable representation of a moment that can
	 * also be evaluated to get a new moment which is the same
	 *
	 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	 */
	function inspect () {
	    if (!this.isValid()) {
	        return 'moment.invalid(/* ' + this._i + ' */)';
	    }
	    var func = 'moment';
	    var zone = '';
	    if (!this.isLocal()) {
	        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	        zone = 'Z';
	    }
	    var prefix = '[' + func + '("]';
	    var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
	    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
	    var suffix = zone + '[")]';

	    return this.format(prefix + year + datetime + suffix);
	}

	function format (inputString) {
	    if (!inputString) {
	        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
	    }
	    var output = formatMoment(this, inputString);
	    return this.localeData().postformat(output);
	}

	function from (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}

	function fromNow (withoutSuffix) {
	    return this.from(createLocal(), withoutSuffix);
	}

	function to (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}

	function toNow (withoutSuffix) {
	    return this.to(createLocal(), withoutSuffix);
	}

	// If passed a locale key, it will set the locale for this
	// instance.  Otherwise, it will return the locale configuration
	// variables for this instance.
	function locale (key) {
	    var newLocaleData;

	    if (key === undefined) {
	        return this._locale._abbr;
	    } else {
	        newLocaleData = getLocale(key);
	        if (newLocaleData != null) {
	            this._locale = newLocaleData;
	        }
	        return this;
	    }
	}

	var lang = deprecate(
	    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	    function (key) {
	        if (key === undefined) {
	            return this.localeData();
	        } else {
	            return this.locale(key);
	        }
	    }
	);

	function localeData () {
	    return this._locale;
	}

	function startOf (units) {
	    units = normalizeUnits(units);
	    // the following switch intentionally omits break keywords
	    // to utilize falling through the cases.
	    switch (units) {
	        case 'year':
	            this.month(0);
	            /* falls through */
	        case 'quarter':
	        case 'month':
	            this.date(1);
	            /* falls through */
	        case 'week':
	        case 'isoWeek':
	        case 'day':
	        case 'date':
	            this.hours(0);
	            /* falls through */
	        case 'hour':
	            this.minutes(0);
	            /* falls through */
	        case 'minute':
	            this.seconds(0);
	            /* falls through */
	        case 'second':
	            this.milliseconds(0);
	    }

	    // weeks are a special case
	    if (units === 'week') {
	        this.weekday(0);
	    }
	    if (units === 'isoWeek') {
	        this.isoWeekday(1);
	    }

	    // quarters are also special
	    if (units === 'quarter') {
	        this.month(Math.floor(this.month() / 3) * 3);
	    }

	    return this;
	}

	function endOf (units) {
	    units = normalizeUnits(units);
	    if (units === undefined || units === 'millisecond') {
	        return this;
	    }

	    // 'date' is an alias for 'day', so it should be considered as such.
	    if (units === 'date') {
	        units = 'day';
	    }

	    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	}

	function valueOf () {
	    return this._d.valueOf() - ((this._offset || 0) * 60000);
	}

	function unix () {
	    return Math.floor(this.valueOf() / 1000);
	}

	function toDate () {
	    return new Date(this.valueOf());
	}

	function toArray () {
	    var m = this;
	    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	}

	function toObject () {
	    var m = this;
	    return {
	        years: m.year(),
	        months: m.month(),
	        date: m.date(),
	        hours: m.hours(),
	        minutes: m.minutes(),
	        seconds: m.seconds(),
	        milliseconds: m.milliseconds()
	    };
	}

	function toJSON () {
	    // new Date(NaN).toJSON() === null
	    return this.isValid() ? this.toISOString() : null;
	}

	function isValid$2 () {
	    return isValid(this);
	}

	function parsingFlags () {
	    return extend({}, getParsingFlags(this));
	}

	function invalidAt () {
	    return getParsingFlags(this).overflow;
	}

	function creationData() {
	    return {
	        input: this._i,
	        format: this._f,
	        locale: this._locale,
	        isUTC: this._isUTC,
	        strict: this._strict
	    };
	}

	// FORMATTING

	addFormatToken(0, ['gg', 2], 0, function () {
	    return this.weekYear() % 100;
	});

	addFormatToken(0, ['GG', 2], 0, function () {
	    return this.isoWeekYear() % 100;
	});

	function addWeekYearFormatToken (token, getter) {
	    addFormatToken(0, [token, token.length], 0, getter);
	}

	addWeekYearFormatToken('gggg',     'weekYear');
	addWeekYearFormatToken('ggggg',    'weekYear');
	addWeekYearFormatToken('GGGG',  'isoWeekYear');
	addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	// ALIASES

	addUnitAlias('weekYear', 'gg');
	addUnitAlias('isoWeekYear', 'GG');

	// PRIORITY

	addUnitPriority('weekYear', 1);
	addUnitPriority('isoWeekYear', 1);


	// PARSING

	addRegexToken('G',      matchSigned);
	addRegexToken('g',      matchSigned);
	addRegexToken('GG',     match1to2, match2);
	addRegexToken('gg',     match1to2, match2);
	addRegexToken('GGGG',   match1to4, match4);
	addRegexToken('gggg',   match1to4, match4);
	addRegexToken('GGGGG',  match1to6, match6);
	addRegexToken('ggggg',  match1to6, match6);

	addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	    week[token.substr(0, 2)] = toInt(input);
	});

	addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	    week[token] = hooks.parseTwoDigitYear(input);
	});

	// MOMENTS

	function getSetWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy);
	}

	function getSetISOWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input, this.isoWeek(), this.isoWeekday(), 1, 4);
	}

	function getISOWeeksInYear () {
	    return weeksInYear(this.year(), 1, 4);
	}

	function getWeeksInYear () {
	    var weekInfo = this.localeData()._week;
	    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	}

	function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	    var weeksTarget;
	    if (input == null) {
	        return weekOfYear(this, dow, doy).year;
	    } else {
	        weeksTarget = weeksInYear(input, dow, doy);
	        if (week > weeksTarget) {
	            week = weeksTarget;
	        }
	        return setWeekAll.call(this, input, week, weekday, dow, doy);
	    }
	}

	function setWeekAll(weekYear, week, weekday, dow, doy) {
	    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

	    this.year(date.getUTCFullYear());
	    this.month(date.getUTCMonth());
	    this.date(date.getUTCDate());
	    return this;
	}

	// FORMATTING

	addFormatToken('Q', 0, 'Qo', 'quarter');

	// ALIASES

	addUnitAlias('quarter', 'Q');

	// PRIORITY

	addUnitPriority('quarter', 7);

	// PARSING

	addRegexToken('Q', match1);
	addParseToken('Q', function (input, array) {
	    array[MONTH] = (toInt(input) - 1) * 3;
	});

	// MOMENTS

	function getSetQuarter (input) {
	    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	}

	// FORMATTING

	addFormatToken('D', ['DD', 2], 'Do', 'date');

	// ALIASES

	addUnitAlias('date', 'D');

	// PRIOROITY
	addUnitPriority('date', 9);

	// PARSING

	addRegexToken('D',  match1to2);
	addRegexToken('DD', match1to2, match2);
	addRegexToken('Do', function (isStrict, locale) {
	    // TODO: Remove "ordinalParse" fallback in next major release.
	    return isStrict ?
	      (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
	      locale._dayOfMonthOrdinalParseLenient;
	});

	addParseToken(['D', 'DD'], DATE);
	addParseToken('Do', function (input, array) {
	    array[DATE] = toInt(input.match(match1to2)[0], 10);
	});

	// MOMENTS

	var getSetDayOfMonth = makeGetSet('Date', true);

	// FORMATTING

	addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	// ALIASES

	addUnitAlias('dayOfYear', 'DDD');

	// PRIORITY
	addUnitPriority('dayOfYear', 4);

	// PARSING

	addRegexToken('DDD',  match1to3);
	addRegexToken('DDDD', match3);
	addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	    config._dayOfYear = toInt(input);
	});

	// HELPERS

	// MOMENTS

	function getSetDayOfYear (input) {
	    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	}

	// FORMATTING

	addFormatToken('m', ['mm', 2], 0, 'minute');

	// ALIASES

	addUnitAlias('minute', 'm');

	// PRIORITY

	addUnitPriority('minute', 14);

	// PARSING

	addRegexToken('m',  match1to2);
	addRegexToken('mm', match1to2, match2);
	addParseToken(['m', 'mm'], MINUTE);

	// MOMENTS

	var getSetMinute = makeGetSet('Minutes', false);

	// FORMATTING

	addFormatToken('s', ['ss', 2], 0, 'second');

	// ALIASES

	addUnitAlias('second', 's');

	// PRIORITY

	addUnitPriority('second', 15);

	// PARSING

	addRegexToken('s',  match1to2);
	addRegexToken('ss', match1to2, match2);
	addParseToken(['s', 'ss'], SECOND);

	// MOMENTS

	var getSetSecond = makeGetSet('Seconds', false);

	// FORMATTING

	addFormatToken('S', 0, 0, function () {
	    return ~~(this.millisecond() / 100);
	});

	addFormatToken(0, ['SS', 2], 0, function () {
	    return ~~(this.millisecond() / 10);
	});

	addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	addFormatToken(0, ['SSSS', 4], 0, function () {
	    return this.millisecond() * 10;
	});
	addFormatToken(0, ['SSSSS', 5], 0, function () {
	    return this.millisecond() * 100;
	});
	addFormatToken(0, ['SSSSSS', 6], 0, function () {
	    return this.millisecond() * 1000;
	});
	addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	    return this.millisecond() * 10000;
	});
	addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	    return this.millisecond() * 100000;
	});
	addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	    return this.millisecond() * 1000000;
	});


	// ALIASES

	addUnitAlias('millisecond', 'ms');

	// PRIORITY

	addUnitPriority('millisecond', 16);

	// PARSING

	addRegexToken('S',    match1to3, match1);
	addRegexToken('SS',   match1to3, match2);
	addRegexToken('SSS',  match1to3, match3);

	var token;
	for (token = 'SSSS'; token.length <= 9; token += 'S') {
	    addRegexToken(token, matchUnsigned);
	}

	function parseMs(input, array) {
	    array[MILLISECOND] = toInt(('0.' + input) * 1000);
	}

	for (token = 'S'; token.length <= 9; token += 'S') {
	    addParseToken(token, parseMs);
	}
	// MOMENTS

	var getSetMillisecond = makeGetSet('Milliseconds', false);

	// FORMATTING

	addFormatToken('z',  0, 0, 'zoneAbbr');
	addFormatToken('zz', 0, 0, 'zoneName');

	// MOMENTS

	function getZoneAbbr () {
	    return this._isUTC ? 'UTC' : '';
	}

	function getZoneName () {
	    return this._isUTC ? 'Coordinated Universal Time' : '';
	}

	var proto = Moment.prototype;

	proto.add               = add;
	proto.calendar          = calendar$1;
	proto.clone             = clone;
	proto.diff              = diff;
	proto.endOf             = endOf;
	proto.format            = format;
	proto.from              = from;
	proto.fromNow           = fromNow;
	proto.to                = to;
	proto.toNow             = toNow;
	proto.get               = stringGet;
	proto.invalidAt         = invalidAt;
	proto.isAfter           = isAfter;
	proto.isBefore          = isBefore;
	proto.isBetween         = isBetween;
	proto.isSame            = isSame;
	proto.isSameOrAfter     = isSameOrAfter;
	proto.isSameOrBefore    = isSameOrBefore;
	proto.isValid           = isValid$2;
	proto.lang              = lang;
	proto.locale            = locale;
	proto.localeData        = localeData;
	proto.max               = prototypeMax;
	proto.min               = prototypeMin;
	proto.parsingFlags      = parsingFlags;
	proto.set               = stringSet;
	proto.startOf           = startOf;
	proto.subtract          = subtract;
	proto.toArray           = toArray;
	proto.toObject          = toObject;
	proto.toDate            = toDate;
	proto.toISOString       = toISOString;
	proto.inspect           = inspect;
	proto.toJSON            = toJSON;
	proto.toString          = toString;
	proto.unix              = unix;
	proto.valueOf           = valueOf;
	proto.creationData      = creationData;

	// Year
	proto.year       = getSetYear;
	proto.isLeapYear = getIsLeapYear;

	// Week Year
	proto.weekYear    = getSetWeekYear;
	proto.isoWeekYear = getSetISOWeekYear;

	// Quarter
	proto.quarter = proto.quarters = getSetQuarter;

	// Month
	proto.month       = getSetMonth;
	proto.daysInMonth = getDaysInMonth;

	// Week
	proto.week           = proto.weeks        = getSetWeek;
	proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
	proto.weeksInYear    = getWeeksInYear;
	proto.isoWeeksInYear = getISOWeeksInYear;

	// Day
	proto.date       = getSetDayOfMonth;
	proto.day        = proto.days             = getSetDayOfWeek;
	proto.weekday    = getSetLocaleDayOfWeek;
	proto.isoWeekday = getSetISODayOfWeek;
	proto.dayOfYear  = getSetDayOfYear;

	// Hour
	proto.hour = proto.hours = getSetHour;

	// Minute
	proto.minute = proto.minutes = getSetMinute;

	// Second
	proto.second = proto.seconds = getSetSecond;

	// Millisecond
	proto.millisecond = proto.milliseconds = getSetMillisecond;

	// Offset
	proto.utcOffset            = getSetOffset;
	proto.utc                  = setOffsetToUTC;
	proto.local                = setOffsetToLocal;
	proto.parseZone            = setOffsetToParsedOffset;
	proto.hasAlignedHourOffset = hasAlignedHourOffset;
	proto.isDST                = isDaylightSavingTime;
	proto.isLocal              = isLocal;
	proto.isUtcOffset          = isUtcOffset;
	proto.isUtc                = isUtc;
	proto.isUTC                = isUtc;

	// Timezone
	proto.zoneAbbr = getZoneAbbr;
	proto.zoneName = getZoneName;

	// Deprecations
	proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

	function createUnix (input) {
	    return createLocal(input * 1000);
	}

	function createInZone () {
	    return createLocal.apply(null, arguments).parseZone();
	}

	function preParsePostFormat (string) {
	    return string;
	}

	var proto$1 = Locale.prototype;

	proto$1.calendar        = calendar;
	proto$1.longDateFormat  = longDateFormat;
	proto$1.invalidDate     = invalidDate;
	proto$1.ordinal         = ordinal;
	proto$1.preparse        = preParsePostFormat;
	proto$1.postformat      = preParsePostFormat;
	proto$1.relativeTime    = relativeTime;
	proto$1.pastFuture      = pastFuture;
	proto$1.set             = set;

	// Month
	proto$1.months            =        localeMonths;
	proto$1.monthsShort       =        localeMonthsShort;
	proto$1.monthsParse       =        localeMonthsParse;
	proto$1.monthsRegex       = monthsRegex;
	proto$1.monthsShortRegex  = monthsShortRegex;

	// Week
	proto$1.week = localeWeek;
	proto$1.firstDayOfYear = localeFirstDayOfYear;
	proto$1.firstDayOfWeek = localeFirstDayOfWeek;

	// Day of Week
	proto$1.weekdays       =        localeWeekdays;
	proto$1.weekdaysMin    =        localeWeekdaysMin;
	proto$1.weekdaysShort  =        localeWeekdaysShort;
	proto$1.weekdaysParse  =        localeWeekdaysParse;

	proto$1.weekdaysRegex       =        weekdaysRegex;
	proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
	proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

	// Hours
	proto$1.isPM = localeIsPM;
	proto$1.meridiem = localeMeridiem;

	function get$1 (format, index, field, setter) {
	    var locale = getLocale();
	    var utc = createUTC().set(setter, index);
	    return locale[field](utc, format);
	}

	function listMonthsImpl (format, index, field) {
	    if (isNumber(format)) {
	        index = format;
	        format = undefined;
	    }

	    format = format || '';

	    if (index != null) {
	        return get$1(format, index, field, 'month');
	    }

	    var i;
	    var out = [];
	    for (i = 0; i < 12; i++) {
	        out[i] = get$1(format, i, field, 'month');
	    }
	    return out;
	}

	// ()
	// (5)
	// (fmt, 5)
	// (fmt)
	// (true)
	// (true, 5)
	// (true, fmt, 5)
	// (true, fmt)
	function listWeekdaysImpl (localeSorted, format, index, field) {
	    if (typeof localeSorted === 'boolean') {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';
	    } else {
	        format = localeSorted;
	        index = format;
	        localeSorted = false;

	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';
	    }

	    var locale = getLocale(),
	        shift = localeSorted ? locale._week.dow : 0;

	    if (index != null) {
	        return get$1(format, (index + shift) % 7, field, 'day');
	    }

	    var i;
	    var out = [];
	    for (i = 0; i < 7; i++) {
	        out[i] = get$1(format, (i + shift) % 7, field, 'day');
	    }
	    return out;
	}

	function listMonths (format, index) {
	    return listMonthsImpl(format, index, 'months');
	}

	function listMonthsShort (format, index) {
	    return listMonthsImpl(format, index, 'monthsShort');
	}

	function listWeekdays (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	}

	function listWeekdaysShort (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	}

	function listWeekdaysMin (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	}

	getSetGlobalLocale('en', {
	    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (toInt(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    }
	});

	// Side effect imports
	hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
	hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

	var mathAbs = Math.abs;

	function abs () {
	    var data           = this._data;

	    this._milliseconds = mathAbs(this._milliseconds);
	    this._days         = mathAbs(this._days);
	    this._months       = mathAbs(this._months);

	    data.milliseconds  = mathAbs(data.milliseconds);
	    data.seconds       = mathAbs(data.seconds);
	    data.minutes       = mathAbs(data.minutes);
	    data.hours         = mathAbs(data.hours);
	    data.months        = mathAbs(data.months);
	    data.years         = mathAbs(data.years);

	    return this;
	}

	function addSubtract$1 (duration, input, value, direction) {
	    var other = createDuration(input, value);

	    duration._milliseconds += direction * other._milliseconds;
	    duration._days         += direction * other._days;
	    duration._months       += direction * other._months;

	    return duration._bubble();
	}

	// supports only 2.0-style add(1, 's') or add(duration)
	function add$1 (input, value) {
	    return addSubtract$1(this, input, value, 1);
	}

	// supports only 2.0-style subtract(1, 's') or subtract(duration)
	function subtract$1 (input, value) {
	    return addSubtract$1(this, input, value, -1);
	}

	function absCeil (number) {
	    if (number < 0) {
	        return Math.floor(number);
	    } else {
	        return Math.ceil(number);
	    }
	}

	function bubble () {
	    var milliseconds = this._milliseconds;
	    var days         = this._days;
	    var months       = this._months;
	    var data         = this._data;
	    var seconds, minutes, hours, years, monthsFromDays;

	    // if we have a mix of positive and negative values, bubble down first
	    // check: https://github.com/moment/moment/issues/2166
	    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	            (milliseconds <= 0 && days <= 0 && months <= 0))) {
	        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	        days = 0;
	        months = 0;
	    }

	    // The following code bubbles up values, see the tests for
	    // examples of what that means.
	    data.milliseconds = milliseconds % 1000;

	    seconds           = absFloor(milliseconds / 1000);
	    data.seconds      = seconds % 60;

	    minutes           = absFloor(seconds / 60);
	    data.minutes      = minutes % 60;

	    hours             = absFloor(minutes / 60);
	    data.hours        = hours % 24;

	    days += absFloor(hours / 24);

	    // convert days to months
	    monthsFromDays = absFloor(daysToMonths(days));
	    months += monthsFromDays;
	    days -= absCeil(monthsToDays(monthsFromDays));

	    // 12 months -> 1 year
	    years = absFloor(months / 12);
	    months %= 12;

	    data.days   = days;
	    data.months = months;
	    data.years  = years;

	    return this;
	}

	function daysToMonths (days) {
	    // 400 years have 146097 days (taking into account leap year rules)
	    // 400 years have 12 months === 4800
	    return days * 4800 / 146097;
	}

	function monthsToDays (months) {
	    // the reverse of daysToMonths
	    return months * 146097 / 4800;
	}

	function as (units) {
	    if (!this.isValid()) {
	        return NaN;
	    }
	    var days;
	    var months;
	    var milliseconds = this._milliseconds;

	    units = normalizeUnits(units);

	    if (units === 'month' || units === 'year') {
	        days   = this._days   + milliseconds / 864e5;
	        months = this._months + daysToMonths(days);
	        return units === 'month' ? months : months / 12;
	    } else {
	        // handle milliseconds separately because of floating point math errors (issue #1867)
	        days = this._days + Math.round(monthsToDays(this._months));
	        switch (units) {
	            case 'week'   : return days / 7     + milliseconds / 6048e5;
	            case 'day'    : return days         + milliseconds / 864e5;
	            case 'hour'   : return days * 24    + milliseconds / 36e5;
	            case 'minute' : return days * 1440  + milliseconds / 6e4;
	            case 'second' : return days * 86400 + milliseconds / 1000;
	            // Math.floor prevents floating point math errors here
	            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	            default: throw new Error('Unknown unit ' + units);
	        }
	    }
	}

	// TODO: Use this.as('ms')?
	function valueOf$1 () {
	    if (!this.isValid()) {
	        return NaN;
	    }
	    return (
	        this._milliseconds +
	        this._days * 864e5 +
	        (this._months % 12) * 2592e6 +
	        toInt(this._months / 12) * 31536e6
	    );
	}

	function makeAs (alias) {
	    return function () {
	        return this.as(alias);
	    };
	}

	var asMilliseconds = makeAs('ms');
	var asSeconds      = makeAs('s');
	var asMinutes      = makeAs('m');
	var asHours        = makeAs('h');
	var asDays         = makeAs('d');
	var asWeeks        = makeAs('w');
	var asMonths       = makeAs('M');
	var asYears        = makeAs('y');

	function clone$1 () {
	    return createDuration(this);
	}

	function get$2 (units) {
	    units = normalizeUnits(units);
	    return this.isValid() ? this[units + 's']() : NaN;
	}

	function makeGetter(name) {
	    return function () {
	        return this.isValid() ? this._data[name] : NaN;
	    };
	}

	var milliseconds = makeGetter('milliseconds');
	var seconds      = makeGetter('seconds');
	var minutes      = makeGetter('minutes');
	var hours        = makeGetter('hours');
	var days         = makeGetter('days');
	var months       = makeGetter('months');
	var years        = makeGetter('years');

	function weeks () {
	    return absFloor(this.days() / 7);
	}

	var round = Math.round;
	var thresholds = {
	    ss: 44,         // a few seconds to seconds
	    s : 45,         // seconds to minute
	    m : 45,         // minutes to hour
	    h : 22,         // hours to day
	    d : 26,         // days to month
	    M : 11          // months to year
	};

	// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	}

	function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
	    var duration = createDuration(posNegDuration).abs();
	    var seconds  = round(duration.as('s'));
	    var minutes  = round(duration.as('m'));
	    var hours    = round(duration.as('h'));
	    var days     = round(duration.as('d'));
	    var months   = round(duration.as('M'));
	    var years    = round(duration.as('y'));

	    var a = seconds <= thresholds.ss && ['s', seconds]  ||
	            seconds < thresholds.s   && ['ss', seconds] ||
	            minutes <= 1             && ['m']           ||
	            minutes < thresholds.m   && ['mm', minutes] ||
	            hours   <= 1             && ['h']           ||
	            hours   < thresholds.h   && ['hh', hours]   ||
	            days    <= 1             && ['d']           ||
	            days    < thresholds.d   && ['dd', days]    ||
	            months  <= 1             && ['M']           ||
	            months  < thresholds.M   && ['MM', months]  ||
	            years   <= 1             && ['y']           || ['yy', years];

	    a[2] = withoutSuffix;
	    a[3] = +posNegDuration > 0;
	    a[4] = locale;
	    return substituteTimeAgo.apply(null, a);
	}

	// This function allows you to set the rounding function for relative time strings
	function getSetRelativeTimeRounding (roundingFunction) {
	    if (roundingFunction === undefined) {
	        return round;
	    }
	    if (typeof(roundingFunction) === 'function') {
	        round = roundingFunction;
	        return true;
	    }
	    return false;
	}

	// This function allows you to set a threshold for relative time strings
	function getSetRelativeTimeThreshold (threshold, limit) {
	    if (thresholds[threshold] === undefined) {
	        return false;
	    }
	    if (limit === undefined) {
	        return thresholds[threshold];
	    }
	    thresholds[threshold] = limit;
	    if (threshold === 's') {
	        thresholds.ss = limit - 1;
	    }
	    return true;
	}

	function humanize (withSuffix) {
	    if (!this.isValid()) {
	        return this.localeData().invalidDate();
	    }

	    var locale = this.localeData();
	    var output = relativeTime$1(this, !withSuffix, locale);

	    if (withSuffix) {
	        output = locale.pastFuture(+this, output);
	    }

	    return locale.postformat(output);
	}

	var abs$1 = Math.abs;

	function sign(x) {
	    return ((x > 0) - (x < 0)) || +x;
	}

	function toISOString$1() {
	    // for ISO strings we do not use the normal bubbling rules:
	    //  * milliseconds bubble up until they become hours
	    //  * days do not bubble at all
	    //  * months bubble up until they become years
	    // This is because there is no context-free conversion between hours and days
	    // (think of clock changes)
	    // and also not between days and months (28-31 days per month)
	    if (!this.isValid()) {
	        return this.localeData().invalidDate();
	    }

	    var seconds = abs$1(this._milliseconds) / 1000;
	    var days         = abs$1(this._days);
	    var months       = abs$1(this._months);
	    var minutes, hours, years;

	    // 3600 seconds -> 60 minutes -> 1 hour
	    minutes           = absFloor(seconds / 60);
	    hours             = absFloor(minutes / 60);
	    seconds %= 60;
	    minutes %= 60;

	    // 12 months -> 1 year
	    years  = absFloor(months / 12);
	    months %= 12;


	    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	    var Y = years;
	    var M = months;
	    var D = days;
	    var h = hours;
	    var m = minutes;
	    var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
	    var total = this.asSeconds();

	    if (!total) {
	        // this is the same as C#'s (Noda) and python (isodate)...
	        // but not other JS (goog.date)
	        return 'P0D';
	    }

	    var totalSign = total < 0 ? '-' : '';
	    var ymSign = sign(this._months) !== sign(total) ? '-' : '';
	    var daysSign = sign(this._days) !== sign(total) ? '-' : '';
	    var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

	    return totalSign + 'P' +
	        (Y ? ymSign + Y + 'Y' : '') +
	        (M ? ymSign + M + 'M' : '') +
	        (D ? daysSign + D + 'D' : '') +
	        ((h || m || s) ? 'T' : '') +
	        (h ? hmsSign + h + 'H' : '') +
	        (m ? hmsSign + m + 'M' : '') +
	        (s ? hmsSign + s + 'S' : '');
	}

	var proto$2 = Duration.prototype;

	proto$2.isValid        = isValid$1;
	proto$2.abs            = abs;
	proto$2.add            = add$1;
	proto$2.subtract       = subtract$1;
	proto$2.as             = as;
	proto$2.asMilliseconds = asMilliseconds;
	proto$2.asSeconds      = asSeconds;
	proto$2.asMinutes      = asMinutes;
	proto$2.asHours        = asHours;
	proto$2.asDays         = asDays;
	proto$2.asWeeks        = asWeeks;
	proto$2.asMonths       = asMonths;
	proto$2.asYears        = asYears;
	proto$2.valueOf        = valueOf$1;
	proto$2._bubble        = bubble;
	proto$2.clone          = clone$1;
	proto$2.get            = get$2;
	proto$2.milliseconds   = milliseconds;
	proto$2.seconds        = seconds;
	proto$2.minutes        = minutes;
	proto$2.hours          = hours;
	proto$2.days           = days;
	proto$2.weeks          = weeks;
	proto$2.months         = months;
	proto$2.years          = years;
	proto$2.humanize       = humanize;
	proto$2.toISOString    = toISOString$1;
	proto$2.toString       = toISOString$1;
	proto$2.toJSON         = toISOString$1;
	proto$2.locale         = locale;
	proto$2.localeData     = localeData;

	// Deprecations
	proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
	proto$2.lang = lang;

	// Side effect imports

	// FORMATTING

	addFormatToken('X', 0, 0, 'unix');
	addFormatToken('x', 0, 0, 'valueOf');

	// PARSING

	addRegexToken('x', matchSigned);
	addRegexToken('X', matchTimestamp);
	addParseToken('X', function (input, array, config) {
	    config._d = new Date(parseFloat(input, 10) * 1000);
	});
	addParseToken('x', function (input, array, config) {
	    config._d = new Date(toInt(input));
	});

	// Side effect imports


	hooks.version = '2.19.1';

	setHookCallback(createLocal);

	hooks.fn                    = proto;
	hooks.min                   = min;
	hooks.max                   = max;
	hooks.now                   = now;
	hooks.utc                   = createUTC;
	hooks.unix                  = createUnix;
	hooks.months                = listMonths;
	hooks.isDate                = isDate;
	hooks.locale                = getSetGlobalLocale;
	hooks.invalid               = createInvalid;
	hooks.duration              = createDuration;
	hooks.isMoment              = isMoment;
	hooks.weekdays              = listWeekdays;
	hooks.parseZone             = createInZone;
	hooks.localeData            = getLocale;
	hooks.isDuration            = isDuration;
	hooks.monthsShort           = listMonthsShort;
	hooks.weekdaysMin           = listWeekdaysMin;
	hooks.defineLocale          = defineLocale;
	hooks.updateLocale          = updateLocale;
	hooks.locales               = listLocales;
	hooks.weekdaysShort         = listWeekdaysShort;
	hooks.normalizeUnits        = normalizeUnits;
	hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
	hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	hooks.calendarFormat        = getCalendarFormat;
	hooks.prototype             = proto;

	return hooks;

	})));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(155)(module)))

	/***/ }),
	/* 155 */
	/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			if(!module.children) module.children = [];
			Object.defineProperty(module, "loaded", {
				enumerable: true,
				get: function() {
					return module.l;
				}
			});
			Object.defineProperty(module, "id", {
				enumerable: true,
				get: function() {
					return module.i;
				}
			});
			module.webpackPolyfill = 1;
		}
		return module;
	};


	/***/ }),
	/* 156 */
	/***/ (function(module, exports) {

	function webpackEmptyContext(req) {
		throw new Error("Cannot find module '" + req + "'.");
	}
	webpackEmptyContext.keys = function() { return []; };
	webpackEmptyContext.resolve = webpackEmptyContext;
	module.exports = webpackEmptyContext;
	webpackEmptyContext.id = 156;

	/***/ }),
	/* 157 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/* WEBPACK VAR INJECTION */(function(global) {

	/* eslint-disable require-jsdoc */

	var _rng;

	var globalVar = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : null;

	if (globalVar && globalVar.crypto && crypto.getRandomValues) {
	  // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
	  // Moderately fast, high quality
	  var _rnds8 = new Uint8Array(16);
	  _rng = function whatwgRNG() {
	    crypto.getRandomValues(_rnds8);
	    return _rnds8;
	  };
	}

	if (!_rng) {
	  // Math.random()-based (RNG)
	  //
	  // If all else fails, use Math.random().  It's fast, but is of unspecified
	  // quality.
	  var _rnds = new Array(16);
	  _rng = function _rng() {
	    for (var i = 0, r; i < 16; i++) {
	      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
	      _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
	    }

	    return _rnds;
	  };
	}

	//     uuid.js
	//
	//     Copyright (c) 2010-2012 Robert Kieffer
	//     MIT License - http://opensource.org/licenses/mit-license.php

	// Unique ID creation requires a high quality random # generator.  We feature
	// detect to determine the best RNG source, normalizing to a function that
	// returns 128-bits of randomness, since that's what's usually required

	//var _rng = require('./rng');

	// Maps for number <-> hex string conversion
	var _byteToHex = [];
	var _hexToByte = {};
	for (var i = 0; i < 256; i++) {
	  _byteToHex[i] = (i + 0x100).toString(16).substr(1);
	  _hexToByte[_byteToHex[i]] = i;
	}

	// **`parse()` - Parse a UUID into it's component bytes**
	function parse(s, buf, offset) {
	  var i = buf && offset || 0,
	      ii = 0;

	  buf = buf || [];
	  s.toLowerCase().replace(/[0-9a-f]{2}/g, function (oct) {
	    if (ii < 16) {
	      // Don't overflow!
	      buf[i + ii++] = _hexToByte[oct];
	    }
	  });

	  // Zero out remaining bytes if string was short
	  while (ii < 16) {
	    buf[i + ii++] = 0;
	  }

	  return buf;
	}

	// **`unparse()` - Convert UUID byte array (ala parse()) into a string**
	function unparse(buf, offset) {
	  var i = offset || 0,
	      bth = _byteToHex;
	  return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
	}

	// **`v1()` - Generate time-based UUID**
	//
	// Inspired by https://github.com/LiosK/UUID.js
	// and http://docs.python.org/library/uuid.html

	// random #'s we need to init node and clockseq
	var _seedBytes = _rng();

	// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	var _nodeId = [_seedBytes[0] | 0x01, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]];

	// Per 4.2.2, randomize (14 bit) clockseq
	var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

	// Previous uuid creation time
	var _lastMSecs = 0,
	    _lastNSecs = 0;

	// See https://github.com/broofa/node-uuid for API details
	function v1(options, buf, offset) {
	  var i = buf && offset || 0;
	  var b = buf || [];

	  options = options || {};

	  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

	  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
	  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

	  // Per 4.2.1.2, use count of uuid's generated during the current clock
	  // cycle to simulate higher resolution clock
	  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

	  // Time since last uuid creation (in msecs)
	  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;

	  // Per 4.2.1.2, Bump clockseq on clock regression
	  if (dt < 0 && options.clockseq === undefined) {
	    clockseq = clockseq + 1 & 0x3fff;
	  }

	  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	  // time interval
	  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
	    nsecs = 0;
	  }

	  // Per 4.2.1.2 Throw error if too many uuids are requested
	  if (nsecs >= 10000) {
	    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	  }

	  _lastMSecs = msecs;
	  _lastNSecs = nsecs;
	  _clockseq = clockseq;

	  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
	  msecs += 12219292800000;

	  // `time_low`
	  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	  b[i++] = tl >>> 24 & 0xff;
	  b[i++] = tl >>> 16 & 0xff;
	  b[i++] = tl >>> 8 & 0xff;
	  b[i++] = tl & 0xff;

	  // `time_mid`
	  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
	  b[i++] = tmh >>> 8 & 0xff;
	  b[i++] = tmh & 0xff;

	  // `time_high_and_version`
	  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
	  b[i++] = tmh >>> 16 & 0xff;

	  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
	  b[i++] = clockseq >>> 8 | 0x80;

	  // `clock_seq_low`
	  b[i++] = clockseq & 0xff;

	  // `node`
	  var node = options.node || _nodeId;
	  for (var n = 0; n < 6; n++) {
	    b[i + n] = node[n];
	  }

	  return buf ? buf : unparse(b);
	}

	// **`v4()` - Generate random UUID**

	// See https://github.com/broofa/node-uuid for API details
	function v4(options, buf, offset) {
	  // Deprecated - 'format' argument, as supported in v1.2
	  var i = buf && offset || 0;

	  if (typeof options == 'string') {
	    buf = options == 'binary' ? new Array(16) : null;
	    options = null;
	  }
	  options = options || {};

	  var rnds = options.random || (options.rng || _rng)();

	  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	  rnds[6] = rnds[6] & 0x0f | 0x40;
	  rnds[8] = rnds[8] & 0x3f | 0x80;

	  // Copy bytes to buffer, if provided
	  if (buf) {
	    for (var ii = 0; ii < 16; ii++) {
	      buf[i + ii] = rnds[ii];
	    }
	  }

	  return buf || unparse(rnds);
	}

	// Export public API
	var uuid = v4;
	uuid.v1 = v1;
	uuid.v4 = v4;
	uuid.parse = parse;
	uuid.unparse = unparse;

	module.exports = uuid;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(158)))

	/***/ }),
	/* 158 */
	/***/ (function(module, exports) {

	var g;

	// This works in non-strict mode
	g = (function() {
		return this;
	})();

	try {
		// This works if eval is allowed (see CSP)
		g = g || Function("return this")() || (1,eval)("this");
	} catch(e) {
		// This works if the window reference is available
		if(typeof window === "object")
			g = window;
	}

	// g can still be undefined, but nothing to do about it...
	// We return undefined, instead of nothing here, so it's
	// easier to handle this case. if(!global) { ...}

	module.exports = g;


	/***/ }),
	/* 159 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	// utils
	exports.util = __webpack_require__(2);
	exports.DOMutil = __webpack_require__(14);

	// data
	exports.DataSet = __webpack_require__(11);
	exports.DataView = __webpack_require__(12);
	exports.Queue = __webpack_require__(43);

	// Graph3d
	exports.Graph3d = __webpack_require__(161);
	exports.graph3d = {
	  Camera: __webpack_require__(95),
	  Filter: __webpack_require__(96),
	  Point2d: __webpack_require__(91),
	  Point3d: __webpack_require__(34),
	  Slider: __webpack_require__(92),
	  StepNumber: __webpack_require__(93)
	};

	// bundled external libraries
	exports.moment = __webpack_require__(9);
	exports.Hammer = __webpack_require__(10);
	exports.keycharm = __webpack_require__(35);

	/***/ }),
	/* 160 */
	/***/ (function(module, exports, __webpack_require__) {

	var core = __webpack_require__(7);
	var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
	module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};


	/***/ }),
	/* 161 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _assign = __webpack_require__(90);

	var _assign2 = _interopRequireDefault(_assign);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var Emitter = __webpack_require__(44);
	var util = __webpack_require__(2);
	var Point3d = __webpack_require__(34);
	var Point2d = __webpack_require__(91);
	var Slider = __webpack_require__(92);
	var StepNumber = __webpack_require__(93);
	var Settings = __webpack_require__(94);
	var Validator = __webpack_require__(15)['default'];

	var _require = __webpack_require__(15),
	    printStyle = _require.printStyle;

	var _require2 = __webpack_require__(172),
	    allOptions = _require2.allOptions;

	var DataGroup = __webpack_require__(173);

	/// enumerate the available styles
	Graph3d.STYLE = Settings.STYLE;

	/**
	 * Following label is used in the settings to describe values which should be
	 * determined by the code while running, from the current data and graph style.
	 *
	 * Using 'undefined' directly achieves the same thing, but this is more
	 * descriptive by describing the intent.
	 */
	var autoByDefault = undefined;

	/**
	 * Default values for option settings.
	 *
	 * These are the values used when a Graph3d instance is initialized without
	 * custom settings.
	 *
	 * If a field is not in this list, a default value of 'autoByDefault' is assumed,
	 * which is just an alias for 'undefined'.
	 */
	Graph3d.DEFAULTS = {
	  width: '400px',
	  height: '400px',
	  filterLabel: 'time',
	  legendLabel: 'value',
	  xLabel: 'x',
	  yLabel: 'y',
	  zLabel: 'z',
	  xValueLabel: function xValueLabel(v) {
	    return v;
	  },
	  yValueLabel: function yValueLabel(v) {
	    return v;
	  },
	  zValueLabel: function zValueLabel(v) {
	    return v;
	  },
	  showXAxis: true,
	  showYAxis: true,
	  showZAxis: true,
	  showGrid: true,
	  showPerspective: true,
	  showShadow: false,
	  keepAspectRatio: true,
	  verticalRatio: 0.5, // 0.1 to 1.0, where 1.0 results in a 'cube'

	  dotSizeRatio: 0.02, // size of the dots as a fraction of the graph width
	  dotSizeMinFraction: 0.5, // size of min-value dot as a fraction of dotSizeRatio	
	  dotSizeMaxFraction: 2.5, // size of max-value dot as a fraction of dotSizeRatio	

	  showAnimationControls: autoByDefault,
	  animationInterval: 1000, // milliseconds
	  animationPreload: false,
	  animationAutoStart: autoByDefault,

	  axisColor: '#4D4D4D',
	  gridColor: '#D3D3D3',
	  xCenter: '55%',
	  yCenter: '50%',

	  style: Graph3d.STYLE.DOT,
	  tooltip: false,

	  tooltipStyle: {
	    content: {
	      padding: '10px',
	      border: '1px solid #4d4d4d',
	      color: '#1a1a1a',
	      background: 'rgba(255,255,255,0.7)',
	      borderRadius: '2px',
	      boxShadow: '5px 5px 10px rgba(128,128,128,0.5)'
	    },
	    line: {
	      height: '40px',
	      width: '0',
	      borderLeft: '1px solid #4d4d4d'
	    },
	    dot: {
	      height: '0',
	      width: '0',
	      border: '5px solid #4d4d4d',
	      borderRadius: '5px'
	    }
	  },

	  dataColor: {
	    fill: '#7DC1FF',
	    stroke: '#3267D2',
	    strokeWidth: 1 // px
	  },

	  cameraPosition: {
	    horizontal: 1.0,
	    vertical: 0.5,
	    distance: 1.7
	  },

	  /*
	    The following fields are 'auto by default', see above.
	   */
	  showLegend: autoByDefault, // determined by graph style
	  backgroundColor: autoByDefault,

	  xBarWidth: autoByDefault,
	  yBarWidth: autoByDefault,
	  valueMin: autoByDefault,
	  valueMax: autoByDefault,
	  xMin: autoByDefault,
	  xMax: autoByDefault,
	  xStep: autoByDefault,
	  yMin: autoByDefault,
	  yMax: autoByDefault,
	  yStep: autoByDefault,
	  zMin: autoByDefault,
	  zMax: autoByDefault,
	  zStep: autoByDefault
	};

	// -----------------------------------------------------------------------------
	// Class Graph3d
	// -----------------------------------------------------------------------------


	/**
	 * Graph3d displays data in 3d.
	 *
	 * Graph3d is developed in javascript as a Google Visualization Chart.
	 *
	 * @constructor Graph3d
	 * @param {Element} container   The DOM element in which the Graph3d will
	 *                              be created. Normally a div element.
	 * @param {DataSet | DataView | Array} [data]
	 * @param {Object} [options]
	 */
	function Graph3d(container, data, options) {
	  if (!(this instanceof Graph3d)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  // create variables and set default values
	  this.containerElement = container;

	  this.dataGroup = new DataGroup();
	  this.dataPoints = null; // The table with point objects

	  // create a frame and canvas
	  this.create();

	  Settings.setDefaults(Graph3d.DEFAULTS, this);

	  // the column indexes
	  this.colX = undefined;
	  this.colY = undefined;
	  this.colZ = undefined;
	  this.colValue = undefined;

	  // TODO: customize axis range

	  // apply options (also when undefined)
	  this.setOptions(options);

	  // apply data
	  this.setData(data);
	}

	// Extend Graph3d with an Emitter mixin
	Emitter(Graph3d.prototype);

	/**
	 * Calculate the scaling values, dependent on the range in x, y, and z direction
	 */
	Graph3d.prototype._setScale = function () {
	  this.scale = new Point3d(1 / this.xRange.range(), 1 / this.yRange.range(), 1 / this.zRange.range());

	  // keep aspect ration between x and y scale if desired
	  if (this.keepAspectRatio) {
	    if (this.scale.x < this.scale.y) {
	      //noinspection JSSuspiciousNameCombination
	      this.scale.y = this.scale.x;
	    } else {
	      //noinspection JSSuspiciousNameCombination
	      this.scale.x = this.scale.y;
	    }
	  }

	  // scale the vertical axis
	  this.scale.z *= this.verticalRatio;
	  // TODO: can this be automated? verticalRatio?

	  // determine scale for (optional) value
	  if (this.valueRange !== undefined) {
	    this.scale.value = 1 / this.valueRange.range();
	  }

	  // position the camera arm
	  var xCenter = this.xRange.center() * this.scale.x;
	  var yCenter = this.yRange.center() * this.scale.y;
	  var zCenter = this.zRange.center() * this.scale.z;
	  this.camera.setArmLocation(xCenter, yCenter, zCenter);
	};

	/**
	 * Convert a 3D location to a 2D location on screen
	 * Source: ttp://en.wikipedia.org/wiki/3D_projection
	 *
	 * @param   {Point3d} point3d  A 3D point with parameters x, y, z
	 * @returns {Point2d} point2d  A 2D point with parameters x, y
	 */
	Graph3d.prototype._convert3Dto2D = function (point3d) {
	  var translation = this._convertPointToTranslation(point3d);
	  return this._convertTranslationToScreen(translation);
	};

	/**
	 * Convert a 3D location its translation seen from the camera
	 * Source: http://en.wikipedia.org/wiki/3D_projection
	 *
	 * @param   {Point3d} point3d     A 3D point with parameters x, y, z
	 * @returns {Point3d} translation A 3D point with parameters x, y, z This is
	 *                                the translation of the point, seen from the
	 *                                camera.
	 */
	Graph3d.prototype._convertPointToTranslation = function (point3d) {
	  var cameraLocation = this.camera.getCameraLocation(),
	      cameraRotation = this.camera.getCameraRotation(),
	      ax = point3d.x * this.scale.x,
	      ay = point3d.y * this.scale.y,
	      az = point3d.z * this.scale.z,
	      cx = cameraLocation.x,
	      cy = cameraLocation.y,
	      cz = cameraLocation.z,


	  // calculate angles
	  sinTx = Math.sin(cameraRotation.x),
	      cosTx = Math.cos(cameraRotation.x),
	      sinTy = Math.sin(cameraRotation.y),
	      cosTy = Math.cos(cameraRotation.y),
	      sinTz = Math.sin(cameraRotation.z),
	      cosTz = Math.cos(cameraRotation.z),


	  // calculate translation
	  dx = cosTy * (sinTz * (ay - cy) + cosTz * (ax - cx)) - sinTy * (az - cz),
	      dy = sinTx * (cosTy * (az - cz) + sinTy * (sinTz * (ay - cy) + cosTz * (ax - cx))) + cosTx * (cosTz * (ay - cy) - sinTz * (ax - cx)),
	      dz = cosTx * (cosTy * (az - cz) + sinTy * (sinTz * (ay - cy) + cosTz * (ax - cx))) - sinTx * (cosTz * (ay - cy) - sinTz * (ax - cx));

	  return new Point3d(dx, dy, dz);
	};

	/**
	 * Convert a translation point to a point on the screen
	 *
	 * @param   {Point3d} translation A 3D point with parameters x, y, z This is
	 *                                the translation of the point, seen from the
	 *                                camera.
	 * @returns {Point2d} point2d     A 2D point with parameters x, y
	 */
	Graph3d.prototype._convertTranslationToScreen = function (translation) {
	  var ex = this.eye.x,
	      ey = this.eye.y,
	      ez = this.eye.z,
	      dx = translation.x,
	      dy = translation.y,
	      dz = translation.z;

	  // calculate position on screen from translation
	  var bx;
	  var by;
	  if (this.showPerspective) {
	    bx = (dx - ex) * (ez / dz);
	    by = (dy - ey) * (ez / dz);
	  } else {
	    bx = dx * -(ez / this.camera.getArmLength());
	    by = dy * -(ez / this.camera.getArmLength());
	  }

	  // shift and scale the point to the center of the screen
	  // use the width of the graph to scale both horizontally and vertically.
	  return new Point2d(this.currentXCenter + bx * this.frame.canvas.clientWidth, this.currentYCenter - by * this.frame.canvas.clientWidth);
	};

	/**
	 * Calculate the translations and screen positions of all points
	 *
	 * @param {Array.<Point3d>} points
	 * @private
	 */
	Graph3d.prototype._calcTranslations = function (points) {
	  for (var i = 0; i < points.length; i++) {
	    var point = points[i];
	    point.trans = this._convertPointToTranslation(point.point);
	    point.screen = this._convertTranslationToScreen(point.trans);

	    // calculate the translation of the point at the bottom (needed for sorting)
	    var transBottom = this._convertPointToTranslation(point.bottom);
	    point.dist = this.showPerspective ? transBottom.length() : -transBottom.z;
	  }

	  // sort the points on depth of their (x,y) position (not on z)
	  var sortDepth = function sortDepth(a, b) {
	    return b.dist - a.dist;
	  };
	  points.sort(sortDepth);
	};

	/**
	 * Transfer min/max values to the Graph3d instance.
	 */
	Graph3d.prototype._initializeRanges = function () {
	  // TODO: later on, all min/maxes of all datagroups will be combined here
	  var dg = this.dataGroup;
	  this.xRange = dg.xRange;
	  this.yRange = dg.yRange;
	  this.zRange = dg.zRange;
	  this.valueRange = dg.valueRange;

	  // Values currently needed but which need to be sorted out for
	  // the multiple graph case.
	  this.xStep = dg.xStep;
	  this.yStep = dg.yStep;
	  this.zStep = dg.zStep;
	  this.xBarWidth = dg.xBarWidth;
	  this.yBarWidth = dg.yBarWidth;
	  this.colX = dg.colX;
	  this.colY = dg.colY;
	  this.colZ = dg.colZ;
	  this.colValue = dg.colValue;

	  // set the scale dependent on the ranges.
	  this._setScale();
	};

	/**
	 * Return all data values as a list of Point3d objects
	 *
	 * @param {vis.DataSet} data
	 * @returns {Array.<Object>}
	 */
	Graph3d.prototype.getDataPoints = function (data) {
	  var dataPoints = [];

	  for (var i = 0; i < data.length; i++) {
	    var point = new Point3d();
	    point.x = data[i][this.colX] || 0;
	    point.y = data[i][this.colY] || 0;
	    point.z = data[i][this.colZ] || 0;
	    point.data = data[i];

	    if (this.colValue !== undefined) {
	      point.value = data[i][this.colValue] || 0;
	    }

	    var obj = {};
	    obj.point = point;
	    obj.bottom = new Point3d(point.x, point.y, this.zRange.min);
	    obj.trans = undefined;
	    obj.screen = undefined;

	    dataPoints.push(obj);
	  }

	  return dataPoints;
	};

	/**
	 * Filter the data based on the current filter
	 *
	 * @param   {Array} data
	 * @returns {Array} dataPoints Array with point objects which can be drawn on
	 *                             screen
	 */
	Graph3d.prototype._getDataPoints = function (data) {
	  // TODO: store the created matrix dataPoints in the filters instead of
	  //       reloading each time.
	  var x, y, i, obj;

	  var dataPoints = [];

	  if (this.style === Graph3d.STYLE.GRID || this.style === Graph3d.STYLE.SURFACE) {
	    // copy all values from the data table to a matrix
	    // the provided values are supposed to form a grid of (x,y) positions

	    // create two lists with all present x and y values
	    var dataX = this.dataGroup.getDistinctValues(this.colX, data);
	    var dataY = this.dataGroup.getDistinctValues(this.colY, data);

	    dataPoints = this.getDataPoints(data);

	    // create a grid, a 2d matrix, with all values.
	    var dataMatrix = []; // temporary data matrix
	    for (i = 0; i < dataPoints.length; i++) {
	      obj = dataPoints[i];

	      // TODO: implement Array().indexOf() for Internet Explorer
	      var xIndex = dataX.indexOf(obj.point.x);
	      var yIndex = dataY.indexOf(obj.point.y);

	      if (dataMatrix[xIndex] === undefined) {
	        dataMatrix[xIndex] = [];
	      }

	      dataMatrix[xIndex][yIndex] = obj;
	    }

	    // fill in the pointers to the neighbors.
	    for (x = 0; x < dataMatrix.length; x++) {
	      for (y = 0; y < dataMatrix[x].length; y++) {
	        if (dataMatrix[x][y]) {
	          dataMatrix[x][y].pointRight = x < dataMatrix.length - 1 ? dataMatrix[x + 1][y] : undefined;
	          dataMatrix[x][y].pointTop = y < dataMatrix[x].length - 1 ? dataMatrix[x][y + 1] : undefined;
	          dataMatrix[x][y].pointCross = x < dataMatrix.length - 1 && y < dataMatrix[x].length - 1 ? dataMatrix[x + 1][y + 1] : undefined;
	        }
	      }
	    }
	  } else {
	    // 'dot', 'dot-line', etc.
	    this._checkValueField(data);
	    dataPoints = this.getDataPoints(data);

	    if (this.style === Graph3d.STYLE.LINE) {
	      // Add next member points for line drawing
	      for (i = 0; i < dataPoints.length; i++) {
	        if (i > 0) {
	          dataPoints[i - 1].pointNext = dataPoints[i];
	        }
	      }
	    }
	  }

	  return dataPoints;
	};

	/**
	 * Create the main frame for the Graph3d.
	 *
	 * This function is executed once when a Graph3d object is created. The frame
	 * contains a canvas, and this canvas contains all objects like the axis and
	 * nodes.
	 */
	Graph3d.prototype.create = function () {
	  // remove all elements from the container element.
	  while (this.containerElement.hasChildNodes()) {
	    this.containerElement.removeChild(this.containerElement.firstChild);
	  }

	  this.frame = document.createElement('div');
	  this.frame.style.position = 'relative';
	  this.frame.style.overflow = 'hidden';

	  // create the graph canvas (HTML canvas element)
	  this.frame.canvas = document.createElement('canvas');
	  this.frame.canvas.style.position = 'relative';
	  this.frame.appendChild(this.frame.canvas);
	  //if (!this.frame.canvas.getContext) {
	  {
	    var noCanvas = document.createElement('DIV');
	    noCanvas.style.color = 'red';
	    noCanvas.style.fontWeight = 'bold';
	    noCanvas.style.padding = '10px';
	    noCanvas.innerHTML = 'Error: your browser does not support HTML canvas';
	    this.frame.canvas.appendChild(noCanvas);
	  }

	  this.frame.filter = document.createElement('div');
	  this.frame.filter.style.position = 'absolute';
	  this.frame.filter.style.bottom = '0px';
	  this.frame.filter.style.left = '0px';
	  this.frame.filter.style.width = '100%';
	  this.frame.appendChild(this.frame.filter);

	  // add event listeners to handle moving and zooming the contents
	  var me = this;
	  var onmousedown = function onmousedown(event) {
	    me._onMouseDown(event);
	  };
	  var ontouchstart = function ontouchstart(event) {
	    me._onTouchStart(event);
	  };
	  var onmousewheel = function onmousewheel(event) {
	    me._onWheel(event);
	  };
	  var ontooltip = function ontooltip(event) {
	    me._onTooltip(event);
	  };
	  var onclick = function onclick(event) {
	    me._onClick(event);
	  };
	  // TODO: these events are never cleaned up... can give a 'memory leakage'

	  util.addEventListener(this.frame.canvas, 'mousedown', onmousedown);
	  util.addEventListener(this.frame.canvas, 'touchstart', ontouchstart);
	  util.addEventListener(this.frame.canvas, 'mousewheel', onmousewheel);
	  util.addEventListener(this.frame.canvas, 'mousemove', ontooltip);
	  util.addEventListener(this.frame.canvas, 'click', onclick);

	  // add the new graph to the container element
	  this.containerElement.appendChild(this.frame);
	};

	/**
	 * Set a new size for the graph
	 *
	 * @param {number} width
	 * @param {number} height
	 * @private
	 */
	Graph3d.prototype._setSize = function (width, height) {
	  this.frame.style.width = width;
	  this.frame.style.height = height;

	  this._resizeCanvas();
	};

	/**
	 * Resize the canvas to the current size of the frame
	 */
	Graph3d.prototype._resizeCanvas = function () {
	  this.frame.canvas.style.width = '100%';
	  this.frame.canvas.style.height = '100%';

	  this.frame.canvas.width = this.frame.canvas.clientWidth;
	  this.frame.canvas.height = this.frame.canvas.clientHeight;

	  // adjust with for margin
	  this.frame.filter.style.width = this.frame.canvas.clientWidth - 2 * 10 + 'px';
	};

	/**
	 * Start playing the animation, if requested and filter present. Only applicable
	 * when animation data is available.
	 */
	Graph3d.prototype.animationStart = function () {
	  // start animation when option is true
	  if (!this.animationAutoStart || !this.dataGroup.dataFilter) return;

	  if (!this.frame.filter || !this.frame.filter.slider) throw new Error('No animation available');

	  this.frame.filter.slider.play();
	};

	/**
	 * Stop animation
	 */
	Graph3d.prototype.animationStop = function () {
	  if (!this.frame.filter || !this.frame.filter.slider) return;

	  this.frame.filter.slider.stop();
	};

	/**
	 * Resize the center position based on the current values in this.xCenter
	 * and this.yCenter (which are strings with a percentage or a value
	 * in pixels). The center positions are the variables this.currentXCenter
	 * and this.currentYCenter
	 */
	Graph3d.prototype._resizeCenter = function () {
	  // calculate the horizontal center position
	  if (this.xCenter.charAt(this.xCenter.length - 1) === '%') {
	    this.currentXCenter = parseFloat(this.xCenter) / 100 * this.frame.canvas.clientWidth;
	  } else {
	    this.currentXCenter = parseFloat(this.xCenter); // supposed to be in px
	  }

	  // calculate the vertical center position
	  if (this.yCenter.charAt(this.yCenter.length - 1) === '%') {
	    this.currentYCenter = parseFloat(this.yCenter) / 100 * (this.frame.canvas.clientHeight - this.frame.filter.clientHeight);
	  } else {
	    this.currentYCenter = parseFloat(this.yCenter); // supposed to be in px
	  }
	};

	/**
	 * Retrieve the current camera rotation
	 *
	 * @returns {object} An object with parameters horizontal, vertical, and
	 *                   distance
	 */
	Graph3d.prototype.getCameraPosition = function () {
	  var pos = this.camera.getArmRotation();
	  pos.distance = this.camera.getArmLength();
	  return pos;
	};

	/**
	 * Load data into the 3D Graph
	 *
	 * @param {vis.DataSet} data
	 * @private
	 */
	Graph3d.prototype._readData = function (data) {
	  // read the data
	  this.dataPoints = this.dataGroup.initializeData(this, data, this.style);

	  this._initializeRanges();
	  this._redrawFilter();
	};

	/**
	 * Replace the dataset of the Graph3d
	 *
	 * @param {Array | DataSet | DataView} data
	 */
	Graph3d.prototype.setData = function (data) {
	  if (data === undefined || data === null) return;

	  this._readData(data);
	  this.redraw();
	  this.animationStart();
	};

	/**
	 * Update the options. Options will be merged with current options
	 *
	 * @param {Object} options
	 */
	Graph3d.prototype.setOptions = function (options) {
	  if (options === undefined) return;

	  var errorFound = Validator.validate(options, allOptions);
	  if (errorFound === true) {
	    console.log('%cErrors have been found in the supplied options object.', printStyle);
	  }

	  this.animationStop();

	  Settings.setOptions(options, this);
	  this.setPointDrawingMethod();
	  this._setSize(this.width, this.height);

	  this.setData(this.dataGroup.getDataTable());
	  this.animationStart();
	};

	/**
	 * Determine which point drawing method to use for the current graph style.
	 */
	Graph3d.prototype.setPointDrawingMethod = function () {
	  var method = undefined;

	  switch (this.style) {
	    case Graph3d.STYLE.BAR:
	      method = Graph3d.prototype._redrawBarGraphPoint;
	      break;
	    case Graph3d.STYLE.BARCOLOR:
	      method = Graph3d.prototype._redrawBarColorGraphPoint;
	      break;
	    case Graph3d.STYLE.BARSIZE:
	      method = Graph3d.prototype._redrawBarSizeGraphPoint;
	      break;
	    case Graph3d.STYLE.DOT:
	      method = Graph3d.prototype._redrawDotGraphPoint;
	      break;
	    case Graph3d.STYLE.DOTLINE:
	      method = Graph3d.prototype._redrawDotLineGraphPoint;
	      break;
	    case Graph3d.STYLE.DOTCOLOR:
	      method = Graph3d.prototype._redrawDotColorGraphPoint;
	      break;
	    case Graph3d.STYLE.DOTSIZE:
	      method = Graph3d.prototype._redrawDotSizeGraphPoint;
	      break;
	    case Graph3d.STYLE.SURFACE:
	      method = Graph3d.prototype._redrawSurfaceGraphPoint;
	      break;
	    case Graph3d.STYLE.GRID:
	      method = Graph3d.prototype._redrawGridGraphPoint;
	      break;
	    case Graph3d.STYLE.LINE:
	      method = Graph3d.prototype._redrawLineGraphPoint;
	      break;
	    default:
	      throw new Error('Can not determine point drawing method ' + 'for graph style \'' + this.style + '\'');
	  }

	  this._pointDrawingMethod = method;
	};

	/**
	 * Redraw the Graph.
	 */
	Graph3d.prototype.redraw = function () {
	  if (this.dataPoints === undefined) {
	    throw new Error('Graph data not initialized');
	  }

	  this._resizeCanvas();
	  this._resizeCenter();
	  this._redrawSlider();
	  this._redrawClear();
	  this._redrawAxis();

	  this._redrawDataGraph();

	  this._redrawInfo();
	  this._redrawLegend();
	};

	/**
	 * Get drawing context without exposing canvas
	 *
	 * @returns {CanvasRenderingContext2D}
	 * @private
	 */
	Graph3d.prototype._getContext = function () {
	  var canvas = this.frame.canvas;
	  var ctx = canvas.getContext('2d');

	  ctx.lineJoin = 'round';
	  ctx.lineCap = 'round';

	  return ctx;
	};

	/**
	 * Clear the canvas before redrawing
	 */
	Graph3d.prototype._redrawClear = function () {
	  var canvas = this.frame.canvas;
	  var ctx = canvas.getContext('2d');

	  ctx.clearRect(0, 0, canvas.width, canvas.height);
	};

	Graph3d.prototype._dotSize = function () {
	  return this.frame.clientWidth * this.dotSizeRatio;
	};

	/**
	 * Get legend width
	 *
	 * @returns {*}
	 * @private
	 */
	Graph3d.prototype._getLegendWidth = function () {
	  var width;

	  if (this.style === Graph3d.STYLE.DOTSIZE) {
	    var dotSize = this._dotSize();
	    //width =  dotSize / 2 + dotSize * 2;
	    width = dotSize * this.dotSizeMaxFraction;
	  } else if (this.style === Graph3d.STYLE.BARSIZE) {
	    width = this.xBarWidth;
	  } else {
	    width = 20;
	  }
	  return width;
	};

	/**
	 * Redraw the legend based on size, dot color, or surface height
	 */
	Graph3d.prototype._redrawLegend = function () {

	  //Return without drawing anything, if no legend is specified
	  if (this.showLegend !== true) {
	    return;
	  }

	  // Do not draw legend when graph style does not support
	  if (this.style === Graph3d.STYLE.LINE || this.style === Graph3d.STYLE.BARSIZE //TODO add legend support for BARSIZE
	  ) {
	      return;
	    }

	  // Legend types - size and color. Determine if size legend.
	  var isSizeLegend = this.style === Graph3d.STYLE.BARSIZE || this.style === Graph3d.STYLE.DOTSIZE;

	  // Legend is either tracking z values or style values. This flag if false means use z values.
	  var isValueLegend = this.style === Graph3d.STYLE.DOTSIZE || this.style === Graph3d.STYLE.DOTCOLOR || this.style === Graph3d.STYLE.BARCOLOR;

	  var height = Math.max(this.frame.clientHeight * 0.25, 100);
	  var top = this.margin;
	  var width = this._getLegendWidth(); // px - overwritten by size legend
	  var right = this.frame.clientWidth - this.margin;
	  var left = right - width;
	  var bottom = top + height;

	  var ctx = this._getContext();
	  ctx.lineWidth = 1;
	  ctx.font = '14px arial'; // TODO: put in options

	  if (isSizeLegend === false) {
	    // draw the color bar
	    var ymin = 0;
	    var ymax = height; // Todo: make height customizable
	    var y;

	    for (y = ymin; y < ymax; y++) {
	      var f = (y - ymin) / (ymax - ymin);
	      var hue = f * 240;
	      var color = this._hsv2rgb(hue, 1, 1);

	      ctx.strokeStyle = color;
	      ctx.beginPath();
	      ctx.moveTo(left, top + y);
	      ctx.lineTo(right, top + y);
	      ctx.stroke();
	    }
	    ctx.strokeStyle = this.axisColor;
	    ctx.strokeRect(left, top, width, height);
	  } else {

	    // draw the size legend box
	    var widthMin;
	    if (this.style === Graph3d.STYLE.DOTSIZE) {
	      // Get the proportion to max and min right
	      widthMin = width * (this.dotSizeMinFraction / this.dotSizeMaxFraction);
	    } else if (this.style === Graph3d.STYLE.BARSIZE) {
	      //widthMin = this.xBarWidth * 0.2 this is wrong - barwidth measures in terms of xvalues
	    }
	    ctx.strokeStyle = this.axisColor;
	    ctx.fillStyle = this.dataColor.fill;
	    ctx.beginPath();
	    ctx.moveTo(left, top);
	    ctx.lineTo(right, top);
	    ctx.lineTo(left + widthMin, bottom);
	    ctx.lineTo(left, bottom);
	    ctx.closePath();
	    ctx.fill();
	    ctx.stroke();
	  }

	  // print value text along the legend edge
	  var gridLineLen = 5; // px

	  var legendMin = isValueLegend ? this.valueRange.min : this.zRange.min;
	  var legendMax = isValueLegend ? this.valueRange.max : this.zRange.max;
	  var step = new StepNumber(legendMin, legendMax, (legendMax - legendMin) / 5, true);
	  step.start(true);

	  var from;
	  var to;
	  while (!step.end()) {
	    y = bottom - (step.getCurrent() - legendMin) / (legendMax - legendMin) * height;
	    from = new Point2d(left - gridLineLen, y);
	    to = new Point2d(left, y);
	    this._line(ctx, from, to);

	    ctx.textAlign = 'right';
	    ctx.textBaseline = 'middle';
	    ctx.fillStyle = this.axisColor;
	    ctx.fillText(step.getCurrent(), left - 2 * gridLineLen, y);

	    step.next();
	  }

	  ctx.textAlign = 'right';
	  ctx.textBaseline = 'top';
	  var label = this.legendLabel;
	  ctx.fillText(label, right, bottom + this.margin);
	};

	/**
	 * Redraw the filter
	 */
	Graph3d.prototype._redrawFilter = function () {
	  var dataFilter = this.dataGroup.dataFilter;
	  var filter = this.frame.filter;
	  filter.innerHTML = '';

	  if (!dataFilter) {
	    filter.slider = undefined;
	    return;
	  }

	  var options = {
	    'visible': this.showAnimationControls
	  };
	  var slider = new Slider(filter, options);
	  filter.slider = slider;

	  // TODO: css here is not nice here...
	  filter.style.padding = '10px';
	  //this.frame.filter.style.backgroundColor = '#EFEFEF';

	  slider.setValues(dataFilter.values);
	  slider.setPlayInterval(this.animationInterval);

	  // create an event handler
	  var me = this;
	  var onchange = function onchange() {
	    var dataFilter = me.dataGroup.dataFilter;
	    var index = slider.getIndex();

	    dataFilter.selectValue(index);
	    me.dataPoints = dataFilter._getDataPoints();

	    me.redraw();
	  };

	  slider.setOnChangeCallback(onchange);
	};

	/**
	 * Redraw the slider
	 */
	Graph3d.prototype._redrawSlider = function () {
	  if (this.frame.filter.slider !== undefined) {
	    this.frame.filter.slider.redraw();
	  }
	};

	/**
	 * Redraw common information
	 */
	Graph3d.prototype._redrawInfo = function () {
	  var info = this.dataGroup.getInfo();
	  if (info === undefined) return;

	  var ctx = this._getContext();

	  ctx.font = '14px arial'; // TODO: put in options
	  ctx.lineStyle = 'gray';
	  ctx.fillStyle = 'gray';
	  ctx.textAlign = 'left';
	  ctx.textBaseline = 'top';

	  var x = this.margin;
	  var y = this.margin;
	  ctx.fillText(info, x, y);
	};

	/**
	 * Draw a line between 2d points 'from' and 'to'.
	 *
	 * If stroke style specified, set that as well.
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {vis.Point2d} from
	 * @param {vis.Point2d} to
	 * @param {string} [strokeStyle]
	 * @private
	 */
	Graph3d.prototype._line = function (ctx, from, to, strokeStyle) {
	  if (strokeStyle !== undefined) {
	    ctx.strokeStyle = strokeStyle;
	  }

	  ctx.beginPath();
	  ctx.moveTo(from.x, from.y);
	  ctx.lineTo(to.x, to.y);
	  ctx.stroke();
	};

	/**
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {vis.Point3d} point3d
	 * @param {string} text
	 * @param {number} armAngle
	 * @param {number} [yMargin=0]
	 */
	Graph3d.prototype.drawAxisLabelX = function (ctx, point3d, text, armAngle, yMargin) {
	  if (yMargin === undefined) {
	    yMargin = 0;
	  }

	  var point2d = this._convert3Dto2D(point3d);

	  if (Math.cos(armAngle * 2) > 0) {
	    ctx.textAlign = 'center';
	    ctx.textBaseline = 'top';
	    point2d.y += yMargin;
	  } else if (Math.sin(armAngle * 2) < 0) {
	    ctx.textAlign = 'right';
	    ctx.textBaseline = 'middle';
	  } else {
	    ctx.textAlign = 'left';
	    ctx.textBaseline = 'middle';
	  }

	  ctx.fillStyle = this.axisColor;
	  ctx.fillText(text, point2d.x, point2d.y);
	};

	/**
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {vis.Point3d} point3d
	 * @param {string} text
	 * @param {number} armAngle
	 * @param {number} [yMargin=0]
	 */
	Graph3d.prototype.drawAxisLabelY = function (ctx, point3d, text, armAngle, yMargin) {
	  if (yMargin === undefined) {
	    yMargin = 0;
	  }

	  var point2d = this._convert3Dto2D(point3d);

	  if (Math.cos(armAngle * 2) < 0) {
	    ctx.textAlign = 'center';
	    ctx.textBaseline = 'top';
	    point2d.y += yMargin;
	  } else if (Math.sin(armAngle * 2) > 0) {
	    ctx.textAlign = 'right';
	    ctx.textBaseline = 'middle';
	  } else {
	    ctx.textAlign = 'left';
	    ctx.textBaseline = 'middle';
	  }

	  ctx.fillStyle = this.axisColor;
	  ctx.fillText(text, point2d.x, point2d.y);
	};

	/**
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {vis.Point3d} point3d
	 * @param {string} text
	 * @param {number} [offset=0]
	 */
	Graph3d.prototype.drawAxisLabelZ = function (ctx, point3d, text, offset) {
	  if (offset === undefined) {
	    offset = 0;
	  }

	  var point2d = this._convert3Dto2D(point3d);
	  ctx.textAlign = 'right';
	  ctx.textBaseline = 'middle';
	  ctx.fillStyle = this.axisColor;
	  ctx.fillText(text, point2d.x - offset, point2d.y);
	};

	/**


	/**
	 * Draw a line between 2d points 'from' and 'to'.
	 *
	 * If stroke style specified, set that as well.
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {vis.Point2d} from
	 * @param {vis.Point2d} to
	 * @param {string} [strokeStyle]
	 * @private
	 */
	Graph3d.prototype._line3d = function (ctx, from, to, strokeStyle) {
	  var from2d = this._convert3Dto2D(from);
	  var to2d = this._convert3Dto2D(to);

	  this._line(ctx, from2d, to2d, strokeStyle);
	};

	/**
	 * Redraw the axis
	 */
	Graph3d.prototype._redrawAxis = function () {
	  var ctx = this._getContext(),
	      from,
	      to,
	      step,
	      prettyStep,
	      text,
	      xText,
	      yText,
	      zText,
	      offset,
	      xOffset,
	      yOffset;

	  // TODO: get the actual rendered style of the containerElement
	  //ctx.font = this.containerElement.style.font;
	  ctx.font = 24 / this.camera.getArmLength() + 'px arial';

	  // calculate the length for the short grid lines
	  var gridLenX = 0.025 / this.scale.x;
	  var gridLenY = 0.025 / this.scale.y;
	  var textMargin = 5 / this.camera.getArmLength(); // px
	  var armAngle = this.camera.getArmRotation().horizontal;
	  var armVector = new Point2d(Math.cos(armAngle), Math.sin(armAngle));

	  var xRange = this.xRange;
	  var yRange = this.yRange;
	  var zRange = this.zRange;
	  var point3d;

	  // draw x-grid lines
	  ctx.lineWidth = 1;
	  prettyStep = this.defaultXStep === undefined;
	  step = new StepNumber(xRange.min, xRange.max, this.xStep, prettyStep);
	  step.start(true);

	  while (!step.end()) {
	    var x = step.getCurrent();

	    if (this.showGrid) {
	      from = new Point3d(x, yRange.min, zRange.min);
	      to = new Point3d(x, yRange.max, zRange.min);
	      this._line3d(ctx, from, to, this.gridColor);
	    } else if (this.showXAxis) {
	      from = new Point3d(x, yRange.min, zRange.min);
	      to = new Point3d(x, yRange.min + gridLenX, zRange.min);
	      this._line3d(ctx, from, to, this.axisColor);

	      from = new Point3d(x, yRange.max, zRange.min);
	      to = new Point3d(x, yRange.max - gridLenX, zRange.min);
	      this._line3d(ctx, from, to, this.axisColor);
	    }

	    if (this.showXAxis) {
	      yText = armVector.x > 0 ? yRange.min : yRange.max;
	      point3d = new Point3d(x, yText, zRange.min);
	      var msg = '  ' + this.xValueLabel(x) + '  ';
	      this.drawAxisLabelX(ctx, point3d, msg, armAngle, textMargin);
	    }

	    step.next();
	  }

	  // draw y-grid lines
	  ctx.lineWidth = 1;
	  prettyStep = this.defaultYStep === undefined;
	  step = new StepNumber(yRange.min, yRange.max, this.yStep, prettyStep);
	  step.start(true);

	  while (!step.end()) {
	    var y = step.getCurrent();

	    if (this.showGrid) {
	      from = new Point3d(xRange.min, y, zRange.min);
	      to = new Point3d(xRange.max, y, zRange.min);
	      this._line3d(ctx, from, to, this.gridColor);
	    } else if (this.showYAxis) {
	      from = new Point3d(xRange.min, y, zRange.min);
	      to = new Point3d(xRange.min + gridLenY, y, zRange.min);
	      this._line3d(ctx, from, to, this.axisColor);

	      from = new Point3d(xRange.max, y, zRange.min);
	      to = new Point3d(xRange.max - gridLenY, y, zRange.min);
	      this._line3d(ctx, from, to, this.axisColor);
	    }

	    if (this.showYAxis) {
	      xText = armVector.y > 0 ? xRange.min : xRange.max;
	      point3d = new Point3d(xText, y, zRange.min);
	      var _msg = '  ' + this.yValueLabel(y) + '  ';
	      this.drawAxisLabelY(ctx, point3d, _msg, armAngle, textMargin);
	    }

	    step.next();
	  }

	  // draw z-grid lines and axis
	  if (this.showZAxis) {
	    ctx.lineWidth = 1;
	    prettyStep = this.defaultZStep === undefined;
	    step = new StepNumber(zRange.min, zRange.max, this.zStep, prettyStep);
	    step.start(true);

	    xText = armVector.x > 0 ? xRange.min : xRange.max;
	    yText = armVector.y < 0 ? yRange.min : yRange.max;

	    while (!step.end()) {
	      var z = step.getCurrent();

	      // TODO: make z-grid lines really 3d?
	      var from3d = new Point3d(xText, yText, z);
	      var from2d = this._convert3Dto2D(from3d);
	      to = new Point2d(from2d.x - textMargin, from2d.y);
	      this._line(ctx, from2d, to, this.axisColor);

	      var _msg2 = this.zValueLabel(z) + ' ';
	      this.drawAxisLabelZ(ctx, from3d, _msg2, 5);

	      step.next();
	    }

	    ctx.lineWidth = 1;
	    from = new Point3d(xText, yText, zRange.min);
	    to = new Point3d(xText, yText, zRange.max);
	    this._line3d(ctx, from, to, this.axisColor);
	  }

	  // draw x-axis
	  if (this.showXAxis) {
	    var xMin2d;
	    var xMax2d;
	    ctx.lineWidth = 1;

	    // line at yMin
	    xMin2d = new Point3d(xRange.min, yRange.min, zRange.min);
	    xMax2d = new Point3d(xRange.max, yRange.min, zRange.min);
	    this._line3d(ctx, xMin2d, xMax2d, this.axisColor);
	    // line at ymax
	    xMin2d = new Point3d(xRange.min, yRange.max, zRange.min);
	    xMax2d = new Point3d(xRange.max, yRange.max, zRange.min);
	    this._line3d(ctx, xMin2d, xMax2d, this.axisColor);
	  }

	  // draw y-axis
	  if (this.showYAxis) {
	    ctx.lineWidth = 1;
	    // line at xMin
	    from = new Point3d(xRange.min, yRange.min, zRange.min);
	    to = new Point3d(xRange.min, yRange.max, zRange.min);
	    this._line3d(ctx, from, to, this.axisColor);
	    // line at xMax
	    from = new Point3d(xRange.max, yRange.min, zRange.min);
	    to = new Point3d(xRange.max, yRange.max, zRange.min);
	    this._line3d(ctx, from, to, this.axisColor);
	  }

	  // draw x-label
	  var xLabel = this.xLabel;
	  if (xLabel.length > 0 && this.showXAxis) {
	    yOffset = 0.1 / this.scale.y;
	    xText = (xRange.max + 3 * xRange.min) / 4;
	    yText = armVector.x > 0 ? yRange.min - yOffset : yRange.max + yOffset;
	    text = new Point3d(xText, yText, zRange.min);
	    this.drawAxisLabelX(ctx, text, xLabel, armAngle);
	  }

	  // draw y-label
	  var yLabel = this.yLabel;
	  if (yLabel.length > 0 && this.showYAxis) {
	    xOffset = 0.1 / this.scale.x;
	    xText = armVector.y > 0 ? xRange.min - xOffset : xRange.max + xOffset;
	    yText = (yRange.max + 3 * yRange.min) / 4;
	    text = new Point3d(xText, yText, zRange.min);

	    this.drawAxisLabelY(ctx, text, yLabel, armAngle);
	  }

	  // draw z-label
	  var zLabel = this.zLabel;
	  if (zLabel.length > 0 && this.showZAxis) {
	    offset = 30; // pixels.  // TODO: relate to the max width of the values on the z axis?
	    xText = armVector.x > 0 ? xRange.min : xRange.max;
	    yText = armVector.y < 0 ? yRange.min : yRange.max;
	    zText = (zRange.max + 3 * zRange.min) / 4;
	    text = new Point3d(xText, yText, zText);

	    this.drawAxisLabelZ(ctx, text, zLabel, offset);
	  }
	};

	/**
	 * Calculate the color based on the given value.
	 * @param {number} H   Hue, a value be between 0 and 360
	 * @param {number} S   Saturation, a value between 0 and 1
	 * @param {number} V   Value, a value between 0 and 1
	 * @returns {string}
	 * @private
	 */
	Graph3d.prototype._hsv2rgb = function (H, S, V) {
	  var R, G, B, C, Hi, X;

	  C = V * S;
	  Hi = Math.floor(H / 60); // hi = 0,1,2,3,4,5
	  X = C * (1 - Math.abs(H / 60 % 2 - 1));

	  switch (Hi) {
	    case 0:
	      R = C;G = X;B = 0;break;
	    case 1:
	      R = X;G = C;B = 0;break;
	    case 2:
	      R = 0;G = C;B = X;break;
	    case 3:
	      R = 0;G = X;B = C;break;
	    case 4:
	      R = X;G = 0;B = C;break;
	    case 5:
	      R = C;G = 0;B = X;break;

	    default:
	      R = 0;G = 0;B = 0;break;
	  }

	  return 'RGB(' + parseInt(R * 255) + ',' + parseInt(G * 255) + ',' + parseInt(B * 255) + ')';
	};

	/**
	 *
	 * @param {vis.Point3d} point
	 * @returns {*}
	 * @private
	 */
	Graph3d.prototype._getStrokeWidth = function (point) {
	  if (point !== undefined) {
	    if (this.showPerspective) {
	      return 1 / -point.trans.z * this.dataColor.strokeWidth;
	    } else {
	      return -(this.eye.z / this.camera.getArmLength()) * this.dataColor.strokeWidth;
	    }
	  }

	  return this.dataColor.strokeWidth;
	};

	// -----------------------------------------------------------------------------
	// Drawing primitives for the graphs
	// -----------------------------------------------------------------------------


	/**
	 * Draw a bar element in the view with the given properties.
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {Object} point
	 * @param {number} xWidth
	 * @param {number} yWidth
	 * @param {string} color
	 * @param {string} borderColor
	 * @private
	 */
	Graph3d.prototype._redrawBar = function (ctx, point, xWidth, yWidth, color, borderColor) {
	  var surface;

	  // calculate all corner points
	  var me = this;
	  var point3d = point.point;
	  var zMin = this.zRange.min;
	  var top = [{ point: new Point3d(point3d.x - xWidth, point3d.y - yWidth, point3d.z) }, { point: new Point3d(point3d.x + xWidth, point3d.y - yWidth, point3d.z) }, { point: new Point3d(point3d.x + xWidth, point3d.y + yWidth, point3d.z) }, { point: new Point3d(point3d.x - xWidth, point3d.y + yWidth, point3d.z) }];
	  var bottom = [{ point: new Point3d(point3d.x - xWidth, point3d.y - yWidth, zMin) }, { point: new Point3d(point3d.x + xWidth, point3d.y - yWidth, zMin) }, { point: new Point3d(point3d.x + xWidth, point3d.y + yWidth, zMin) }, { point: new Point3d(point3d.x - xWidth, point3d.y + yWidth, zMin) }];

	  // calculate screen location of the points
	  top.forEach(function (obj) {
	    obj.screen = me._convert3Dto2D(obj.point);
	  });
	  bottom.forEach(function (obj) {
	    obj.screen = me._convert3Dto2D(obj.point);
	  });

	  // create five sides, calculate both corner points and center points
	  var surfaces = [{ corners: top, center: Point3d.avg(bottom[0].point, bottom[2].point) }, { corners: [top[0], top[1], bottom[1], bottom[0]], center: Point3d.avg(bottom[1].point, bottom[0].point) }, { corners: [top[1], top[2], bottom[2], bottom[1]], center: Point3d.avg(bottom[2].point, bottom[1].point) }, { corners: [top[2], top[3], bottom[3], bottom[2]], center: Point3d.avg(bottom[3].point, bottom[2].point) }, { corners: [top[3], top[0], bottom[0], bottom[3]], center: Point3d.avg(bottom[0].point, bottom[3].point) }];
	  point.surfaces = surfaces;

	  // calculate the distance of each of the surface centers to the camera
	  for (var j = 0; j < surfaces.length; j++) {
	    surface = surfaces[j];
	    var transCenter = this._convertPointToTranslation(surface.center);
	    surface.dist = this.showPerspective ? transCenter.length() : -transCenter.z;
	    // TODO: this dept calculation doesn't work 100% of the cases due to perspective,
	    //     but the current solution is fast/simple and works in 99.9% of all cases
	    //     the issue is visible in example 14, with graph.setCameraPosition({horizontal: 2.97, vertical: 0.5, distance: 0.9})
	  }

	  // order the surfaces by their (translated) depth
	  surfaces.sort(function (a, b) {
	    var diff = b.dist - a.dist;
	    if (diff) return diff;

	    // if equal depth, sort the top surface last
	    if (a.corners === top) return 1;
	    if (b.corners === top) return -1;

	    // both are equal
	    return 0;
	  });

	  // draw the ordered surfaces
	  ctx.lineWidth = this._getStrokeWidth(point);
	  ctx.strokeStyle = borderColor;
	  ctx.fillStyle = color;
	  // NOTE: we start at j=2 instead of j=0 as we don't need to draw the two surfaces at the backside
	  for (var _j = 2; _j < surfaces.length; _j++) {
	    surface = surfaces[_j];
	    this._polygon(ctx, surface.corners);
	  }
	};

	/**
	 * Draw a polygon using the passed points and fill it with the passed style and stroke.
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {Array.<vis.Point3d>} points      an array of points.
	 * @param {string} [fillStyle] the fill style to set
	 * @param {string} [strokeStyle] the stroke style to set
	 */
	Graph3d.prototype._polygon = function (ctx, points, fillStyle, strokeStyle) {
	  if (points.length < 2) {
	    return;
	  }

	  if (fillStyle !== undefined) {
	    ctx.fillStyle = fillStyle;
	  }
	  if (strokeStyle !== undefined) {
	    ctx.strokeStyle = strokeStyle;
	  }
	  ctx.beginPath();
	  ctx.moveTo(points[0].screen.x, points[0].screen.y);

	  for (var i = 1; i < points.length; ++i) {
	    var point = points[i];
	    ctx.lineTo(point.screen.x, point.screen.y);
	  }

	  ctx.closePath();
	  ctx.fill();
	  ctx.stroke(); // TODO: only draw stroke when strokeWidth > 0
	};

	/**
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {object} point
	 * @param {string} color
	 * @param {string} borderColor
	 * @param {number} [size=this._dotSize()]
	 * @private
	 */
	Graph3d.prototype._drawCircle = function (ctx, point, color, borderColor, size) {
	  var radius = this._calcRadius(point, size);

	  ctx.lineWidth = this._getStrokeWidth(point);
	  ctx.strokeStyle = borderColor;
	  ctx.fillStyle = color;
	  ctx.beginPath();
	  ctx.arc(point.screen.x, point.screen.y, radius, 0, Math.PI * 2, true);
	  ctx.fill();
	  ctx.stroke();
	};

	/**
	 * Determine the colors for the 'regular' graph styles.
	 *
	 * @param {object} point
	 * @returns {{fill, border}}
	 * @private
	 */
	Graph3d.prototype._getColorsRegular = function (point) {
	  // calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
	  var hue = (1 - (point.point.z - this.zRange.min) * this.scale.z / this.verticalRatio) * 240;
	  var color = this._hsv2rgb(hue, 1, 1);
	  var borderColor = this._hsv2rgb(hue, 1, 0.8);

	  return {
	    fill: color,
	    border: borderColor
	  };
	};

	/**
	 * Get the colors for the 'color' graph styles.
	 * These styles are currently: 'bar-color' and 'dot-color'
	 * Color may be set as a string representation of HTML color, like #ff00ff,
	 * or calculated from a number, for example, distance from this point
	 * The first option is useful when we have some pre-given legend, to which we have to adjust ourselves
	 * The second option is useful when we are interested in automatically setting the color, from some value,
	 * using some color scale
	 * @param {object} point
	 * @returns {{fill: *, border: *}}
	 * @private
	 */
	Graph3d.prototype._getColorsColor = function (point) {
	  // calculate the color based on the value
	  var color, borderColor;

	  if (typeof point.point.value === "string") {
	    color = point.point.value;
	    borderColor = point.point.value;
	  } else {
	    var hue = (1 - (point.point.value - this.valueRange.min) * this.scale.value) * 240;
	    color = this._hsv2rgb(hue, 1, 1);
	    borderColor = this._hsv2rgb(hue, 1, 0.8);
	  }
	  return {
	    fill: color,
	    border: borderColor
	  };
	};

	/**
	 * Get the colors for the 'size' graph styles.
	 * These styles are currently: 'bar-size' and 'dot-size'
	 *
	 * @returns {{fill: *, border: (string|colorOptions.stroke|{string, undefined}|string|colorOptions.stroke|{string}|*)}}
	 * @private
	 */
	Graph3d.prototype._getColorsSize = function () {
	  return {
	    fill: this.dataColor.fill,
	    border: this.dataColor.stroke
	  };
	};

	/**
	 * Determine the size of a point on-screen, as determined by the
	 * distance to the camera.
	 *
	 * @param {Object} point
	 * @param {number} [size=this._dotSize()] the size that needs to be translated to screen coordinates.
	 *             optional; if not passed, use the default point size.
	 * @returns {number}
	 * @private
	 */
	Graph3d.prototype._calcRadius = function (point, size) {
	  if (size === undefined) {
	    size = this._dotSize();
	  }

	  var radius;
	  if (this.showPerspective) {
	    radius = size / -point.trans.z;
	  } else {
	    radius = size * -(this.eye.z / this.camera.getArmLength());
	  }
	  if (radius < 0) {
	    radius = 0;
	  }

	  return radius;
	};

	// -----------------------------------------------------------------------------
	// Methods for drawing points per graph style.
	// -----------------------------------------------------------------------------


	/**
	 * Draw single datapoint for graph style 'bar'.
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {Object} point
	 * @private
	 */
	Graph3d.prototype._redrawBarGraphPoint = function (ctx, point) {
	  var xWidth = this.xBarWidth / 2;
	  var yWidth = this.yBarWidth / 2;
	  var colors = this._getColorsRegular(point);

	  this._redrawBar(ctx, point, xWidth, yWidth, colors.fill, colors.border);
	};

	/**
	 * Draw single datapoint for graph style 'bar-color'.
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {Object} point
	 * @private
	 */
	Graph3d.prototype._redrawBarColorGraphPoint = function (ctx, point) {
	  var xWidth = this.xBarWidth / 2;
	  var yWidth = this.yBarWidth / 2;
	  var colors = this._getColorsColor(point);

	  this._redrawBar(ctx, point, xWidth, yWidth, colors.fill, colors.border);
	};

	/**
	 * Draw single datapoint for graph style 'bar-size'.
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {Object} point
	 * @private
	 */
	Graph3d.prototype._redrawBarSizeGraphPoint = function (ctx, point) {
	  // calculate size for the bar
	  var fraction = (point.point.value - this.valueRange.min) / this.valueRange.range();
	  var xWidth = this.xBarWidth / 2 * (fraction * 0.8 + 0.2);
	  var yWidth = this.yBarWidth / 2 * (fraction * 0.8 + 0.2);

	  var colors = this._getColorsSize();

	  this._redrawBar(ctx, point, xWidth, yWidth, colors.fill, colors.border);
	};

	/**
	 * Draw single datapoint for graph style 'dot'.
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {Object} point
	 * @private
	 */
	Graph3d.prototype._redrawDotGraphPoint = function (ctx, point) {
	  var colors = this._getColorsRegular(point);

	  this._drawCircle(ctx, point, colors.fill, colors.border);
	};

	/**
	 * Draw single datapoint for graph style 'dot-line'.
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {Object} point
	 * @private
	 */
	Graph3d.prototype._redrawDotLineGraphPoint = function (ctx, point) {
	  // draw a vertical line from the XY-plane to the graph value
	  var from = this._convert3Dto2D(point.bottom);
	  ctx.lineWidth = 1;
	  this._line(ctx, from, point.screen, this.gridColor);

	  this._redrawDotGraphPoint(ctx, point);
	};

	/**
	 * Draw single datapoint for graph style 'dot-color'.
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {Object} point
	 * @private
	 */
	Graph3d.prototype._redrawDotColorGraphPoint = function (ctx, point) {
	  var colors = this._getColorsColor(point);

	  this._drawCircle(ctx, point, colors.fill, colors.border);
	};

	/**
	 * Draw single datapoint for graph style 'dot-size'.
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {Object} point
	 * @private
	 */
	Graph3d.prototype._redrawDotSizeGraphPoint = function (ctx, point) {
	  var dotSize = this._dotSize();
	  var fraction = (point.point.value - this.valueRange.min) / this.valueRange.range();

	  var sizeMin = dotSize * this.dotSizeMinFraction;
	  var sizeRange = dotSize * this.dotSizeMaxFraction - sizeMin;
	  var size = sizeMin + sizeRange * fraction;

	  var colors = this._getColorsSize();

	  this._drawCircle(ctx, point, colors.fill, colors.border, size);
	};

	/**
	 * Draw single datapoint for graph style 'surface'.
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {Object} point
	 * @private
	 */
	Graph3d.prototype._redrawSurfaceGraphPoint = function (ctx, point) {
	  var right = point.pointRight;
	  var top = point.pointTop;
	  var cross = point.pointCross;

	  if (point === undefined || right === undefined || top === undefined || cross === undefined) {
	    return;
	  }

	  var topSideVisible = true;
	  var fillStyle;
	  var strokeStyle;

	  if (this.showGrayBottom || this.showShadow) {
	    // calculate the cross product of the two vectors from center
	    // to left and right, in order to know whether we are looking at the
	    // bottom or at the top side. We can also use the cross product
	    // for calculating light intensity
	    var aDiff = Point3d.subtract(cross.trans, point.trans);
	    var bDiff = Point3d.subtract(top.trans, right.trans);
	    var crossproduct = Point3d.crossProduct(aDiff, bDiff);
	    var len = crossproduct.length();
	    // FIXME: there is a bug with determining the surface side (shadow or colored)

	    topSideVisible = crossproduct.z > 0;
	  }

	  if (topSideVisible) {

	    // calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
	    var zAvg = (point.point.z + right.point.z + top.point.z + cross.point.z) / 4;
	    var h = (1 - (zAvg - this.zRange.min) * this.scale.z / this.verticalRatio) * 240;
	    var s = 1; // saturation
	    var v;

	    if (this.showShadow) {
	      v = Math.min(1 + crossproduct.x / len / 2, 1); // value. TODO: scale
	      fillStyle = this._hsv2rgb(h, s, v);
	      strokeStyle = fillStyle;
	    } else {
	      v = 1;
	      fillStyle = this._hsv2rgb(h, s, v);
	      strokeStyle = this.axisColor; // TODO: should be customizable
	    }
	  } else {
	    fillStyle = 'gray';
	    strokeStyle = this.axisColor;
	  }

	  ctx.lineWidth = this._getStrokeWidth(point);
	  // TODO: only draw stroke when strokeWidth > 0

	  var points = [point, right, cross, top];
	  this._polygon(ctx, points, fillStyle, strokeStyle);
	};

	/**
	 * Helper method for _redrawGridGraphPoint()
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {Object} from
	 * @param {Object} to
	 * @private
	 */
	Graph3d.prototype._drawGridLine = function (ctx, from, to) {
	  if (from === undefined || to === undefined) {
	    return;
	  }

	  // calculate Hue from the current value. At zMin the hue is 240, at zMax the hue is 0
	  var zAvg = (from.point.z + to.point.z) / 2;
	  var h = (1 - (zAvg - this.zRange.min) * this.scale.z / this.verticalRatio) * 240;

	  ctx.lineWidth = this._getStrokeWidth(from) * 2;
	  ctx.strokeStyle = this._hsv2rgb(h, 1, 1);
	  this._line(ctx, from.screen, to.screen);
	};

	/**
	 * Draw single datapoint for graph style 'Grid'.
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {Object} point
	 * @private
	 */
	Graph3d.prototype._redrawGridGraphPoint = function (ctx, point) {
	  this._drawGridLine(ctx, point, point.pointRight);
	  this._drawGridLine(ctx, point, point.pointTop);
	};

	/**
	 * Draw single datapoint for graph style 'line'.
	 *
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {Object} point
	 * @private
	 */
	Graph3d.prototype._redrawLineGraphPoint = function (ctx, point) {
	  if (point.pointNext === undefined) {
	    return;
	  }

	  ctx.lineWidth = this._getStrokeWidth(point);
	  ctx.strokeStyle = this.dataColor.stroke;

	  this._line(ctx, point.screen, point.pointNext.screen);
	};

	/**
	 * Draw all datapoints for currently selected graph style.
	 *
	 */
	Graph3d.prototype._redrawDataGraph = function () {
	  var ctx = this._getContext();
	  var i;

	  if (this.dataPoints === undefined || this.dataPoints.length <= 0) return; // TODO: throw exception?

	  this._calcTranslations(this.dataPoints);

	  for (i = 0; i < this.dataPoints.length; i++) {
	    var point = this.dataPoints[i];

	    // Using call() ensures that the correct context is used
	    this._pointDrawingMethod.call(this, ctx, point);
	  }
	};

	// -----------------------------------------------------------------------------
	// End methods for drawing points per graph style.
	// -----------------------------------------------------------------------------

	/**
	 * Store startX, startY and startOffset for mouse operations
	 *
	 * @param {Event}     event     The event that occurred
	 */
	Graph3d.prototype._storeMousePosition = function (event) {
	  // get mouse position (different code for IE and all other browsers)
	  this.startMouseX = getMouseX(event);
	  this.startMouseY = getMouseY(event);

	  this._startCameraOffset = this.camera.getOffset();
	};

	/**
	 * Start a moving operation inside the provided parent element
	 * @param {Event}     event     The event that occurred (required for
	 *                  retrieving the  mouse position)
	 */
	Graph3d.prototype._onMouseDown = function (event) {
	  event = event || window.event;

	  // check if mouse is still down (may be up when focus is lost for example
	  // in an iframe)
	  if (this.leftButtonDown) {
	    this._onMouseUp(event);
	  }

	  // only react on left mouse button down
	  this.leftButtonDown = event.which ? event.which === 1 : event.button === 1;
	  if (!this.leftButtonDown && !this.touchDown) return;

	  this._storeMousePosition(event);

	  this.startStart = new Date(this.start);
	  this.startEnd = new Date(this.end);
	  this.startArmRotation = this.camera.getArmRotation();

	  this.frame.style.cursor = 'move';

	  // add event listeners to handle moving the contents
	  // we store the function onmousemove and onmouseup in the graph, so we can
	  // remove the eventlisteners lateron in the function mouseUp()
	  var me = this;
	  this.onmousemove = function (event) {
	    me._onMouseMove(event);
	  };
	  this.onmouseup = function (event) {
	    me._onMouseUp(event);
	  };
	  util.addEventListener(document, 'mousemove', me.onmousemove);
	  util.addEventListener(document, 'mouseup', me.onmouseup);
	  util.preventDefault(event);
	};

	/**
	 * Perform moving operating.
	 * This function activated from within the funcion Graph.mouseDown().
	 * @param {Event}   event  Well, eehh, the event
	 */
	Graph3d.prototype._onMouseMove = function (event) {
	  this.moving = true;
	  event = event || window.event;

	  // calculate change in mouse position
	  var diffX = parseFloat(getMouseX(event)) - this.startMouseX;
	  var diffY = parseFloat(getMouseY(event)) - this.startMouseY;

	  // move with ctrl or rotate by other
	  if (event && event.ctrlKey === true) {
	    // calculate change in mouse position
	    var scaleX = this.frame.clientWidth * 0.5;
	    var scaleY = this.frame.clientHeight * 0.5;

	    var offXNew = (this._startCameraOffset.x || 0) - diffX / scaleX * this.camera.armLength * 0.8;
	    var offYNew = (this._startCameraOffset.y || 0) + diffY / scaleY * this.camera.armLength * 0.8;

	    this.camera.setOffset(offXNew, offYNew);
	    this._storeMousePosition(event);
	  } else {
	    var horizontalNew = this.startArmRotation.horizontal + diffX / 200;
	    var verticalNew = this.startArmRotation.vertical + diffY / 200;

	    var snapAngle = 4; // degrees
	    var snapValue = Math.sin(snapAngle / 360 * 2 * Math.PI);

	    // snap horizontally to nice angles at 0pi, 0.5pi, 1pi, 1.5pi, etc...
	    // the -0.001 is to take care that the vertical axis is always drawn at the left front corner
	    if (Math.abs(Math.sin(horizontalNew)) < snapValue) {
	      horizontalNew = Math.round(horizontalNew / Math.PI) * Math.PI - 0.001;
	    }
	    if (Math.abs(Math.cos(horizontalNew)) < snapValue) {
	      horizontalNew = (Math.round(horizontalNew / Math.PI - 0.5) + 0.5) * Math.PI - 0.001;
	    }

	    // snap vertically to nice angles
	    if (Math.abs(Math.sin(verticalNew)) < snapValue) {
	      verticalNew = Math.round(verticalNew / Math.PI) * Math.PI;
	    }
	    if (Math.abs(Math.cos(verticalNew)) < snapValue) {
	      verticalNew = (Math.round(verticalNew / Math.PI - 0.5) + 0.5) * Math.PI;
	    }
	    this.camera.setArmRotation(horizontalNew, verticalNew);
	  }

	  this.redraw();

	  // fire a cameraPositionChange event
	  var parameters = this.getCameraPosition();
	  this.emit('cameraPositionChange', parameters);

	  util.preventDefault(event);
	};

	/**
	 * Stop moving operating.
	 * This function activated from within the funcion Graph.mouseDown().
	 * @param {Event}  event   The event
	 */
	Graph3d.prototype._onMouseUp = function (event) {
	  this.frame.style.cursor = 'auto';
	  this.leftButtonDown = false;

	  // remove event listeners here
	  util.removeEventListener(document, 'mousemove', this.onmousemove);
	  util.removeEventListener(document, 'mouseup', this.onmouseup);
	  util.preventDefault(event);
	};

	/**
	 * @param {Event}  event   The event
	 */
	Graph3d.prototype._onClick = function (event) {
	  if (!this.onclick_callback) return;
	  if (!this.moving) {
	    var boundingRect = this.frame.getBoundingClientRect();
	    var mouseX = getMouseX(event) - boundingRect.left;
	    var mouseY = getMouseY(event) - boundingRect.top;
	    var dataPoint = this._dataPointFromXY(mouseX, mouseY);
	    if (dataPoint) this.onclick_callback(dataPoint.point.data);
	  } else {
	    // disable onclick callback, if it came immediately after rotate/pan
	    this.moving = false;
	  }
	  util.preventDefault(event);
	};

	/**
	 * After having moved the mouse, a tooltip should pop up when the mouse is resting on a data point
	 * @param {Event}  event   A mouse move event
	 */
	Graph3d.prototype._onTooltip = function (event) {
	  var delay = 300; // ms
	  var boundingRect = this.frame.getBoundingClientRect();
	  var mouseX = getMouseX(event) - boundingRect.left;
	  var mouseY = getMouseY(event) - boundingRect.top;

	  if (!this.showTooltip) {
	    return;
	  }

	  if (this.tooltipTimeout) {
	    clearTimeout(this.tooltipTimeout);
	  }

	  // (delayed) display of a tooltip only if no mouse button is down
	  if (this.leftButtonDown) {
	    this._hideTooltip();
	    return;
	  }

	  if (this.tooltip && this.tooltip.dataPoint) {
	    // tooltip is currently visible
	    var dataPoint = this._dataPointFromXY(mouseX, mouseY);
	    if (dataPoint !== this.tooltip.dataPoint) {
	      // datapoint changed
	      if (dataPoint) {
	        this._showTooltip(dataPoint);
	      } else {
	        this._hideTooltip();
	      }
	    }
	  } else {
	    // tooltip is currently not visible
	    var me = this;
	    this.tooltipTimeout = setTimeout(function () {
	      me.tooltipTimeout = null;

	      // show a tooltip if we have a data point
	      var dataPoint = me._dataPointFromXY(mouseX, mouseY);
	      if (dataPoint) {
	        me._showTooltip(dataPoint);
	      }
	    }, delay);
	  }
	};

	/**
	 * Event handler for touchstart event on mobile devices
	 * @param {Event}  event   The event
	 */
	Graph3d.prototype._onTouchStart = function (event) {
	  this.touchDown = true;

	  var me = this;
	  this.ontouchmove = function (event) {
	    me._onTouchMove(event);
	  };
	  this.ontouchend = function (event) {
	    me._onTouchEnd(event);
	  };
	  util.addEventListener(document, 'touchmove', me.ontouchmove);
	  util.addEventListener(document, 'touchend', me.ontouchend);

	  this._onMouseDown(event);
	};

	/**
	 * Event handler for touchmove event on mobile devices
	 * @param {Event}  event   The event
	 */
	Graph3d.prototype._onTouchMove = function (event) {
	  this._onMouseMove(event);
	};

	/**
	 * Event handler for touchend event on mobile devices
	 * @param {Event}  event   The event
	 */
	Graph3d.prototype._onTouchEnd = function (event) {
	  this.touchDown = false;

	  util.removeEventListener(document, 'touchmove', this.ontouchmove);
	  util.removeEventListener(document, 'touchend', this.ontouchend);

	  this._onMouseUp(event);
	};

	/**
	 * Event handler for mouse wheel event, used to zoom the graph
	 * Code from http://adomas.org/javascript-mouse-wheel/
	 * @param {Event}  event   The event
	 */
	Graph3d.prototype._onWheel = function (event) {
	  if (!event) /* For IE. */
	    event = window.event;

	  // retrieve delta
	  var delta = 0;
	  if (event.wheelDelta) {
	    /* IE/Opera. */
	    delta = event.wheelDelta / 120;
	  } else if (event.detail) {
	    /* Mozilla case. */
	    // In Mozilla, sign of delta is different than in IE.
	    // Also, delta is multiple of 3.
	    delta = -event.detail / 3;
	  }

	  // If delta is nonzero, handle it.
	  // Basically, delta is now positive if wheel was scrolled up,
	  // and negative, if wheel was scrolled down.
	  if (delta) {
	    var oldLength = this.camera.getArmLength();
	    var newLength = oldLength * (1 - delta / 10);

	    this.camera.setArmLength(newLength);
	    this.redraw();

	    this._hideTooltip();
	  }

	  // fire a cameraPositionChange event
	  var parameters = this.getCameraPosition();
	  this.emit('cameraPositionChange', parameters);

	  // Prevent default actions caused by mouse wheel.
	  // That might be ugly, but we handle scrolls somehow
	  // anyway, so don't bother here..
	  util.preventDefault(event);
	};

	/**
	 * Test whether a point lies inside given 2D triangle
	 *
	 * @param   {vis.Point2d}   point
	 * @param   {vis.Point2d[]} triangle
	 * @returns {boolean}   true if given point lies inside or on the edge of the
	 *                      triangle, false otherwise
	 * @private
	 */
	Graph3d.prototype._insideTriangle = function (point, triangle) {
	  var a = triangle[0],
	      b = triangle[1],
	      c = triangle[2];

	  /**
	   *
	   * @param {number} x
	   * @returns {number}
	   */
	  function sign(x) {
	    return x > 0 ? 1 : x < 0 ? -1 : 0;
	  }

	  var as = sign((b.x - a.x) * (point.y - a.y) - (b.y - a.y) * (point.x - a.x));
	  var bs = sign((c.x - b.x) * (point.y - b.y) - (c.y - b.y) * (point.x - b.x));
	  var cs = sign((a.x - c.x) * (point.y - c.y) - (a.y - c.y) * (point.x - c.x));

	  // each of the three signs must be either equal to each other or zero
	  return (as == 0 || bs == 0 || as == bs) && (bs == 0 || cs == 0 || bs == cs) && (as == 0 || cs == 0 || as == cs);
	};

	/**
	 * Find a data point close to given screen position (x, y)
	 *
	 * @param   {number} x
	 * @param   {number} y
	 * @returns {Object | null} The closest data point or null if not close to any
	 *                          data point
	 * @private
	 */
	Graph3d.prototype._dataPointFromXY = function (x, y) {
	  var i,
	      distMax = 100,
	      // px
	  dataPoint = null,
	      closestDataPoint = null,
	      closestDist = null,
	      center = new Point2d(x, y);

	  if (this.style === Graph3d.STYLE.BAR || this.style === Graph3d.STYLE.BARCOLOR || this.style === Graph3d.STYLE.BARSIZE) {
	    // the data points are ordered from far away to closest
	    for (i = this.dataPoints.length - 1; i >= 0; i--) {
	      dataPoint = this.dataPoints[i];
	      var surfaces = dataPoint.surfaces;
	      if (surfaces) {
	        for (var s = surfaces.length - 1; s >= 0; s--) {
	          // split each surface in two triangles, and see if the center point is inside one of these
	          var surface = surfaces[s];
	          var corners = surface.corners;
	          var triangle1 = [corners[0].screen, corners[1].screen, corners[2].screen];
	          var triangle2 = [corners[2].screen, corners[3].screen, corners[0].screen];
	          if (this._insideTriangle(center, triangle1) || this._insideTriangle(center, triangle2)) {
	            // return immediately at the first hit
	            return dataPoint;
	          }
	        }
	      }
	    }
	  } else {
	    // find the closest data point, using distance to the center of the point on 2d screen
	    for (i = 0; i < this.dataPoints.length; i++) {
	      dataPoint = this.dataPoints[i];
	      var point = dataPoint.screen;
	      if (point) {
	        var distX = Math.abs(x - point.x);
	        var distY = Math.abs(y - point.y);
	        var dist = Math.sqrt(distX * distX + distY * distY);

	        if ((closestDist === null || dist < closestDist) && dist < distMax) {
	          closestDist = dist;
	          closestDataPoint = dataPoint;
	        }
	      }
	    }
	  }

	  return closestDataPoint;
	};

	/**
	 * Determine if the given style has bars
	 *
	 * @param   {number} style the style to check
	 * @returns {boolean} true if bar style, false otherwise
	 */
	Graph3d.prototype.hasBars = function (style) {
	  return style == Graph3d.STYLE.BAR || style == Graph3d.STYLE.BARCOLOR || style == Graph3d.STYLE.BARSIZE;
	};

	/**
	 * Display a tooltip for given data point
	 * @param {Object} dataPoint
	 * @private
	 */
	Graph3d.prototype._showTooltip = function (dataPoint) {
	  var content, line, dot;

	  if (!this.tooltip) {
	    content = document.createElement('div');
	    (0, _assign2['default'])(content.style, {}, this.tooltipStyle.content);
	    content.style.position = 'absolute';

	    line = document.createElement('div');
	    (0, _assign2['default'])(line.style, {}, this.tooltipStyle.line);
	    line.style.position = 'absolute';

	    dot = document.createElement('div');
	    (0, _assign2['default'])(dot.style, {}, this.tooltipStyle.dot);
	    dot.style.position = 'absolute';

	    this.tooltip = {
	      dataPoint: null,
	      dom: {
	        content: content,
	        line: line,
	        dot: dot
	      }
	    };
	  } else {
	    content = this.tooltip.dom.content;
	    line = this.tooltip.dom.line;
	    dot = this.tooltip.dom.dot;
	  }

	  this._hideTooltip();

	  this.tooltip.dataPoint = dataPoint;
	  if (typeof this.showTooltip === 'function') {
	    content.innerHTML = this.showTooltip(dataPoint.point);
	  } else {
	    content.innerHTML = '<table>' + '<tr><td>' + this.xLabel + ':</td><td>' + dataPoint.point.x + '</td></tr>' + '<tr><td>' + this.yLabel + ':</td><td>' + dataPoint.point.y + '</td></tr>' + '<tr><td>' + this.zLabel + ':</td><td>' + dataPoint.point.z + '</td></tr>' + '</table>';
	  }

	  content.style.left = '0';
	  content.style.top = '0';
	  this.frame.appendChild(content);
	  this.frame.appendChild(line);
	  this.frame.appendChild(dot);

	  // calculate sizes
	  var contentWidth = content.offsetWidth;
	  var contentHeight = content.offsetHeight;
	  var lineHeight = line.offsetHeight;
	  var dotWidth = dot.offsetWidth;
	  var dotHeight = dot.offsetHeight;

	  var left = dataPoint.screen.x - contentWidth / 2;
	  left = Math.min(Math.max(left, 10), this.frame.clientWidth - 10 - contentWidth);

	  line.style.left = dataPoint.screen.x + 'px';
	  line.style.top = dataPoint.screen.y - lineHeight + 'px';
	  content.style.left = left + 'px';
	  content.style.top = dataPoint.screen.y - lineHeight - contentHeight + 'px';
	  dot.style.left = dataPoint.screen.x - dotWidth / 2 + 'px';
	  dot.style.top = dataPoint.screen.y - dotHeight / 2 + 'px';
	};

	/**
	 * Hide the tooltip when displayed
	 * @private
	 */
	Graph3d.prototype._hideTooltip = function () {
	  if (this.tooltip) {
	    this.tooltip.dataPoint = null;

	    for (var prop in this.tooltip.dom) {
	      if (this.tooltip.dom.hasOwnProperty(prop)) {
	        var elem = this.tooltip.dom[prop];
	        if (elem && elem.parentNode) {
	          elem.parentNode.removeChild(elem);
	        }
	      }
	    }
	  }
	};

	/**--------------------------------------------------------------------------**/

	/**
	 * Get the horizontal mouse position from a mouse event
	 *
	 * @param   {Event}  event
	 * @returns {number} mouse x
	 */
	function getMouseX(event) {
	  if ('clientX' in event) return event.clientX;
	  return event.targetTouches[0] && event.targetTouches[0].clientX || 0;
	}

	/**
	 * Get the vertical mouse position from a mouse event
	 *
	 * @param   {Event}  event
	 * @returns {number} mouse y
	 */
	function getMouseY(event) {
	  if ('clientY' in event) return event.clientY;
	  return event.targetTouches[0] && event.targetTouches[0].clientY || 0;
	}

	// -----------------------------------------------------------------------------
	//  Public methods for specific settings
	// -----------------------------------------------------------------------------

	/**
	 * Set the rotation and distance of the camera
	 *
	 * @param {Object}  pos            An object with the camera position
	 * @param {number} [pos.horizontal] The horizontal rotation, between 0 and 2*PI.
	 *                                 Optional, can be left undefined.
	 * @param {number} [pos.vertical]  The vertical rotation, between 0 and 0.5*PI.
	 *                                 if vertical=0.5*PI, the graph is shown from
	 *                                 the top. Optional, can be left undefined.
	 * @param {number} [pos.distance]  The (normalized) distance of the camera to the
	 *                                 center of the graph, a value between 0.71 and
	 *                                 5.0. Optional, can be left undefined.
	 */
	Graph3d.prototype.setCameraPosition = function (pos) {
	  Settings.setCameraPosition(pos, this);
	  this.redraw();
	};

	/**
	 * Set a new size for the graph
	 *
	 * @param {string} width  Width in pixels or percentage (for example '800px'
	 *                        or '50%')
	 * @param {string} height Height in pixels or percentage  (for example '400px'
	 *                        or '30%')
	 */
	Graph3d.prototype.setSize = function (width, height) {
	  this._setSize(width, height);
	  this.redraw();
	};

	// -----------------------------------------------------------------------------
	//  End public methods for specific settings
	// -----------------------------------------------------------------------------


	module.exports = Graph3d;

	/***/ }),
	/* 162 */
	/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(163);
	module.exports = __webpack_require__(7).Object.assign;


	/***/ }),
	/* 163 */
	/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(17);

	$export($export.S + $export.F, 'Object', { assign: __webpack_require__(164) });


	/***/ }),
	/* 164 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys = __webpack_require__(33);
	var gOPS = __webpack_require__(63);
	var pIE = __webpack_require__(42);
	var toObject = __webpack_require__(41);
	var IObject = __webpack_require__(78);
	var $assign = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(28)(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = gOPS.f;
	  var isEnum = pIE.f;
	  while (aLen > index) {
	    var S = IObject(arguments[index++]);
	    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	  } return T;
	} : $assign;


	/***/ }),
	/* 165 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(166), __esModule: true };

	/***/ }),
	/* 166 */
	/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(167);
	module.exports = __webpack_require__(7).Math.sign;


	/***/ }),
	/* 167 */
	/***/ (function(module, exports, __webpack_require__) {

	// 20.2.2.28 Math.sign(x)
	var $export = __webpack_require__(17);

	$export($export.S, 'Math', { sign: __webpack_require__(168) });


	/***/ }),
	/* 168 */
	/***/ (function(module, exports) {

	// 20.2.2.28 Math.sign(x)
	module.exports = Math.sign || function sign(x) {
	  // eslint-disable-next-line no-self-compare
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	};


	/***/ }),
	/* 169 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(170), __esModule: true };

	/***/ }),
	/* 170 */
	/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(171);
	var $Object = __webpack_require__(7).Object;
	module.exports = function defineProperty(it, key, desc) {
	  return $Object.defineProperty(it, key, desc);
	};


	/***/ }),
	/* 171 */
	/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(17);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(21), 'Object', { defineProperty: __webpack_require__(20).f });


	/***/ }),
	/* 172 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * This object contains all possible options. It will check if the types are correct, if required if the option is one
	 * of the allowed values.
	 *
	 * __any__ means that the name of the property does not matter.
	 * __type__ is a required field for all objects and contains the allowed types of all objects
	 */
	var string = 'string';
	var bool = 'boolean';
	var number = 'number';
	var object = 'object'; // should only be in a __type__ property
	// Following not used here, but useful for reference
	//let array    = 'array';
	//let dom      = 'dom';
	//let any      = 'any';


	var colorOptions = {
	  fill: { string: string },
	  stroke: { string: string },
	  strokeWidth: { number: number },
	  __type__: { string: string, object: object, 'undefined': 'undefined' }
	};

	/**
	 * Order attempted to be alphabetical.
	 *   - x/y/z-prefixes ignored in sorting
	 *   - __type__ always at end
	 *   - globals at end
	 */
	var allOptions = {
	  animationAutoStart: { boolean: bool, 'undefined': 'undefined' },
	  animationInterval: { number: number },
	  animationPreload: { boolean: bool },
	  axisColor: { string: string },
	  backgroundColor: colorOptions,
	  xBarWidth: { number: number, 'undefined': 'undefined' },
	  yBarWidth: { number: number, 'undefined': 'undefined' },
	  cameraPosition: {
	    distance: { number: number },
	    horizontal: { number: number },
	    vertical: { number: number },
	    __type__: { object: object }
	  },
	  xCenter: { string: string },
	  yCenter: { string: string },
	  dataColor: colorOptions,
	  dotSizeMinFraction: { number: number },
	  dotSizeMaxFraction: { number: number },
	  dotSizeRatio: { number: number },
	  filterLabel: { string: string },
	  gridColor: { string: string },
	  onclick: { 'function': 'function' },
	  keepAspectRatio: { boolean: bool },
	  xLabel: { string: string },
	  yLabel: { string: string },
	  zLabel: { string: string },
	  legendLabel: { string: string },
	  xMin: { number: number, 'undefined': 'undefined' },
	  yMin: { number: number, 'undefined': 'undefined' },
	  zMin: { number: number, 'undefined': 'undefined' },
	  xMax: { number: number, 'undefined': 'undefined' },
	  yMax: { number: number, 'undefined': 'undefined' },
	  zMax: { number: number, 'undefined': 'undefined' },
	  showAnimationControls: { boolean: bool, 'undefined': 'undefined' },
	  showGrid: { boolean: bool },
	  showLegend: { boolean: bool, 'undefined': 'undefined' },
	  showPerspective: { boolean: bool },
	  showShadow: { boolean: bool },
	  showXAxis: { boolean: bool },
	  showYAxis: { boolean: bool },
	  showZAxis: { boolean: bool },
	  xStep: { number: number, 'undefined': 'undefined' },
	  yStep: { number: number, 'undefined': 'undefined' },
	  zStep: { number: number, 'undefined': 'undefined' },
	  style: {
	    number: number, // TODO: either Graph3d.DEFAULT has string, or number allowed in documentation
	    string: ['bar', 'bar-color', 'bar-size', 'dot', 'dot-line', 'dot-color', 'dot-size', 'line', 'grid', 'surface']
	  },
	  tooltip: { boolean: bool, 'function': 'function' },
	  tooltipStyle: {
	    content: {
	      color: { string: string },
	      background: { string: string },
	      border: { string: string },
	      borderRadius: { string: string },
	      boxShadow: { string: string },
	      padding: { string: string },
	      __type__: { object: object }
	    },
	    line: {
	      borderLeft: { string: string },
	      height: { string: string },
	      width: { string: string },
	      __type__: { object: object }
	    },
	    dot: {
	      border: { string: string },
	      borderRadius: { string: string },
	      height: { string: string },
	      width: { string: string },
	      __type__: { object: object }
	    },
	    __type__: { object: object }
	  },
	  xValueLabel: { 'function': 'function' },
	  yValueLabel: { 'function': 'function' },
	  zValueLabel: { 'function': 'function' },
	  valueMax: { number: number, 'undefined': 'undefined' },
	  valueMin: { number: number, 'undefined': 'undefined' },
	  verticalRatio: { number: number },

	  //globals :
	  height: { string: string },
	  width: { string: string },
	  __type__: { object: object }
	};

	exports.allOptions = allOptions;

	/***/ }),
	/* 173 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var DataSet = __webpack_require__(11);
	var DataView = __webpack_require__(12);
	var Range = __webpack_require__(174);
	var Filter = __webpack_require__(96);
	var Settings = __webpack_require__(94);
	var Point3d = __webpack_require__(34);

	/**
	 * Creates a container for all data of one specific 3D-graph.
	 *
	 * On construction, the container is totally empty; the data
	 * needs to be initialized with method initializeData().
	 * Failure to do so will result in the following exception begin thrown
	 * on instantiation of Graph3D:
	 *
	 *     Error: Array, DataSet, or DataView expected
	 *
	 * @constructor DataGroup
	 */
	function DataGroup() {
	  this.dataTable = null; // The original data table
	}

	/**
	 * Initializes the instance from the passed data.
	 *
	 * Calculates minimum and maximum values and column index values.
	 *
	 * The graph3d instance is used internally to access the settings for
	 * the given instance.
	 * TODO: Pass settings only instead.
	 *
	 * @param {vis.Graph3d}  graph3d Reference to the calling Graph3D instance.
	 * @param {Array | DataSet | DataView} rawData The data containing the items for
	 *                                             the Graph.
	 * @param {number}   style   Style Number
	 * @returns {Array.<Object>}
	 */
	DataGroup.prototype.initializeData = function (graph3d, rawData, style) {
	  if (rawData === undefined) return;

	  if (Array.isArray(rawData)) {
	    rawData = new DataSet(rawData);
	  }

	  var data;
	  if (rawData instanceof DataSet || rawData instanceof DataView) {
	    data = rawData.get();
	  } else {
	    throw new Error('Array, DataSet, or DataView expected');
	  }

	  if (data.length == 0) return;

	  this.style = style;

	  // unsubscribe from the dataTable
	  if (this.dataSet) {
	    this.dataSet.off('*', this._onChange);
	  }

	  this.dataSet = rawData;
	  this.dataTable = data;

	  // subscribe to changes in the dataset
	  var me = this;
	  this._onChange = function () {
	    graph3d.setData(me.dataSet);
	  };
	  this.dataSet.on('*', this._onChange);

	  // determine the location of x,y,z,value,filter columns
	  this.colX = 'x';
	  this.colY = 'y';
	  this.colZ = 'z';

	  var withBars = graph3d.hasBars(style);

	  // determine barWidth from data
	  if (withBars) {
	    if (graph3d.defaultXBarWidth !== undefined) {
	      this.xBarWidth = graph3d.defaultXBarWidth;
	    } else {
	      this.xBarWidth = this.getSmallestDifference(data, this.colX) || 1;
	    }

	    if (graph3d.defaultYBarWidth !== undefined) {
	      this.yBarWidth = graph3d.defaultYBarWidth;
	    } else {
	      this.yBarWidth = this.getSmallestDifference(data, this.colY) || 1;
	    }
	  }

	  // calculate minima and maxima
	  this._initializeRange(data, this.colX, graph3d, withBars);
	  this._initializeRange(data, this.colY, graph3d, withBars);
	  this._initializeRange(data, this.colZ, graph3d, false);

	  if (data[0].hasOwnProperty('style')) {
	    this.colValue = 'style';
	    var valueRange = this.getColumnRange(data, this.colValue);
	    this._setRangeDefaults(valueRange, graph3d.defaultValueMin, graph3d.defaultValueMax);
	    this.valueRange = valueRange;
	  }

	  // Initialize data filter if a filter column is provided
	  var table = this.getDataTable();
	  if (table[0].hasOwnProperty('filter')) {
	    if (this.dataFilter === undefined) {
	      this.dataFilter = new Filter(this, 'filter', graph3d);
	      this.dataFilter.setOnLoadCallback(function () {
	        graph3d.redraw();
	      });
	    }
	  }

	  var dataPoints;
	  if (this.dataFilter) {
	    // apply filtering
	    dataPoints = this.dataFilter._getDataPoints();
	  } else {
	    // no filtering. load all data
	    dataPoints = this._getDataPoints(this.getDataTable());
	  }
	  return dataPoints;
	};

	/**
	 * Collect the range settings for the given data column.
	 *
	 * This internal method is intended to make the range 
	 * initalization more generic.
	 *
	 * TODO: if/when combined settings per axis defined, get rid of this.
	 *
	 * @private
	 *
	 * @param {'x'|'y'|'z'} column  The data column to process
	 * @param {vis.Graph3d} graph3d Reference to the calling Graph3D instance;
	 *                              required for access to settings
	 * @returns {Object}
	 */
	DataGroup.prototype._collectRangeSettings = function (column, graph3d) {
	  var index = ['x', 'y', 'z'].indexOf(column);

	  if (index == -1) {
	    throw new Error('Column \'' + column + '\' invalid');
	  }

	  var upper = column.toUpperCase();

	  return {
	    barWidth: this[column + 'BarWidth'],
	    min: graph3d['default' + upper + 'Min'],
	    max: graph3d['default' + upper + 'Max'],
	    step: graph3d['default' + upper + 'Step'],
	    range_label: column + 'Range', // Name of instance field to write to
	    step_label: column + 'Step' // Name of instance field to write to
	  };
	};

	/**
	 * Initializes the settings per given column.
	 *
	 * TODO: if/when combined settings per axis defined, rewrite this.
	 *
	 * @private
	 *
	 * @param {DataSet | DataView} data     The data containing the items for the Graph
	 * @param {'x'|'y'|'z'}        column   The data column to process
	 * @param {vis.Graph3d}        graph3d  Reference to the calling Graph3D instance;
	 *                                      required for access to settings
	 * @param {boolean}            withBars True if initializing for bar graph
	 */
	DataGroup.prototype._initializeRange = function (data, column, graph3d, withBars) {
	  var NUMSTEPS = 5;
	  var settings = this._collectRangeSettings(column, graph3d);

	  var range = this.getColumnRange(data, column);
	  if (withBars && column != 'z') {
	    // Safeguard for 'z'; it doesn't have a bar width
	    range.expand(settings.barWidth / 2);
	  }

	  this._setRangeDefaults(range, settings.min, settings.max);
	  this[settings.range_label] = range;
	  this[settings.step_label] = settings.step !== undefined ? settings.step : range.range() / NUMSTEPS;
	};

	/**
	 * Creates a list with all the different values in the data for the given column.
	 *
	 * If no data passed, use the internal data of this instance.
	 *
	 * @param {'x'|'y'|'z'}                column The data column to process
	 * @param {DataSet|DataView|undefined} data   The data containing the items for the Graph
	 *
	 * @returns {Array} All distinct values in the given column data, sorted ascending.
	 */
	DataGroup.prototype.getDistinctValues = function (column, data) {
	  if (data === undefined) {
	    data = this.dataTable;
	  }

	  var values = [];

	  for (var i = 0; i < data.length; i++) {
	    var value = data[i][column] || 0;
	    if (values.indexOf(value) === -1) {
	      values.push(value);
	    }
	  }

	  return values.sort(function (a, b) {
	    return a - b;
	  });
	};

	/**
	 * Determine the smallest difference between the values for given
	 * column in the passed data set.
	 *
	 * @param {DataSet|DataView|undefined} data   The data containing the items for the Graph
	 * @param {'x'|'y'|'z'}                column The data column to process
	 *
	 * @returns {number|null} Smallest difference value or
	 *                        null, if it can't be determined.
	 */
	DataGroup.prototype.getSmallestDifference = function (data, column) {
	  var values = this.getDistinctValues(data, column);

	  // Get all the distinct diffs
	  // Array values is assumed to be sorted here
	  var smallest_diff = null;

	  for (var i = 1; i < values.length; i++) {
	    var diff = values[i] - values[i - 1];

	    if (smallest_diff == null || smallest_diff > diff) {
	      smallest_diff = diff;
	    }
	  }

	  return smallest_diff;
	};

	/**
	 * Get the absolute min/max values for the passed data column.
	 *
	 * @param {DataSet|DataView|undefined} data   The data containing the items for the Graph
	 * @param {'x'|'y'|'z'}                column The data column to process
	 *
	 * @returns {Range} A Range instance with min/max members properly set.
	 */
	DataGroup.prototype.getColumnRange = function (data, column) {
	  var range = new Range();

	  // Adjust the range so that it covers all values in the passed data elements.
	  for (var i = 0; i < data.length; i++) {
	    var item = data[i][column];
	    range.adjust(item);
	  }

	  return range;
	};

	/**
	 * Determines the number of rows in the current data.
	 *
	 * @returns {number}
	 */
	DataGroup.prototype.getNumberOfRows = function () {
	  return this.dataTable.length;
	};

	/**
	 * Set default values for range
	 *
	 * The default values override the range values, if defined.
	 *
	 * Because it's possible that only defaultMin or defaultMax is set, it's better
	 * to pass in a range already set with the min/max set from the data. Otherwise,
	 * it's quite hard to process the min/max properly.
	 *
	 * @param {vis.Range} range
	 * @param {number} [defaultMin=range.min]
	 * @param {number} [defaultMax=range.max]
	 * @private
	 */
	DataGroup.prototype._setRangeDefaults = function (range, defaultMin, defaultMax) {
	  if (defaultMin !== undefined) {
	    range.min = defaultMin;
	  }

	  if (defaultMax !== undefined) {
	    range.max = defaultMax;
	  }

	  // This is the original way that the default min/max values were adjusted.
	  // TODO: Perhaps it's better if an error is thrown if the values do not agree.
	  //       But this will change the behaviour.
	  if (range.max <= range.min) range.max = range.min + 1;
	};

	DataGroup.prototype.getDataTable = function () {
	  return this.dataTable;
	};

	DataGroup.prototype.getDataSet = function () {
	  return this.dataSet;
	};

	/**
	 * Return all data values as a list of Point3d objects
	 * @param {Array.<Object>} data
	 * @returns {Array.<Object>}
	 */
	DataGroup.prototype.getDataPoints = function (data) {
	  var dataPoints = [];

	  for (var i = 0; i < data.length; i++) {
	    var point = new Point3d();
	    point.x = data[i][this.colX] || 0;
	    point.y = data[i][this.colY] || 0;
	    point.z = data[i][this.colZ] || 0;
	    point.data = data[i];

	    if (this.colValue !== undefined) {
	      point.value = data[i][this.colValue] || 0;
	    }

	    var obj = {};
	    obj.point = point;
	    obj.bottom = new Point3d(point.x, point.y, this.zRange.min);
	    obj.trans = undefined;
	    obj.screen = undefined;

	    dataPoints.push(obj);
	  }

	  return dataPoints;
	};

	/**
	 * Copy all values from the data table to a matrix.
	 *
	 * The provided values are supposed to form a grid of (x,y) positions.
	 * @param {Array.<Object>} data
	 * @returns {Array.<Object>}
	 * @private
	 */
	DataGroup.prototype.initDataAsMatrix = function (data) {
	  // TODO: store the created matrix dataPoints in the filters instead of
	  //       reloading each time.
	  var x, y, i, obj;

	  // create two lists with all present x and y values
	  var dataX = this.getDistinctValues(this.colX, data);
	  var dataY = this.getDistinctValues(this.colY, data);

	  var dataPoints = this.getDataPoints(data);

	  // create a grid, a 2d matrix, with all values.
	  var dataMatrix = []; // temporary data matrix
	  for (i = 0; i < dataPoints.length; i++) {
	    obj = dataPoints[i];

	    // TODO: implement Array().indexOf() for Internet Explorer
	    var xIndex = dataX.indexOf(obj.point.x);
	    var yIndex = dataY.indexOf(obj.point.y);

	    if (dataMatrix[xIndex] === undefined) {
	      dataMatrix[xIndex] = [];
	    }

	    dataMatrix[xIndex][yIndex] = obj;
	  }

	  // fill in the pointers to the neighbors.
	  for (x = 0; x < dataMatrix.length; x++) {
	    for (y = 0; y < dataMatrix[x].length; y++) {
	      if (dataMatrix[x][y]) {
	        dataMatrix[x][y].pointRight = x < dataMatrix.length - 1 ? dataMatrix[x + 1][y] : undefined;
	        dataMatrix[x][y].pointTop = y < dataMatrix[x].length - 1 ? dataMatrix[x][y + 1] : undefined;
	        dataMatrix[x][y].pointCross = x < dataMatrix.length - 1 && y < dataMatrix[x].length - 1 ? dataMatrix[x + 1][y + 1] : undefined;
	      }
	    }
	  }

	  return dataPoints;
	};

	/**
	 * Return common information, if present
	 *
	 * @returns {string}
	 */
	DataGroup.prototype.getInfo = function () {
	  var dataFilter = this.dataFilter;
	  if (!dataFilter) return undefined;

	  return dataFilter.getLabel() + ': ' + dataFilter.getSelectedValue();
	};

	/**
	 * Reload the data
	 */
	DataGroup.prototype.reload = function () {
	  if (this.dataTable) {
	    this.setData(this.dataTable);
	  }
	};

	/**
	 * Filter the data based on the current filter
	 *
	 * @param   {Array} data
	 * @returns {Array} dataPoints Array with point objects which can be drawn on
	 *                             screen
	 */
	DataGroup.prototype._getDataPoints = function (data) {
	  var dataPoints = [];

	  if (this.style === Settings.STYLE.GRID || this.style === Settings.STYLE.SURFACE) {
	    dataPoints = this.initDataAsMatrix(data);
	  } else {
	    // 'dot', 'dot-line', etc.
	    this._checkValueField(data);
	    dataPoints = this.getDataPoints(data);

	    if (this.style === Settings.STYLE.LINE) {
	      // Add next member points for line drawing
	      for (var i = 0; i < dataPoints.length; i++) {
	        if (i > 0) {
	          dataPoints[i - 1].pointNext = dataPoints[i];
	        }
	      }
	    }
	  }

	  return dataPoints;
	};

	/**
	 * Check if the state is consistent for the use of the value field.
	 *
	 * Throws if a problem is detected.
	 *
	 * @param {Array.<Object>} data
	 * @private
	 */
	DataGroup.prototype._checkValueField = function (data) {

	  var hasValueField = this.style === Settings.STYLE.BARCOLOR || this.style === Settings.STYLE.BARSIZE || this.style === Settings.STYLE.DOTCOLOR || this.style === Settings.STYLE.DOTSIZE;

	  if (!hasValueField) {
	    return; // No need to check further
	  }

	  // Following field must be present for the current graph style
	  if (this.colValue === undefined) {
	    throw new Error('Expected data to have ' + ' field \'style\' ' + ' for graph style \'' + this.style + '\'');
	  }

	  // The data must also contain this field.
	  // Note that only first data element is checked.
	  if (data[0][this.colValue] === undefined) {
	    throw new Error('Expected data to have ' + ' field \'' + this.colValue + '\' ' + ' for graph style \'' + this.style + '\'');
	  }
	};

	module.exports = DataGroup;

	/***/ }),
	/* 174 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/**
	 * @prototype Range
	 *
	 * Helper class to make working with related min and max values easier.
	 *
	 * The range is inclusive; a given value is considered part of the range if:
	 *
	 *    this.min <= value <= this.max
	 */
	function Range() {
	  this.min = undefined;
	  this.max = undefined;
	}

	/**
	 * Adjust the range so that the passed value fits in it.
	 *
	 * If the value is outside of the current extremes, adjust
	 * the min or max so that the value is within the range.
	 *
	 * @param {number} value Numeric value to fit in range
	 */
	Range.prototype.adjust = function (value) {
	  if (value === undefined) return;

	  if (this.min === undefined || this.min > value) {
	    this.min = value;
	  }

	  if (this.max === undefined || this.max < value) {
	    this.max = value;
	  }
	};

	/**
	 * Adjust the current range so that the passed range fits in it.
	 *
	 * @param {Range} range Range instance to fit in current instance
	 */
	Range.prototype.combine = function (range) {
	  this.add(range.min);
	  this.add(range.max);
	};

	/**
	 * Expand the range by the given value
	 *
	 * min will be lowered by given value;
	 * max will be raised by given value
	 *
	 * Shrinking by passing a negative value is allowed.
	 *
	 * @param {number} val Amount by which to expand or shrink current range with
	 */
	Range.prototype.expand = function (val) {
	  if (val === undefined) {
	    return;
	  }

	  var newMin = this.min - val;
	  var newMax = this.max + val;

	  // Note that following allows newMin === newMax.
	  // This should be OK, since method expand() allows this also.
	  if (newMin > newMax) {
	    throw new Error('Passed expansion value makes range invalid');
	  }

	  this.min = newMin;
	  this.max = newMax;
	};

	/**
	 * Determine the full range width of current instance.
	 *
	 * @returns {num} The calculated width of this range
	 */
	Range.prototype.range = function () {
	  return this.max - this.min;
	};

	/**
	 * Determine the central point of current instance.
	 *
	 * @returns {number} the value in the middle of min and max
	 */
	Range.prototype.center = function () {
	  return (this.min + this.max) / 2;
	};

	module.exports = Range;

	/***/ }),
	/* 175 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

	(function (factory) {
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
					__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
					(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
					__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    // Node. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like Node.
	    module.exports = factory();
	  } else {
	    // Browser globals (root is window)
	    window.propagating = factory();
	  }
	}(function () {
	  var _firstTarget = null; // singleton, will contain the target element where the touch event started

	  /**
	   * Extend an Hammer.js instance with event propagation.
	   *
	   * Features:
	   * - Events emitted by hammer will propagate in order from child to parent
	   *   elements.
	   * - Events are extended with a function `event.stopPropagation()` to stop
	   *   propagation to parent elements.
	   * - An option `preventDefault` to stop all default browser behavior.
	   *
	   * Usage:
	   *   var hammer = propagatingHammer(new Hammer(element));
	   *   var hammer = propagatingHammer(new Hammer(element), {preventDefault: true});
	   *
	   * @param {Hammer.Manager} hammer   An hammer instance.
	   * @param {Object} [options]        Available options:
	   *                                  - `preventDefault: true | false | 'mouse' | 'touch' | 'pen'`.
	   *                                    Enforce preventing the default browser behavior.
	   *                                    Cannot be set to `false`.
	   * @return {Hammer.Manager} Returns the same hammer instance with extended
	   *                          functionality
	   */
	  return function propagating(hammer, options) {
	    var _options = options || {
	      preventDefault: false
	    };

	    if (hammer.Manager) {
	      // This looks like the Hammer constructor.
	      // Overload the constructors with our own.
	      var Hammer = hammer;

	      var PropagatingHammer = function(element, options) {
	        var o = Object.create(_options);
	        if (options) Hammer.assign(o, options);
	        return propagating(new Hammer(element, o), o);
	      };
	      Hammer.assign(PropagatingHammer, Hammer);

	      PropagatingHammer.Manager = function (element, options) {
	        var o = Object.create(_options);
	        if (options) Hammer.assign(o, options);
	        return propagating(new Hammer.Manager(element, o), o);
	      };

	      return PropagatingHammer;
	    }

	    // create a wrapper object which will override the functions
	    // `on`, `off`, `destroy`, and `emit` of the hammer instance
	    var wrapper = Object.create(hammer);

	    // attach to DOM element
	    var element = hammer.element;

	    if(!element.hammer) element.hammer = [];
	    element.hammer.push(wrapper);

	    // register an event to catch the start of a gesture and store the
	    // target in a singleton
	    hammer.on('hammer.input', function (event) {
	      if (_options.preventDefault === true || (_options.preventDefault === event.pointerType)) {
	        event.preventDefault();
	      }
	      if (event.isFirst) {
	        _firstTarget = event.target;
	      }
	    });

	    /** @type {Object.<String, Array.<function>>} */
	    wrapper._handlers = {};

	    /**
	     * Register a handler for one or multiple events
	     * @param {String} events    A space separated string with events
	     * @param {function} handler A callback function, called as handler(event)
	     * @returns {Hammer.Manager} Returns the hammer instance
	     */
	    wrapper.on = function (events, handler) {
	      // register the handler
	      split(events).forEach(function (event) {
	        var _handlers = wrapper._handlers[event];
	        if (!_handlers) {
	          wrapper._handlers[event] = _handlers = [];

	          // register the static, propagated handler
	          hammer.on(event, propagatedHandler);
	        }
	        _handlers.push(handler);
	      });

	      return wrapper;
	    };

	    /**
	     * Unregister a handler for one or multiple events
	     * @param {String} events      A space separated string with events
	     * @param {function} [handler] Optional. The registered handler. If not
	     *                             provided, all handlers for given events
	     *                             are removed.
	     * @returns {Hammer.Manager}   Returns the hammer instance
	     */
	    wrapper.off = function (events, handler) {
	      // unregister the handler
	      split(events).forEach(function (event) {
	        var _handlers = wrapper._handlers[event];
	        if (_handlers) {
	          _handlers = handler ? _handlers.filter(function (h) {
	            return h !== handler;
	          }) : [];

	          if (_handlers.length > 0) {
	            wrapper._handlers[event] = _handlers;
	          }
	          else {
	            // remove static, propagated handler
	            hammer.off(event, propagatedHandler);
	            delete wrapper._handlers[event];
	          }
	        }
	      });

	      return wrapper;
	    };

	    /**
	     * Emit to the event listeners
	     * @param {string} eventType
	     * @param {Event} event
	     */
	    wrapper.emit = function(eventType, event) {
	      _firstTarget = event.target;
	      hammer.emit(eventType, event);
	    };

	    wrapper.destroy = function () {
	      // Detach from DOM element
	      var hammers = hammer.element.hammer;
	      var idx = hammers.indexOf(wrapper);
	      if(idx !== -1) hammers.splice(idx,1);
	      if(!hammers.length) delete hammer.element.hammer;

	      // clear all handlers
	      wrapper._handlers = {};

	      // call original hammer destroy
	      hammer.destroy();
	    };

	    // split a string with space separated words
	    function split(events) {
	      return events.match(/[^ ]+/g);
	    }

	    /**
	     * A static event handler, applying event propagation.
	     * @param {Object} event
	     */
	    function propagatedHandler(event) {
	      // let only a single hammer instance handle this event
	      if (event.type !== 'hammer.input') {
	        // it is possible that the same srcEvent is used with multiple hammer events,
	        // we keep track on which events are handled in an object _handled
	        if (!event.srcEvent._handled) {
	          event.srcEvent._handled = {};
	        }

	        if (event.srcEvent._handled[event.type]) {
	          return;
	        }
	        else {
	          event.srcEvent._handled[event.type] = true;
	        }
	      }

	      // attach a stopPropagation function to the event
	      var stopped = false;
	      event.stopPropagation = function () {
	        stopped = true;
	      };

	      //wrap the srcEvent's stopPropagation to also stop hammer propagation:
	      var srcStop = event.srcEvent.stopPropagation.bind(event.srcEvent);
	      if(typeof srcStop == "function") {
	        event.srcEvent.stopPropagation = function(){
	          srcStop();
	          event.stopPropagation();
	        }
	      }

	      // attach firstTarget property to the event
	      event.firstTarget = _firstTarget;

	      // propagate over all elements (until stopped)
	      var elem = _firstTarget;
	      while (elem && !stopped) {
	        var elemHammer = elem.hammer;
	        if(elemHammer){
	          var _handlers;
	          for(var k = 0; k < elemHammer.length; k++){
	            _handlers = elemHammer[k]._handlers[event.type];
	            if(_handlers) for (var i = 0; i < _handlers.length && !stopped; i++) {
	              _handlers[i](event);
	            }
	          }
	        }
	        elem = elem.parentNode;
	      }
	    }

	    return wrapper;
	  };
	}));


	/***/ }),
	/* 176 */
	/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22
	 * http://hammerjs.github.io/
	 *
	 * Copyright (c) 2016 Jorik Tangelder;
	 * Licensed under the MIT license */
	(function(window, document, exportName, undefined) {
	  'use strict';

	var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
	var TEST_ELEMENT = document.createElement('div');

	var TYPE_FUNCTION = 'function';

	var round = Math.round;
	var abs = Math.abs;
	var now = Date.now;

	/**
	 * set a timeout with a given scope
	 * @param {Function} fn
	 * @param {Number} timeout
	 * @param {Object} context
	 * @returns {number}
	 */
	function setTimeoutContext(fn, timeout, context) {
	    return setTimeout(bindFn(fn, context), timeout);
	}

	/**
	 * if the argument is an array, we want to execute the fn on each entry
	 * if it aint an array we don't want to do a thing.
	 * this is used by all the methods that accept a single and array argument.
	 * @param {*|Array} arg
	 * @param {String} fn
	 * @param {Object} [context]
	 * @returns {Boolean}
	 */
	function invokeArrayArg(arg, fn, context) {
	    if (Array.isArray(arg)) {
	        each(arg, context[fn], context);
	        return true;
	    }
	    return false;
	}

	/**
	 * walk objects and arrays
	 * @param {Object} obj
	 * @param {Function} iterator
	 * @param {Object} context
	 */
	function each(obj, iterator, context) {
	    var i;

	    if (!obj) {
	        return;
	    }

	    if (obj.forEach) {
	        obj.forEach(iterator, context);
	    } else if (obj.length !== undefined) {
	        i = 0;
	        while (i < obj.length) {
	            iterator.call(context, obj[i], i, obj);
	            i++;
	        }
	    } else {
	        for (i in obj) {
	            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
	        }
	    }
	}

	/**
	 * wrap a method with a deprecation warning and stack trace
	 * @param {Function} method
	 * @param {String} name
	 * @param {String} message
	 * @returns {Function} A new function wrapping the supplied method.
	 */
	function deprecate(method, name, message) {
	    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
	    return function() {
	        var e = new Error('get-stack-trace');
	        var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
	            .replace(/^\s+at\s+/gm, '')
	            .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

	        var log = window.console && (window.console.warn || window.console.log);
	        if (log) {
	            log.call(window.console, deprecationMessage, stack);
	        }
	        return method.apply(this, arguments);
	    };
	}

	/**
	 * extend object.
	 * means that properties in dest will be overwritten by the ones in src.
	 * @param {Object} target
	 * @param {...Object} objects_to_assign
	 * @returns {Object} target
	 */
	var assign;
	if (typeof Object.assign !== 'function') {
	    assign = function assign(target) {
	        if (target === undefined || target === null) {
	            throw new TypeError('Cannot convert undefined or null to object');
	        }

	        var output = Object(target);
	        for (var index = 1; index < arguments.length; index++) {
	            var source = arguments[index];
	            if (source !== undefined && source !== null) {
	                for (var nextKey in source) {
	                    if (source.hasOwnProperty(nextKey)) {
	                        output[nextKey] = source[nextKey];
	                    }
	                }
	            }
	        }
	        return output;
	    };
	} else {
	    assign = Object.assign;
	}

	/**
	 * extend object.
	 * means that properties in dest will be overwritten by the ones in src.
	 * @param {Object} dest
	 * @param {Object} src
	 * @param {Boolean} [merge=false]
	 * @returns {Object} dest
	 */
	var extend = deprecate(function extend(dest, src, merge) {
	    var keys = Object.keys(src);
	    var i = 0;
	    while (i < keys.length) {
	        if (!merge || (merge && dest[keys[i]] === undefined)) {
	            dest[keys[i]] = src[keys[i]];
	        }
	        i++;
	    }
	    return dest;
	}, 'extend', 'Use `assign`.');

	/**
	 * merge the values from src in the dest.
	 * means that properties that exist in dest will not be overwritten by src
	 * @param {Object} dest
	 * @param {Object} src
	 * @returns {Object} dest
	 */
	var merge = deprecate(function merge(dest, src) {
	    return extend(dest, src, true);
	}, 'merge', 'Use `assign`.');

	/**
	 * simple class inheritance
	 * @param {Function} child
	 * @param {Function} base
	 * @param {Object} [properties]
	 */
	function inherit(child, base, properties) {
	    var baseP = base.prototype,
	        childP;

	    childP = child.prototype = Object.create(baseP);
	    childP.constructor = child;
	    childP._super = baseP;

	    if (properties) {
	        assign(childP, properties);
	    }
	}

	/**
	 * simple function bind
	 * @param {Function} fn
	 * @param {Object} context
	 * @returns {Function}
	 */
	function bindFn(fn, context) {
	    return function boundFn() {
	        return fn.apply(context, arguments);
	    };
	}

	/**
	 * let a boolean value also be a function that must return a boolean
	 * this first item in args will be used as the context
	 * @param {Boolean|Function} val
	 * @param {Array} [args]
	 * @returns {Boolean}
	 */
	function boolOrFn(val, args) {
	    if (typeof val == TYPE_FUNCTION) {
	        return val.apply(args ? args[0] || undefined : undefined, args);
	    }
	    return val;
	}

	/**
	 * use the val2 when val1 is undefined
	 * @param {*} val1
	 * @param {*} val2
	 * @returns {*}
	 */
	function ifUndefined(val1, val2) {
	    return (val1 === undefined) ? val2 : val1;
	}

	/**
	 * addEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */
	function addEventListeners(target, types, handler) {
	    each(splitStr(types), function(type) {
	        target.addEventListener(type, handler, false);
	    });
	}

	/**
	 * removeEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */
	function removeEventListeners(target, types, handler) {
	    each(splitStr(types), function(type) {
	        target.removeEventListener(type, handler, false);
	    });
	}

	/**
	 * find if a node is in the given parent
	 * @method hasParent
	 * @param {HTMLElement} node
	 * @param {HTMLElement} parent
	 * @return {Boolean} found
	 */
	function hasParent(node, parent) {
	    while (node) {
	        if (node == parent) {
	            return true;
	        }
	        node = node.parentNode;
	    }
	    return false;
	}

	/**
	 * small indexOf wrapper
	 * @param {String} str
	 * @param {String} find
	 * @returns {Boolean} found
	 */
	function inStr(str, find) {
	    return str.indexOf(find) > -1;
	}

	/**
	 * split string on whitespace
	 * @param {String} str
	 * @returns {Array} words
	 */
	function splitStr(str) {
	    return str.trim().split(/\s+/g);
	}

	/**
	 * find if a array contains the object using indexOf or a simple polyFill
	 * @param {Array} src
	 * @param {String} find
	 * @param {String} [findByKey]
	 * @return {Boolean|Number} false when not found, or the index
	 */
	function inArray(src, find, findByKey) {
	    if (src.indexOf && !findByKey) {
	        return src.indexOf(find);
	    } else {
	        var i = 0;
	        while (i < src.length) {
	            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
	                return i;
	            }
	            i++;
	        }
	        return -1;
	    }
	}

	/**
	 * convert array-like objects to real arrays
	 * @param {Object} obj
	 * @returns {Array}
	 */
	function toArray(obj) {
	    return Array.prototype.slice.call(obj, 0);
	}

	/**
	 * unique array with objects based on a key (like 'id') or just by the array's value
	 * @param {Array} src [{id:1},{id:2},{id:1}]
	 * @param {String} [key]
	 * @param {Boolean} [sort=False]
	 * @returns {Array} [{id:1},{id:2}]
	 */
	function uniqueArray(src, key, sort) {
	    var results = [];
	    var values = [];
	    var i = 0;

	    while (i < src.length) {
	        var val = key ? src[i][key] : src[i];
	        if (inArray(values, val) < 0) {
	            results.push(src[i]);
	        }
	        values[i] = val;
	        i++;
	    }

	    if (sort) {
	        if (!key) {
	            results = results.sort();
	        } else {
	            results = results.sort(function sortUniqueArray(a, b) {
	                return a[key] > b[key];
	            });
	        }
	    }

	    return results;
	}

	/**
	 * get the prefixed property
	 * @param {Object} obj
	 * @param {String} property
	 * @returns {String|Undefined} prefixed
	 */
	function prefixed(obj, property) {
	    var prefix, prop;
	    var camelProp = property[0].toUpperCase() + property.slice(1);

	    var i = 0;
	    while (i < VENDOR_PREFIXES.length) {
	        prefix = VENDOR_PREFIXES[i];
	        prop = (prefix) ? prefix + camelProp : property;

	        if (prop in obj) {
	            return prop;
	        }
	        i++;
	    }
	    return undefined;
	}

	/**
	 * get a unique id
	 * @returns {number} uniqueId
	 */
	var _uniqueId = 1;
	function uniqueId() {
	    return _uniqueId++;
	}

	/**
	 * get the window object of an element
	 * @param {HTMLElement} element
	 * @returns {DocumentView|Window}
	 */
	function getWindowForElement(element) {
	    var doc = element.ownerDocument || element;
	    return (doc.defaultView || doc.parentWindow || window);
	}

	var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

	var SUPPORT_TOUCH = ('ontouchstart' in window);
	var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
	var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

	var INPUT_TYPE_TOUCH = 'touch';
	var INPUT_TYPE_PEN = 'pen';
	var INPUT_TYPE_MOUSE = 'mouse';
	var INPUT_TYPE_KINECT = 'kinect';

	var COMPUTE_INTERVAL = 25;

	var INPUT_START = 1;
	var INPUT_MOVE = 2;
	var INPUT_END = 4;
	var INPUT_CANCEL = 8;

	var DIRECTION_NONE = 1;
	var DIRECTION_LEFT = 2;
	var DIRECTION_RIGHT = 4;
	var DIRECTION_UP = 8;
	var DIRECTION_DOWN = 16;

	var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
	var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
	var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

	var PROPS_XY = ['x', 'y'];
	var PROPS_CLIENT_XY = ['clientX', 'clientY'];

	/**
	 * create new input type manager
	 * @param {Manager} manager
	 * @param {Function} callback
	 * @returns {Input}
	 * @constructor
	 */
	function Input(manager, callback) {
	    var self = this;
	    this.manager = manager;
	    this.callback = callback;
	    this.element = manager.element;
	    this.target = manager.options.inputTarget;

	    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
	    // so when disabled the input events are completely bypassed.
	    this.domHandler = function(ev) {
	        if (boolOrFn(manager.options.enable, [manager])) {
	            self.handler(ev);
	        }
	    };

	    this.init();

	}

	Input.prototype = {
	    /**
	     * should handle the inputEvent data and trigger the callback
	     * @virtual
	     */
	    handler: function() { },

	    /**
	     * bind the events
	     */
	    init: function() {
	        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
	        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
	        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	    },

	    /**
	     * unbind the events
	     */
	    destroy: function() {
	        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
	        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
	        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	    }
	};

	/**
	 * create new input type manager
	 * called by the Manager constructor
	 * @param {Hammer} manager
	 * @returns {Input}
	 */
	function createInputInstance(manager) {
	    var Type;
	    var inputClass = manager.options.inputClass;

	    if (inputClass) {
	        Type = inputClass;
	    } else if (SUPPORT_POINTER_EVENTS) {
	        Type = PointerEventInput;
	    } else if (SUPPORT_ONLY_TOUCH) {
	        Type = TouchInput;
	    } else if (!SUPPORT_TOUCH) {
	        Type = MouseInput;
	    } else {
	        Type = TouchMouseInput;
	    }
	    return new (Type)(manager, inputHandler);
	}

	/**
	 * handle input events
	 * @param {Manager} manager
	 * @param {String} eventType
	 * @param {Object} input
	 */
	function inputHandler(manager, eventType, input) {
	    var pointersLen = input.pointers.length;
	    var changedPointersLen = input.changedPointers.length;
	    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
	    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

	    input.isFirst = !!isFirst;
	    input.isFinal = !!isFinal;

	    if (isFirst) {
	        manager.session = {};
	    }

	    // source event is the normalized value of the domEvents
	    // like 'touchstart, mouseup, pointerdown'
	    input.eventType = eventType;

	    // compute scale, rotation etc
	    computeInputData(manager, input);

	    // emit secret event
	    manager.emit('hammer.input', input);

	    manager.recognize(input);
	    manager.session.prevInput = input;
	}

	/**
	 * extend the data with some usable properties like scale, rotate, velocity etc
	 * @param {Object} manager
	 * @param {Object} input
	 */
	function computeInputData(manager, input) {
	    var session = manager.session;
	    var pointers = input.pointers;
	    var pointersLength = pointers.length;

	    // store the first input to calculate the distance and direction
	    if (!session.firstInput) {
	        session.firstInput = simpleCloneInputData(input);
	    }

	    // to compute scale and rotation we need to store the multiple touches
	    if (pointersLength > 1 && !session.firstMultiple) {
	        session.firstMultiple = simpleCloneInputData(input);
	    } else if (pointersLength === 1) {
	        session.firstMultiple = false;
	    }

	    var firstInput = session.firstInput;
	    var firstMultiple = session.firstMultiple;
	    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

	    var center = input.center = getCenter(pointers);
	    input.timeStamp = now();
	    input.deltaTime = input.timeStamp - firstInput.timeStamp;

	    input.angle = getAngle(offsetCenter, center);
	    input.distance = getDistance(offsetCenter, center);

	    computeDeltaXY(session, input);
	    input.offsetDirection = getDirection(input.deltaX, input.deltaY);

	    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
	    input.overallVelocityX = overallVelocity.x;
	    input.overallVelocityY = overallVelocity.y;
	    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

	    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
	    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

	    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
	        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

	    computeIntervalInputData(session, input);

	    // find the correct target
	    var target = manager.element;
	    if (hasParent(input.srcEvent.target, target)) {
	        target = input.srcEvent.target;
	    }
	    input.target = target;
	}

	function computeDeltaXY(session, input) {
	    var center = input.center;
	    var offset = session.offsetDelta || {};
	    var prevDelta = session.prevDelta || {};
	    var prevInput = session.prevInput || {};

	    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
	        prevDelta = session.prevDelta = {
	            x: prevInput.deltaX || 0,
	            y: prevInput.deltaY || 0
	        };

	        offset = session.offsetDelta = {
	            x: center.x,
	            y: center.y
	        };
	    }

	    input.deltaX = prevDelta.x + (center.x - offset.x);
	    input.deltaY = prevDelta.y + (center.y - offset.y);
	}

	/**
	 * velocity is calculated every x ms
	 * @param {Object} session
	 * @param {Object} input
	 */
	function computeIntervalInputData(session, input) {
	    var last = session.lastInterval || input,
	        deltaTime = input.timeStamp - last.timeStamp,
	        velocity, velocityX, velocityY, direction;

	    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
	        var deltaX = input.deltaX - last.deltaX;
	        var deltaY = input.deltaY - last.deltaY;

	        var v = getVelocity(deltaTime, deltaX, deltaY);
	        velocityX = v.x;
	        velocityY = v.y;
	        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
	        direction = getDirection(deltaX, deltaY);

	        session.lastInterval = input;
	    } else {
	        // use latest velocity info if it doesn't overtake a minimum period
	        velocity = last.velocity;
	        velocityX = last.velocityX;
	        velocityY = last.velocityY;
	        direction = last.direction;
	    }

	    input.velocity = velocity;
	    input.velocityX = velocityX;
	    input.velocityY = velocityY;
	    input.direction = direction;
	}

	/**
	 * create a simple clone from the input used for storage of firstInput and firstMultiple
	 * @param {Object} input
	 * @returns {Object} clonedInputData
	 */
	function simpleCloneInputData(input) {
	    // make a simple copy of the pointers because we will get a reference if we don't
	    // we only need clientXY for the calculations
	    var pointers = [];
	    var i = 0;
	    while (i < input.pointers.length) {
	        pointers[i] = {
	            clientX: round(input.pointers[i].clientX),
	            clientY: round(input.pointers[i].clientY)
	        };
	        i++;
	    }

	    return {
	        timeStamp: now(),
	        pointers: pointers,
	        center: getCenter(pointers),
	        deltaX: input.deltaX,
	        deltaY: input.deltaY
	    };
	}

	/**
	 * get the center of all the pointers
	 * @param {Array} pointers
	 * @return {Object} center contains `x` and `y` properties
	 */
	function getCenter(pointers) {
	    var pointersLength = pointers.length;

	    // no need to loop when only one touch
	    if (pointersLength === 1) {
	        return {
	            x: round(pointers[0].clientX),
	            y: round(pointers[0].clientY)
	        };
	    }

	    var x = 0, y = 0, i = 0;
	    while (i < pointersLength) {
	        x += pointers[i].clientX;
	        y += pointers[i].clientY;
	        i++;
	    }

	    return {
	        x: round(x / pointersLength),
	        y: round(y / pointersLength)
	    };
	}

	/**
	 * calculate the velocity between two points. unit is in px per ms.
	 * @param {Number} deltaTime
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Object} velocity `x` and `y`
	 */
	function getVelocity(deltaTime, x, y) {
	    return {
	        x: x / deltaTime || 0,
	        y: y / deltaTime || 0
	    };
	}

	/**
	 * get the direction between two points
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Number} direction
	 */
	function getDirection(x, y) {
	    if (x === y) {
	        return DIRECTION_NONE;
	    }

	    if (abs(x) >= abs(y)) {
	        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
	    }
	    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
	}

	/**
	 * calculate the absolute distance between two points
	 * @param {Object} p1 {x, y}
	 * @param {Object} p2 {x, y}
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} distance
	 */
	function getDistance(p1, p2, props) {
	    if (!props) {
	        props = PROPS_XY;
	    }
	    var x = p2[props[0]] - p1[props[0]],
	        y = p2[props[1]] - p1[props[1]];

	    return Math.sqrt((x * x) + (y * y));
	}

	/**
	 * calculate the angle between two coordinates
	 * @param {Object} p1
	 * @param {Object} p2
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} angle
	 */
	function getAngle(p1, p2, props) {
	    if (!props) {
	        props = PROPS_XY;
	    }
	    var x = p2[props[0]] - p1[props[0]],
	        y = p2[props[1]] - p1[props[1]];
	    return Math.atan2(y, x) * 180 / Math.PI;
	}

	/**
	 * calculate the rotation degrees between two pointersets
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} rotation
	 */
	function getRotation(start, end) {
	    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
	}

	/**
	 * calculate the scale factor between two pointersets
	 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} scale
	 */
	function getScale(start, end) {
	    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
	}

	var MOUSE_INPUT_MAP = {
	    mousedown: INPUT_START,
	    mousemove: INPUT_MOVE,
	    mouseup: INPUT_END
	};

	var MOUSE_ELEMENT_EVENTS = 'mousedown';
	var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

	/**
	 * Mouse events input
	 * @constructor
	 * @extends Input
	 */
	function MouseInput() {
	    this.evEl = MOUSE_ELEMENT_EVENTS;
	    this.evWin = MOUSE_WINDOW_EVENTS;

	    this.pressed = false; // mousedown state

	    Input.apply(this, arguments);
	}

	inherit(MouseInput, Input, {
	    /**
	     * handle mouse events
	     * @param {Object} ev
	     */
	    handler: function MEhandler(ev) {
	        var eventType = MOUSE_INPUT_MAP[ev.type];

	        // on start we want to have the left mouse button down
	        if (eventType & INPUT_START && ev.button === 0) {
	            this.pressed = true;
	        }

	        if (eventType & INPUT_MOVE && ev.which !== 1) {
	            eventType = INPUT_END;
	        }

	        // mouse must be down
	        if (!this.pressed) {
	            return;
	        }

	        if (eventType & INPUT_END) {
	            this.pressed = false;
	        }

	        this.callback(this.manager, eventType, {
	            pointers: [ev],
	            changedPointers: [ev],
	            pointerType: INPUT_TYPE_MOUSE,
	            srcEvent: ev
	        });
	    }
	});

	var POINTER_INPUT_MAP = {
	    pointerdown: INPUT_START,
	    pointermove: INPUT_MOVE,
	    pointerup: INPUT_END,
	    pointercancel: INPUT_CANCEL,
	    pointerout: INPUT_CANCEL
	};

	// in IE10 the pointer types is defined as an enum
	var IE10_POINTER_TYPE_ENUM = {
	    2: INPUT_TYPE_TOUCH,
	    3: INPUT_TYPE_PEN,
	    4: INPUT_TYPE_MOUSE,
	    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
	};

	var POINTER_ELEMENT_EVENTS = 'pointerdown';
	var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

	// IE10 has prefixed support, and case-sensitive
	if (window.MSPointerEvent && !window.PointerEvent) {
	    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
	    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
	}

	/**
	 * Pointer events input
	 * @constructor
	 * @extends Input
	 */
	function PointerEventInput() {
	    this.evEl = POINTER_ELEMENT_EVENTS;
	    this.evWin = POINTER_WINDOW_EVENTS;

	    Input.apply(this, arguments);

	    this.store = (this.manager.session.pointerEvents = []);
	}

	inherit(PointerEventInput, Input, {
	    /**
	     * handle mouse events
	     * @param {Object} ev
	     */
	    handler: function PEhandler(ev) {
	        var store = this.store;
	        var removePointer = false;

	        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
	        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
	        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

	        var isTouch = (pointerType == INPUT_TYPE_TOUCH);

	        // get index of the event in the store
	        var storeIndex = inArray(store, ev.pointerId, 'pointerId');

	        // start and mouse must be down
	        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
	            if (storeIndex < 0) {
	                store.push(ev);
	                storeIndex = store.length - 1;
	            }
	        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
	            removePointer = true;
	        }

	        // it not found, so the pointer hasn't been down (so it's probably a hover)
	        if (storeIndex < 0) {
	            return;
	        }

	        // update the event in the store
	        store[storeIndex] = ev;

	        this.callback(this.manager, eventType, {
	            pointers: store,
	            changedPointers: [ev],
	            pointerType: pointerType,
	            srcEvent: ev
	        });

	        if (removePointer) {
	            // remove from the store
	            store.splice(storeIndex, 1);
	        }
	    }
	});

	var SINGLE_TOUCH_INPUT_MAP = {
	    touchstart: INPUT_START,
	    touchmove: INPUT_MOVE,
	    touchend: INPUT_END,
	    touchcancel: INPUT_CANCEL
	};

	var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
	var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

	/**
	 * Touch events input
	 * @constructor
	 * @extends Input
	 */
	function SingleTouchInput() {
	    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
	    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
	    this.started = false;

	    Input.apply(this, arguments);
	}

	inherit(SingleTouchInput, Input, {
	    handler: function TEhandler(ev) {
	        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

	        // should we handle the touch events?
	        if (type === INPUT_START) {
	            this.started = true;
	        }

	        if (!this.started) {
	            return;
	        }

	        var touches = normalizeSingleTouches.call(this, ev, type);

	        // when done, reset the started state
	        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
	            this.started = false;
	        }

	        this.callback(this.manager, type, {
	            pointers: touches[0],
	            changedPointers: touches[1],
	            pointerType: INPUT_TYPE_TOUCH,
	            srcEvent: ev
	        });
	    }
	});

	/**
	 * @this {TouchInput}
	 * @param {Object} ev
	 * @param {Number} type flag
	 * @returns {undefined|Array} [all, changed]
	 */
	function normalizeSingleTouches(ev, type) {
	    var all = toArray(ev.touches);
	    var changed = toArray(ev.changedTouches);

	    if (type & (INPUT_END | INPUT_CANCEL)) {
	        all = uniqueArray(all.concat(changed), 'identifier', true);
	    }

	    return [all, changed];
	}

	var TOUCH_INPUT_MAP = {
	    touchstart: INPUT_START,
	    touchmove: INPUT_MOVE,
	    touchend: INPUT_END,
	    touchcancel: INPUT_CANCEL
	};

	var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

	/**
	 * Multi-user touch events input
	 * @constructor
	 * @extends Input
	 */
	function TouchInput() {
	    this.evTarget = TOUCH_TARGET_EVENTS;
	    this.targetIds = {};

	    Input.apply(this, arguments);
	}

	inherit(TouchInput, Input, {
	    handler: function MTEhandler(ev) {
	        var type = TOUCH_INPUT_MAP[ev.type];
	        var touches = getTouches.call(this, ev, type);
	        if (!touches) {
	            return;
	        }

	        this.callback(this.manager, type, {
	            pointers: touches[0],
	            changedPointers: touches[1],
	            pointerType: INPUT_TYPE_TOUCH,
	            srcEvent: ev
	        });
	    }
	});

	/**
	 * @this {TouchInput}
	 * @param {Object} ev
	 * @param {Number} type flag
	 * @returns {undefined|Array} [all, changed]
	 */
	function getTouches(ev, type) {
	    var allTouches = toArray(ev.touches);
	    var targetIds = this.targetIds;

	    // when there is only one touch, the process can be simplified
	    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
	        targetIds[allTouches[0].identifier] = true;
	        return [allTouches, allTouches];
	    }

	    var i,
	        targetTouches,
	        changedTouches = toArray(ev.changedTouches),
	        changedTargetTouches = [],
	        target = this.target;

	    // get target touches from touches
	    targetTouches = allTouches.filter(function(touch) {
	        return hasParent(touch.target, target);
	    });

	    // collect touches
	    if (type === INPUT_START) {
	        i = 0;
	        while (i < targetTouches.length) {
	            targetIds[targetTouches[i].identifier] = true;
	            i++;
	        }
	    }

	    // filter changed touches to only contain touches that exist in the collected target ids
	    i = 0;
	    while (i < changedTouches.length) {
	        if (targetIds[changedTouches[i].identifier]) {
	            changedTargetTouches.push(changedTouches[i]);
	        }

	        // cleanup removed touches
	        if (type & (INPUT_END | INPUT_CANCEL)) {
	            delete targetIds[changedTouches[i].identifier];
	        }
	        i++;
	    }

	    if (!changedTargetTouches.length) {
	        return;
	    }

	    return [
	        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
	        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
	        changedTargetTouches
	    ];
	}

	/**
	 * Combined touch and mouse input
	 *
	 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
	 * This because touch devices also emit mouse events while doing a touch.
	 *
	 * @constructor
	 * @extends Input
	 */

	var DEDUP_TIMEOUT = 2500;
	var DEDUP_DISTANCE = 25;

	function TouchMouseInput() {
	    Input.apply(this, arguments);

	    var handler = bindFn(this.handler, this);
	    this.touch = new TouchInput(this.manager, handler);
	    this.mouse = new MouseInput(this.manager, handler);

	    this.primaryTouch = null;
	    this.lastTouches = [];
	}

	inherit(TouchMouseInput, Input, {
	    /**
	     * handle mouse and touch events
	     * @param {Hammer} manager
	     * @param {String} inputEvent
	     * @param {Object} inputData
	     */
	    handler: function TMEhandler(manager, inputEvent, inputData) {
	        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
	            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

	        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
	            return;
	        }

	        // when we're in a touch event, record touches to  de-dupe synthetic mouse event
	        if (isTouch) {
	            recordTouches.call(this, inputEvent, inputData);
	        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
	            return;
	        }

	        this.callback(manager, inputEvent, inputData);
	    },

	    /**
	     * remove the event listeners
	     */
	    destroy: function destroy() {
	        this.touch.destroy();
	        this.mouse.destroy();
	    }
	});

	function recordTouches(eventType, eventData) {
	    if (eventType & INPUT_START) {
	        this.primaryTouch = eventData.changedPointers[0].identifier;
	        setLastTouch.call(this, eventData);
	    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
	        setLastTouch.call(this, eventData);
	    }
	}

	function setLastTouch(eventData) {
	    var touch = eventData.changedPointers[0];

	    if (touch.identifier === this.primaryTouch) {
	        var lastTouch = {x: touch.clientX, y: touch.clientY};
	        this.lastTouches.push(lastTouch);
	        var lts = this.lastTouches;
	        var removeLastTouch = function() {
	            var i = lts.indexOf(lastTouch);
	            if (i > -1) {
	                lts.splice(i, 1);
	            }
	        };
	        setTimeout(removeLastTouch, DEDUP_TIMEOUT);
	    }
	}

	function isSyntheticEvent(eventData) {
	    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
	    for (var i = 0; i < this.lastTouches.length; i++) {
	        var t = this.lastTouches[i];
	        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
	        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
	            return true;
	        }
	    }
	    return false;
	}

	var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
	var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

	// magical touchAction value
	var TOUCH_ACTION_COMPUTE = 'compute';
	var TOUCH_ACTION_AUTO = 'auto';
	var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
	var TOUCH_ACTION_NONE = 'none';
	var TOUCH_ACTION_PAN_X = 'pan-x';
	var TOUCH_ACTION_PAN_Y = 'pan-y';
	var TOUCH_ACTION_MAP = getTouchActionProps();

	/**
	 * Touch Action
	 * sets the touchAction property or uses the js alternative
	 * @param {Manager} manager
	 * @param {String} value
	 * @constructor
	 */
	function TouchAction(manager, value) {
	    this.manager = manager;
	    this.set(value);
	}

	TouchAction.prototype = {
	    /**
	     * set the touchAction value on the element or enable the polyfill
	     * @param {String} value
	     */
	    set: function(value) {
	        // find out the touch-action by the event handlers
	        if (value == TOUCH_ACTION_COMPUTE) {
	            value = this.compute();
	        }

	        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
	            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
	        }
	        this.actions = value.toLowerCase().trim();
	    },

	    /**
	     * just re-set the touchAction value
	     */
	    update: function() {
	        this.set(this.manager.options.touchAction);
	    },

	    /**
	     * compute the value for the touchAction property based on the recognizer's settings
	     * @returns {String} value
	     */
	    compute: function() {
	        var actions = [];
	        each(this.manager.recognizers, function(recognizer) {
	            if (boolOrFn(recognizer.options.enable, [recognizer])) {
	                actions = actions.concat(recognizer.getTouchAction());
	            }
	        });
	        return cleanTouchActions(actions.join(' '));
	    },

	    /**
	     * this method is called on each input cycle and provides the preventing of the browser behavior
	     * @param {Object} input
	     */
	    preventDefaults: function(input) {
	        var srcEvent = input.srcEvent;
	        var direction = input.offsetDirection;

	        // if the touch action did prevented once this session
	        if (this.manager.session.prevented) {
	            srcEvent.preventDefault();
	            return;
	        }

	        var actions = this.actions;
	        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
	        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
	        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

	        if (hasNone) {
	            //do not prevent defaults if this is a tap gesture

	            var isTapPointer = input.pointers.length === 1;
	            var isTapMovement = input.distance < 2;
	            var isTapTouchTime = input.deltaTime < 250;

	            if (isTapPointer && isTapMovement && isTapTouchTime) {
	                return;
	            }
	        }

	        if (hasPanX && hasPanY) {
	            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
	            return;
	        }

	        if (hasNone ||
	            (hasPanY && direction & DIRECTION_HORIZONTAL) ||
	            (hasPanX && direction & DIRECTION_VERTICAL)) {
	            return this.preventSrc(srcEvent);
	        }
	    },

	    /**
	     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
	     * @param {Object} srcEvent
	     */
	    preventSrc: function(srcEvent) {
	        this.manager.session.prevented = true;
	        srcEvent.preventDefault();
	    }
	};

	/**
	 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
	 * @param {String} actions
	 * @returns {*}
	 */
	function cleanTouchActions(actions) {
	    // none
	    if (inStr(actions, TOUCH_ACTION_NONE)) {
	        return TOUCH_ACTION_NONE;
	    }

	    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
	    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

	    // if both pan-x and pan-y are set (different recognizers
	    // for different directions, e.g. horizontal pan but vertical swipe?)
	    // we need none (as otherwise with pan-x pan-y combined none of these
	    // recognizers will work, since the browser would handle all panning
	    if (hasPanX && hasPanY) {
	        return TOUCH_ACTION_NONE;
	    }

	    // pan-x OR pan-y
	    if (hasPanX || hasPanY) {
	        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
	    }

	    // manipulation
	    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
	        return TOUCH_ACTION_MANIPULATION;
	    }

	    return TOUCH_ACTION_AUTO;
	}

	function getTouchActionProps() {
	    if (!NATIVE_TOUCH_ACTION) {
	        return false;
	    }
	    var touchMap = {};
	    var cssSupports = window.CSS && window.CSS.supports;
	    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {

	        // If css.supports is not supported but there is native touch-action assume it supports
	        // all values. This is the case for IE 10 and 11.
	        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
	    });
	    return touchMap;
	}

	/**
	 * Recognizer flow explained; *
	 * All recognizers have the initial state of POSSIBLE when a input session starts.
	 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
	 * Example session for mouse-input: mousedown -> mousemove -> mouseup
	 *
	 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
	 * which determines with state it should be.
	 *
	 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
	 * POSSIBLE to give it another change on the next cycle.
	 *
	 *               Possible
	 *                  |
	 *            +-----+---------------+
	 *            |                     |
	 *      +-----+-----+               |
	 *      |           |               |
	 *   Failed      Cancelled          |
	 *                          +-------+------+
	 *                          |              |
	 *                      Recognized       Began
	 *                                         |
	 *                                      Changed
	 *                                         |
	 *                                  Ended/Recognized
	 */
	var STATE_POSSIBLE = 1;
	var STATE_BEGAN = 2;
	var STATE_CHANGED = 4;
	var STATE_ENDED = 8;
	var STATE_RECOGNIZED = STATE_ENDED;
	var STATE_CANCELLED = 16;
	var STATE_FAILED = 32;

	/**
	 * Recognizer
	 * Every recognizer needs to extend from this class.
	 * @constructor
	 * @param {Object} options
	 */
	function Recognizer(options) {
	    this.options = assign({}, this.defaults, options || {});

	    this.id = uniqueId();

	    this.manager = null;

	    // default is enable true
	    this.options.enable = ifUndefined(this.options.enable, true);

	    this.state = STATE_POSSIBLE;

	    this.simultaneous = {};
	    this.requireFail = [];
	}

	Recognizer.prototype = {
	    /**
	     * @virtual
	     * @type {Object}
	     */
	    defaults: {},

	    /**
	     * set options
	     * @param {Object} options
	     * @return {Recognizer}
	     */
	    set: function(options) {
	        assign(this.options, options);

	        // also update the touchAction, in case something changed about the directions/enabled state
	        this.manager && this.manager.touchAction.update();
	        return this;
	    },

	    /**
	     * recognize simultaneous with an other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    recognizeWith: function(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
	            return this;
	        }

	        var simultaneous = this.simultaneous;
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        if (!simultaneous[otherRecognizer.id]) {
	            simultaneous[otherRecognizer.id] = otherRecognizer;
	            otherRecognizer.recognizeWith(this);
	        }
	        return this;
	    },

	    /**
	     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    dropRecognizeWith: function(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
	            return this;
	        }

	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        delete this.simultaneous[otherRecognizer.id];
	        return this;
	    },

	    /**
	     * recognizer can only run when an other is failing
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    requireFailure: function(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
	            return this;
	        }

	        var requireFail = this.requireFail;
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        if (inArray(requireFail, otherRecognizer) === -1) {
	            requireFail.push(otherRecognizer);
	            otherRecognizer.requireFailure(this);
	        }
	        return this;
	    },

	    /**
	     * drop the requireFailure link. it does not remove the link on the other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    dropRequireFailure: function(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
	            return this;
	        }

	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        var index = inArray(this.requireFail, otherRecognizer);
	        if (index > -1) {
	            this.requireFail.splice(index, 1);
	        }
	        return this;
	    },

	    /**
	     * has require failures boolean
	     * @returns {boolean}
	     */
	    hasRequireFailures: function() {
	        return this.requireFail.length > 0;
	    },

	    /**
	     * if the recognizer can recognize simultaneous with an other recognizer
	     * @param {Recognizer} otherRecognizer
	     * @returns {Boolean}
	     */
	    canRecognizeWith: function(otherRecognizer) {
	        return !!this.simultaneous[otherRecognizer.id];
	    },

	    /**
	     * You should use `tryEmit` instead of `emit` directly to check
	     * that all the needed recognizers has failed before emitting.
	     * @param {Object} input
	     */
	    emit: function(input) {
	        var self = this;
	        var state = this.state;

	        function emit(event) {
	            self.manager.emit(event, input);
	        }

	        // 'panstart' and 'panmove'
	        if (state < STATE_ENDED) {
	            emit(self.options.event + stateStr(state));
	        }

	        emit(self.options.event); // simple 'eventName' events

	        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
	            emit(input.additionalEvent);
	        }

	        // panend and pancancel
	        if (state >= STATE_ENDED) {
	            emit(self.options.event + stateStr(state));
	        }
	    },

	    /**
	     * Check that all the require failure recognizers has failed,
	     * if true, it emits a gesture event,
	     * otherwise, setup the state to FAILED.
	     * @param {Object} input
	     */
	    tryEmit: function(input) {
	        if (this.canEmit()) {
	            return this.emit(input);
	        }
	        // it's failing anyway
	        this.state = STATE_FAILED;
	    },

	    /**
	     * can we emit?
	     * @returns {boolean}
	     */
	    canEmit: function() {
	        var i = 0;
	        while (i < this.requireFail.length) {
	            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
	                return false;
	            }
	            i++;
	        }
	        return true;
	    },

	    /**
	     * update the recognizer
	     * @param {Object} inputData
	     */
	    recognize: function(inputData) {
	        // make a new copy of the inputData
	        // so we can change the inputData without messing up the other recognizers
	        var inputDataClone = assign({}, inputData);

	        // is is enabled and allow recognizing?
	        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
	            this.reset();
	            this.state = STATE_FAILED;
	            return;
	        }

	        // reset when we've reached the end
	        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
	            this.state = STATE_POSSIBLE;
	        }

	        this.state = this.process(inputDataClone);

	        // the recognizer has recognized a gesture
	        // so trigger an event
	        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
	            this.tryEmit(inputDataClone);
	        }
	    },

	    /**
	     * return the state of the recognizer
	     * the actual recognizing happens in this method
	     * @virtual
	     * @param {Object} inputData
	     * @returns {Const} STATE
	     */
	    process: function(inputData) { }, // jshint ignore:line

	    /**
	     * return the preferred touch-action
	     * @virtual
	     * @returns {Array}
	     */
	    getTouchAction: function() { },

	    /**
	     * called when the gesture isn't allowed to recognize
	     * like when another is being recognized or it is disabled
	     * @virtual
	     */
	    reset: function() { }
	};

	/**
	 * get a usable string, used as event postfix
	 * @param {Const} state
	 * @returns {String} state
	 */
	function stateStr(state) {
	    if (state & STATE_CANCELLED) {
	        return 'cancel';
	    } else if (state & STATE_ENDED) {
	        return 'end';
	    } else if (state & STATE_CHANGED) {
	        return 'move';
	    } else if (state & STATE_BEGAN) {
	        return 'start';
	    }
	    return '';
	}

	/**
	 * direction cons to string
	 * @param {Const} direction
	 * @returns {String}
	 */
	function directionStr(direction) {
	    if (direction == DIRECTION_DOWN) {
	        return 'down';
	    } else if (direction == DIRECTION_UP) {
	        return 'up';
	    } else if (direction == DIRECTION_LEFT) {
	        return 'left';
	    } else if (direction == DIRECTION_RIGHT) {
	        return 'right';
	    }
	    return '';
	}

	/**
	 * get a recognizer by name if it is bound to a manager
	 * @param {Recognizer|String} otherRecognizer
	 * @param {Recognizer} recognizer
	 * @returns {Recognizer}
	 */
	function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
	    var manager = recognizer.manager;
	    if (manager) {
	        return manager.get(otherRecognizer);
	    }
	    return otherRecognizer;
	}

	/**
	 * This recognizer is just used as a base for the simple attribute recognizers.
	 * @constructor
	 * @extends Recognizer
	 */
	function AttrRecognizer() {
	    Recognizer.apply(this, arguments);
	}

	inherit(AttrRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof AttrRecognizer
	     */
	    defaults: {
	        /**
	         * @type {Number}
	         * @default 1
	         */
	        pointers: 1
	    },

	    /**
	     * Used to check if it the recognizer receives valid input, like input.distance > 10.
	     * @memberof AttrRecognizer
	     * @param {Object} input
	     * @returns {Boolean} recognized
	     */
	    attrTest: function(input) {
	        var optionPointers = this.options.pointers;
	        return optionPointers === 0 || input.pointers.length === optionPointers;
	    },

	    /**
	     * Process the input and return the state for the recognizer
	     * @memberof AttrRecognizer
	     * @param {Object} input
	     * @returns {*} State
	     */
	    process: function(input) {
	        var state = this.state;
	        var eventType = input.eventType;

	        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
	        var isValid = this.attrTest(input);

	        // on cancel input and we've recognized before, return STATE_CANCELLED
	        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
	            return state | STATE_CANCELLED;
	        } else if (isRecognized || isValid) {
	            if (eventType & INPUT_END) {
	                return state | STATE_ENDED;
	            } else if (!(state & STATE_BEGAN)) {
	                return STATE_BEGAN;
	            }
	            return state | STATE_CHANGED;
	        }
	        return STATE_FAILED;
	    }
	});

	/**
	 * Pan
	 * Recognized when the pointer is down and moved in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function PanRecognizer() {
	    AttrRecognizer.apply(this, arguments);

	    this.pX = null;
	    this.pY = null;
	}

	inherit(PanRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof PanRecognizer
	     */
	    defaults: {
	        event: 'pan',
	        threshold: 10,
	        pointers: 1,
	        direction: DIRECTION_ALL
	    },

	    getTouchAction: function() {
	        var direction = this.options.direction;
	        var actions = [];
	        if (direction & DIRECTION_HORIZONTAL) {
	            actions.push(TOUCH_ACTION_PAN_Y);
	        }
	        if (direction & DIRECTION_VERTICAL) {
	            actions.push(TOUCH_ACTION_PAN_X);
	        }
	        return actions;
	    },

	    directionTest: function(input) {
	        var options = this.options;
	        var hasMoved = true;
	        var distance = input.distance;
	        var direction = input.direction;
	        var x = input.deltaX;
	        var y = input.deltaY;

	        // lock to axis?
	        if (!(direction & options.direction)) {
	            if (options.direction & DIRECTION_HORIZONTAL) {
	                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
	                hasMoved = x != this.pX;
	                distance = Math.abs(input.deltaX);
	            } else {
	                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
	                hasMoved = y != this.pY;
	                distance = Math.abs(input.deltaY);
	            }
	        }
	        input.direction = direction;
	        return hasMoved && distance > options.threshold && direction & options.direction;
	    },

	    attrTest: function(input) {
	        return AttrRecognizer.prototype.attrTest.call(this, input) &&
	            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
	    },

	    emit: function(input) {

	        this.pX = input.deltaX;
	        this.pY = input.deltaY;

	        var direction = directionStr(input.direction);

	        if (direction) {
	            input.additionalEvent = this.options.event + direction;
	        }
	        this._super.emit.call(this, input);
	    }
	});

	/**
	 * Pinch
	 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function PinchRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}

	inherit(PinchRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof PinchRecognizer
	     */
	    defaults: {
	        event: 'pinch',
	        threshold: 0,
	        pointers: 2
	    },

	    getTouchAction: function() {
	        return [TOUCH_ACTION_NONE];
	    },

	    attrTest: function(input) {
	        return this._super.attrTest.call(this, input) &&
	            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
	    },

	    emit: function(input) {
	        if (input.scale !== 1) {
	            var inOut = input.scale < 1 ? 'in' : 'out';
	            input.additionalEvent = this.options.event + inOut;
	        }
	        this._super.emit.call(this, input);
	    }
	});

	/**
	 * Press
	 * Recognized when the pointer is down for x ms without any movement.
	 * @constructor
	 * @extends Recognizer
	 */
	function PressRecognizer() {
	    Recognizer.apply(this, arguments);

	    this._timer = null;
	    this._input = null;
	}

	inherit(PressRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof PressRecognizer
	     */
	    defaults: {
	        event: 'press',
	        pointers: 1,
	        time: 251, // minimal time of the pointer to be pressed
	        threshold: 9 // a minimal movement is ok, but keep it low
	    },

	    getTouchAction: function() {
	        return [TOUCH_ACTION_AUTO];
	    },

	    process: function(input) {
	        var options = this.options;
	        var validPointers = input.pointers.length === options.pointers;
	        var validMovement = input.distance < options.threshold;
	        var validTime = input.deltaTime > options.time;

	        this._input = input;

	        // we only allow little movement
	        // and we've reached an end event, so a tap is possible
	        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
	            this.reset();
	        } else if (input.eventType & INPUT_START) {
	            this.reset();
	            this._timer = setTimeoutContext(function() {
	                this.state = STATE_RECOGNIZED;
	                this.tryEmit();
	            }, options.time, this);
	        } else if (input.eventType & INPUT_END) {
	            return STATE_RECOGNIZED;
	        }
	        return STATE_FAILED;
	    },

	    reset: function() {
	        clearTimeout(this._timer);
	    },

	    emit: function(input) {
	        if (this.state !== STATE_RECOGNIZED) {
	            return;
	        }

	        if (input && (input.eventType & INPUT_END)) {
	            this.manager.emit(this.options.event + 'up', input);
	        } else {
	            this._input.timeStamp = now();
	            this.manager.emit(this.options.event, this._input);
	        }
	    }
	});

	/**
	 * Rotate
	 * Recognized when two or more pointer are moving in a circular motion.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function RotateRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}

	inherit(RotateRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof RotateRecognizer
	     */
	    defaults: {
	        event: 'rotate',
	        threshold: 0,
	        pointers: 2
	    },

	    getTouchAction: function() {
	        return [TOUCH_ACTION_NONE];
	    },

	    attrTest: function(input) {
	        return this._super.attrTest.call(this, input) &&
	            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
	    }
	});

	/**
	 * Swipe
	 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function SwipeRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}

	inherit(SwipeRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof SwipeRecognizer
	     */
	    defaults: {
	        event: 'swipe',
	        threshold: 10,
	        velocity: 0.3,
	        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
	        pointers: 1
	    },

	    getTouchAction: function() {
	        return PanRecognizer.prototype.getTouchAction.call(this);
	    },

	    attrTest: function(input) {
	        var direction = this.options.direction;
	        var velocity;

	        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
	            velocity = input.overallVelocity;
	        } else if (direction & DIRECTION_HORIZONTAL) {
	            velocity = input.overallVelocityX;
	        } else if (direction & DIRECTION_VERTICAL) {
	            velocity = input.overallVelocityY;
	        }

	        return this._super.attrTest.call(this, input) &&
	            direction & input.offsetDirection &&
	            input.distance > this.options.threshold &&
	            input.maxPointers == this.options.pointers &&
	            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
	    },

	    emit: function(input) {
	        var direction = directionStr(input.offsetDirection);
	        if (direction) {
	            this.manager.emit(this.options.event + direction, input);
	        }

	        this.manager.emit(this.options.event, input);
	    }
	});

	/**
	 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
	 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
	 * a single tap.
	 *
	 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
	 * multi-taps being recognized.
	 * @constructor
	 * @extends Recognizer
	 */
	function TapRecognizer() {
	    Recognizer.apply(this, arguments);

	    // previous time and center,
	    // used for tap counting
	    this.pTime = false;
	    this.pCenter = false;

	    this._timer = null;
	    this._input = null;
	    this.count = 0;
	}

	inherit(TapRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof PinchRecognizer
	     */
	    defaults: {
	        event: 'tap',
	        pointers: 1,
	        taps: 1,
	        interval: 300, // max time between the multi-tap taps
	        time: 250, // max time of the pointer to be down (like finger on the screen)
	        threshold: 9, // a minimal movement is ok, but keep it low
	        posThreshold: 10 // a multi-tap can be a bit off the initial position
	    },

	    getTouchAction: function() {
	        return [TOUCH_ACTION_MANIPULATION];
	    },

	    process: function(input) {
	        var options = this.options;

	        var validPointers = input.pointers.length === options.pointers;
	        var validMovement = input.distance < options.threshold;
	        var validTouchTime = input.deltaTime < options.time;

	        this.reset();

	        if ((input.eventType & INPUT_START) && (this.count === 0)) {
	            return this.failTimeout();
	        }

	        // we only allow little movement
	        // and we've reached an end event, so a tap is possible
	        if (validMovement && validTouchTime && validPointers) {
	            if (input.eventType != INPUT_END) {
	                return this.failTimeout();
	            }

	            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
	            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

	            this.pTime = input.timeStamp;
	            this.pCenter = input.center;

	            if (!validMultiTap || !validInterval) {
	                this.count = 1;
	            } else {
	                this.count += 1;
	            }

	            this._input = input;

	            // if tap count matches we have recognized it,
	            // else it has began recognizing...
	            var tapCount = this.count % options.taps;
	            if (tapCount === 0) {
	                // no failing requirements, immediately trigger the tap event
	                // or wait as long as the multitap interval to trigger
	                if (!this.hasRequireFailures()) {
	                    return STATE_RECOGNIZED;
	                } else {
	                    this._timer = setTimeoutContext(function() {
	                        this.state = STATE_RECOGNIZED;
	                        this.tryEmit();
	                    }, options.interval, this);
	                    return STATE_BEGAN;
	                }
	            }
	        }
	        return STATE_FAILED;
	    },

	    failTimeout: function() {
	        this._timer = setTimeoutContext(function() {
	            this.state = STATE_FAILED;
	        }, this.options.interval, this);
	        return STATE_FAILED;
	    },

	    reset: function() {
	        clearTimeout(this._timer);
	    },

	    emit: function() {
	        if (this.state == STATE_RECOGNIZED) {
	            this._input.tapCount = this.count;
	            this.manager.emit(this.options.event, this._input);
	        }
	    }
	});

	/**
	 * Simple way to create a manager with a default set of recognizers.
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */
	function Hammer(element, options) {
	    options = options || {};
	    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
	    return new Manager(element, options);
	}

	/**
	 * @const {string}
	 */
	Hammer.VERSION = '2.0.7';

	/**
	 * default settings
	 * @namespace
	 */
	Hammer.defaults = {
	    /**
	     * set if DOM events are being triggered.
	     * But this is slower and unused by simple implementations, so disabled by default.
	     * @type {Boolean}
	     * @default false
	     */
	    domEvents: false,

	    /**
	     * The value for the touchAction property/fallback.
	     * When set to `compute` it will magically set the correct value based on the added recognizers.
	     * @type {String}
	     * @default compute
	     */
	    touchAction: TOUCH_ACTION_COMPUTE,

	    /**
	     * @type {Boolean}
	     * @default true
	     */
	    enable: true,

	    /**
	     * EXPERIMENTAL FEATURE -- can be removed/changed
	     * Change the parent input target element.
	     * If Null, then it is being set the to main element.
	     * @type {Null|EventTarget}
	     * @default null
	     */
	    inputTarget: null,

	    /**
	     * force an input class
	     * @type {Null|Function}
	     * @default null
	     */
	    inputClass: null,

	    /**
	     * Default recognizer setup when calling `Hammer()`
	     * When creating a new Manager these will be skipped.
	     * @type {Array}
	     */
	    preset: [
	        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
	        [RotateRecognizer, {enable: false}],
	        [PinchRecognizer, {enable: false}, ['rotate']],
	        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],
	        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],
	        [TapRecognizer],
	        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
	        [PressRecognizer]
	    ],

	    /**
	     * Some CSS properties can be used to improve the working of Hammer.
	     * Add them to this method and they will be set when creating a new Manager.
	     * @namespace
	     */
	    cssProps: {
	        /**
	         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
	         * @type {String}
	         * @default 'none'
	         */
	        userSelect: 'none',

	        /**
	         * Disable the Windows Phone grippers when pressing an element.
	         * @type {String}
	         * @default 'none'
	         */
	        touchSelect: 'none',

	        /**
	         * Disables the default callout shown when you touch and hold a touch target.
	         * On iOS, when you touch and hold a touch target such as a link, Safari displays
	         * a callout containing information about the link. This property allows you to disable that callout.
	         * @type {String}
	         * @default 'none'
	         */
	        touchCallout: 'none',

	        /**
	         * Specifies whether zooming is enabled. Used by IE10>
	         * @type {String}
	         * @default 'none'
	         */
	        contentZooming: 'none',

	        /**
	         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
	         * @type {String}
	         * @default 'none'
	         */
	        userDrag: 'none',

	        /**
	         * Overrides the highlight color shown when the user taps a link or a JavaScript
	         * clickable element in iOS. This property obeys the alpha value, if specified.
	         * @type {String}
	         * @default 'rgba(0,0,0,0)'
	         */
	        tapHighlightColor: 'rgba(0,0,0,0)'
	    }
	};

	var STOP = 1;
	var FORCED_STOP = 2;

	/**
	 * Manager
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */
	function Manager(element, options) {
	    this.options = assign({}, Hammer.defaults, options || {});

	    this.options.inputTarget = this.options.inputTarget || element;

	    this.handlers = {};
	    this.session = {};
	    this.recognizers = [];
	    this.oldCssProps = {};

	    this.element = element;
	    this.input = createInputInstance(this);
	    this.touchAction = new TouchAction(this, this.options.touchAction);

	    toggleCssProps(this, true);

	    each(this.options.recognizers, function(item) {
	        var recognizer = this.add(new (item[0])(item[1]));
	        item[2] && recognizer.recognizeWith(item[2]);
	        item[3] && recognizer.requireFailure(item[3]);
	    }, this);
	}

	Manager.prototype = {
	    /**
	     * set options
	     * @param {Object} options
	     * @returns {Manager}
	     */
	    set: function(options) {
	        assign(this.options, options);

	        // Options that need a little more setup
	        if (options.touchAction) {
	            this.touchAction.update();
	        }
	        if (options.inputTarget) {
	            // Clean up existing event listeners and reinitialize
	            this.input.destroy();
	            this.input.target = options.inputTarget;
	            this.input.init();
	        }
	        return this;
	    },

	    /**
	     * stop recognizing for this session.
	     * This session will be discarded, when a new [input]start event is fired.
	     * When forced, the recognizer cycle is stopped immediately.
	     * @param {Boolean} [force]
	     */
	    stop: function(force) {
	        this.session.stopped = force ? FORCED_STOP : STOP;
	    },

	    /**
	     * run the recognizers!
	     * called by the inputHandler function on every movement of the pointers (touches)
	     * it walks through all the recognizers and tries to detect the gesture that is being made
	     * @param {Object} inputData
	     */
	    recognize: function(inputData) {
	        var session = this.session;
	        if (session.stopped) {
	            return;
	        }

	        // run the touch-action polyfill
	        this.touchAction.preventDefaults(inputData);

	        var recognizer;
	        var recognizers = this.recognizers;

	        // this holds the recognizer that is being recognized.
	        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
	        // if no recognizer is detecting a thing, it is set to `null`
	        var curRecognizer = session.curRecognizer;

	        // reset when the last recognizer is recognized
	        // or when we're in a new session
	        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
	            curRecognizer = session.curRecognizer = null;
	        }

	        var i = 0;
	        while (i < recognizers.length) {
	            recognizer = recognizers[i];

	            // find out if we are allowed try to recognize the input for this one.
	            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
	            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
	            //      that is being recognized.
	            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
	            //      this can be setup with the `recognizeWith()` method on the recognizer.
	            if (session.stopped !== FORCED_STOP && ( // 1
	                    !curRecognizer || recognizer == curRecognizer || // 2
	                    recognizer.canRecognizeWith(curRecognizer))) { // 3
	                recognizer.recognize(inputData);
	            } else {
	                recognizer.reset();
	            }

	            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
	            // current active recognizer. but only if we don't already have an active recognizer
	            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
	                curRecognizer = session.curRecognizer = recognizer;
	            }
	            i++;
	        }
	    },

	    /**
	     * get a recognizer by its event name.
	     * @param {Recognizer|String} recognizer
	     * @returns {Recognizer|Null}
	     */
	    get: function(recognizer) {
	        if (recognizer instanceof Recognizer) {
	            return recognizer;
	        }

	        var recognizers = this.recognizers;
	        for (var i = 0; i < recognizers.length; i++) {
	            if (recognizers[i].options.event == recognizer) {
	                return recognizers[i];
	            }
	        }
	        return null;
	    },

	    /**
	     * add a recognizer to the manager
	     * existing recognizers with the same event name will be removed
	     * @param {Recognizer} recognizer
	     * @returns {Recognizer|Manager}
	     */
	    add: function(recognizer) {
	        if (invokeArrayArg(recognizer, 'add', this)) {
	            return this;
	        }

	        // remove existing
	        var existing = this.get(recognizer.options.event);
	        if (existing) {
	            this.remove(existing);
	        }

	        this.recognizers.push(recognizer);
	        recognizer.manager = this;

	        this.touchAction.update();
	        return recognizer;
	    },

	    /**
	     * remove a recognizer by name or instance
	     * @param {Recognizer|String} recognizer
	     * @returns {Manager}
	     */
	    remove: function(recognizer) {
	        if (invokeArrayArg(recognizer, 'remove', this)) {
	            return this;
	        }

	        recognizer = this.get(recognizer);

	        // let's make sure this recognizer exists
	        if (recognizer) {
	            var recognizers = this.recognizers;
	            var index = inArray(recognizers, recognizer);

	            if (index !== -1) {
	                recognizers.splice(index, 1);
	                this.touchAction.update();
	            }
	        }

	        return this;
	    },

	    /**
	     * bind event
	     * @param {String} events
	     * @param {Function} handler
	     * @returns {EventEmitter} this
	     */
	    on: function(events, handler) {
	        if (events === undefined) {
	            return;
	        }
	        if (handler === undefined) {
	            return;
	        }

	        var handlers = this.handlers;
	        each(splitStr(events), function(event) {
	            handlers[event] = handlers[event] || [];
	            handlers[event].push(handler);
	        });
	        return this;
	    },

	    /**
	     * unbind event, leave emit blank to remove all handlers
	     * @param {String} events
	     * @param {Function} [handler]
	     * @returns {EventEmitter} this
	     */
	    off: function(events, handler) {
	        if (events === undefined) {
	            return;
	        }

	        var handlers = this.handlers;
	        each(splitStr(events), function(event) {
	            if (!handler) {
	                delete handlers[event];
	            } else {
	                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
	            }
	        });
	        return this;
	    },

	    /**
	     * emit event to the listeners
	     * @param {String} event
	     * @param {Object} data
	     */
	    emit: function(event, data) {
	        // we also want to trigger dom events
	        if (this.options.domEvents) {
	            triggerDomEvent(event, data);
	        }

	        // no handlers, so skip it all
	        var handlers = this.handlers[event] && this.handlers[event].slice();
	        if (!handlers || !handlers.length) {
	            return;
	        }

	        data.type = event;
	        data.preventDefault = function() {
	            data.srcEvent.preventDefault();
	        };

	        var i = 0;
	        while (i < handlers.length) {
	            handlers[i](data);
	            i++;
	        }
	    },

	    /**
	     * destroy the manager and unbinds all events
	     * it doesn't unbind dom events, that is the user own responsibility
	     */
	    destroy: function() {
	        this.element && toggleCssProps(this, false);

	        this.handlers = {};
	        this.session = {};
	        this.input.destroy();
	        this.element = null;
	    }
	};

	/**
	 * add/remove the css properties as defined in manager.options.cssProps
	 * @param {Manager} manager
	 * @param {Boolean} add
	 */
	function toggleCssProps(manager, add) {
	    var element = manager.element;
	    if (!element.style) {
	        return;
	    }
	    var prop;
	    each(manager.options.cssProps, function(value, name) {
	        prop = prefixed(element.style, name);
	        if (add) {
	            manager.oldCssProps[prop] = element.style[prop];
	            element.style[prop] = value;
	        } else {
	            element.style[prop] = manager.oldCssProps[prop] || '';
	        }
	    });
	    if (!add) {
	        manager.oldCssProps = {};
	    }
	}

	/**
	 * trigger dom event
	 * @param {String} event
	 * @param {Object} data
	 */
	function triggerDomEvent(event, data) {
	    var gestureEvent = document.createEvent('Event');
	    gestureEvent.initEvent(event, true, true);
	    gestureEvent.gesture = data;
	    data.target.dispatchEvent(gestureEvent);
	}

	assign(Hammer, {
	    INPUT_START: INPUT_START,
	    INPUT_MOVE: INPUT_MOVE,
	    INPUT_END: INPUT_END,
	    INPUT_CANCEL: INPUT_CANCEL,

	    STATE_POSSIBLE: STATE_POSSIBLE,
	    STATE_BEGAN: STATE_BEGAN,
	    STATE_CHANGED: STATE_CHANGED,
	    STATE_ENDED: STATE_ENDED,
	    STATE_RECOGNIZED: STATE_RECOGNIZED,
	    STATE_CANCELLED: STATE_CANCELLED,
	    STATE_FAILED: STATE_FAILED,

	    DIRECTION_NONE: DIRECTION_NONE,
	    DIRECTION_LEFT: DIRECTION_LEFT,
	    DIRECTION_RIGHT: DIRECTION_RIGHT,
	    DIRECTION_UP: DIRECTION_UP,
	    DIRECTION_DOWN: DIRECTION_DOWN,
	    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
	    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
	    DIRECTION_ALL: DIRECTION_ALL,

	    Manager: Manager,
	    Input: Input,
	    TouchAction: TouchAction,

	    TouchInput: TouchInput,
	    MouseInput: MouseInput,
	    PointerEventInput: PointerEventInput,
	    TouchMouseInput: TouchMouseInput,
	    SingleTouchInput: SingleTouchInput,

	    Recognizer: Recognizer,
	    AttrRecognizer: AttrRecognizer,
	    Tap: TapRecognizer,
	    Pan: PanRecognizer,
	    Swipe: SwipeRecognizer,
	    Pinch: PinchRecognizer,
	    Rotate: RotateRecognizer,
	    Press: PressRecognizer,

	    on: addEventListeners,
	    off: removeEventListeners,
	    each: each,
	    merge: merge,
	    extend: extend,
	    assign: assign,
	    inherit: inherit,
	    bindFn: bindFn,
	    prefixed: prefixed
	});

	// this prevents errors when Hammer is loaded in the presence of an AMD
	//  style loader but by script tag, not by the loader.
	var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
	freeGlobal.Hammer = Hammer;

	if (true) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	        return Hammer;
	    }.call(exports, __webpack_require__, exports, module),
					__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (typeof module != 'undefined' && module.exports) {
	    module.exports = Hammer;
	} else {
	    window[exportName] = Hammer;
	}

	})(window, document, 'Hammer');


	/***/ }),
	/* 177 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	// utils
	exports.util = __webpack_require__(2);
	exports.DOMutil = __webpack_require__(14);

	// data
	exports.DataSet = __webpack_require__(11);
	exports.DataView = __webpack_require__(12);
	exports.Queue = __webpack_require__(43);

	// Timeline
	exports.Timeline = __webpack_require__(178);
	exports.Graph2d = __webpack_require__(180);
	exports.timeline = {
	  Core: __webpack_require__(65),
	  DateUtil: __webpack_require__(36),
	  Range: __webpack_require__(64),
	  stack: __webpack_require__(100),
	  TimeStep: __webpack_require__(66),

	  components: {
	    items: {
	      Item: __webpack_require__(38),
	      BackgroundItem: __webpack_require__(103),
	      BoxItem: __webpack_require__(101),
	      PointItem: __webpack_require__(102),
	      RangeItem: __webpack_require__(70)
	    },

	    BackgroundGroup: __webpack_require__(69),
	    Component: __webpack_require__(16),
	    CurrentTime: __webpack_require__(67),
	    CustomTime: __webpack_require__(46),
	    DataAxis: __webpack_require__(107),
	    DataScale: __webpack_require__(108),
	    GraphGroup: __webpack_require__(109),
	    Group: __webpack_require__(68),
	    ItemSet: __webpack_require__(99),
	    Legend: __webpack_require__(112),
	    LineGraph: __webpack_require__(106),
	    TimeAxis: __webpack_require__(45)
	  }
	};

	// bundled external libraries
	exports.moment = __webpack_require__(9);
	exports.Hammer = __webpack_require__(10);
	exports.keycharm = __webpack_require__(35);

	/***/ }),
	/* 178 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var moment = __webpack_require__(9);
	var util = __webpack_require__(2);
	var DataSet = __webpack_require__(11);
	var DataView = __webpack_require__(12);
	var Range = __webpack_require__(64);
	var Core = __webpack_require__(65);
	var TimeAxis = __webpack_require__(45);
	var CurrentTime = __webpack_require__(67);
	var CustomTime = __webpack_require__(46);
	var ItemSet = __webpack_require__(99);

	var printStyle = __webpack_require__(15).printStyle;
	var allOptions = __webpack_require__(105).allOptions;
	var configureOptions = __webpack_require__(105).configureOptions;

	var Configurator = __webpack_require__(71)['default'];
	var Validator = __webpack_require__(15)['default'];

	/**
	 * Create a timeline visualization
	 * @param {HTMLElement} container
	 * @param {vis.DataSet | vis.DataView | Array} [items]
	 * @param {vis.DataSet | vis.DataView | Array} [groups]
	 * @param {Object} [options]  See Timeline.setOptions for the available options.
	 * @constructor Timeline
	 * @extends Core
	 */
	function Timeline(container, items, groups, options) {

	  if (!(this instanceof Timeline)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  // if the third element is options, the forth is groups (optionally);
	  if (!(Array.isArray(groups) || groups instanceof DataSet || groups instanceof DataView) && groups instanceof Object) {
	    var forthArgument = options;
	    options = groups;
	    groups = forthArgument;
	  }

	  // TODO: REMOVE THIS in the next MAJOR release
	  // see https://github.com/almende/vis/issues/2511
	  if (options && options.throttleRedraw) {
	    console.warn("Timeline option \"throttleRedraw\" is DEPRICATED and no longer supported. It will be removed in the next MAJOR release.");
	  }

	  var me = this;
	  this.defaultOptions = {
	    start: null,
	    end: null,
	    autoResize: true,
	    orientation: {
	      axis: 'bottom', // axis orientation: 'bottom', 'top', or 'both'
	      item: 'bottom' // not relevant
	    },
	    moment: moment,
	    width: null,
	    height: null,
	    maxHeight: null,
	    minHeight: null
	  };
	  this.options = util.deepExtend({}, this.defaultOptions);

	  // Create the DOM, props, and emitter
	  this._create(container);
	  if (!options || options && typeof options.rtl == "undefined") {
	    this.dom.root.style.visibility = 'hidden';
	    var directionFromDom,
	        domNode = this.dom.root;
	    while (!directionFromDom && domNode) {
	      directionFromDom = window.getComputedStyle(domNode, null).direction;
	      domNode = domNode.parentElement;
	    }
	    this.options.rtl = directionFromDom && directionFromDom.toLowerCase() == "rtl";
	  } else {
	    this.options.rtl = options.rtl;
	  }

	  this.options.rollingMode = options && options.rollingMode;
	  this.options.onInitialDrawComplete = options && options.onInitialDrawComplete;

	  // all components listed here will be repainted automatically
	  this.components = [];

	  this.body = {
	    dom: this.dom,
	    domProps: this.props,
	    emitter: {
	      on: this.on.bind(this),
	      off: this.off.bind(this),
	      emit: this.emit.bind(this)
	    },
	    hiddenDates: [],
	    util: {
	      getScale: function getScale() {
	        return me.timeAxis.step.scale;
	      },
	      getStep: function getStep() {
	        return me.timeAxis.step.step;
	      },

	      toScreen: me._toScreen.bind(me),
	      toGlobalScreen: me._toGlobalScreen.bind(me), // this refers to the root.width
	      toTime: me._toTime.bind(me),
	      toGlobalTime: me._toGlobalTime.bind(me)
	    }
	  };

	  // range
	  this.range = new Range(this.body, this.options);
	  this.components.push(this.range);
	  this.body.range = this.range;

	  // time axis
	  this.timeAxis = new TimeAxis(this.body, this.options);
	  this.timeAxis2 = null; // used in case of orientation option 'both'
	  this.components.push(this.timeAxis);

	  // current time bar
	  this.currentTime = new CurrentTime(this.body, this.options);
	  this.components.push(this.currentTime);

	  // item set
	  this.itemSet = new ItemSet(this.body, this.options);
	  this.components.push(this.itemSet);

	  this.itemsData = null; // DataSet
	  this.groupsData = null; // DataSet

	  this.dom.root.onclick = function (event) {
	    me.emit('click', me.getEventProperties(event));
	  };
	  this.dom.root.ondblclick = function (event) {
	    me.emit('doubleClick', me.getEventProperties(event));
	  };
	  this.dom.root.oncontextmenu = function (event) {
	    me.emit('contextmenu', me.getEventProperties(event));
	  };
	  this.dom.root.onmouseover = function (event) {
	    me.emit('mouseOver', me.getEventProperties(event));
	  };
	  if (window.PointerEvent) {
	    this.dom.root.onpointerdown = function (event) {
	      me.emit('mouseDown', me.getEventProperties(event));
	    };
	    this.dom.root.onpointermove = function (event) {
	      me.emit('mouseMove', me.getEventProperties(event));
	    };
	    this.dom.root.onpointerup = function (event) {
	      me.emit('mouseUp', me.getEventProperties(event));
	    };
	  } else {
	    this.dom.root.onmousemove = function (event) {
	      me.emit('mouseMove', me.getEventProperties(event));
	    };
	    this.dom.root.onmousedown = function (event) {
	      me.emit('mouseDown', me.getEventProperties(event));
	    };
	    this.dom.root.onmouseup = function (event) {
	      me.emit('mouseUp', me.getEventProperties(event));
	    };
	  }

	  //Single time autoscale/fit
	  this.initialFitDone = false;
	  this.on('changed', function () {
	    if (this.itemsData == null || this.options.rollingMode) return;
	    if (!me.initialFitDone) {
	      me.initialFitDone = true;
	      if (me.options.start != undefined || me.options.end != undefined) {
	        if (me.options.start == undefined || me.options.end == undefined) {
	          var range = me.getItemRange();
	        }

	        var start = me.options.start != undefined ? me.options.start : range.min;
	        var end = me.options.end != undefined ? me.options.end : range.max;
	        me.setWindow(start, end, { animation: false });
	      } else {
	        me.fit({ animation: false });
	      }
	    }

	    if (!me.initialDrawDone && me.initialRangeChangeDone) {
	      me.initialDrawDone = true;
	      me.dom.root.style.visibility = 'visible';
	      if (me.options.onInitialDrawComplete) {
	        setTimeout(function () {
	          return me.options.onInitialDrawComplete();
	        }, 0);
	      }
	    }
	  });

	  // apply options
	  if (options) {
	    this.setOptions(options);
	  }

	  // IMPORTANT: THIS HAPPENS BEFORE SET ITEMS!
	  if (groups) {
	    this.setGroups(groups);
	  }

	  // create itemset
	  if (items) {
	    this.setItems(items);
	  }

	  // draw for the first time
	  this._redraw();
	}

	// Extend the functionality from Core
	Timeline.prototype = new Core();

	/**
	 * Load a configurator
	 * @return {Object}
	 * @private
	 */
	Timeline.prototype._createConfigurator = function () {
	  return new Configurator(this, this.dom.container, configureOptions);
	};

	/**
	 * Force a redraw. The size of all items will be recalculated.
	 * Can be useful to manually redraw when option autoResize=false and the window
	 * has been resized, or when the items CSS has been changed.
	 *
	 * Note: this function will be overridden on construction with a trottled version
	 */
	Timeline.prototype.redraw = function () {
	  this.itemSet && this.itemSet.markDirty({ refreshItems: true });
	  this._redraw();
	};

	Timeline.prototype.setOptions = function (options) {
	  // validate options
	  var errorFound = Validator.validate(options, allOptions);

	  if (errorFound === true) {
	    console.log('%cErrors have been found in the supplied options object.', printStyle);
	  }
	  Core.prototype.setOptions.call(this, options);

	  if ('type' in options) {
	    if (options.type !== this.options.type) {
	      this.options.type = options.type;

	      // force recreation of all items
	      var itemsData = this.itemsData;
	      if (itemsData) {
	        var selection = this.getSelection();
	        this.setItems(null); // remove all
	        this.setItems(itemsData); // add all
	        this.setSelection(selection); // restore selection
	      }
	    }
	  }
	};

	/**
	 * Set items
	 * @param {vis.DataSet | Array | null} items
	 */
	Timeline.prototype.setItems = function (items) {
	  // convert to type DataSet when needed
	  var newDataSet;
	  if (!items) {
	    newDataSet = null;
	  } else if (items instanceof DataSet || items instanceof DataView) {
	    newDataSet = items;
	  } else {
	    // turn an array into a dataset
	    newDataSet = new DataSet(items, {
	      type: {
	        start: 'Date',
	        end: 'Date'
	      }
	    });
	  }

	  // set items
	  this.itemsData = newDataSet;
	  this.itemSet && this.itemSet.setItems(newDataSet);
	};

	/**
	 * Set groups
	 * @param {vis.DataSet | Array} groups
	 */
	Timeline.prototype.setGroups = function (groups) {
	  // convert to type DataSet when needed
	  var newDataSet;
	  if (!groups) {
	    newDataSet = null;
	  } else {
	    var filter = function filter(group) {
	      return group.visible !== false;
	    };
	    if (groups instanceof DataSet || groups instanceof DataView) {
	      newDataSet = new DataView(groups, { filter: filter });
	    } else {
	      // turn an array into a dataset
	      newDataSet = new DataSet(groups.filter(filter));
	    }
	  }

	  this.groupsData = newDataSet;
	  this.itemSet.setGroups(newDataSet);
	};

	/**
	 * Set both items and groups in one go
	 * @param {{items: (Array | vis.DataSet), groups: (Array | vis.DataSet)}} data
	 */
	Timeline.prototype.setData = function (data) {
	  if (data && data.groups) {
	    this.setGroups(data.groups);
	  }

	  if (data && data.items) {
	    this.setItems(data.items);
	  }
	};

	/**
	 * Set selected items by their id. Replaces the current selection
	 * Unknown id's are silently ignored.
	 * @param {string[] | string} [ids]  An array with zero or more id's of the items to be
	 *                                selected. If ids is an empty array, all items will be
	 *                                unselected.
	 * @param {Object} [options]      Available options:
	 *                                `focus: boolean`
	 *                                    If true, focus will be set to the selected item(s)
	 *                                `animation: boolean | {duration: number, easingFunction: string}`
	 *                                    If true (default), the range is animated
	 *                                    smoothly to the new window. An object can be
	 *                                    provided to specify duration and easing function.
	 *                                    Default duration is 500 ms, and default easing
	 *                                    function is 'easeInOutQuad'.
	 *                                    Only applicable when option focus is true.
	 */
	Timeline.prototype.setSelection = function (ids, options) {
	  this.itemSet && this.itemSet.setSelection(ids);

	  if (options && options.focus) {
	    this.focus(ids, options);
	  }
	};

	/**
	 * Get the selected items by their id
	 * @return {Array} ids  The ids of the selected items
	 */
	Timeline.prototype.getSelection = function () {
	  return this.itemSet && this.itemSet.getSelection() || [];
	};

	/**
	 * Adjust the visible window such that the selected item (or multiple items)
	 * are centered on screen.
	 * @param {string | String[]} id     An item id or array with item ids
	 * @param {Object} [options]      Available options:
	 *                                `animation: boolean | {duration: number, easingFunction: string}`
	 *                                    If true (default), the range is animated
	 *                                    smoothly to the new window. An object can be
	 *                                    provided to specify duration and easing function.
	 *                                    Default duration is 500 ms, and default easing
	 *                                    function is 'easeInOutQuad'.
	 */
	Timeline.prototype.focus = function (id, options) {
	  if (!this.itemsData || id == undefined) return;

	  var ids = Array.isArray(id) ? id : [id];

	  // get the specified item(s)
	  var itemsData = this.itemsData.getDataSet().get(ids, {
	    type: {
	      start: 'Date',
	      end: 'Date'
	    }
	  });

	  // calculate minimum start and maximum end of specified items
	  var start = null;
	  var end = null;
	  itemsData.forEach(function (itemData) {
	    var s = itemData.start.valueOf();
	    var e = 'end' in itemData ? itemData.end.valueOf() : itemData.start.valueOf();

	    if (start === null || s < start) {
	      start = s;
	    }

	    if (end === null || e > end) {
	      end = e;
	    }
	  });

	  if (start !== null && end !== null) {
	    var me = this;
	    // Use the first item for the vertical focus
	    var item = this.itemSet.items[ids[0]];
	    var startPos = this._getScrollTop() * -1;
	    var initialVerticalScroll = null;

	    // Setup a handler for each frame of the vertical scroll
	    var verticalAnimationFrame = function verticalAnimationFrame(ease, willDraw, done) {
	      var verticalScroll = getItemVerticalScroll(me, item);

	      if (!initialVerticalScroll) {
	        initialVerticalScroll = verticalScroll;
	      }

	      if (initialVerticalScroll.itemTop == verticalScroll.itemTop && !initialVerticalScroll.shouldScroll) {
	        return; // We don't need to scroll, so do nothing
	      } else if (initialVerticalScroll.itemTop != verticalScroll.itemTop && verticalScroll.shouldScroll) {
	        // The redraw shifted elements, so reset the animation to correct
	        initialVerticalScroll = verticalScroll;
	        startPos = me._getScrollTop() * -1;
	      }

	      var from = startPos;
	      var to = initialVerticalScroll.scrollOffset;
	      var scrollTop = done ? to : from + (to - from) * ease;

	      me._setScrollTop(-scrollTop);

	      if (!willDraw) {
	        me._redraw();
	      }
	    };

	    // Enforces the final vertical scroll position
	    var setFinalVerticalPosition = function setFinalVerticalPosition() {
	      var finalVerticalScroll = getItemVerticalScroll(me, item);

	      if (finalVerticalScroll.shouldScroll && finalVerticalScroll.itemTop != initialVerticalScroll.itemTop) {
	        me._setScrollTop(-finalVerticalScroll.scrollOffset);
	        me._redraw();
	      }
	    };

	    // Perform one last check at the end to make sure the final vertical
	    // position is correct
	    var finalVerticalCallback = function finalVerticalCallback() {
	      // Double check we ended at the proper scroll position
	      setFinalVerticalPosition();

	      // Let the redraw settle and finalize the position.      
	      setTimeout(setFinalVerticalPosition, 100);
	    };

	    // calculate the new middle and interval for the window
	    var middle = (start + end) / 2;
	    var interval = Math.max(this.range.end - this.range.start, (end - start) * 1.1);

	    var animation = options && options.animation !== undefined ? options.animation : true;

	    if (!animation) {
	      // We aren't animating so set a default so that the final callback forces the vertical location
	      initialVerticalScroll = { shouldScroll: false, scrollOffset: -1, itemTop: -1 };
	    }

	    this.range.setRange(middle - interval / 2, middle + interval / 2, { animation: animation }, finalVerticalCallback, verticalAnimationFrame);
	  }
	};

	/**
	 * Set Timeline window such that it fits all items
	 * @param {Object} [options]  Available options:
	 *                                `animation: boolean | {duration: number, easingFunction: string}`
	 *                                    If true (default), the range is animated
	 *                                    smoothly to the new window. An object can be
	 *                                    provided to specify duration and easing function.
	 *                                    Default duration is 500 ms, and default easing
	 *                                    function is 'easeInOutQuad'.
	 * @param {function} [callback]
	 */
	Timeline.prototype.fit = function (options, callback) {
	  var animation = options && options.animation !== undefined ? options.animation : true;
	  var range;

	  var dataset = this.itemsData && this.itemsData.getDataSet();
	  if (dataset.length === 1 && dataset.get()[0].end === undefined) {
	    // a single item -> don't fit, just show a range around the item from -4 to +3 days
	    range = this.getDataRange();
	    this.moveTo(range.min.valueOf(), { animation: animation }, callback);
	  } else {
	    // exactly fit the items (plus a small margin)
	    range = this.getItemRange();
	    this.range.setRange(range.min, range.max, { animation: animation }, callback);
	  }
	};

	/**
	 *
	 * @param {vis.Item} item
	 * @returns {number}
	 */
	function getStart(item) {
	  return util.convert(item.data.start, 'Date').valueOf();
	}

	/**
	 *
	 * @param {vis.Item} item
	 * @returns {number}
	 */
	function getEnd(item) {
	  var end = item.data.end != undefined ? item.data.end : item.data.start;
	  return util.convert(end, 'Date').valueOf();
	}

	/**
	 * @param {vis.Timeline} timeline
	 * @param {vis.Item} item
	 * @return {{shouldScroll: bool, scrollOffset: number, itemTop: number}}
	 */
	function getItemVerticalScroll(timeline, item) {
	  var leftHeight = timeline.props.leftContainer.height;
	  var contentHeight = timeline.props.left.height;

	  var group = item.parent;
	  var offset = group.top;
	  var shouldScroll = true;
	  var orientation = timeline.timeAxis.options.orientation.axis;

	  var itemTop = function itemTop() {
	    if (orientation == "bottom") {
	      return group.height - item.top - item.height;
	    } else {
	      return item.top;
	    }
	  };

	  var currentScrollHeight = timeline._getScrollTop() * -1;
	  var targetOffset = offset + itemTop();
	  var height = item.height;

	  if (targetOffset < currentScrollHeight) {
	    if (offset + leftHeight <= offset + itemTop() + height) {
	      offset += itemTop() - timeline.itemSet.options.margin.item.vertical;
	    }
	  } else if (targetOffset + height > currentScrollHeight + leftHeight) {
	    offset += itemTop() + height - leftHeight + timeline.itemSet.options.margin.item.vertical;
	  } else {
	    shouldScroll = false;
	  }

	  offset = Math.min(offset, contentHeight - leftHeight);

	  return { shouldScroll: shouldScroll, scrollOffset: offset, itemTop: targetOffset };
	}

	/**
	 * Determine the range of the items, taking into account their actual width
	 * and a margin of 10 pixels on both sides.
	 *
	 * @returns {{min: Date, max: Date}}
	 */
	Timeline.prototype.getItemRange = function () {
	  // get a rough approximation for the range based on the items start and end dates
	  var range = this.getDataRange();
	  var min = range.min !== null ? range.min.valueOf() : null;
	  var max = range.max !== null ? range.max.valueOf() : null;
	  var minItem = null;
	  var maxItem = null;

	  if (min != null && max != null) {
	    var interval = max - min; // ms
	    if (interval <= 0) {
	      interval = 10;
	    }
	    var factor = interval / this.props.center.width;

	    var redrawQueue = {};
	    var redrawQueueLength = 0;

	    // collect redraw functions
	    util.forEach(this.itemSet.items, function (item, key) {
	      if (item.groupShowing) {
	        var returnQueue = true;
	        redrawQueue[key] = item.redraw(returnQueue);
	        redrawQueueLength = redrawQueue[key].length;
	      }
	    });

	    var needRedraw = redrawQueueLength > 0;
	    if (needRedraw) {
	      // redraw all regular items
	      for (var i = 0; i < redrawQueueLength; i++) {
	        util.forEach(redrawQueue, function (fns) {
	          fns[i]();
	        });
	      }
	    }

	    // calculate the date of the left side and right side of the items given
	    util.forEach(this.itemSet.items, function (item) {
	      var start = getStart(item);
	      var end = getEnd(item);
	      var startSide;
	      var endSide;

	      if (this.options.rtl) {
	        startSide = start - (item.getWidthRight() + 10) * factor;
	        endSide = end + (item.getWidthLeft() + 10) * factor;
	      } else {
	        startSide = start - (item.getWidthLeft() + 10) * factor;
	        endSide = end + (item.getWidthRight() + 10) * factor;
	      }

	      if (startSide < min) {
	        min = startSide;
	        minItem = item;
	      }
	      if (endSide > max) {
	        max = endSide;
	        maxItem = item;
	      }
	    }.bind(this));

	    if (minItem && maxItem) {
	      var lhs = minItem.getWidthLeft() + 10;
	      var rhs = maxItem.getWidthRight() + 10;
	      var delta = this.props.center.width - lhs - rhs; // px

	      if (delta > 0) {
	        if (this.options.rtl) {
	          min = getStart(minItem) - rhs * interval / delta; // ms
	          max = getEnd(maxItem) + lhs * interval / delta; // ms
	        } else {
	          min = getStart(minItem) - lhs * interval / delta; // ms
	          max = getEnd(maxItem) + rhs * interval / delta; // ms
	        }
	      }
	    }
	  }

	  return {
	    min: min != null ? new Date(min) : null,
	    max: max != null ? new Date(max) : null
	  };
	};

	/**
	 * Calculate the data range of the items start and end dates
	 * @returns {{min: Date, max: Date}}
	 */
	Timeline.prototype.getDataRange = function () {
	  var min = null;
	  var max = null;

	  var dataset = this.itemsData && this.itemsData.getDataSet();
	  if (dataset) {
	    dataset.forEach(function (item) {
	      var start = util.convert(item.start, 'Date').valueOf();
	      var end = util.convert(item.end != undefined ? item.end : item.start, 'Date').valueOf();
	      if (min === null || start < min) {
	        min = start;
	      }
	      if (max === null || end > max) {
	        max = end;
	      }
	    });
	  }

	  return {
	    min: min != null ? new Date(min) : null,
	    max: max != null ? new Date(max) : null
	  };
	};

	/**
	 * Generate Timeline related information from an event
	 * @param {Event} event
	 * @return {Object} An object with related information, like on which area
	 *                  The event happened, whether clicked on an item, etc.
	 */
	Timeline.prototype.getEventProperties = function (event) {
	  var clientX = event.center ? event.center.x : event.clientX;
	  var clientY = event.center ? event.center.y : event.clientY;
	  var x;
	  if (this.options.rtl) {
	    x = util.getAbsoluteRight(this.dom.centerContainer) - clientX;
	  } else {
	    x = clientX - util.getAbsoluteLeft(this.dom.centerContainer);
	  }
	  var y = clientY - util.getAbsoluteTop(this.dom.centerContainer);

	  var item = this.itemSet.itemFromTarget(event);
	  var group = this.itemSet.groupFromTarget(event);
	  var customTime = CustomTime.customTimeFromTarget(event);

	  var snap = this.itemSet.options.snap || null;
	  var scale = this.body.util.getScale();
	  var step = this.body.util.getStep();
	  var time = this._toTime(x);
	  var snappedTime = snap ? snap(time, scale, step) : time;

	  var element = util.getTarget(event);
	  var what = null;
	  if (item != null) {
	    what = 'item';
	  } else if (customTime != null) {
	    what = 'custom-time';
	  } else if (util.hasParent(element, this.timeAxis.dom.foreground)) {
	    what = 'axis';
	  } else if (this.timeAxis2 && util.hasParent(element, this.timeAxis2.dom.foreground)) {
	    what = 'axis';
	  } else if (util.hasParent(element, this.itemSet.dom.labelSet)) {
	    what = 'group-label';
	  } else if (util.hasParent(element, this.currentTime.bar)) {
	    what = 'current-time';
	  } else if (util.hasParent(element, this.dom.center)) {
	    what = 'background';
	  }

	  return {
	    event: event,
	    item: item ? item.id : null,
	    group: group ? group.groupId : null,
	    what: what,
	    pageX: event.srcEvent ? event.srcEvent.pageX : event.pageX,
	    pageY: event.srcEvent ? event.srcEvent.pageY : event.pageY,
	    x: x,
	    y: y,
	    time: time,
	    snappedTime: snappedTime
	  };
	};

	/**
	 * Toggle Timeline rolling mode
	 */

	Timeline.prototype.toggleRollingMode = function () {
	  if (this.range.rolling) {
	    this.range.stopRolling();
	  } else {
	    if (this.options.rollingMode == undefined) {
	      this.setOptions(this.options);
	    }
	    this.range.startRolling();
	  }
	};

	module.exports = Timeline;

	/***/ }),
	/* 179 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _stringify = __webpack_require__(19);

	var _stringify2 = _interopRequireDefault(_stringify);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var Hammer = __webpack_require__(10);
	var hammerUtil = __webpack_require__(37);
	var util = __webpack_require__(2);

	/**
	 * @param {number} [pixelRatio=1]
	 */

	var ColorPicker = function () {
	  /**
	   * @param {number} [pixelRatio=1]
	   */
	  function ColorPicker() {
	    var pixelRatio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
	    (0, _classCallCheck3['default'])(this, ColorPicker);

	    this.pixelRatio = pixelRatio;
	    this.generated = false;
	    this.centerCoordinates = { x: 289 / 2, y: 289 / 2 };
	    this.r = 289 * 0.49;
	    this.color = { r: 255, g: 255, b: 255, a: 1.0 };
	    this.hueCircle = undefined;
	    this.initialColor = { r: 255, g: 255, b: 255, a: 1.0 };
	    this.previousColor = undefined;
	    this.applied = false;

	    // bound by
	    this.updateCallback = function () {};
	    this.closeCallback = function () {};

	    // create all DOM elements
	    this._create();
	  }

	  /**
	   * this inserts the colorPicker into a div from the DOM
	   * @param {Element} container
	   */


	  (0, _createClass3['default'])(ColorPicker, [{
	    key: 'insertTo',
	    value: function insertTo(container) {
	      if (this.hammer !== undefined) {
	        this.hammer.destroy();
	        this.hammer = undefined;
	      }
	      this.container = container;
	      this.container.appendChild(this.frame);
	      this._bindHammer();

	      this._setSize();
	    }

	    /**
	     * the callback is executed on apply and save. Bind it to the application
	     * @param {function} callback
	     */

	  }, {
	    key: 'setUpdateCallback',
	    value: function setUpdateCallback(callback) {
	      if (typeof callback === 'function') {
	        this.updateCallback = callback;
	      } else {
	        throw new Error("Function attempted to set as colorPicker update callback is not a function.");
	      }
	    }

	    /**
	     * the callback is executed on apply and save. Bind it to the application
	     * @param {function} callback
	     */

	  }, {
	    key: 'setCloseCallback',
	    value: function setCloseCallback(callback) {
	      if (typeof callback === 'function') {
	        this.closeCallback = callback;
	      } else {
	        throw new Error("Function attempted to set as colorPicker closing callback is not a function.");
	      }
	    }

	    /**
	     *
	     * @param {string} color
	     * @returns {String}
	     * @private
	     */

	  }, {
	    key: '_isColorString',
	    value: function _isColorString(color) {
	      var htmlColors = { black: '#000000', navy: '#000080', darkblue: '#00008B', mediumblue: '#0000CD', blue: '#0000FF', darkgreen: '#006400', green: '#008000', teal: '#008080', darkcyan: '#008B8B', deepskyblue: '#00BFFF', darkturquoise: '#00CED1', mediumspringgreen: '#00FA9A', lime: '#00FF00', springgreen: '#00FF7F', aqua: '#00FFFF', cyan: '#00FFFF', midnightblue: '#191970', dodgerblue: '#1E90FF', lightseagreen: '#20B2AA', forestgreen: '#228B22', seagreen: '#2E8B57', darkslategray: '#2F4F4F', limegreen: '#32CD32', mediumseagreen: '#3CB371', turquoise: '#40E0D0', royalblue: '#4169E1', steelblue: '#4682B4', darkslateblue: '#483D8B', mediumturquoise: '#48D1CC', indigo: '#4B0082', darkolivegreen: '#556B2F', cadetblue: '#5F9EA0', cornflowerblue: '#6495ED', mediumaquamarine: '#66CDAA', dimgray: '#696969', slateblue: '#6A5ACD', olivedrab: '#6B8E23', slategray: '#708090', lightslategray: '#778899', mediumslateblue: '#7B68EE', lawngreen: '#7CFC00', chartreuse: '#7FFF00', aquamarine: '#7FFFD4', maroon: '#800000', purple: '#800080', olive: '#808000', gray: '#808080', skyblue: '#87CEEB', lightskyblue: '#87CEFA', blueviolet: '#8A2BE2', darkred: '#8B0000', darkmagenta: '#8B008B', saddlebrown: '#8B4513', darkseagreen: '#8FBC8F', lightgreen: '#90EE90', mediumpurple: '#9370D8', darkviolet: '#9400D3', palegreen: '#98FB98', darkorchid: '#9932CC', yellowgreen: '#9ACD32', sienna: '#A0522D', brown: '#A52A2A', darkgray: '#A9A9A9', lightblue: '#ADD8E6', greenyellow: '#ADFF2F', paleturquoise: '#AFEEEE', lightsteelblue: '#B0C4DE', powderblue: '#B0E0E6', firebrick: '#B22222', darkgoldenrod: '#B8860B', mediumorchid: '#BA55D3', rosybrown: '#BC8F8F', darkkhaki: '#BDB76B', silver: '#C0C0C0', mediumvioletred: '#C71585', indianred: '#CD5C5C', peru: '#CD853F', chocolate: '#D2691E', tan: '#D2B48C', lightgrey: '#D3D3D3', palevioletred: '#D87093', thistle: '#D8BFD8', orchid: '#DA70D6', goldenrod: '#DAA520', crimson: '#DC143C', gainsboro: '#DCDCDC', plum: '#DDA0DD', burlywood: '#DEB887', lightcyan: '#E0FFFF', lavender: '#E6E6FA', darksalmon: '#E9967A', violet: '#EE82EE', palegoldenrod: '#EEE8AA', lightcoral: '#F08080', khaki: '#F0E68C', aliceblue: '#F0F8FF', honeydew: '#F0FFF0', azure: '#F0FFFF', sandybrown: '#F4A460', wheat: '#F5DEB3', beige: '#F5F5DC', whitesmoke: '#F5F5F5', mintcream: '#F5FFFA', ghostwhite: '#F8F8FF', salmon: '#FA8072', antiquewhite: '#FAEBD7', linen: '#FAF0E6', lightgoldenrodyellow: '#FAFAD2', oldlace: '#FDF5E6', red: '#FF0000', fuchsia: '#FF00FF', magenta: '#FF00FF', deeppink: '#FF1493', orangered: '#FF4500', tomato: '#FF6347', hotpink: '#FF69B4', coral: '#FF7F50', darkorange: '#FF8C00', lightsalmon: '#FFA07A', orange: '#FFA500', lightpink: '#FFB6C1', pink: '#FFC0CB', gold: '#FFD700', peachpuff: '#FFDAB9', navajowhite: '#FFDEAD', moccasin: '#FFE4B5', bisque: '#FFE4C4', mistyrose: '#FFE4E1', blanchedalmond: '#FFEBCD', papayawhip: '#FFEFD5', lavenderblush: '#FFF0F5', seashell: '#FFF5EE', cornsilk: '#FFF8DC', lemonchiffon: '#FFFACD', floralwhite: '#FFFAF0', snow: '#FFFAFA', yellow: '#FFFF00', lightyellow: '#FFFFE0', ivory: '#FFFFF0', white: '#FFFFFF' };
	      if (typeof color === 'string') {
	        return htmlColors[color];
	      }
	    }

	    /**
	     * Set the color of the colorPicker
	     * Supported formats:
	     * 'red'                   --> HTML color string
	     * '#ffffff'               --> hex string
	     * 'rbg(255,255,255)'      --> rgb string
	     * 'rgba(255,255,255,1.0)' --> rgba string
	     * {r:255,g:255,b:255}     --> rgb object
	     * {r:255,g:255,b:255,a:1.0} --> rgba object
	     * @param {string|Object} color
	     * @param {boolean} [setInitial=true]
	     */

	  }, {
	    key: 'setColor',
	    value: function setColor(color) {
	      var setInitial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	      if (color === 'none') {
	        return;
	      }

	      var rgba = void 0;

	      // if a html color shorthand is used, convert to hex
	      var htmlColor = this._isColorString(color);
	      if (htmlColor !== undefined) {
	        color = htmlColor;
	      }

	      // check format
	      if (util.isString(color) === true) {
	        if (util.isValidRGB(color) === true) {
	          var rgbaArray = color.substr(4).substr(0, color.length - 5).split(',');
	          rgba = { r: rgbaArray[0], g: rgbaArray[1], b: rgbaArray[2], a: 1.0 };
	        } else if (util.isValidRGBA(color) === true) {
	          var _rgbaArray = color.substr(5).substr(0, color.length - 6).split(',');
	          rgba = { r: _rgbaArray[0], g: _rgbaArray[1], b: _rgbaArray[2], a: _rgbaArray[3] };
	        } else if (util.isValidHex(color) === true) {
	          var rgbObj = util.hexToRGB(color);
	          rgba = { r: rgbObj.r, g: rgbObj.g, b: rgbObj.b, a: 1.0 };
	        }
	      } else {
	        if (color instanceof Object) {
	          if (color.r !== undefined && color.g !== undefined && color.b !== undefined) {
	            var alpha = color.a !== undefined ? color.a : '1.0';
	            rgba = { r: color.r, g: color.g, b: color.b, a: alpha };
	          }
	        }
	      }

	      // set color
	      if (rgba === undefined) {
	        throw new Error("Unknown color passed to the colorPicker. Supported are strings: rgb, hex, rgba. Object: rgb ({r:r,g:g,b:b,[a:a]}). Supplied: " + (0, _stringify2['default'])(color));
	      } else {
	        this._setColor(rgba, setInitial);
	      }
	    }

	    /**
	     * this shows the color picker.
	     * The hue circle is constructed once and stored.
	     */

	  }, {
	    key: 'show',
	    value: function show() {
	      if (this.closeCallback !== undefined) {
	        this.closeCallback();
	        this.closeCallback = undefined;
	      }

	      this.applied = false;
	      this.frame.style.display = 'block';
	      this._generateHueCircle();
	    }

	    // ------------------------------------------ PRIVATE ----------------------------- //

	    /**
	     * Hide the picker. Is called by the cancel button.
	     * Optional boolean to store the previous color for easy access later on.
	     * @param {boolean} [storePrevious=true]
	     * @private
	     */

	  }, {
	    key: '_hide',
	    value: function _hide() {
	      var _this = this;

	      var storePrevious = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	      // store the previous color for next time;
	      if (storePrevious === true) {
	        this.previousColor = util.extend({}, this.color);
	      }

	      if (this.applied === true) {
	        this.updateCallback(this.initialColor);
	      }

	      this.frame.style.display = 'none';

	      // call the closing callback, restoring the onclick method.
	      // this is in a setTimeout because it will trigger the show again before the click is done.
	      setTimeout(function () {
	        if (_this.closeCallback !== undefined) {
	          _this.closeCallback();
	          _this.closeCallback = undefined;
	        }
	      }, 0);
	    }

	    /**
	     * bound to the save button. Saves and hides.
	     * @private
	     */

	  }, {
	    key: '_save',
	    value: function _save() {
	      this.updateCallback(this.color);
	      this.applied = false;
	      this._hide();
	    }

	    /**
	     * Bound to apply button. Saves but does not close. Is undone by the cancel button.
	     * @private
	     */

	  }, {
	    key: '_apply',
	    value: function _apply() {
	      this.applied = true;
	      this.updateCallback(this.color);
	      this._updatePicker(this.color);
	    }

	    /**
	     * load the color from the previous session.
	     * @private
	     */

	  }, {
	    key: '_loadLast',
	    value: function _loadLast() {
	      if (this.previousColor !== undefined) {
	        this.setColor(this.previousColor, false);
	      } else {
	        alert("There is no last color to load...");
	      }
	    }

	    /**
	     * set the color, place the picker
	     * @param {Object} rgba
	     * @param {boolean} [setInitial=true]
	     * @private
	     */

	  }, {
	    key: '_setColor',
	    value: function _setColor(rgba) {
	      var setInitial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	      // store the initial color
	      if (setInitial === true) {
	        this.initialColor = util.extend({}, rgba);
	      }

	      this.color = rgba;
	      var hsv = util.RGBToHSV(rgba.r, rgba.g, rgba.b);

	      var angleConvert = 2 * Math.PI;
	      var radius = this.r * hsv.s;
	      var x = this.centerCoordinates.x + radius * Math.sin(angleConvert * hsv.h);
	      var y = this.centerCoordinates.y + radius * Math.cos(angleConvert * hsv.h);

	      this.colorPickerSelector.style.left = x - 0.5 * this.colorPickerSelector.clientWidth + 'px';
	      this.colorPickerSelector.style.top = y - 0.5 * this.colorPickerSelector.clientHeight + 'px';

	      this._updatePicker(rgba);
	    }

	    /**
	     * bound to opacity control
	     * @param {number} value
	     * @private
	     */

	  }, {
	    key: '_setOpacity',
	    value: function _setOpacity(value) {
	      this.color.a = value / 100;
	      this._updatePicker(this.color);
	    }

	    /**
	     * bound to brightness control
	     * @param {number} value
	     * @private
	     */

	  }, {
	    key: '_setBrightness',
	    value: function _setBrightness(value) {
	      var hsv = util.RGBToHSV(this.color.r, this.color.g, this.color.b);
	      hsv.v = value / 100;
	      var rgba = util.HSVToRGB(hsv.h, hsv.s, hsv.v);
	      rgba['a'] = this.color.a;
	      this.color = rgba;
	      this._updatePicker();
	    }

	    /**
	     * update the color picker. A black circle overlays the hue circle to mimic the brightness decreasing.
	     * @param {Object} rgba
	     * @private
	     */

	  }, {
	    key: '_updatePicker',
	    value: function _updatePicker() {
	      var rgba = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.color;

	      var hsv = util.RGBToHSV(rgba.r, rgba.g, rgba.b);
	      var ctx = this.colorPickerCanvas.getContext('2d');
	      if (this.pixelRation === undefined) {
	        this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
	      }
	      ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);

	      // clear the canvas
	      var w = this.colorPickerCanvas.clientWidth;
	      var h = this.colorPickerCanvas.clientHeight;
	      ctx.clearRect(0, 0, w, h);

	      ctx.putImageData(this.hueCircle, 0, 0);
	      ctx.fillStyle = 'rgba(0,0,0,' + (1 - hsv.v) + ')';
	      ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
	      ctx.fill();

	      this.brightnessRange.value = 100 * hsv.v;
	      this.opacityRange.value = 100 * rgba.a;

	      this.initialColorDiv.style.backgroundColor = 'rgba(' + this.initialColor.r + ',' + this.initialColor.g + ',' + this.initialColor.b + ',' + this.initialColor.a + ')';
	      this.newColorDiv.style.backgroundColor = 'rgba(' + this.color.r + ',' + this.color.g + ',' + this.color.b + ',' + this.color.a + ')';
	    }

	    /**
	     * used by create to set the size of the canvas.
	     * @private
	     */

	  }, {
	    key: '_setSize',
	    value: function _setSize() {
	      this.colorPickerCanvas.style.width = '100%';
	      this.colorPickerCanvas.style.height = '100%';

	      this.colorPickerCanvas.width = 289 * this.pixelRatio;
	      this.colorPickerCanvas.height = 289 * this.pixelRatio;
	    }

	    /**
	     * create all dom elements
	     * TODO: cleanup, lots of similar dom elements
	     * @private
	     */

	  }, {
	    key: '_create',
	    value: function _create() {
	      this.frame = document.createElement('div');
	      this.frame.className = 'vis-color-picker';

	      this.colorPickerDiv = document.createElement('div');
	      this.colorPickerSelector = document.createElement('div');
	      this.colorPickerSelector.className = 'vis-selector';
	      this.colorPickerDiv.appendChild(this.colorPickerSelector);

	      this.colorPickerCanvas = document.createElement('canvas');
	      this.colorPickerDiv.appendChild(this.colorPickerCanvas);

	      if (!this.colorPickerCanvas.getContext) {
	        var noCanvas = document.createElement('DIV');
	        noCanvas.style.color = 'red';
	        noCanvas.style.fontWeight = 'bold';
	        noCanvas.style.padding = '10px';
	        noCanvas.innerHTML = 'Error: your browser does not support HTML canvas';
	        this.colorPickerCanvas.appendChild(noCanvas);
	      } else {
	        var ctx = this.colorPickerCanvas.getContext("2d");
	        this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);

	        this.colorPickerCanvas.getContext("2d").setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
	      }

	      this.colorPickerDiv.className = 'vis-color';

	      this.opacityDiv = document.createElement('div');
	      this.opacityDiv.className = 'vis-opacity';

	      this.brightnessDiv = document.createElement('div');
	      this.brightnessDiv.className = 'vis-brightness';

	      this.arrowDiv = document.createElement('div');
	      this.arrowDiv.className = 'vis-arrow';

	      this.opacityRange = document.createElement('input');
	      try {
	        this.opacityRange.type = 'range'; // Not supported on IE9
	        this.opacityRange.min = '0';
	        this.opacityRange.max = '100';
	      }
	      // TODO: Add some error handling and remove this lint exception
	      catch (err) {} // eslint-disable-line no-empty
	      this.opacityRange.value = '100';
	      this.opacityRange.className = 'vis-range';

	      this.brightnessRange = document.createElement('input');
	      try {
	        this.brightnessRange.type = 'range'; // Not supported on IE9
	        this.brightnessRange.min = '0';
	        this.brightnessRange.max = '100';
	      }
	      // TODO: Add some error handling and remove this lint exception
	      catch (err) {} // eslint-disable-line no-empty
	      this.brightnessRange.value = '100';
	      this.brightnessRange.className = 'vis-range';

	      this.opacityDiv.appendChild(this.opacityRange);
	      this.brightnessDiv.appendChild(this.brightnessRange);

	      var me = this;
	      this.opacityRange.onchange = function () {
	        me._setOpacity(this.value);
	      };
	      this.opacityRange.oninput = function () {
	        me._setOpacity(this.value);
	      };
	      this.brightnessRange.onchange = function () {
	        me._setBrightness(this.value);
	      };
	      this.brightnessRange.oninput = function () {
	        me._setBrightness(this.value);
	      };

	      this.brightnessLabel = document.createElement("div");
	      this.brightnessLabel.className = "vis-label vis-brightness";
	      this.brightnessLabel.innerHTML = 'brightness:';

	      this.opacityLabel = document.createElement("div");
	      this.opacityLabel.className = "vis-label vis-opacity";
	      this.opacityLabel.innerHTML = 'opacity:';

	      this.newColorDiv = document.createElement("div");
	      this.newColorDiv.className = "vis-new-color";
	      this.newColorDiv.innerHTML = 'new';

	      this.initialColorDiv = document.createElement("div");
	      this.initialColorDiv.className = "vis-initial-color";
	      this.initialColorDiv.innerHTML = 'initial';

	      this.cancelButton = document.createElement("div");
	      this.cancelButton.className = "vis-button vis-cancel";
	      this.cancelButton.innerHTML = 'cancel';
	      this.cancelButton.onclick = this._hide.bind(this, false);

	      this.applyButton = document.createElement("div");
	      this.applyButton.className = "vis-button vis-apply";
	      this.applyButton.innerHTML = 'apply';
	      this.applyButton.onclick = this._apply.bind(this);

	      this.saveButton = document.createElement("div");
	      this.saveButton.className = "vis-button vis-save";
	      this.saveButton.innerHTML = 'save';
	      this.saveButton.onclick = this._save.bind(this);

	      this.loadButton = document.createElement("div");
	      this.loadButton.className = "vis-button vis-load";
	      this.loadButton.innerHTML = 'load last';
	      this.loadButton.onclick = this._loadLast.bind(this);

	      this.frame.appendChild(this.colorPickerDiv);
	      this.frame.appendChild(this.arrowDiv);
	      this.frame.appendChild(this.brightnessLabel);
	      this.frame.appendChild(this.brightnessDiv);
	      this.frame.appendChild(this.opacityLabel);
	      this.frame.appendChild(this.opacityDiv);
	      this.frame.appendChild(this.newColorDiv);
	      this.frame.appendChild(this.initialColorDiv);

	      this.frame.appendChild(this.cancelButton);
	      this.frame.appendChild(this.applyButton);
	      this.frame.appendChild(this.saveButton);
	      this.frame.appendChild(this.loadButton);
	    }

	    /**
	     * bind hammer to the color picker
	     * @private
	     */

	  }, {
	    key: '_bindHammer',
	    value: function _bindHammer() {
	      var _this2 = this;

	      this.drag = {};
	      this.pinch = {};
	      this.hammer = new Hammer(this.colorPickerCanvas);
	      this.hammer.get('pinch').set({ enable: true });

	      hammerUtil.onTouch(this.hammer, function (event) {
	        _this2._moveSelector(event);
	      });
	      this.hammer.on('tap', function (event) {
	        _this2._moveSelector(event);
	      });
	      this.hammer.on('panstart', function (event) {
	        _this2._moveSelector(event);
	      });
	      this.hammer.on('panmove', function (event) {
	        _this2._moveSelector(event);
	      });
	      this.hammer.on('panend', function (event) {
	        _this2._moveSelector(event);
	      });
	    }

	    /**
	     * generate the hue circle. This is relatively heavy (200ms) and is done only once on the first time it is shown.
	     * @private
	     */

	  }, {
	    key: '_generateHueCircle',
	    value: function _generateHueCircle() {
	      if (this.generated === false) {
	        var ctx = this.colorPickerCanvas.getContext('2d');
	        if (this.pixelRation === undefined) {
	          this.pixelRatio = (window.devicePixelRatio || 1) / (ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1);
	        }
	        ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);

	        // clear the canvas
	        var w = this.colorPickerCanvas.clientWidth;
	        var h = this.colorPickerCanvas.clientHeight;
	        ctx.clearRect(0, 0, w, h);

	        // draw hue circle
	        var x = void 0,
	            y = void 0,
	            hue = void 0,
	            sat = void 0;
	        this.centerCoordinates = { x: w * 0.5, y: h * 0.5 };
	        this.r = 0.49 * w;
	        var angleConvert = 2 * Math.PI / 360;
	        var hfac = 1 / 360;
	        var sfac = 1 / this.r;
	        var rgb = void 0;
	        for (hue = 0; hue < 360; hue++) {
	          for (sat = 0; sat < this.r; sat++) {
	            x = this.centerCoordinates.x + sat * Math.sin(angleConvert * hue);
	            y = this.centerCoordinates.y + sat * Math.cos(angleConvert * hue);
	            rgb = util.HSVToRGB(hue * hfac, sat * sfac, 1);
	            ctx.fillStyle = 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';
	            ctx.fillRect(x - 0.5, y - 0.5, 2, 2);
	          }
	        }
	        ctx.strokeStyle = 'rgba(0,0,0,1)';
	        ctx.circle(this.centerCoordinates.x, this.centerCoordinates.y, this.r);
	        ctx.stroke();

	        this.hueCircle = ctx.getImageData(0, 0, w, h);
	      }
	      this.generated = true;
	    }

	    /**
	     * move the selector. This is called by hammer functions.
	     *
	     * @param {Event}  event   The event
	     * @private
	     */

	  }, {
	    key: '_moveSelector',
	    value: function _moveSelector(event) {
	      var rect = this.colorPickerDiv.getBoundingClientRect();
	      var left = event.center.x - rect.left;
	      var top = event.center.y - rect.top;

	      var centerY = 0.5 * this.colorPickerDiv.clientHeight;
	      var centerX = 0.5 * this.colorPickerDiv.clientWidth;

	      var x = left - centerX;
	      var y = top - centerY;

	      var angle = Math.atan2(x, y);
	      var radius = 0.98 * Math.min(Math.sqrt(x * x + y * y), centerX);

	      var newTop = Math.cos(angle) * radius + centerY;
	      var newLeft = Math.sin(angle) * radius + centerX;

	      this.colorPickerSelector.style.top = newTop - 0.5 * this.colorPickerSelector.clientHeight + 'px';
	      this.colorPickerSelector.style.left = newLeft - 0.5 * this.colorPickerSelector.clientWidth + 'px';

	      // set color
	      var h = angle / (2 * Math.PI);
	      h = h < 0 ? h + 1 : h;
	      var s = radius / this.r;
	      var hsv = util.RGBToHSV(this.color.r, this.color.g, this.color.b);
	      hsv.h = h;
	      hsv.s = s;
	      var rgba = util.HSVToRGB(hsv.h, hsv.s, hsv.v);
	      rgba['a'] = this.color.a;
	      this.color = rgba;

	      // update previews
	      this.initialColorDiv.style.backgroundColor = 'rgba(' + this.initialColor.r + ',' + this.initialColor.g + ',' + this.initialColor.b + ',' + this.initialColor.a + ')';
	      this.newColorDiv.style.backgroundColor = 'rgba(' + this.color.r + ',' + this.color.g + ',' + this.color.b + ',' + this.color.a + ')';
	    }
	  }]);
	  return ColorPicker;
	}();

	exports['default'] = ColorPicker;

	/***/ }),
	/* 180 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var moment = __webpack_require__(9);
	var util = __webpack_require__(2);
	var DataSet = __webpack_require__(11);
	var DataView = __webpack_require__(12);
	var Range = __webpack_require__(64);
	var Core = __webpack_require__(65);
	var TimeAxis = __webpack_require__(45);
	var CurrentTime = __webpack_require__(67);
	var CustomTime = __webpack_require__(46);
	var LineGraph = __webpack_require__(106);

	var printStyle = __webpack_require__(15).printStyle;
	var allOptions = __webpack_require__(113).allOptions;
	var configureOptions = __webpack_require__(113).configureOptions;

	var Configurator = __webpack_require__(71)['default'];
	var Validator = __webpack_require__(15)['default'];

	/**
	 * Create a timeline visualization
	 * @param {HTMLElement} container
	 * @param {vis.DataSet | Array} [items]
	 * @param {vis.DataSet | Array | vis.DataView | Object} [groups]
	 * @param {Object} [options]  See Graph2d.setOptions for the available options.
	 * @constructor Graph2d
	 * @extends Core
	 */
	function Graph2d(container, items, groups, options) {
	  // if the third element is options, the forth is groups (optionally);
	  if (!(Array.isArray(groups) || groups instanceof DataSet || groups instanceof DataView) && groups instanceof Object) {
	    var forthArgument = options;
	    options = groups;
	    groups = forthArgument;
	  }

	  // TODO: REMOVE THIS in the next MAJOR release
	  // see https://github.com/almende/vis/issues/2511
	  if (options && options.throttleRedraw) {
	    console.warn("Graph2d option \"throttleRedraw\" is DEPRICATED and no longer supported. It will be removed in the next MAJOR release.");
	  }

	  var me = this;
	  this.defaultOptions = {
	    start: null,
	    end: null,

	    autoResize: true,

	    orientation: {
	      axis: 'bottom', // axis orientation: 'bottom', 'top', or 'both'
	      item: 'bottom' // not relevant for Graph2d
	    },

	    moment: moment,

	    width: null,
	    height: null,
	    maxHeight: null,
	    minHeight: null
	  };
	  this.options = util.deepExtend({}, this.defaultOptions);

	  // Create the DOM, props, and emitter
	  this._create(container);

	  // all components listed here will be repainted automatically
	  this.components = [];

	  this.body = {
	    dom: this.dom,
	    domProps: this.props,
	    emitter: {
	      on: this.on.bind(this),
	      off: this.off.bind(this),
	      emit: this.emit.bind(this)
	    },
	    hiddenDates: [],
	    util: {
	      toScreen: me._toScreen.bind(me),
	      toGlobalScreen: me._toGlobalScreen.bind(me), // this refers to the root.width
	      toTime: me._toTime.bind(me),
	      toGlobalTime: me._toGlobalTime.bind(me)
	    }
	  };

	  // range
	  this.range = new Range(this.body);
	  this.components.push(this.range);
	  this.body.range = this.range;

	  // time axis
	  this.timeAxis = new TimeAxis(this.body);
	  this.components.push(this.timeAxis);
	  //this.body.util.snap = this.timeAxis.snap.bind(this.timeAxis);

	  // current time bar
	  this.currentTime = new CurrentTime(this.body);
	  this.components.push(this.currentTime);

	  // item set
	  this.linegraph = new LineGraph(this.body);

	  this.components.push(this.linegraph);

	  this.itemsData = null; // DataSet
	  this.groupsData = null; // DataSet


	  this.on('tap', function (event) {
	    me.emit('click', me.getEventProperties(event));
	  });
	  this.on('doubletap', function (event) {
	    me.emit('doubleClick', me.getEventProperties(event));
	  });
	  this.dom.root.oncontextmenu = function (event) {
	    me.emit('contextmenu', me.getEventProperties(event));
	  };

	  // apply options
	  if (options) {
	    this.setOptions(options);
	  }

	  // IMPORTANT: THIS HAPPENS BEFORE SET ITEMS!
	  if (groups) {
	    this.setGroups(groups);
	  }

	  // create itemset
	  if (items) {
	    this.setItems(items);
	  }

	  // draw for the first time
	  this._redraw();
	}

	// Extend the functionality from Core
	Graph2d.prototype = new Core();

	Graph2d.prototype.setOptions = function (options) {
	  // validate options
	  var errorFound = Validator.validate(options, allOptions);
	  if (errorFound === true) {
	    console.log('%cErrors have been found in the supplied options object.', printStyle);
	  }

	  Core.prototype.setOptions.call(this, options);
	};

	/**
	 * Set items
	 * @param {vis.DataSet | Array | null} items
	 */
	Graph2d.prototype.setItems = function (items) {
	  var initialLoad = this.itemsData == null;

	  // convert to type DataSet when needed
	  var newDataSet;
	  if (!items) {
	    newDataSet = null;
	  } else if (items instanceof DataSet || items instanceof DataView) {
	    newDataSet = items;
	  } else {
	    // turn an array into a dataset
	    newDataSet = new DataSet(items, {
	      type: {
	        start: 'Date',
	        end: 'Date'
	      }
	    });
	  }

	  // set items
	  this.itemsData = newDataSet;
	  this.linegraph && this.linegraph.setItems(newDataSet);

	  if (initialLoad) {
	    if (this.options.start != undefined || this.options.end != undefined) {
	      var start = this.options.start != undefined ? this.options.start : null;
	      var end = this.options.end != undefined ? this.options.end : null;
	      this.setWindow(start, end, { animation: false });
	    } else {
	      this.fit({ animation: false });
	    }
	  }
	};

	/**
	 * Set groups
	 * @param {vis.DataSet | Array} groups
	 */
	Graph2d.prototype.setGroups = function (groups) {
	  // convert to type DataSet when needed
	  var newDataSet;
	  if (!groups) {
	    newDataSet = null;
	  } else if (groups instanceof DataSet || groups instanceof DataView) {
	    newDataSet = groups;
	  } else {
	    // turn an array into a dataset
	    newDataSet = new DataSet(groups);
	  }

	  this.groupsData = newDataSet;
	  this.linegraph.setGroups(newDataSet);
	};

	/**
	 * Returns an object containing an SVG element with the icon of the group (size determined by iconWidth and iconHeight), the label of the group (content) and the yAxisOrientation of the group (left or right).
	 * @param {vis.GraphGroup.id} groupId
	 * @param {number} width
	 * @param {number} height
	 * @returns {{icon: SVGElement, label: string, orientation: string}|string}
	 */
	Graph2d.prototype.getLegend = function (groupId, width, height) {
	  if (width === undefined) {
	    width = 15;
	  }
	  if (height === undefined) {
	    height = 15;
	  }
	  if (this.linegraph.groups[groupId] !== undefined) {
	    return this.linegraph.groups[groupId].getLegend(width, height);
	  } else {
	    return "cannot find group:'" + groupId + "'";
	  }
	};

	/**
	 * This checks if the visible option of the supplied group (by ID) is true or false.
	 * @param {vis.GraphGroup.id} groupId
	 * @returns {boolean}
	 */
	Graph2d.prototype.isGroupVisible = function (groupId) {
	  if (this.linegraph.groups[groupId] !== undefined) {
	    return this.linegraph.groups[groupId].visible && (this.linegraph.options.groups.visibility[groupId] === undefined || this.linegraph.options.groups.visibility[groupId] == true);
	  } else {
	    return false;
	  }
	};

	/**
	 * Get the data range of the item set.
	 * @returns {{min: Date, max: Date}} range  A range with a start and end Date.
	 *                                          When no minimum is found, min==null
	 *                                          When no maximum is found, max==null
	 */
	Graph2d.prototype.getDataRange = function () {
	  var min = null;
	  var max = null;

	  // calculate min from start filed
	  for (var groupId in this.linegraph.groups) {
	    if (this.linegraph.groups.hasOwnProperty(groupId)) {
	      if (this.linegraph.groups[groupId].visible == true) {
	        for (var i = 0; i < this.linegraph.groups[groupId].itemsData.length; i++) {
	          var item = this.linegraph.groups[groupId].itemsData[i];
	          var value = util.convert(item.x, 'Date').valueOf();
	          min = min == null ? value : min > value ? value : min;
	          max = max == null ? value : max < value ? value : max;
	        }
	      }
	    }
	  }

	  return {
	    min: min != null ? new Date(min) : null,
	    max: max != null ? new Date(max) : null
	  };
	};

	/**
	 * Generate Timeline related information from an event
	 * @param {Event} event
	 * @return {Object} An object with related information, like on which area
	 *                  The event happened, whether clicked on an item, etc.
	 */
	Graph2d.prototype.getEventProperties = function (event) {
	  var clientX = event.center ? event.center.x : event.clientX;
	  var clientY = event.center ? event.center.y : event.clientY;
	  var x = clientX - util.getAbsoluteLeft(this.dom.centerContainer);
	  var y = clientY - util.getAbsoluteTop(this.dom.centerContainer);
	  var time = this._toTime(x);

	  var customTime = CustomTime.customTimeFromTarget(event);

	  var element = util.getTarget(event);
	  var what = null;
	  if (util.hasParent(element, this.timeAxis.dom.foreground)) {
	    what = 'axis';
	  } else if (this.timeAxis2 && util.hasParent(element, this.timeAxis2.dom.foreground)) {
	    what = 'axis';
	  } else if (util.hasParent(element, this.linegraph.yAxisLeft.dom.frame)) {
	    what = 'data-axis';
	  } else if (util.hasParent(element, this.linegraph.yAxisRight.dom.frame)) {
	    what = 'data-axis';
	  } else if (util.hasParent(element, this.linegraph.legendLeft.dom.frame)) {
	    what = 'legend';
	  } else if (util.hasParent(element, this.linegraph.legendRight.dom.frame)) {
	    what = 'legend';
	  } else if (customTime != null) {
	    what = 'custom-time';
	  } else if (util.hasParent(element, this.currentTime.bar)) {
	    what = 'current-time';
	  } else if (util.hasParent(element, this.dom.center)) {
	    what = 'background';
	  }

	  var value = [];
	  var yAxisLeft = this.linegraph.yAxisLeft;
	  var yAxisRight = this.linegraph.yAxisRight;
	  if (!yAxisLeft.hidden && this.itemsData.length > 0) {
	    value.push(yAxisLeft.screenToValue(y));
	  }
	  if (!yAxisRight.hidden && this.itemsData.length > 0) {
	    value.push(yAxisRight.screenToValue(y));
	  }

	  return {
	    event: event,
	    what: what,
	    pageX: event.srcEvent ? event.srcEvent.pageX : event.pageX,
	    pageY: event.srcEvent ? event.srcEvent.pageY : event.pageY,
	    x: x,
	    y: y,
	    time: time,
	    value: value
	  };
	};

	/**
	 * Load a configurator
	 * @return {Object}
	 * @private
	 */
	Graph2d.prototype._createConfigurator = function () {
	  return new Configurator(this, this.dom.container, configureOptions);
	};

	module.exports = Graph2d;

	/***/ }),
	/* 181 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	// utils
	exports.util = __webpack_require__(2);
	exports.DOMutil = __webpack_require__(14);

	// data
	exports.DataSet = __webpack_require__(11);
	exports.DataView = __webpack_require__(12);
	exports.Queue = __webpack_require__(43);

	// Network
	exports.Network = __webpack_require__(182);
	exports.network = {
	  Images: __webpack_require__(116),
	  dotparser: __webpack_require__(114),
	  gephiParser: __webpack_require__(115),
	  allOptions: __webpack_require__(122)
	};
	exports.network.convertDot = function (input) {
	  return exports.network.dotparser.DOTToGraph(input);
	};
	exports.network.convertGephi = function (input, options) {
	  return exports.network.gephiParser.parseGephi(input, options);
	};

	// bundled external libraries
	exports.moment = __webpack_require__(9);
	exports.Hammer = __webpack_require__(10);
	exports.keycharm = __webpack_require__(35);

	/***/ }),
	/* 182 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	// Load custom shapes into CanvasRenderingContext2D
	__webpack_require__(183);

	var Emitter = __webpack_require__(44);
	var util = __webpack_require__(2);
	var dotparser = __webpack_require__(114);
	var gephiParser = __webpack_require__(115);
	var Activator = __webpack_require__(97);
	var locales = __webpack_require__(184);

	var Images = __webpack_require__(116)['default'];
	var Groups = __webpack_require__(186)['default'];
	var NodesHandler = __webpack_require__(187)['default'];
	var EdgesHandler = __webpack_require__(214)['default'];
	var PhysicsEngine = __webpack_require__(220)['default'];
	var ClusterEngine = __webpack_require__(227)['default'];
	var CanvasRenderer = __webpack_require__(229)['default'];
	var Canvas = __webpack_require__(230)['default'];
	var View = __webpack_require__(231)['default'];
	var InteractionHandler = __webpack_require__(232)['default'];
	var SelectionHandler = __webpack_require__(234)['default'];
	var LayoutEngine = __webpack_require__(235)['default'];
	var ManipulationSystem = __webpack_require__(237)['default'];
	var Configurator = __webpack_require__(71)['default'];
	var Validator = __webpack_require__(15)['default'];

	var _require = __webpack_require__(15),
	    printStyle = _require.printStyle;

	var _require2 = __webpack_require__(122),
	    allOptions = _require2.allOptions,
	    configureOptions = _require2.configureOptions;

	var KamadaKawai = __webpack_require__(238)['default'];

	/**
	 * Create a network visualization, displaying nodes and edges.
	 *
	 * @param {Element} container   The DOM element in which the Network will
	 *                                  be created. Normally a div element.
	 * @param {Object} data         An object containing parameters
	 *                              {Array} nodes
	 *                              {Array} edges
	 * @param {Object} options      Options
	 * @constructor Network
	 */
	function Network(container, data, options) {
	  var _this = this;

	  if (!(this instanceof Network)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }

	  // set constant values
	  this.options = {};
	  this.defaultOptions = {
	    locale: 'en',
	    locales: locales,
	    clickToUse: false
	  };
	  util.extend(this.options, this.defaultOptions);

	  /**
	   * Containers for nodes and edges.
	   *
	   * 'edges' and 'nodes' contain the full definitions of all the network elements.
	   * 'nodeIndices' and 'edgeIndices' contain the id's of the active elements.
	   *
	   * The distinction is important, because a defined node need not be active, i.e.
	   * visible on the canvas. This happens in particular when clusters are defined, in
	   * that case there will be nodes and edges not displayed.
	   * The bottom line is that all code with actions related to visibility, *must* use
	   * 'nodeIndices' and 'edgeIndices', not 'nodes' and 'edges' directly.
	   */
	  this.body = {
	    container: container,

	    // See comment above for following fields
	    nodes: {},
	    nodeIndices: [],
	    edges: {},
	    edgeIndices: [],

	    emitter: {
	      on: this.on.bind(this),
	      off: this.off.bind(this),
	      emit: this.emit.bind(this),
	      once: this.once.bind(this)
	    },
	    eventListeners: {
	      onTap: function onTap() {},
	      onTouch: function onTouch() {},
	      onDoubleTap: function onDoubleTap() {},
	      onHold: function onHold() {},
	      onDragStart: function onDragStart() {},
	      onDrag: function onDrag() {},
	      onDragEnd: function onDragEnd() {},
	      onMouseWheel: function onMouseWheel() {},
	      onPinch: function onPinch() {},
	      onMouseMove: function onMouseMove() {},
	      onRelease: function onRelease() {},
	      onContext: function onContext() {}
	    },
	    data: {
	      nodes: null, // A DataSet or DataView
	      edges: null // A DataSet or DataView
	    },
	    functions: {
	      createNode: function createNode() {},
	      createEdge: function createEdge() {},
	      getPointer: function getPointer() {}
	    },
	    modules: {},
	    view: {
	      scale: 1,
	      translation: { x: 0, y: 0 }
	    }
	  };

	  // bind the event listeners
	  this.bindEventListeners();

	  // setting up all modules
	  this.images = new Images(function () {
	    return _this.body.emitter.emit("_requestRedraw");
	  }); // object with images
	  this.groups = new Groups(); // object with groups
	  this.canvas = new Canvas(this.body); // DOM handler
	  this.selectionHandler = new SelectionHandler(this.body, this.canvas); // Selection handler
	  this.interactionHandler = new InteractionHandler(this.body, this.canvas, this.selectionHandler); // Interaction handler handles all the hammer bindings (that are bound by canvas), key
	  this.view = new View(this.body, this.canvas); // camera handler, does animations and zooms
	  this.renderer = new CanvasRenderer(this.body, this.canvas); // renderer, starts renderloop, has events that modules can hook into
	  this.physics = new PhysicsEngine(this.body); // physics engine, does all the simulations
	  this.layoutEngine = new LayoutEngine(this.body); // layout engine for inital layout and hierarchical layout
	  this.clustering = new ClusterEngine(this.body); // clustering api
	  this.manipulation = new ManipulationSystem(this.body, this.canvas, this.selectionHandler); // data manipulation system

	  this.nodesHandler = new NodesHandler(this.body, this.images, this.groups, this.layoutEngine); // Handle adding, deleting and updating of nodes as well as global options
	  this.edgesHandler = new EdgesHandler(this.body, this.images, this.groups); // Handle adding, deleting and updating of edges as well as global options

	  this.body.modules["kamadaKawai"] = new KamadaKawai(this.body, 150, 0.05); // Layouting algorithm.
	  this.body.modules["clustering"] = this.clustering;

	  // create the DOM elements
	  this.canvas._create();

	  // apply options
	  this.setOptions(options);

	  // load data (the disable start variable will be the same as the enabled clustering)
	  this.setData(data);
	}

	// Extend Network with an Emitter mixin
	Emitter(Network.prototype);

	/**
	 * Set options
	 * @param {Object} options
	 */
	Network.prototype.setOptions = function (options) {
	  var _this2 = this;

	  if (options !== undefined) {
	    var errorFound = Validator.validate(options, allOptions);
	    if (errorFound === true) {
	      console.log('%cErrors have been found in the supplied options object.', printStyle);
	    }

	    // copy the global fields over
	    var fields = ['locale', 'locales', 'clickToUse'];
	    util.selectiveDeepExtend(fields, this.options, options);

	    // the hierarchical system can adapt the edges and the physics to it's own options because not all combinations work with the hierarichical system.
	    options = this.layoutEngine.setOptions(options.layout, options);

	    this.canvas.setOptions(options); // options for canvas are in globals

	    // pass the options to the modules
	    this.groups.setOptions(options.groups);
	    this.nodesHandler.setOptions(options.nodes);
	    this.edgesHandler.setOptions(options.edges);
	    this.physics.setOptions(options.physics);
	    this.manipulation.setOptions(options.manipulation, options, this.options); // manipulation uses the locales in the globals

	    this.interactionHandler.setOptions(options.interaction);
	    this.renderer.setOptions(options.interaction); // options for rendering are in interaction
	    this.selectionHandler.setOptions(options.interaction); // options for selection are in interaction

	    // reload the settings of the nodes to apply changes in groups that are not referenced by pointer.
	    if (options.groups !== undefined) {
	      this.body.emitter.emit("refreshNodes");
	    }
	    // these two do not have options at the moment, here for completeness
	    //this.view.setOptions(options.view);
	    //this.clustering.setOptions(options.clustering);

	    if ('configure' in options) {
	      if (!this.configurator) {
	        this.configurator = new Configurator(this, this.body.container, configureOptions, this.canvas.pixelRatio);
	      }

	      this.configurator.setOptions(options.configure);
	    }

	    // if the configuration system is enabled, copy all options and put them into the config system
	    if (this.configurator && this.configurator.options.enabled === true) {
	      var networkOptions = { nodes: {}, edges: {}, layout: {}, interaction: {}, manipulation: {}, physics: {}, global: {} };
	      util.deepExtend(networkOptions.nodes, this.nodesHandler.options);
	      util.deepExtend(networkOptions.edges, this.edgesHandler.options);
	      util.deepExtend(networkOptions.layout, this.layoutEngine.options);
	      // load the selectionHandler and render default options in to the interaction group
	      util.deepExtend(networkOptions.interaction, this.selectionHandler.options);
	      util.deepExtend(networkOptions.interaction, this.renderer.options);

	      util.deepExtend(networkOptions.interaction, this.interactionHandler.options);
	      util.deepExtend(networkOptions.manipulation, this.manipulation.options);
	      util.deepExtend(networkOptions.physics, this.physics.options);

	      // load globals into the global object
	      util.deepExtend(networkOptions.global, this.canvas.options);
	      util.deepExtend(networkOptions.global, this.options);

	      this.configurator.setModuleOptions(networkOptions);
	    }

	    // handle network global options
	    if (options.clickToUse !== undefined) {
	      if (options.clickToUse === true) {
	        if (this.activator === undefined) {
	          this.activator = new Activator(this.canvas.frame);
	          this.activator.on('change', function () {
	            _this2.body.emitter.emit("activate");
	          });
	        }
	      } else {
	        if (this.activator !== undefined) {
	          this.activator.destroy();
	          delete this.activator;
	        }
	        this.body.emitter.emit("activate");
	      }
	    } else {
	      this.body.emitter.emit("activate");
	    }

	    this.canvas.setSize();
	    // start the physics simulation. Can be safely called multiple times.
	    this.body.emitter.emit("startSimulation");
	  }
	};

	/**
	 * Update the visible nodes and edges list with the most recent node state.
	 *
	 * Visible nodes are stored in this.body.nodeIndices.
	 * Visible edges are stored in this.body.edgeIndices.
	 * A node or edges is visible if it is not hidden or clustered.
	 *
	 * @private
	 */
	Network.prototype._updateVisibleIndices = function () {
	  var nodes = this.body.nodes;
	  var edges = this.body.edges;
	  this.body.nodeIndices = [];
	  this.body.edgeIndices = [];

	  for (var nodeId in nodes) {
	    if (nodes.hasOwnProperty(nodeId)) {
	      if (!this.clustering._isClusteredNode(nodeId) && nodes[nodeId].options.hidden === false) {
	        this.body.nodeIndices.push(nodes[nodeId].id);
	      }
	    }
	  }

	  for (var edgeId in edges) {
	    if (edges.hasOwnProperty(edgeId)) {
	      var edge = edges[edgeId];

	      // It can happen that this is executed *after* a node edge has been removed,
	      // but *before* the edge itself has been removed. Taking this into account.
	      var fromNode = nodes[edge.fromId];
	      var toNode = nodes[edge.toId];
	      var edgeNodesPresent = fromNode !== undefined && toNode !== undefined;

	      var isVisible = !this.clustering._isClusteredEdge(edgeId) && edge.options.hidden === false && edgeNodesPresent && fromNode.options.hidden === false // Also hidden if any of its connecting nodes are hidden
	      && toNode.options.hidden === false; // idem

	      if (isVisible) {
	        this.body.edgeIndices.push(edge.id);
	      }
	    }
	  }
	};

	/**
	 * Bind all events
	 */
	Network.prototype.bindEventListeners = function () {
	  var _this3 = this;

	  // This event will trigger a rebuilding of the cache everything.
	  // Used when nodes or edges have been added or removed.
	  this.body.emitter.on("_dataChanged", function () {
	    _this3.edgesHandler._updateState();
	    _this3.body.emitter.emit("_dataUpdated");
	  });

	  // this is called when options of EXISTING nodes or edges have changed.
	  this.body.emitter.on("_dataUpdated", function () {
	    // Order important in following block
	    _this3.clustering._updateState();
	    _this3._updateVisibleIndices();

	    _this3._updateValueRange(_this3.body.nodes);
	    _this3._updateValueRange(_this3.body.edges);
	    // start simulation (can be called safely, even if already running)
	    _this3.body.emitter.emit("startSimulation");
	    _this3.body.emitter.emit("_requestRedraw");
	  });
	};

	/**
	 * Set nodes and edges, and optionally options as well.
	 *
	 * @param {Object} data              Object containing parameters:
	 *                                   {Array | DataSet | DataView} [nodes] Array with nodes
	 *                                   {Array | DataSet | DataView} [edges] Array with edges
	 *                                   {String} [dot] String containing data in DOT format
	 *                                   {String} [gephi] String containing data in gephi JSON format
	 *                                   {Options} [options] Object with options
	 */
	Network.prototype.setData = function (data) {
	  // reset the physics engine.
	  this.body.emitter.emit("resetPhysics");
	  this.body.emitter.emit("_resetData");

	  // unselect all to ensure no selections from old data are carried over.
	  this.selectionHandler.unselectAll();

	  if (data && data.dot && (data.nodes || data.edges)) {
	    throw new SyntaxError('Data must contain either parameter "dot" or ' + ' parameter pair "nodes" and "edges", but not both.');
	  }

	  // set options
	  this.setOptions(data && data.options);
	  // set all data
	  if (data && data.dot) {
	    console.log('The dot property has been deprecated. Please use the static convertDot method to convert DOT into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertDot(dotString);');
	    // parse DOT file
	    var dotData = dotparser.DOTToGraph(data.dot);
	    this.setData(dotData);
	    return;
	  } else if (data && data.gephi) {
	    // parse DOT file
	    console.log('The gephi property has been deprecated. Please use the static convertGephi method to convert gephi into vis.network format and use the normal data format with nodes and edges. This converter is used like this: var data = vis.network.convertGephi(gephiJson);');
	    var gephiData = gephiParser.parseGephi(data.gephi);
	    this.setData(gephiData);
	    return;
	  } else {
	    this.nodesHandler.setData(data && data.nodes, true);
	    this.edgesHandler.setData(data && data.edges, true);
	  }

	  // emit change in data
	  this.body.emitter.emit("_dataChanged");

	  // emit data loaded
	  this.body.emitter.emit("_dataLoaded");

	  // find a stable position or start animating to a stable position
	  this.body.emitter.emit("initPhysics");
	};

	/**
	 * Cleans up all bindings of the network, removing it fully from the memory IF the variable is set to null after calling this function.
	 * var network = new vis.Network(..);
	 * network.destroy();
	 * network = null;
	 */
	Network.prototype.destroy = function () {
	  this.body.emitter.emit("destroy");
	  // clear events
	  this.body.emitter.off();
	  this.off();

	  // delete modules
	  delete this.groups;
	  delete this.canvas;
	  delete this.selectionHandler;
	  delete this.interactionHandler;
	  delete this.view;
	  delete this.renderer;
	  delete this.physics;
	  delete this.layoutEngine;
	  delete this.clustering;
	  delete this.manipulation;
	  delete this.nodesHandler;
	  delete this.edgesHandler;
	  delete this.configurator;
	  delete this.images;

	  for (var nodeId in this.body.nodes) {
	    if (!this.body.nodes.hasOwnProperty(nodeId)) continue;
	    delete this.body.nodes[nodeId];
	  }

	  for (var edgeId in this.body.edges) {
	    if (!this.body.edges.hasOwnProperty(edgeId)) continue;
	    delete this.body.edges[edgeId];
	  }

	  // remove the container and everything inside it recursively
	  util.recursiveDOMDelete(this.body.container);
	};

	/**
	 * Update the values of all object in the given array according to the current
	 * value range of the objects in the array.
	 * @param {Object} obj    An object containing a set of Edges or Nodes
	 *                        The objects must have a method getValue() and
	 *                        setValueRange(min, max).
	 * @private
	 */
	Network.prototype._updateValueRange = function (obj) {
	  var id;

	  // determine the range of the objects
	  var valueMin = undefined;
	  var valueMax = undefined;
	  var valueTotal = 0;
	  for (id in obj) {
	    if (obj.hasOwnProperty(id)) {
	      var value = obj[id].getValue();
	      if (value !== undefined) {
	        valueMin = valueMin === undefined ? value : Math.min(value, valueMin);
	        valueMax = valueMax === undefined ? value : Math.max(value, valueMax);
	        valueTotal += value;
	      }
	    }
	  }

	  // adjust the range of all objects
	  if (valueMin !== undefined && valueMax !== undefined) {
	    for (id in obj) {
	      if (obj.hasOwnProperty(id)) {
	        obj[id].setValueRange(valueMin, valueMax, valueTotal);
	      }
	    }
	  }
	};

	/**
	 * Returns true when the Network is active.
	 * @returns {boolean}
	 */
	Network.prototype.isActive = function () {
	  return !this.activator || this.activator.active;
	};

	Network.prototype.setSize = function () {
	  return this.canvas.setSize.apply(this.canvas, arguments);
	};
	Network.prototype.canvasToDOM = function () {
	  return this.canvas.canvasToDOM.apply(this.canvas, arguments);
	};
	Network.prototype.DOMtoCanvas = function () {
	  return this.canvas.DOMtoCanvas.apply(this.canvas, arguments);
	};
	Network.prototype.findNode = function () {
	  return this.clustering.findNode.apply(this.clustering, arguments);
	};
	Network.prototype.isCluster = function () {
	  return this.clustering.isCluster.apply(this.clustering, arguments);
	};
	Network.prototype.openCluster = function () {
	  return this.clustering.openCluster.apply(this.clustering, arguments);
	};
	Network.prototype.cluster = function () {
	  return this.clustering.cluster.apply(this.clustering, arguments);
	};
	Network.prototype.getNodesInCluster = function () {
	  return this.clustering.getNodesInCluster.apply(this.clustering, arguments);
	};
	Network.prototype.clusterByConnection = function () {
	  return this.clustering.clusterByConnection.apply(this.clustering, arguments);
	};
	Network.prototype.clusterByHubsize = function () {
	  return this.clustering.clusterByHubsize.apply(this.clustering, arguments);
	};
	Network.prototype.clusterOutliers = function () {
	  return this.clustering.clusterOutliers.apply(this.clustering, arguments);
	};
	Network.prototype.getSeed = function () {
	  return this.layoutEngine.getSeed.apply(this.layoutEngine, arguments);
	};
	Network.prototype.enableEditMode = function () {
	  return this.manipulation.enableEditMode.apply(this.manipulation, arguments);
	};
	Network.prototype.disableEditMode = function () {
	  return this.manipulation.disableEditMode.apply(this.manipulation, arguments);
	};
	Network.prototype.addNodeMode = function () {
	  return this.manipulation.addNodeMode.apply(this.manipulation, arguments);
	};
	Network.prototype.editNode = function () {
	  return this.manipulation.editNode.apply(this.manipulation, arguments);
	};
	Network.prototype.editNodeMode = function () {
	  console.log("Deprecated: Please use editNode instead of editNodeMode.");return this.manipulation.editNode.apply(this.manipulation, arguments);
	};
	Network.prototype.addEdgeMode = function () {
	  return this.manipulation.addEdgeMode.apply(this.manipulation, arguments);
	};
	Network.prototype.editEdgeMode = function () {
	  return this.manipulation.editEdgeMode.apply(this.manipulation, arguments);
	};
	Network.prototype.deleteSelected = function () {
	  return this.manipulation.deleteSelected.apply(this.manipulation, arguments);
	};
	Network.prototype.getPositions = function () {
	  return this.nodesHandler.getPositions.apply(this.nodesHandler, arguments);
	};
	Network.prototype.storePositions = function () {
	  return this.nodesHandler.storePositions.apply(this.nodesHandler, arguments);
	};
	Network.prototype.moveNode = function () {
	  return this.nodesHandler.moveNode.apply(this.nodesHandler, arguments);
	};
	Network.prototype.getBoundingBox = function () {
	  return this.nodesHandler.getBoundingBox.apply(this.nodesHandler, arguments);
	};
	Network.prototype.getConnectedNodes = function (objectId) {
	  if (this.body.nodes[objectId] !== undefined) {
	    return this.nodesHandler.getConnectedNodes.apply(this.nodesHandler, arguments);
	  } else {
	    return this.edgesHandler.getConnectedNodes.apply(this.edgesHandler, arguments);
	  }
	};
	Network.prototype.getConnectedEdges = function () {
	  return this.nodesHandler.getConnectedEdges.apply(this.nodesHandler, arguments);
	};
	Network.prototype.startSimulation = function () {
	  return this.physics.startSimulation.apply(this.physics, arguments);
	};
	Network.prototype.stopSimulation = function () {
	  return this.physics.stopSimulation.apply(this.physics, arguments);
	};
	Network.prototype.stabilize = function () {
	  return this.physics.stabilize.apply(this.physics, arguments);
	};
	Network.prototype.getSelection = function () {
	  return this.selectionHandler.getSelection.apply(this.selectionHandler, arguments);
	};
	Network.prototype.setSelection = function () {
	  return this.selectionHandler.setSelection.apply(this.selectionHandler, arguments);
	};
	Network.prototype.getSelectedNodes = function () {
	  return this.selectionHandler.getSelectedNodes.apply(this.selectionHandler, arguments);
	};
	Network.prototype.getSelectedEdges = function () {
	  return this.selectionHandler.getSelectedEdges.apply(this.selectionHandler, arguments);
	};
	Network.prototype.getNodeAt = function () {
	  var node = this.selectionHandler.getNodeAt.apply(this.selectionHandler, arguments);
	  if (node !== undefined && node.id !== undefined) {
	    return node.id;
	  }
	  return node;
	};
	Network.prototype.getEdgeAt = function () {
	  var edge = this.selectionHandler.getEdgeAt.apply(this.selectionHandler, arguments);
	  if (edge !== undefined && edge.id !== undefined) {
	    return edge.id;
	  }
	  return edge;
	};
	Network.prototype.selectNodes = function () {
	  return this.selectionHandler.selectNodes.apply(this.selectionHandler, arguments);
	};
	Network.prototype.selectEdges = function () {
	  return this.selectionHandler.selectEdges.apply(this.selectionHandler, arguments);
	};
	Network.prototype.unselectAll = function () {
	  this.selectionHandler.unselectAll.apply(this.selectionHandler, arguments);
	  this.redraw();
	};
	Network.prototype.redraw = function () {
	  return this.renderer.redraw.apply(this.renderer, arguments);
	};
	Network.prototype.getScale = function () {
	  return this.view.getScale.apply(this.view, arguments);
	};
	Network.prototype.getViewPosition = function () {
	  return this.view.getViewPosition.apply(this.view, arguments);
	};
	Network.prototype.fit = function () {
	  return this.view.fit.apply(this.view, arguments);
	};
	Network.prototype.moveTo = function () {
	  return this.view.moveTo.apply(this.view, arguments);
	};
	Network.prototype.focus = function () {
	  return this.view.focus.apply(this.view, arguments);
	};
	Network.prototype.releaseNode = function () {
	  return this.view.releaseNode.apply(this.view, arguments);
	};
	Network.prototype.getOptionsFromConfigurator = function () {
	  var options = {};
	  if (this.configurator) {
	    options = this.configurator.getOptions.apply(this.configurator);
	  }
	  return options;
	};

	module.exports = Network;

	/***/ }),
	/* 183 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/**
	 * Canvas shapes used by Network
	 */
	if (typeof CanvasRenderingContext2D !== 'undefined') {

	  /**
	   * Draw a circle shape
	   *
	   * @param {number} x
	   * @param {number} y
	   * @param {number} r
	   */
	  CanvasRenderingContext2D.prototype.circle = function (x, y, r) {
	    this.beginPath();
	    this.arc(x, y, r, 0, 2 * Math.PI, false);
	    this.closePath();
	  };

	  /**
	   * Draw a square shape
	   * @param {number} x horizontal center
	   * @param {number} y vertical center
	   * @param {number} r   size, width and height of the square
	   */
	  CanvasRenderingContext2D.prototype.square = function (x, y, r) {
	    this.beginPath();
	    this.rect(x - r, y - r, r * 2, r * 2);
	    this.closePath();
	  };

	  /**
	   * Draw a triangle shape
	   * @param {number} x horizontal center
	   * @param {number} y vertical center
	   * @param {number} r   radius, half the length of the sides of the triangle
	   */
	  CanvasRenderingContext2D.prototype.triangle = function (x, y, r) {
	    // http://en.wikipedia.org/wiki/Equilateral_triangle
	    this.beginPath();

	    // the change in radius and the offset is here to center the shape
	    r *= 1.15;
	    y += 0.275 * r;

	    var s = r * 2;
	    var s2 = s / 2;
	    var ir = Math.sqrt(3) / 6 * s; // radius of inner circle
	    var h = Math.sqrt(s * s - s2 * s2); // height


	    this.moveTo(x, y - (h - ir));
	    this.lineTo(x + s2, y + ir);
	    this.lineTo(x - s2, y + ir);
	    this.lineTo(x, y - (h - ir));
	    this.closePath();
	  };

	  /**
	   * Draw a triangle shape in downward orientation
	   * @param {number} x horizontal center
	   * @param {number} y vertical center
	   * @param {number} r radius
	   */
	  CanvasRenderingContext2D.prototype.triangleDown = function (x, y, r) {
	    // http://en.wikipedia.org/wiki/Equilateral_triangle
	    this.beginPath();

	    // the change in radius and the offset is here to center the shape
	    r *= 1.15;
	    y -= 0.275 * r;

	    var s = r * 2;
	    var s2 = s / 2;
	    var ir = Math.sqrt(3) / 6 * s; // radius of inner circle
	    var h = Math.sqrt(s * s - s2 * s2); // height

	    this.moveTo(x, y + (h - ir));
	    this.lineTo(x + s2, y - ir);
	    this.lineTo(x - s2, y - ir);
	    this.lineTo(x, y + (h - ir));
	    this.closePath();
	  };

	  /**
	   * Draw a star shape, a star with 5 points
	   * @param {number} x horizontal center
	   * @param {number} y vertical center
	   * @param {number} r   radius, half the length of the sides of the triangle
	   */
	  CanvasRenderingContext2D.prototype.star = function (x, y, r) {
	    // http://www.html5canvastutorials.com/labs/html5-canvas-star-spinner/
	    this.beginPath();

	    // the change in radius and the offset is here to center the shape
	    r *= 0.82;
	    y += 0.1 * r;

	    for (var n = 0; n < 10; n++) {
	      var radius = n % 2 === 0 ? r * 1.3 : r * 0.5;
	      this.lineTo(x + radius * Math.sin(n * 2 * Math.PI / 10), y - radius * Math.cos(n * 2 * Math.PI / 10));
	    }

	    this.closePath();
	  };

	  /**
	   * Draw a Diamond shape
	   * @param {number} x horizontal center
	   * @param {number} y vertical center
	   * @param {number} r   radius, half the length of the sides of the triangle
	   */
	  CanvasRenderingContext2D.prototype.diamond = function (x, y, r) {
	    // http://www.html5canvastutorials.com/labs/html5-canvas-star-spinner/
	    this.beginPath();

	    this.lineTo(x, y + r);
	    this.lineTo(x + r, y);
	    this.lineTo(x, y - r);
	    this.lineTo(x - r, y);

	    this.closePath();
	  };

	  /**
	   * http://stackoverflow.com/questions/1255512/how-to-draw-a-rounded-rectangle-on-html-canvas
	   *
	   * @param {number} x
	   * @param {number} y
	   * @param {number} w
	   * @param {number} h
	   * @param {number} r
	   */
	  CanvasRenderingContext2D.prototype.roundRect = function (x, y, w, h, r) {
	    var r2d = Math.PI / 180;
	    if (w - 2 * r < 0) {
	      r = w / 2;
	    } //ensure that the radius isn't too large for x
	    if (h - 2 * r < 0) {
	      r = h / 2;
	    } //ensure that the radius isn't too large for y
	    this.beginPath();
	    this.moveTo(x + r, y);
	    this.lineTo(x + w - r, y);
	    this.arc(x + w - r, y + r, r, r2d * 270, r2d * 360, false);
	    this.lineTo(x + w, y + h - r);
	    this.arc(x + w - r, y + h - r, r, 0, r2d * 90, false);
	    this.lineTo(x + r, y + h);
	    this.arc(x + r, y + h - r, r, r2d * 90, r2d * 180, false);
	    this.lineTo(x, y + r);
	    this.arc(x + r, y + r, r, r2d * 180, r2d * 270, false);
	    this.closePath();
	  };

	  /**
	   * http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
	   *
	   * Postfix '_vis' added to discern it from standard method ellipse().
	   *
	   * @param {number} x
	   * @param {number} y
	   * @param {number} w
	   * @param {number} h
	   */
	  CanvasRenderingContext2D.prototype.ellipse_vis = function (x, y, w, h) {
	    var kappa = .5522848,
	        ox = w / 2 * kappa,
	        // control point offset horizontal
	    oy = h / 2 * kappa,
	        // control point offset vertical
	    xe = x + w,
	        // x-end
	    ye = y + h,
	        // y-end
	    xm = x + w / 2,
	        // x-middle
	    ym = y + h / 2; // y-middle

	    this.beginPath();
	    this.moveTo(x, ym);
	    this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
	    this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
	    this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
	    this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
	    this.closePath();
	  };

	  /**
	   * http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas
	   *
	   * @param {number} x
	   * @param {number} y
	   * @param {number} w
	   * @param {number} h
	   */
	  CanvasRenderingContext2D.prototype.database = function (x, y, w, h) {
	    var f = 1 / 3;
	    var wEllipse = w;
	    var hEllipse = h * f;

	    var kappa = .5522848,
	        ox = wEllipse / 2 * kappa,
	        // control point offset horizontal
	    oy = hEllipse / 2 * kappa,
	        // control point offset vertical
	    xe = x + wEllipse,
	        // x-end
	    ye = y + hEllipse,
	        // y-end
	    xm = x + wEllipse / 2,
	        // x-middle
	    ym = y + hEllipse / 2,
	        // y-middle
	    ymb = y + (h - hEllipse / 2),
	        // y-midlle, bottom ellipse
	    yeb = y + h; // y-end, bottom ellipse

	    this.beginPath();
	    this.moveTo(xe, ym);

	    this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
	    this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);

	    this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
	    this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);

	    this.lineTo(xe, ymb);

	    this.bezierCurveTo(xe, ymb + oy, xm + ox, yeb, xm, yeb);
	    this.bezierCurveTo(xm - ox, yeb, x, ymb + oy, x, ymb);

	    this.lineTo(x, ym);
	  };

	  /**
	   * Sets up the dashedLine functionality for drawing
	   * Original code came from http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas
	   * @author David Jordan
	   * @date 2012-08-08
	   *
	   * @param {number} x
	   * @param {number} y
	   * @param {number} x2
	   * @param {number} y2
	   * @param {string} pattern
	   */
	  CanvasRenderingContext2D.prototype.dashedLine = function (x, y, x2, y2, pattern) {
	    this.beginPath();
	    this.moveTo(x, y);

	    var patternLength = pattern.length;
	    var dx = x2 - x;
	    var dy = y2 - y;
	    var slope = dy / dx;
	    var distRemaining = Math.sqrt(dx * dx + dy * dy);
	    var patternIndex = 0;
	    var draw = true;
	    var xStep = 0;
	    var dashLength = pattern[0];

	    while (distRemaining >= 0.1) {
	      dashLength = pattern[patternIndex++ % patternLength];
	      if (dashLength > distRemaining) {
	        dashLength = distRemaining;
	      }

	      xStep = Math.sqrt(dashLength * dashLength / (1 + slope * slope));
	      xStep = dx < 0 ? -xStep : xStep;
	      x += xStep;
	      y += slope * xStep;

	      if (draw === true) {
	        this.lineTo(x, y);
	      } else {
	        this.moveTo(x, y);
	      }

	      distRemaining -= dashLength;
	      draw = !draw;
	    }
	  };

	  /**
	   * Draw a Hexagon shape with 6 sides
	   * @param {Number} x horizontal center
	   * @param {Number} y vertical center
	   * @param {Number} r   radius
	   */
	  CanvasRenderingContext2D.prototype.hexagon = function (x, y, r) {
	    this.beginPath();
	    var sides = 6;
	    var a = Math.PI * 2 / sides;
	    this.moveTo(x + r, y);
	    for (var i = 1; i < sides; i++) {
	      this.lineTo(x + r * Math.cos(a * i), y + r * Math.sin(a * i));
	    }
	    this.closePath();
	  };
	}

	/***/ }),
	/* 184 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	// English
	exports['en'] = {
	  edit: 'Edit',
	  del: 'Delete selected',
	  back: 'Back',
	  addNode: 'Add Node',
	  addEdge: 'Add Edge',
	  editNode: 'Edit Node',
	  editEdge: 'Edit Edge',
	  addDescription: 'Click in an empty space to place a new node.',
	  edgeDescription: 'Click on a node and drag the edge to another node to connect them.',
	  editEdgeDescription: 'Click on the control points and drag them to a node to connect to it.',
	  createEdgeError: 'Cannot link edges to a cluster.',
	  deleteClusterError: 'Clusters cannot be deleted.',
	  editClusterError: 'Clusters cannot be edited.'
	};
	exports['en_EN'] = exports['en'];
	exports['en_US'] = exports['en'];

	// German
	exports['de'] = {
	  edit: 'Editieren',
	  del: 'L\xF6sche Auswahl',
	  back: 'Zur\xFCck',
	  addNode: 'Knoten hinzuf\xFCgen',
	  addEdge: 'Kante hinzuf\xFCgen',
	  editNode: 'Knoten editieren',
	  editEdge: 'Kante editieren',
	  addDescription: 'Klicke auf eine freie Stelle, um einen neuen Knoten zu plazieren.',
	  edgeDescription: 'Klicke auf einen Knoten und ziehe die Kante zu einem anderen Knoten, um diese zu verbinden.',
	  editEdgeDescription: 'Klicke auf die Verbindungspunkte und ziehe diese auf einen Knoten, um sie zu verbinden.',
	  createEdgeError: 'Es ist nicht m\xF6glich, Kanten mit Clustern zu verbinden.',
	  deleteClusterError: 'Cluster k\xF6nnen nicht gel\xF6scht werden.',
	  editClusterError: 'Cluster k\xF6nnen nicht editiert werden.'
	};
	exports['de_DE'] = exports['de'];

	// Spanish
	exports['es'] = {
	  edit: 'Editar',
	  del: 'Eliminar selecci\xF3n',
	  back: '\xC1tras',
	  addNode: 'A\xF1adir nodo',
	  addEdge: 'A\xF1adir arista',
	  editNode: 'Editar nodo',
	  editEdge: 'Editar arista',
	  addDescription: 'Haga clic en un lugar vac\xEDo para colocar un nuevo nodo.',
	  edgeDescription: 'Haga clic en un nodo y arrastre la arista hacia otro nodo para conectarlos.',
	  editEdgeDescription: 'Haga clic en un punto de control y arrastrelo a un nodo para conectarlo.',
	  createEdgeError: 'No se puede conectar una arista a un grupo.',
	  deleteClusterError: 'No es posible eliminar grupos.',
	  editClusterError: 'No es posible editar grupos.'
	};
	exports['es_ES'] = exports['es'];

	//Italiano
	exports['it'] = {
	  edit: 'Modifica',
	  del: 'Cancella la selezione',
	  back: 'Indietro',
	  addNode: 'Aggiungi un nodo',
	  addEdge: 'Aggiungi un vertice',
	  editNode: 'Modifica il nodo',
	  editEdge: 'Modifica il vertice',
	  addDescription: 'Clicca per aggiungere un nuovo nodo',
	  edgeDescription: 'Clicca su un nodo e trascinalo ad un altro nodo per connetterli.',
	  editEdgeDescription: 'Clicca sui Punti di controllo e trascinali ad un nodo per connetterli.',
	  createEdgeError: 'Non si possono collegare vertici ad un cluster',
	  deleteClusterError: 'I cluster non possono essere cancellati',
	  editClusterError: 'I clusters non possono essere modificati.'
	};
	exports['it_IT'] = exports['it'];

	// Dutch
	exports['nl'] = {
	  edit: 'Wijzigen',
	  del: 'Selectie verwijderen',
	  back: 'Terug',
	  addNode: 'Node toevoegen',
	  addEdge: 'Link toevoegen',
	  editNode: 'Node wijzigen',
	  editEdge: 'Link wijzigen',
	  addDescription: 'Klik op een leeg gebied om een nieuwe node te maken.',
	  edgeDescription: 'Klik op een node en sleep de link naar een andere node om ze te verbinden.',
	  editEdgeDescription: 'Klik op de verbindingspunten en sleep ze naar een node om daarmee te verbinden.',
	  createEdgeError: 'Kan geen link maken naar een cluster.',
	  deleteClusterError: 'Clusters kunnen niet worden verwijderd.',
	  editClusterError: 'Clusters kunnen niet worden aangepast.'
	};
	exports['nl_NL'] = exports['nl'];
	exports['nl_BE'] = exports['nl'];

	// Portuguese Brazil
	exports['pt-br'] = {
	  edit: 'Editar',
	  del: 'Remover selecionado',
	  back: 'Voltar',
	  addNode: 'Adicionar nó',
	  addEdge: 'Adicionar aresta',
	  editNode: 'Editar nó',
	  editEdge: 'Editar aresta',
	  addDescription: 'Clique em um espaço em branco para adicionar um novo nó',
	  edgeDescription: 'Clique em um nó e arraste a aresta até outro nó para conectá-los',
	  editEdgeDescription: 'Clique nos pontos de controle e os arraste para um nó para conectá-los',
	  createEdgeError: 'Não foi possível linkar arestas a um cluster.',
	  deleteClusterError: 'Clusters não puderam ser removidos.',
	  editClusterError: 'Clusters não puderam ser editados.'
	};
	exports['pt-BR'] = exports['pt-br'];
	exports['pt_BR'] = exports['pt-br'];
	exports['pt_br'] = exports['pt-br'];

	// Russian
	exports['ru'] = {
	  edit: 'Редактировать',
	  del: 'Удалить выбранное',
	  back: 'Назад',
	  addNode: 'Добавить узел',
	  addEdge: 'Добавить ребро',
	  editNode: 'Редактировать узел',
	  editEdge: 'Редактировать ребро',
	  addDescription: 'Кликните в свободное место, чтобы добавить новый узел.',
	  edgeDescription: 'Кликните на узел и протяните ребро к другому узлу, чтобы соединить их.',
	  editEdgeDescription: 'Кликните на контрольные точки и перетащите их в узел, чтобы подключиться к нему.',
	  createEdgeError: 'Невозможно соединить ребра в кластер.',
	  deleteClusterError: 'Кластеры не могут быть удалены',
	  editClusterError: 'Кластеры недоступны для редактирования.'
	};
	exports['ru_RU'] = exports['ru'];

	// Chinese
	exports['cn'] = {
	  edit: '编辑',
	  del: '删除选定',
	  back: '返回',
	  addNode: '添加节点',
	  addEdge: '添加连接线',
	  editNode: '编辑节点',
	  editEdge: '编辑连接线',
	  addDescription: '单击空白处放置新节点。',
	  edgeDescription: '单击某个节点并将该连接线拖动到另一个节点以连接它们。',
	  editEdgeDescription: '单击控制节点并将它们拖到节点上连接。',
	  createEdgeError: '无法将连接线连接到群集。',
	  deleteClusterError: '无法删除群集。',
	  editClusterError: '无法编辑群集。'
	};
	exports['zh_CN'] = exports['cn'];

	/***/ }),
	/* 185 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Associates a canvas to a given image, containing a number of renderings
	 * of the image at various sizes.
	 *
	 * This technique is known as 'mipmapping'.
	 *
	 * NOTE: Images can also be of type 'data:svg+xml`. This code also works
	 *       for svg, but the mipmapping may not be necessary.
	 *
	 * @param {Image} image
	 */
	var CachedImage = function () {
	  /**
	   * @ignore
	   */
	  function CachedImage() {
	    (0, _classCallCheck3['default'])(this, CachedImage);
	    // eslint-disable-line no-unused-vars
	    this.NUM_ITERATIONS = 4; // Number of items in the coordinates array

	    this.image = new Image();
	    this.canvas = document.createElement('canvas');
	  }

	  /**
	   * Called when the image has been successfully loaded.
	   */


	  (0, _createClass3['default'])(CachedImage, [{
	    key: 'init',
	    value: function init() {
	      if (this.initialized()) return;

	      this.src = this.image.src; // For same interface with Image
	      var w = this.image.width;
	      var h = this.image.height;

	      // Ease external access
	      this.width = w;
	      this.height = h;

	      var h2 = Math.floor(h / 2);
	      var h4 = Math.floor(h / 4);
	      var h8 = Math.floor(h / 8);
	      var h16 = Math.floor(h / 16);

	      var w2 = Math.floor(w / 2);
	      var w4 = Math.floor(w / 4);
	      var w8 = Math.floor(w / 8);
	      var w16 = Math.floor(w / 16);

	      // Make canvas as small as possible
	      this.canvas.width = 3 * w4;
	      this.canvas.height = h2;

	      // Coordinates and sizes of images contained in the canvas
	      // Values per row:  [top x, left y, width, height]

	      this.coordinates = [[0, 0, w2, h2], [w2, 0, w4, h4], [w2, h4, w8, h8], [5 * w8, h4, w16, h16]];

	      this._fillMipMap();
	    }

	    /**
	     * @return {Boolean} true if init() has been called, false otherwise.
	     */

	  }, {
	    key: 'initialized',
	    value: function initialized() {
	      return this.coordinates !== undefined;
	    }

	    /**
	     * Redraw main image in various sizes to the context.
	     *
	     * The rationale behind this is to reduce artefacts due to interpolation
	     * at differing zoom levels.
	     *
	     * Source: http://stackoverflow.com/q/18761404/1223531
	     *
	     * This methods takes the resizing out of the drawing loop, in order to
	     * reduce performance overhead.
	     *
	     * TODO: The code assumes that a 2D context can always be gotten. This is
	     *       not necessarily true! OTOH, if not true then usage of this class
	     *       is senseless.
	     *
	     * @private
	     */

	  }, {
	    key: '_fillMipMap',
	    value: function _fillMipMap() {
	      var ctx = this.canvas.getContext('2d');

	      // First zoom-level comes from the image
	      var to = this.coordinates[0];
	      ctx.drawImage(this.image, to[0], to[1], to[2], to[3]);

	      // The rest are copy actions internal to the canvas/context
	      for (var iterations = 1; iterations < this.NUM_ITERATIONS; iterations++) {
	        var from = this.coordinates[iterations - 1];
	        var _to = this.coordinates[iterations];

	        ctx.drawImage(this.canvas, from[0], from[1], from[2], from[3], _to[0], _to[1], _to[2], _to[3]);
	      }
	    }

	    /**
	     * Draw the image, using the mipmap if necessary.
	     *
	     * MipMap is only used if param factor > 2; otherwise, original bitmap
	     * is resized. This is also used to skip mipmap usage, e.g. by setting factor = 1
	     *
	     * Credits to 'Alex de Mulder' for original implementation.
	     *
	     * @param {CanvasRenderingContext2D} ctx  context on which to draw zoomed image
	     * @param {Float} factor scale factor at which to draw
	     * @param {number} left
	     * @param {number} top
	     * @param {number} width
	     * @param {number} height
	     */

	  }, {
	    key: 'drawImageAtPosition',
	    value: function drawImageAtPosition(ctx, factor, left, top, width, height) {

	      if (!this.initialized()) return; //can't draw image yet not intialized

	      if (factor > 2) {
	        // Determine which zoomed image to use
	        factor *= 0.5;
	        var iterations = 0;
	        while (factor > 2 && iterations < this.NUM_ITERATIONS) {
	          factor *= 0.5;
	          iterations += 1;
	        }

	        if (iterations >= this.NUM_ITERATIONS) {
	          iterations = this.NUM_ITERATIONS - 1;
	        }
	        //console.log("iterations: " + iterations);

	        var from = this.coordinates[iterations];
	        ctx.drawImage(this.canvas, from[0], from[1], from[2], from[3], left, top, width, height);
	      } else {
	        // Draw image directly
	        ctx.drawImage(this.image, left, top, width, height);
	      }
	    }
	  }]);
	  return CachedImage;
	}();

	exports['default'] = CachedImage;

	/***/ }),
	/* 186 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var util = __webpack_require__(2);

	/**
	 * This class can store groups and options specific for groups.
	 */

	var Groups = function () {
	  /**
	   * @ignore
	   */
	  function Groups() {
	    (0, _classCallCheck3["default"])(this, Groups);

	    this.clear();
	    this.defaultIndex = 0;
	    this.groupsArray = [];
	    this.groupIndex = 0;

	    this.defaultGroups = [{ border: "#2B7CE9", background: "#97C2FC", highlight: { border: "#2B7CE9", background: "#D2E5FF" }, hover: { border: "#2B7CE9", background: "#D2E5FF" } }, // 0: blue
	    { border: "#FFA500", background: "#FFFF00", highlight: { border: "#FFA500", background: "#FFFFA3" }, hover: { border: "#FFA500", background: "#FFFFA3" } }, // 1: yellow
	    { border: "#FA0A10", background: "#FB7E81", highlight: { border: "#FA0A10", background: "#FFAFB1" }, hover: { border: "#FA0A10", background: "#FFAFB1" } }, // 2: red
	    { border: "#41A906", background: "#7BE141", highlight: { border: "#41A906", background: "#A1EC76" }, hover: { border: "#41A906", background: "#A1EC76" } }, // 3: green
	    { border: "#E129F0", background: "#EB7DF4", highlight: { border: "#E129F0", background: "#F0B3F5" }, hover: { border: "#E129F0", background: "#F0B3F5" } }, // 4: magenta
	    { border: "#7C29F0", background: "#AD85E4", highlight: { border: "#7C29F0", background: "#D3BDF0" }, hover: { border: "#7C29F0", background: "#D3BDF0" } }, // 5: purple
	    { border: "#C37F00", background: "#FFA807", highlight: { border: "#C37F00", background: "#FFCA66" }, hover: { border: "#C37F00", background: "#FFCA66" } }, // 6: orange
	    { border: "#4220FB", background: "#6E6EFD", highlight: { border: "#4220FB", background: "#9B9BFD" }, hover: { border: "#4220FB", background: "#9B9BFD" } }, // 7: darkblue
	    { border: "#FD5A77", background: "#FFC0CB", highlight: { border: "#FD5A77", background: "#FFD1D9" }, hover: { border: "#FD5A77", background: "#FFD1D9" } }, // 8: pink
	    { border: "#4AD63A", background: "#C2FABC", highlight: { border: "#4AD63A", background: "#E6FFE3" }, hover: { border: "#4AD63A", background: "#E6FFE3" } }, // 9: mint

	    { border: "#990000", background: "#EE0000", highlight: { border: "#BB0000", background: "#FF3333" }, hover: { border: "#BB0000", background: "#FF3333" } }, // 10:bright red

	    { border: "#FF6000", background: "#FF6000", highlight: { border: "#FF6000", background: "#FF6000" }, hover: { border: "#FF6000", background: "#FF6000" } }, // 12: real orange
	    { border: "#97C2FC", background: "#2B7CE9", highlight: { border: "#D2E5FF", background: "#2B7CE9" }, hover: { border: "#D2E5FF", background: "#2B7CE9" } }, // 13: blue
	    { border: "#399605", background: "#255C03", highlight: { border: "#399605", background: "#255C03" }, hover: { border: "#399605", background: "#255C03" } }, // 14: green
	    { border: "#B70054", background: "#FF007E", highlight: { border: "#B70054", background: "#FF007E" }, hover: { border: "#B70054", background: "#FF007E" } }, // 15: magenta
	    { border: "#AD85E4", background: "#7C29F0", highlight: { border: "#D3BDF0", background: "#7C29F0" }, hover: { border: "#D3BDF0", background: "#7C29F0" } }, // 16: purple
	    { border: "#4557FA", background: "#000EA1", highlight: { border: "#6E6EFD", background: "#000EA1" }, hover: { border: "#6E6EFD", background: "#000EA1" } }, // 17: darkblue
	    { border: "#FFC0CB", background: "#FD5A77", highlight: { border: "#FFD1D9", background: "#FD5A77" }, hover: { border: "#FFD1D9", background: "#FD5A77" } }, // 18: pink
	    { border: "#C2FABC", background: "#74D66A", highlight: { border: "#E6FFE3", background: "#74D66A" }, hover: { border: "#E6FFE3", background: "#74D66A" } }, // 19: mint

	    { border: "#EE0000", background: "#990000", highlight: { border: "#FF3333", background: "#BB0000" }, hover: { border: "#FF3333", background: "#BB0000" } // 20:bright red
	    }];

	    this.options = {};
	    this.defaultOptions = {
	      useDefaultGroups: true
	    };
	    util.extend(this.options, this.defaultOptions);
	  }

	  /**
	   *
	   * @param {Object} options
	   */


	  (0, _createClass3["default"])(Groups, [{
	    key: "setOptions",
	    value: function setOptions(options) {
	      var optionFields = ['useDefaultGroups'];

	      if (options !== undefined) {
	        for (var groupName in options) {
	          if (options.hasOwnProperty(groupName)) {
	            if (optionFields.indexOf(groupName) === -1) {
	              var group = options[groupName];
	              this.add(groupName, group);
	            }
	          }
	        }
	      }
	    }

	    /**
	     * Clear all groups
	     */

	  }, {
	    key: "clear",
	    value: function clear() {
	      this.groups = {};
	      this.groupsArray = [];
	    }

	    /**
	     * Get group options of a groupname.
	     * If groupname is not found, a new group may be created.
	     *
	     * @param {*}       groupname     Can be a number, string, Date, etc.
	     * @param {boolean} [shouldCreate=true] If true, create a new group
	     * @return {Object} The found or created group
	     */

	  }, {
	    key: "get",
	    value: function get(groupname) {
	      var shouldCreate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	      var group = this.groups[groupname];

	      if (group === undefined && shouldCreate) {
	        if (this.options.useDefaultGroups === false && this.groupsArray.length > 0) {
	          // create new group
	          var index = this.groupIndex % this.groupsArray.length;
	          this.groupIndex++;
	          group = {};
	          group.color = this.groups[this.groupsArray[index]];
	          this.groups[groupname] = group;
	        } else {
	          // create new group
	          var _index = this.defaultIndex % this.defaultGroups.length;
	          this.defaultIndex++;
	          group = {};
	          group.color = this.defaultGroups[_index];
	          this.groups[groupname] = group;
	        }
	      }

	      return group;
	    }

	    /**
	     * Add a custom group style
	     * @param {string} groupName
	     * @param {Object} style       An object containing borderColor,
	     *                             backgroundColor, etc.
	     * @return {Object} group      The created group object
	     */

	  }, {
	    key: "add",
	    value: function add(groupName, style) {
	      this.groups[groupName] = style;
	      this.groupsArray.push(groupName);
	      return style;
	    }
	  }]);
	  return Groups;
	}();

	exports["default"] = Groups;

	/***/ }),
	/* 187 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);
	var DataSet = __webpack_require__(11);
	var DataView = __webpack_require__(12);
	var Node = __webpack_require__(47)['default'];

	/**
	 * Handler for Nodes
	 */

	var NodesHandler = function () {
	  /**
	   * @param {Object} body
	   * @param {Images} images
	   * @param {Array.<Group>} groups
	   * @param {LayoutEngine} layoutEngine
	   */
	  function NodesHandler(body, images, groups, layoutEngine) {
	    var _this = this;

	    (0, _classCallCheck3['default'])(this, NodesHandler);

	    this.body = body;
	    this.images = images;
	    this.groups = groups;
	    this.layoutEngine = layoutEngine;

	    // create the node API in the body container
	    this.body.functions.createNode = this.create.bind(this);

	    this.nodesListeners = {
	      add: function add(event, params) {
	        _this.add(params.items);
	      },
	      update: function update(event, params) {
	        _this.update(params.items, params.data, params.oldData);
	      },
	      remove: function remove(event, params) {
	        _this.remove(params.items);
	      }
	    };

	    this.defaultOptions = {
	      borderWidth: 1,
	      borderWidthSelected: 2,
	      brokenImage: undefined,
	      color: {
	        border: '#2B7CE9',
	        background: '#97C2FC',
	        highlight: {
	          border: '#2B7CE9',
	          background: '#D2E5FF'
	        },
	        hover: {
	          border: '#2B7CE9',
	          background: '#D2E5FF'
	        }
	      },
	      fixed: {
	        x: false,
	        y: false
	      },
	      font: {
	        color: '#343434',
	        size: 14, // px
	        face: 'arial',
	        background: 'none',
	        strokeWidth: 0, // px
	        strokeColor: '#ffffff',
	        align: 'center',
	        vadjust: 0,
	        multi: false,
	        bold: {
	          mod: 'bold'
	        },
	        boldital: {
	          mod: 'bold italic'
	        },
	        ital: {
	          mod: 'italic'
	        },
	        mono: {
	          mod: '',
	          size: 15, // px
	          face: 'monospace',
	          vadjust: 2
	        }
	      },
	      group: undefined,
	      hidden: false,
	      icon: {
	        face: 'FontAwesome', //'FontAwesome',
	        code: undefined, //'\uf007',
	        size: 50, //50,
	        color: '#2B7CE9' //'#aa00ff'
	      },
	      image: undefined, // --> URL
	      label: undefined,
	      labelHighlightBold: true,
	      level: undefined,
	      margin: {
	        top: 5,
	        right: 5,
	        bottom: 5,
	        left: 5
	      },
	      mass: 1,
	      physics: true,
	      scaling: {
	        min: 10,
	        max: 30,
	        label: {
	          enabled: false,
	          min: 14,
	          max: 30,
	          maxVisible: 30,
	          drawThreshold: 5
	        },
	        customScalingFunction: function customScalingFunction(min, max, total, value) {
	          if (max === min) {
	            return 0.5;
	          } else {
	            var scale = 1 / (max - min);
	            return Math.max(0, (value - min) * scale);
	          }
	        }
	      },
	      shadow: {
	        enabled: false,
	        color: 'rgba(0,0,0,0.5)',
	        size: 10,
	        x: 5,
	        y: 5
	      },
	      shape: 'ellipse',
	      shapeProperties: {
	        borderDashes: false, // only for borders
	        borderRadius: 6, // only for box shape
	        interpolation: true, // only for image and circularImage shapes
	        useImageSize: false, // only for image and circularImage shapes
	        useBorderWithImage: false // only for image shape
	      },
	      size: 25,
	      title: undefined,
	      value: undefined,
	      x: undefined,
	      y: undefined
	    };

	    // Protect from idiocy
	    if (this.defaultOptions.mass <= 0) {
	      throw 'Internal error: mass in defaultOptions of NodesHandler may not be zero or negative';
	    }

	    this.options = util.bridgeObject(this.defaultOptions);

	    this.bindEventListeners();
	  }

	  /**
	   * Binds event listeners
	   */


	  (0, _createClass3['default'])(NodesHandler, [{
	    key: 'bindEventListeners',
	    value: function bindEventListeners() {
	      var _this2 = this;

	      // refresh the nodes. Used when reverting from hierarchical layout
	      this.body.emitter.on('refreshNodes', this.refresh.bind(this));
	      this.body.emitter.on('refresh', this.refresh.bind(this));
	      this.body.emitter.on('destroy', function () {
	        util.forEach(_this2.nodesListeners, function (callback, event) {
	          if (_this2.body.data.nodes) _this2.body.data.nodes.off(event, callback);
	        });
	        delete _this2.body.functions.createNode;
	        delete _this2.nodesListeners.add;
	        delete _this2.nodesListeners.update;
	        delete _this2.nodesListeners.remove;
	        delete _this2.nodesListeners;
	      });
	    }

	    /**
	     *
	     * @param {Object} options
	     */

	  }, {
	    key: 'setOptions',
	    value: function setOptions(options) {
	      if (options !== undefined) {
	        Node.parseOptions(this.options, options);

	        // update the shape in all nodes
	        if (options.shape !== undefined) {
	          for (var nodeId in this.body.nodes) {
	            if (this.body.nodes.hasOwnProperty(nodeId)) {
	              this.body.nodes[nodeId].updateShape();
	            }
	          }
	        }

	        // update the font in all nodes
	        if (options.font !== undefined) {
	          for (var _nodeId in this.body.nodes) {
	            if (this.body.nodes.hasOwnProperty(_nodeId)) {
	              this.body.nodes[_nodeId].updateLabelModule();
	              this.body.nodes[_nodeId].needsRefresh();
	            }
	          }
	        }

	        // update the shape size in all nodes
	        if (options.size !== undefined) {
	          for (var _nodeId2 in this.body.nodes) {
	            if (this.body.nodes.hasOwnProperty(_nodeId2)) {
	              this.body.nodes[_nodeId2].needsRefresh();
	            }
	          }
	        }

	        // update the state of the variables if needed
	        if (options.hidden !== undefined || options.physics !== undefined) {
	          this.body.emitter.emit('_dataChanged');
	        }
	      }
	    }

	    /**
	     * Set a data set with nodes for the network
	     * @param {Array | DataSet | DataView} nodes         The data containing the nodes.
	     * @param {boolean} [doNotEmit=false]
	     * @private
	     */

	  }, {
	    key: 'setData',
	    value: function setData(nodes) {
	      var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	      var oldNodesData = this.body.data.nodes;

	      if (nodes instanceof DataSet || nodes instanceof DataView) {
	        this.body.data.nodes = nodes;
	      } else if (Array.isArray(nodes)) {
	        this.body.data.nodes = new DataSet();
	        this.body.data.nodes.add(nodes);
	      } else if (!nodes) {
	        this.body.data.nodes = new DataSet();
	      } else {
	        throw new TypeError('Array or DataSet expected');
	      }

	      if (oldNodesData) {
	        // unsubscribe from old dataset
	        util.forEach(this.nodesListeners, function (callback, event) {
	          oldNodesData.off(event, callback);
	        });
	      }

	      // remove drawn nodes
	      this.body.nodes = {};

	      if (this.body.data.nodes) {
	        // subscribe to new dataset
	        var me = this;
	        util.forEach(this.nodesListeners, function (callback, event) {
	          me.body.data.nodes.on(event, callback);
	        });

	        // draw all new nodes
	        var ids = this.body.data.nodes.getIds();
	        this.add(ids, true);
	      }

	      if (doNotEmit === false) {
	        this.body.emitter.emit("_dataChanged");
	      }
	    }

	    /**
	     * Add nodes
	     * @param {number[] | string[]} ids
	     * @param {boolean} [doNotEmit=false]
	     * @private
	     */

	  }, {
	    key: 'add',
	    value: function add(ids) {
	      var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	      var id = void 0;
	      var newNodes = [];
	      for (var i = 0; i < ids.length; i++) {
	        id = ids[i];
	        var properties = this.body.data.nodes.get(id);
	        var node = this.create(properties);
	        newNodes.push(node);
	        this.body.nodes[id] = node; // note: this may replace an existing node
	      }

	      this.layoutEngine.positionInitially(newNodes);

	      if (doNotEmit === false) {
	        this.body.emitter.emit("_dataChanged");
	      }
	    }

	    /**
	     * Update existing nodes, or create them when not yet existing
	     * @param {number[] | string[]} ids id's of changed nodes
	     * @param {Array} changedData array with changed data
	     * @param {Array|undefined} oldData optional; array with previous data
	     * @private
	     */

	  }, {
	    key: 'update',
	    value: function update(ids, changedData, oldData) {
	      var nodes = this.body.nodes;
	      var dataChanged = false;
	      for (var i = 0; i < ids.length; i++) {
	        var id = ids[i];
	        var node = nodes[id];
	        var data = changedData[i];
	        if (node !== undefined) {
	          // update node
	          if (node.setOptions(data)) {
	            dataChanged = true;
	          }
	        } else {
	          dataChanged = true;
	          // create node
	          node = this.create(data);
	          nodes[id] = node;
	        }
	      }

	      if (!dataChanged && oldData !== undefined) {
	        // Check for any changes which should trigger a layout recalculation
	        // For now, this is just 'level' for hierarchical layout
	        // Assumption: old and new data arranged in same order; at time of writing, this holds.
	        dataChanged = changedData.some(function (newValue, index) {
	          var oldValue = oldData[index];
	          return oldValue && oldValue.level !== newValue.level;
	        });
	      }

	      if (dataChanged === true) {
	        this.body.emitter.emit("_dataChanged");
	      } else {
	        this.body.emitter.emit("_dataUpdated");
	      }
	    }

	    /**
	     * Remove existing nodes. If nodes do not exist, the method will just ignore it.
	     * @param {number[] | string[]} ids
	     * @private
	     */

	  }, {
	    key: 'remove',
	    value: function remove(ids) {
	      var nodes = this.body.nodes;

	      for (var i = 0; i < ids.length; i++) {
	        var id = ids[i];
	        delete nodes[id];
	      }

	      this.body.emitter.emit("_dataChanged");
	    }

	    /**
	     * create a node
	     * @param {Object} properties
	     * @param {class} [constructorClass=Node.default]
	     * @returns {*}
	     */

	  }, {
	    key: 'create',
	    value: function create(properties) {
	      var constructorClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Node;

	      return new constructorClass(properties, this.body, this.images, this.groups, this.options, this.defaultOptions);
	    }

	    /**
	     *
	     * @param {boolean} [clearPositions=false]
	     */

	  }, {
	    key: 'refresh',
	    value: function refresh() {
	      var _this3 = this;

	      var clearPositions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	      util.forEach(this.body.nodes, function (node, nodeId) {
	        var data = _this3.body.data.nodes.get(nodeId);
	        if (data !== undefined) {
	          if (clearPositions === true) {
	            node.setOptions({ x: null, y: null });
	          }
	          node.setOptions({ fixed: false });
	          node.setOptions(data);
	        }
	      });
	    }

	    /**
	     * Returns the positions of the nodes.
	     * @param {Array.<Node.id>|String} [ids]  --> optional, can be array of nodeIds, can be string
	     * @returns {{}}
	     */

	  }, {
	    key: 'getPositions',
	    value: function getPositions(ids) {
	      var dataArray = {};
	      if (ids !== undefined) {
	        if (Array.isArray(ids) === true) {
	          for (var i = 0; i < ids.length; i++) {
	            if (this.body.nodes[ids[i]] !== undefined) {
	              var node = this.body.nodes[ids[i]];
	              dataArray[ids[i]] = { x: Math.round(node.x), y: Math.round(node.y) };
	            }
	          }
	        } else {
	          if (this.body.nodes[ids] !== undefined) {
	            var _node = this.body.nodes[ids];
	            dataArray[ids] = { x: Math.round(_node.x), y: Math.round(_node.y) };
	          }
	        }
	      } else {
	        for (var _i = 0; _i < this.body.nodeIndices.length; _i++) {
	          var _node2 = this.body.nodes[this.body.nodeIndices[_i]];
	          dataArray[this.body.nodeIndices[_i]] = { x: Math.round(_node2.x), y: Math.round(_node2.y) };
	        }
	      }
	      return dataArray;
	    }

	    /**
	     * Load the XY positions of the nodes into the dataset.
	     */

	  }, {
	    key: 'storePositions',
	    value: function storePositions() {
	      // todo: add support for clusters and hierarchical.
	      var dataArray = [];
	      var dataset = this.body.data.nodes.getDataSet();

	      for (var nodeId in dataset._data) {
	        if (dataset._data.hasOwnProperty(nodeId)) {
	          var node = this.body.nodes[nodeId];
	          if (dataset._data[nodeId].x != Math.round(node.x) || dataset._data[nodeId].y != Math.round(node.y)) {
	            dataArray.push({ id: node.id, x: Math.round(node.x), y: Math.round(node.y) });
	          }
	        }
	      }
	      dataset.update(dataArray);
	    }

	    /**
	     * get the bounding box of a node.
	     * @param {Node.id} nodeId
	     * @returns {j|*}
	     */

	  }, {
	    key: 'getBoundingBox',
	    value: function getBoundingBox(nodeId) {
	      if (this.body.nodes[nodeId] !== undefined) {
	        return this.body.nodes[nodeId].shape.boundingBox;
	      }
	    }

	    /**
	     * Get the Ids of nodes connected to this node.
	     * @param {Node.id} nodeId
	     * @param {'to'|'from'|undefined} direction values 'from' and 'to' select respectively parent and child nodes only.
	     *                                          Any other value returns both parent and child nodes.
	     * @returns {Array}
	     */

	  }, {
	    key: 'getConnectedNodes',
	    value: function getConnectedNodes(nodeId, direction) {
	      var nodeList = [];
	      if (this.body.nodes[nodeId] !== undefined) {
	        var node = this.body.nodes[nodeId];
	        var nodeObj = {}; // used to quickly check if node already exists
	        for (var i = 0; i < node.edges.length; i++) {
	          var edge = node.edges[i];
	          if (direction !== 'to' && edge.toId == node.id) {
	            // these are double equals since ids can be numeric or string
	            if (nodeObj[edge.fromId] === undefined) {
	              nodeList.push(edge.fromId);
	              nodeObj[edge.fromId] = true;
	            }
	          } else if (direction !== 'from' && edge.fromId == node.id) {
	            // these are double equals since ids can be numeric or string
	            if (nodeObj[edge.toId] === undefined) {
	              nodeList.push(edge.toId);
	              nodeObj[edge.toId] = true;
	            }
	          }
	        }
	      }
	      return nodeList;
	    }

	    /**
	     * Get the ids of the edges connected to this node.
	     * @param {Node.id} nodeId
	     * @returns {*}
	     */

	  }, {
	    key: 'getConnectedEdges',
	    value: function getConnectedEdges(nodeId) {
	      var edgeList = [];
	      if (this.body.nodes[nodeId] !== undefined) {
	        var node = this.body.nodes[nodeId];
	        for (var i = 0; i < node.edges.length; i++) {
	          edgeList.push(node.edges[i].id);
	        }
	      } else {
	        console.log("NodeId provided for getConnectedEdges does not exist. Provided: ", nodeId);
	      }
	      return edgeList;
	    }

	    /**
	     * Move a node.
	     *
	     * @param {Node.id} nodeId
	     * @param {number} x
	     * @param {number} y
	     */

	  }, {
	    key: 'moveNode',
	    value: function moveNode(nodeId, x, y) {
	      var _this4 = this;

	      if (this.body.nodes[nodeId] !== undefined) {
	        this.body.nodes[nodeId].x = Number(x);
	        this.body.nodes[nodeId].y = Number(y);
	        setTimeout(function () {
	          _this4.body.emitter.emit("startSimulation");
	        }, 0);
	      } else {
	        console.log("Node id supplied to moveNode does not exist. Provided: ", nodeId);
	      }
	    }
	  }]);
	  return NodesHandler;
	}();

	exports['default'] = NodesHandler;

	/***/ }),
	/* 188 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(189), __esModule: true };

	/***/ }),
	/* 189 */
	/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(49);
	__webpack_require__(60);
	module.exports = __webpack_require__(190);


	/***/ }),
	/* 190 */
	/***/ (function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(86);
	var ITERATOR = __webpack_require__(13)('iterator');
	var Iterators = __webpack_require__(31);
	module.exports = __webpack_require__(7).isIterable = function (it) {
	  var O = Object(it);
	  return O[ITERATOR] !== undefined
	    || '@@iterator' in O
	    // eslint-disable-next-line no-prototype-builtins
	    || Iterators.hasOwnProperty(classof(O));
	};


	/***/ }),
	/* 191 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var LabelAccumulator = __webpack_require__(192)['default'];
	var ComponentUtil = __webpack_require__(48)['default'];

	/**
	 * Helper class for Label which explodes the label text into lines and blocks within lines
	 *
	 * @private
	 */

	var LabelSplitter = function () {

	  /**
	   * @param {CanvasRenderingContext2D} ctx Canvas rendering context
	   * @param {Label} parent reference to the Label instance using current instance
	   * @param {boolean} selected 
	   * @param {boolean} hover
	   */
	  function LabelSplitter(ctx, parent, selected, hover) {
	    var _this = this;

	    (0, _classCallCheck3['default'])(this, LabelSplitter);

	    this.ctx = ctx;
	    this.parent = parent;

	    /**
	     * Callback to determine text width; passed to LabelAccumulator instance
	     *
	     * @param  {String} text string to determine width of
	     * @param  {String} mod  font type to use for this text
	     * @return {Object} { width, values} width in pixels and font attributes
	     */
	    var textWidth = function textWidth(text, mod) {
	      if (text === undefined) return 0;

	      // TODO: This can be done more efficiently with caching
	      var values = _this.parent.getFormattingValues(ctx, selected, hover, mod);

	      var width = 0;
	      if (text !== '') {
	        // NOTE: The following may actually be *incorrect* for the mod fonts!
	        //       This returns the size with a regular font, bold etc. may
	        //       have different sizes.
	        var measure = _this.ctx.measureText(text);
	        width = measure.width;
	      }

	      return { width: width, values: values };
	    };

	    this.lines = new LabelAccumulator(textWidth);
	  }

	  /**
	   * Split passed text of a label into lines and blocks.
	   *
	   * # NOTE
	   *
	   * The handling of spacing is option dependent:
	   *
	   * - if `font.multi : false`, all spaces are retained
	   * - if `font.multi : true`, every sequence of spaces is compressed to a single space
	   *
	   * This might not be the best way to do it, but this is as it has been working till now.
	   * In order not to break existing functionality, for the time being this behaviour will
	   * be retained in any code changes. 
	   *
	   * @param {string} text  text to split
	   * @returns {Array<line>}
	   */


	  (0, _createClass3['default'])(LabelSplitter, [{
	    key: 'process',
	    value: function process(text) {
	      if (!ComponentUtil.isValidLabel(text)) {
	        return this.lines.finalize();
	      }

	      var font = this.parent.fontOptions;

	      // Normalize the end-of-line's to a single representation - order important
	      text = text.replace(/\r\n/g, '\n'); // Dos EOL's
	      text = text.replace(/\r/g, '\n'); // Mac EOL's

	      // Note that at this point, there can be no \r's in the text.
	      // This is used later on splitStringIntoLines() to split multifont texts.

	      var nlLines = String(text).split('\n');
	      var lineCount = nlLines.length;

	      if (font.multi) {
	        // Multi-font case: styling tags active
	        for (var i = 0; i < lineCount; i++) {
	          var blocks = this.splitBlocks(nlLines[i], font.multi);
	          // Post: Sequences of tabs and spaces are reduced to single space

	          if (blocks === undefined) continue;

	          if (blocks.length === 0) {
	            this.lines.newLine("");
	            continue;
	          }

	          if (font.maxWdt > 0) {
	            // widthConstraint.maximum defined
	            //console.log('Running widthConstraint multi, max: ' + this.fontOptions.maxWdt);
	            for (var j = 0; j < blocks.length; j++) {
	              var mod = blocks[j].mod;
	              var _text = blocks[j].text;
	              this.splitStringIntoLines(_text, mod, true);
	            }
	          } else {
	            // widthConstraint.maximum NOT defined
	            for (var _j = 0; _j < blocks.length; _j++) {
	              var _mod = blocks[_j].mod;
	              var _text2 = blocks[_j].text;
	              this.lines.append(_text2, _mod);
	            }
	          }

	          this.lines.newLine();
	        }
	      } else {
	        // Single-font case
	        if (font.maxWdt > 0) {
	          // widthConstraint.maximum defined
	          // console.log('Running widthConstraint normal, max: ' + this.fontOptions.maxWdt);
	          for (var _i = 0; _i < lineCount; _i++) {
	            this.splitStringIntoLines(nlLines[_i]);
	          }
	        } else {
	          // widthConstraint.maximum NOT defined
	          for (var _i2 = 0; _i2 < lineCount; _i2++) {
	            this.lines.newLine(nlLines[_i2]);
	          }
	        }
	      }

	      return this.lines.finalize();
	    }

	    /**
	     * normalize the markup system
	     *
	     * @param {boolean|'md'|'markdown'|'html'} markupSystem
	     * @returns {string}
	     */

	  }, {
	    key: 'decodeMarkupSystem',
	    value: function decodeMarkupSystem(markupSystem) {
	      var system = 'none';
	      if (markupSystem === 'markdown' || markupSystem === 'md') {
	        system = 'markdown';
	      } else if (markupSystem === true || markupSystem === 'html') {
	        system = 'html';
	      }
	      return system;
	    }

	    /**
	     *
	     * @param {string} text
	     * @returns {Array}
	     */

	  }, {
	    key: 'splitHtmlBlocks',
	    value: function splitHtmlBlocks(text) {
	      var blocks = [];

	      // TODO: consolidate following + methods/closures with splitMarkdownBlocks()
	      // NOTE: sequences of tabs and spaces are reduced to single space; scan usage of `this.spacing` within method
	      var s = {
	        bold: false,
	        ital: false,
	        mono: false,
	        spacing: false,
	        position: 0,
	        buffer: "",
	        modStack: []
	      };

	      s.mod = function () {
	        return this.modStack.length === 0 ? 'normal' : this.modStack[0];
	      };

	      s.modName = function () {
	        if (this.modStack.length === 0) return 'normal';else if (this.modStack[0] === 'mono') return 'mono';else {
	          if (s.bold && s.ital) {
	            return 'boldital';
	          } else if (s.bold) {
	            return 'bold';
	          } else if (s.ital) {
	            return 'ital';
	          }
	        }
	      };

	      s.emitBlock = function () {
	        var override = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	        // eslint-disable-line no-unused-vars
	        if (this.spacing) {
	          this.add(" ");
	          this.spacing = false;
	        }
	        if (this.buffer.length > 0) {
	          blocks.push({ text: this.buffer, mod: this.modName() });
	          this.buffer = "";
	        }
	      };

	      s.add = function (text) {
	        if (text === " ") {
	          s.spacing = true;
	        }
	        if (s.spacing) {
	          this.buffer += " ";
	          this.spacing = false;
	        }
	        if (text != " ") {
	          this.buffer += text;
	        }
	      };

	      while (s.position < text.length) {
	        var ch = text.charAt(s.position);
	        if (/[ \t]/.test(ch)) {
	          if (!s.mono) {
	            s.spacing = true;
	          } else {
	            s.add(ch);
	          }
	        } else if (/</.test(ch)) {
	          if (!s.mono && !s.bold && /<b>/.test(text.substr(s.position, 3))) {
	            s.emitBlock();
	            s.bold = true;
	            s.modStack.unshift("bold");
	            s.position += 2;
	          } else if (!s.mono && !s.ital && /<i>/.test(text.substr(s.position, 3))) {
	            s.emitBlock();
	            s.ital = true;
	            s.modStack.unshift("ital");
	            s.position += 2;
	          } else if (!s.mono && /<code>/.test(text.substr(s.position, 6))) {
	            s.emitBlock();
	            s.mono = true;
	            s.modStack.unshift("mono");
	            s.position += 5;
	          } else if (!s.mono && s.mod() === 'bold' && /<\/b>/.test(text.substr(s.position, 4))) {
	            s.emitBlock();
	            s.bold = false;
	            s.modStack.shift();
	            s.position += 3;
	          } else if (!s.mono && s.mod() === 'ital' && /<\/i>/.test(text.substr(s.position, 4))) {
	            s.emitBlock();
	            s.ital = false;
	            s.modStack.shift();
	            s.position += 3;
	          } else if (s.mod() === 'mono' && /<\/code>/.test(text.substr(s.position, 7))) {
	            s.emitBlock();
	            s.mono = false;
	            s.modStack.shift();
	            s.position += 6;
	          } else {
	            s.add(ch);
	          }
	        } else if (/&/.test(ch)) {
	          if (/&lt;/.test(text.substr(s.position, 4))) {
	            s.add("<");
	            s.position += 3;
	          } else if (/&amp;/.test(text.substr(s.position, 5))) {
	            s.add("&");
	            s.position += 4;
	          } else {
	            s.add("&");
	          }
	        } else {
	          s.add(ch);
	        }
	        s.position++;
	      }
	      s.emitBlock();
	      return blocks;
	    }

	    /**
	     *
	     * @param {string} text
	     * @returns {Array}
	     */

	  }, {
	    key: 'splitMarkdownBlocks',
	    value: function splitMarkdownBlocks(text) {
	      var blocks = [];

	      // TODO: consolidate following + methods/closures with splitHtmlBlocks()
	      // NOTE: sequences of tabs and spaces are reduced to single space; scan usage of `this.spacing` within method
	      var s = {
	        bold: false,
	        ital: false,
	        mono: false,
	        beginable: true,
	        spacing: false,
	        position: 0,
	        buffer: "",
	        modStack: []
	      };

	      s.mod = function () {
	        return this.modStack.length === 0 ? 'normal' : this.modStack[0];
	      };

	      s.modName = function () {
	        if (this.modStack.length === 0) return 'normal';else if (this.modStack[0] === 'mono') return 'mono';else {
	          if (s.bold && s.ital) {
	            return 'boldital';
	          } else if (s.bold) {
	            return 'bold';
	          } else if (s.ital) {
	            return 'ital';
	          }
	        }
	      };

	      s.emitBlock = function () {
	        var override = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	        // eslint-disable-line no-unused-vars
	        if (this.spacing) {
	          this.add(" ");
	          this.spacing = false;
	        }
	        if (this.buffer.length > 0) {
	          blocks.push({ text: this.buffer, mod: this.modName() });
	          this.buffer = "";
	        }
	      };

	      s.add = function (text) {
	        if (text === " ") {
	          s.spacing = true;
	        }
	        if (s.spacing) {
	          this.buffer += " ";
	          this.spacing = false;
	        }
	        if (text != " ") {
	          this.buffer += text;
	        }
	      };

	      while (s.position < text.length) {
	        var ch = text.charAt(s.position);
	        if (/[ \t]/.test(ch)) {
	          if (!s.mono) {
	            s.spacing = true;
	          } else {
	            s.add(ch);
	          }
	          s.beginable = true;
	        } else if (/\\/.test(ch)) {
	          if (s.position < text.length + 1) {
	            s.position++;
	            ch = text.charAt(s.position);
	            if (/ \t/.test(ch)) {
	              s.spacing = true;
	            } else {
	              s.add(ch);
	              s.beginable = false;
	            }
	          }
	        } else if (!s.mono && !s.bold && (s.beginable || s.spacing) && /\*/.test(ch)) {
	          s.emitBlock();
	          s.bold = true;
	          s.modStack.unshift("bold");
	        } else if (!s.mono && !s.ital && (s.beginable || s.spacing) && /\_/.test(ch)) {
	          s.emitBlock();
	          s.ital = true;
	          s.modStack.unshift("ital");
	        } else if (!s.mono && (s.beginable || s.spacing) && /`/.test(ch)) {
	          s.emitBlock();
	          s.mono = true;
	          s.modStack.unshift("mono");
	        } else if (!s.mono && s.mod() === "bold" && /\*/.test(ch)) {
	          if (s.position === text.length - 1 || /[.,_` \t\n]/.test(text.charAt(s.position + 1))) {
	            s.emitBlock();
	            s.bold = false;
	            s.modStack.shift();
	          } else {
	            s.add(ch);
	          }
	        } else if (!s.mono && s.mod() === "ital" && /\_/.test(ch)) {
	          if (s.position === text.length - 1 || /[.,*` \t\n]/.test(text.charAt(s.position + 1))) {
	            s.emitBlock();
	            s.ital = false;
	            s.modStack.shift();
	          } else {
	            s.add(ch);
	          }
	        } else if (s.mono && s.mod() === "mono" && /`/.test(ch)) {
	          if (s.position === text.length - 1 || /[.,*_ \t\n]/.test(text.charAt(s.position + 1))) {
	            s.emitBlock();
	            s.mono = false;
	            s.modStack.shift();
	          } else {
	            s.add(ch);
	          }
	        } else {
	          s.add(ch);
	          s.beginable = false;
	        }
	        s.position++;
	      }
	      s.emitBlock();
	      return blocks;
	    }

	    /**
	     * Explodes a piece of text into single-font blocks using a given markup
	     *
	     * @param {string} text
	     * @param {boolean|'md'|'markdown'|'html'} markupSystem
	     * @returns {Array.<{text: string, mod: string}>}
	     * @private
	     */

	  }, {
	    key: 'splitBlocks',
	    value: function splitBlocks(text, markupSystem) {
	      var system = this.decodeMarkupSystem(markupSystem);
	      if (system === 'none') {
	        return [{
	          text: text,
	          mod: 'normal'
	        }];
	      } else if (system === 'markdown') {
	        return this.splitMarkdownBlocks(text);
	      } else if (system === 'html') {
	        return this.splitHtmlBlocks(text);
	      }
	    }

	    /**
	     * @param {string} text
	     * @returns {boolean} true if text length over the current max with
	     * @private
	     */

	  }, {
	    key: 'overMaxWidth',
	    value: function overMaxWidth(text) {
	      var width = this.ctx.measureText(text).width;
	      return this.lines.curWidth() + width > this.parent.fontOptions.maxWdt;
	    }

	    /**
	     * Determine the longest part of the sentence which still fits in the 
	     * current max width.
	     * 
	     * @param {Array} words  Array of strings signifying a text lines
	     * @return {number}      index of first item in string making string go over max
	     * @private
	     */

	  }, {
	    key: 'getLongestFit',
	    value: function getLongestFit(words) {
	      var text = '';
	      var w = 0;

	      while (w < words.length) {
	        var pre = text === '' ? '' : ' ';
	        var newText = text + pre + words[w];

	        if (this.overMaxWidth(newText)) break;
	        text = newText;
	        w++;
	      }

	      return w;
	    }

	    /**
	     * Determine the longest part of the string which still fits in the
	     * current max width.
	     * 
	     * @param {Array} words Array of strings signifying a text lines
	     * @return {number} index of first item in string making string go over max
	     */

	  }, {
	    key: 'getLongestFitWord',
	    value: function getLongestFitWord(words) {
	      var w = 0;

	      while (w < words.length) {
	        if (this.overMaxWidth(words.slice(0, w))) break;
	        w++;
	      }

	      return w;
	    }

	    /**
	     * Split the passed text into lines, according to width constraint (if any).
	     * 
	     * The method assumes that the input string is a single line, i.e. without lines break.
	     *
	     * This method retains spaces, if still present (case `font.multi: false`).
	     * A space which falls on an internal line break, will be replaced by a newline.
	     * There is no special handling of tabs; these go along with the flow.
	     * 
	     * @param {string} str
	     * @param {string} [mod='normal']
	     * @param {boolean} [appendLast=false]
	     * @private
	     */

	  }, {
	    key: 'splitStringIntoLines',
	    value: function splitStringIntoLines(str) {
	      var mod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';
	      var appendLast = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	      // Still-present spaces are relevant, retain them
	      str = str.replace(/^( +)/g, '$1\r');
	      str = str.replace(/([^\r][^ ]*)( +)/g, '$1\r$2\r');
	      var words = str.split('\r');

	      while (words.length > 0) {
	        var w = this.getLongestFit(words);

	        if (w === 0) {
	          // Special case: the first word is already larger than the max width.
	          var word = words[0];

	          // Break the word to the largest part that fits the line
	          var x = this.getLongestFitWord(word);
	          this.lines.newLine(word.slice(0, x), mod);

	          // Adjust the word, so that the rest will be done next iteration
	          words[0] = word.slice(x);
	        } else {
	          // skip any space that is replaced by a newline
	          var newW = w;
	          if (words[w - 1] === ' ') {
	            w--;
	          } else if (words[newW] === ' ') {
	            newW++;
	          }

	          var text = words.slice(0, w).join("");

	          if (w == words.length && appendLast) {
	            this.lines.append(text, mod);
	          } else {
	            this.lines.newLine(text, mod);
	          }

	          // Adjust the word, so that the rest will be done next iteration
	          words = words.slice(newW);
	        }
	      }
	    }
	  }]);
	  return LabelSplitter;
	}();

	exports['default'] = LabelSplitter;

	/***/ }),
	/* 192 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _assign = __webpack_require__(90);

	var _assign2 = _interopRequireDefault(_assign);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * Callback to determine text dimensions, using the parent label settings.
	 * @callback MeasureText
	 * @param {text} text
	 * @param {text} mod
	 * @return {Object} { width, values} width in pixels and font attributes
	 */

	/**
	 * Helper class for Label which collects results of splitting labels into lines and blocks.
	 *
	 * @private
	 */
	var LabelAccumulator = function () {

	  /**
	   * @param {MeasureText} measureText
	   */
	  function LabelAccumulator(measureText) {
	    (0, _classCallCheck3["default"])(this, LabelAccumulator);

	    this.measureText = measureText;
	    this.current = 0;
	    this.width = 0;
	    this.height = 0;
	    this.lines = [];
	  }

	  /**
	   * Append given text to the given line.
	   *
	   * @param {number}  l    index of line to add to
	   * @param {string}  text string to append to line
	   * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod='normal']
	   * @private
	   */


	  (0, _createClass3["default"])(LabelAccumulator, [{
	    key: "_add",
	    value: function _add(l, text) {
	      var mod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'normal';


	      if (this.lines[l] === undefined) {
	        this.lines[l] = {
	          width: 0,
	          height: 0,
	          blocks: []
	        };
	      }

	      // We still need to set a block for undefined and empty texts, hence return at this point
	      // This is necessary because we don't know at this point if we're at the
	      // start of an empty line or not.
	      // To compensate, empty blocks are removed in `finalize()`.
	      //
	      // Empty strings should still have a height
	      var tmpText = text;
	      if (text === undefined || text === "") tmpText = " ";

	      // Determine width and get the font properties
	      var result = this.measureText(tmpText, mod);
	      var block = (0, _assign2["default"])({}, result.values);
	      block.text = text;
	      block.width = result.width;
	      block.mod = mod;

	      if (text === undefined || text === "") {
	        block.width = 0;
	      }

	      this.lines[l].blocks.push(block);

	      // Update the line width. We need this for determining if a string goes over max width
	      this.lines[l].width += block.width;
	    }

	    /**
	     * Returns the width in pixels of the current line.
	     *
	     * @returns {number}
	     */

	  }, {
	    key: "curWidth",
	    value: function curWidth() {
	      var line = this.lines[this.current];
	      if (line === undefined) return 0;

	      return line.width;
	    }

	    /**
	     * Add text in block to current line
	     *
	     * @param {string} text
	     * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod='normal']
	     */

	  }, {
	    key: "append",
	    value: function append(text) {
	      var mod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';

	      this._add(this.current, text, mod);
	    }

	    /**
	     * Add text in block to current line and start a new line
	     *
	     * @param {string} text
	     * @param {'bold'|'ital'|'boldital'|'mono'|'normal'} [mod='normal']
	     */

	  }, {
	    key: "newLine",
	    value: function newLine(text) {
	      var mod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'normal';

	      this._add(this.current, text, mod);
	      this.current++;
	    }

	    /**
	     * Determine and set the heights of all the lines currently contained in this instance
	     *
	     * Note that width has already been set.
	     * 
	     * @private
	     */

	  }, {
	    key: "determineLineHeights",
	    value: function determineLineHeights() {
	      for (var k = 0; k < this.lines.length; k++) {
	        var line = this.lines[k];

	        // Looking for max height of blocks in line
	        var height = 0;

	        if (line.blocks !== undefined) {
	          // Can happen if text contains e.g. '\n '
	          for (var l = 0; l < line.blocks.length; l++) {
	            var block = line.blocks[l];

	            if (height < block.height) {
	              height = block.height;
	            }
	          }
	        }

	        line.height = height;
	      }
	    }

	    /**
	     * Determine the full size of the label text, as determined by current lines and blocks
	     * 
	     * @private
	     */

	  }, {
	    key: "determineLabelSize",
	    value: function determineLabelSize() {
	      var width = 0;
	      var height = 0;
	      for (var k = 0; k < this.lines.length; k++) {
	        var line = this.lines[k];

	        if (line.width > width) {
	          width = line.width;
	        }
	        height += line.height;
	      }

	      this.width = width;
	      this.height = height;
	    }

	    /**
	     * Remove all empty blocks and empty lines we don't need
	     * 
	     * This must be done after the width/height determination,
	     * so that these are set properly for processing here.
	     *
	     * @returns {Array<Line>} Lines with empty blocks (and some empty lines) removed
	     * @private
	     */

	  }, {
	    key: "removeEmptyBlocks",
	    value: function removeEmptyBlocks() {
	      var tmpLines = [];
	      for (var k = 0; k < this.lines.length; k++) {
	        var line = this.lines[k];

	        // Note: an empty line in between text has width zero but is still relevant to layout.
	        // So we can't use width for testing empty line here
	        if (line.blocks.length === 0) continue;

	        // Discard final empty line always
	        if (k === this.lines.length - 1) {
	          if (line.width === 0) continue;
	        }

	        var tmpLine = {};
	        (0, _assign2["default"])(tmpLine, line);
	        tmpLine.blocks = [];

	        var firstEmptyBlock = void 0;
	        var tmpBlocks = [];
	        for (var l = 0; l < line.blocks.length; l++) {
	          var block = line.blocks[l];
	          if (block.width !== 0) {
	            tmpBlocks.push(block);
	          } else {
	            if (firstEmptyBlock === undefined) {
	              firstEmptyBlock = block;
	            }
	          }
	        }

	        // Ensure that there is *some* text present
	        if (tmpBlocks.length === 0 && firstEmptyBlock !== undefined) {
	          tmpBlocks.push(firstEmptyBlock);
	        }

	        tmpLine.blocks = tmpBlocks;

	        tmpLines.push(tmpLine);
	      }

	      return tmpLines;
	    }

	    /**
	     * Set the sizes for all lines and the whole thing.
	     *
	     * @returns {{width: (number|*), height: (number|*), lines: Array}}
	     */

	  }, {
	    key: "finalize",
	    value: function finalize() {
	      //console.log(JSON.stringify(this.lines, null, 2));

	      this.determineLineHeights();
	      this.determineLabelSize();
	      var tmpLines = this.removeEmptyBlocks();

	      // Return a simple hash object for further processing.
	      return {
	        width: this.width,
	        height: this.height,
	        lines: tmpLines
	      };
	    }
	  }]);
	  return LabelAccumulator;
	}();

	exports["default"] = LabelAccumulator;

	/***/ }),
	/* 193 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _NodeBase2 = __webpack_require__(23);

	var _NodeBase3 = _interopRequireDefault(_NodeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A Box Node/Cluster shape.
	 *
	 * @extends NodeBase
	 */
	var Box = function (_NodeBase) {
	  (0, _inherits3['default'])(Box, _NodeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function Box(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, Box);

	    var _this = (0, _possibleConstructorReturn3['default'])(this, (Box.__proto__ || (0, _getPrototypeOf2['default'])(Box)).call(this, options, body, labelModule));

	    _this._setMargins(labelModule);
	    return _this;
	  }

	  /**
	   *
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {boolean} [selected]
	   * @param {boolean} [hover]
	   */


	  (0, _createClass3['default'])(Box, [{
	    key: 'resize',
	    value: function resize(ctx) {
	      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
	      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;

	      if (this.needsRefresh(selected, hover)) {
	        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);

	        this.width = dimensions.width + this.margin.right + this.margin.left;
	        this.height = dimensions.height + this.margin.top + this.margin.bottom;
	        this.radius = this.width / 2;
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} x width
	     * @param {number} y height
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: 'draw',
	    value: function draw(ctx, x, y, selected, hover, values) {
	      this.resize(ctx, selected, hover);
	      this.left = x - this.width / 2;
	      this.top = y - this.height / 2;

	      this.initContextForDraw(ctx, values);
	      ctx.roundRect(this.left, this.top, this.width, this.height, values.borderRadius);
	      this.performFill(ctx, values);

	      this.updateBoundingBox(x, y, ctx, selected, hover);
	      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);
	    }

	    /**
	     *
	     * @param {number} x width
	     * @param {number} y height
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {boolean} selected
	     * @param {boolean} hover
	     */

	  }, {
	    key: 'updateBoundingBox',
	    value: function updateBoundingBox(x, y, ctx, selected, hover) {
	      this._updateBoundingBox(x, y, ctx, selected, hover);

	      var borderRadius = this.options.shapeProperties.borderRadius; // only effective for box
	      this._addBoundingBoxMargin(borderRadius);
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} angle
	     * @returns {number}
	     */

	  }, {
	    key: 'distanceToBorder',
	    value: function distanceToBorder(ctx, angle) {
	      this.resize(ctx);
	      var borderWidth = this.options.borderWidth;

	      return Math.min(Math.abs(this.width / 2 / Math.cos(angle)), Math.abs(this.height / 2 / Math.sin(angle))) + borderWidth;
	    }
	  }]);
	  return Box;
	}(_NodeBase3['default']);

	exports['default'] = Box;

	/***/ }),
	/* 194 */
	/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(195);
	module.exports = __webpack_require__(7).Object.getPrototypeOf;


	/***/ }),
	/* 195 */
	/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject = __webpack_require__(41);
	var $getPrototypeOf = __webpack_require__(85);

	__webpack_require__(87)('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return $getPrototypeOf(toObject(it));
	  };
	});


	/***/ }),
	/* 196 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(197), __esModule: true };

	/***/ }),
	/* 197 */
	/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(198);
	module.exports = __webpack_require__(7).Object.setPrototypeOf;


	/***/ }),
	/* 198 */
	/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(17);
	$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(199).set });


	/***/ }),
	/* 199 */
	/***/ (function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(32);
	var anObject = __webpack_require__(27);
	var check = function (O, proto) {
	  anObject(O);
	  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function (test, buggy, set) {
	      try {
	        set = __webpack_require__(80)(Function.call, __webpack_require__(89).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch (e) { buggy = true; }
	      return function setPrototypeOf(O, proto) {
	        check(O, proto);
	        if (buggy) O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};


	/***/ }),
	/* 200 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _CircleImageBase2 = __webpack_require__(73);

	var _CircleImageBase3 = _interopRequireDefault(_CircleImageBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A Circle Node/Cluster shape.
	 *
	 * @extends CircleImageBase
	 */
	var Circle = function (_CircleImageBase) {
	  (0, _inherits3['default'])(Circle, _CircleImageBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function Circle(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, Circle);

	    var _this = (0, _possibleConstructorReturn3['default'])(this, (Circle.__proto__ || (0, _getPrototypeOf2['default'])(Circle)).call(this, options, body, labelModule));

	    _this._setMargins(labelModule);
	    return _this;
	  }

	  /**
	   *
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {boolean} [selected]
	   * @param {boolean} [hover]
	   */


	  (0, _createClass3['default'])(Circle, [{
	    key: 'resize',
	    value: function resize(ctx) {
	      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
	      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;

	      if (this.needsRefresh(selected, hover)) {
	        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);

	        var diameter = Math.max(dimensions.width + this.margin.right + this.margin.left, dimensions.height + this.margin.top + this.margin.bottom);

	        this.options.size = diameter / 2; // NOTE: this size field only set here, not in Ellipse, Database, Box
	        this.width = diameter;
	        this.height = diameter;
	        this.radius = this.width / 2;
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} x width
	     * @param {number} y height
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: 'draw',
	    value: function draw(ctx, x, y, selected, hover, values) {
	      this.resize(ctx, selected, hover);
	      this.left = x - this.width / 2;
	      this.top = y - this.height / 2;

	      this._drawRawCircle(ctx, x, y, values);

	      this.updateBoundingBox(x, y);
	      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, y, selected, hover);
	    }

	    /**
	     *
	     * @param {number} x width
	     * @param {number} y height
	     */

	  }, {
	    key: 'updateBoundingBox',
	    value: function updateBoundingBox(x, y) {
	      this.boundingBox.top = y - this.options.size;
	      this.boundingBox.left = x - this.options.size;
	      this.boundingBox.right = x + this.options.size;
	      this.boundingBox.bottom = y + this.options.size;
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} angle - Unused
	     * @returns {number}
	     */

	  }, {
	    key: 'distanceToBorder',
	    value: function distanceToBorder(ctx, angle) {
	      // eslint-disable-line no-unused-vars
	      this.resize(ctx);
	      return this.width * 0.5;
	    }
	  }]);
	  return Circle;
	}(_CircleImageBase3['default']);

	exports['default'] = Circle;

	/***/ }),
	/* 201 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _CircleImageBase2 = __webpack_require__(73);

	var _CircleImageBase3 = _interopRequireDefault(_CircleImageBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A CircularImage Node/Cluster shape.
	 *
	 * @extends CircleImageBase
	 */
	var CircularImage = function (_CircleImageBase) {
	  (0, _inherits3['default'])(CircularImage, _CircleImageBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   * @param {Image} imageObj
	   * @param {Image} imageObjAlt
	   */
	  function CircularImage(options, body, labelModule, imageObj, imageObjAlt) {
	    (0, _classCallCheck3['default'])(this, CircularImage);

	    var _this = (0, _possibleConstructorReturn3['default'])(this, (CircularImage.__proto__ || (0, _getPrototypeOf2['default'])(CircularImage)).call(this, options, body, labelModule));

	    _this.setImages(imageObj, imageObjAlt);
	    return _this;
	  }

	  /**
	   *
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {boolean} [selected]
	   * @param {boolean} [hover]
	   */


	  (0, _createClass3['default'])(CircularImage, [{
	    key: 'resize',
	    value: function resize(ctx) {
	      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
	      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;

	      var imageAbsent = this.imageObj.src === undefined || this.imageObj.width === undefined || this.imageObj.height === undefined;

	      if (imageAbsent) {
	        var diameter = this.options.size * 2;
	        this.width = diameter;
	        this.height = diameter;
	        this.radius = 0.5 * this.width;
	        return;
	      }

	      // At this point, an image is present, i.e. this.imageObj is valid.
	      if (this.needsRefresh(selected, hover)) {
	        this._resizeImage();
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} x width
	     * @param {number} y height
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: 'draw',
	    value: function draw(ctx, x, y, selected, hover, values) {
	      this.switchImages(selected);
	      this.resize();
	      this.left = x - this.width / 2;
	      this.top = y - this.height / 2;

	      // draw the background circle. IMPORTANT: the stroke in this method is used by the clip method below.
	      this._drawRawCircle(ctx, x, y, values);

	      // now we draw in the circle, we save so we can revert the clip operation after drawing.
	      ctx.save();
	      // clip is used to use the stroke in drawRawCircle as an area that we can draw in.
	      ctx.clip();
	      // draw the image
	      this._drawImageAtPosition(ctx, values);
	      // restore so we can again draw on the full canvas
	      ctx.restore();

	      this._drawImageLabel(ctx, x, y, selected, hover);

	      this.updateBoundingBox(x, y);
	    }

	    // TODO: compare with Circle.updateBoundingBox(), consolidate? More stuff is happening here
	    /**
	     *
	     * @param {number} x width
	     * @param {number} y height
	     */

	  }, {
	    key: 'updateBoundingBox',
	    value: function updateBoundingBox(x, y) {
	      this.boundingBox.top = y - this.options.size;
	      this.boundingBox.left = x - this.options.size;
	      this.boundingBox.right = x + this.options.size;
	      this.boundingBox.bottom = y + this.options.size;

	      // TODO: compare with Image.updateBoundingBox(), consolidate?
	      this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
	      this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
	      this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} angle - Unused
	     * @returns {number}
	     */

	  }, {
	    key: 'distanceToBorder',
	    value: function distanceToBorder(ctx, angle) {
	      // eslint-disable-line no-unused-vars
	      this.resize(ctx);
	      return this.width * 0.5;
	    }
	  }]);
	  return CircularImage;
	}(_CircleImageBase3['default']);

	exports['default'] = CircularImage;

	/***/ }),
	/* 202 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _NodeBase2 = __webpack_require__(23);

	var _NodeBase3 = _interopRequireDefault(_NodeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A Database Node/Cluster shape.
	 *
	 * @extends NodeBase
	 */
	var Database = function (_NodeBase) {
	  (0, _inherits3['default'])(Database, _NodeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function Database(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, Database);

	    var _this = (0, _possibleConstructorReturn3['default'])(this, (Database.__proto__ || (0, _getPrototypeOf2['default'])(Database)).call(this, options, body, labelModule));

	    _this._setMargins(labelModule);
	    return _this;
	  }

	  /**
	   *
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {boolean} selected
	   * @param {boolean} hover
	   */


	  (0, _createClass3['default'])(Database, [{
	    key: 'resize',
	    value: function resize(ctx, selected, hover) {
	      if (this.needsRefresh(selected, hover)) {
	        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);
	        var size = dimensions.width + this.margin.right + this.margin.left;

	        this.width = size;
	        this.height = size;
	        this.radius = this.width / 2;
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} x width
	     * @param {number} y height
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: 'draw',
	    value: function draw(ctx, x, y, selected, hover, values) {
	      this.resize(ctx, selected, hover);
	      this.left = x - this.width / 2;
	      this.top = y - this.height / 2;

	      this.initContextForDraw(ctx, values);
	      ctx.database(x - this.width / 2, y - this.height / 2, this.width, this.height);
	      this.performFill(ctx, values);

	      this.updateBoundingBox(x, y, ctx, selected, hover);
	      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);
	    }
	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} angle
	     * @returns {number}
	     */

	  }, {
	    key: 'distanceToBorder',
	    value: function distanceToBorder(ctx, angle) {
	      return this._distanceToBorder(ctx, angle);
	    }
	  }]);
	  return Database;
	}(_NodeBase3['default']);

	exports['default'] = Database;

	/***/ }),
	/* 203 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _ShapeBase2 = __webpack_require__(24);

	var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A Diamond Node/Cluster shape.
	 *
	 * @extends ShapeBase
	 */
	var Diamond = function (_ShapeBase) {
	  (0, _inherits3['default'])(Diamond, _ShapeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function Diamond(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, Diamond);
	    return (0, _possibleConstructorReturn3['default'])(this, (Diamond.__proto__ || (0, _getPrototypeOf2['default'])(Diamond)).call(this, options, body, labelModule));
	  }

	  /**
	   *
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {number} x width
	   * @param {number} y height
	   * @param {boolean} selected
	   * @param {boolean} hover
	   * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	   */


	  (0, _createClass3['default'])(Diamond, [{
	    key: 'draw',
	    value: function draw(ctx, x, y, selected, hover, values) {
	      this._drawShape(ctx, 'diamond', 4, x, y, selected, hover, values);
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} angle
	     * @returns {number}
	     */

	  }, {
	    key: 'distanceToBorder',
	    value: function distanceToBorder(ctx, angle) {
	      return this._distanceToBorder(ctx, angle);
	    }
	  }]);
	  return Diamond;
	}(_ShapeBase3['default']);

	exports['default'] = Diamond;

	/***/ }),
	/* 204 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _ShapeBase2 = __webpack_require__(24);

	var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A Dot Node/Cluster shape.
	 *
	 * @extends ShapeBase
	 */
	var Dot = function (_ShapeBase) {
	  (0, _inherits3['default'])(Dot, _ShapeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function Dot(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, Dot);
	    return (0, _possibleConstructorReturn3['default'])(this, (Dot.__proto__ || (0, _getPrototypeOf2['default'])(Dot)).call(this, options, body, labelModule));
	  }

	  /**
	   *
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {number} x width
	   * @param {number} y height
	   * @param {boolean} selected
	   * @param {boolean} hover
	   * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	   */


	  (0, _createClass3['default'])(Dot, [{
	    key: 'draw',
	    value: function draw(ctx, x, y, selected, hover, values) {
	      this._drawShape(ctx, 'circle', 2, x, y, selected, hover, values);
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} angle
	     * @returns {number}
	     */

	  }, {
	    key: 'distanceToBorder',
	    value: function distanceToBorder(ctx, angle) {
	      // eslint-disable-line no-unused-vars
	      this.resize(ctx);
	      return this.options.size;
	    }
	  }]);
	  return Dot;
	}(_ShapeBase3['default']);

	exports['default'] = Dot;

	/***/ }),
	/* 205 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _NodeBase2 = __webpack_require__(23);

	var _NodeBase3 = _interopRequireDefault(_NodeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Am Ellipse Node/Cluster shape.
	 *
	 * @extends NodeBase
	 */
	var Ellipse = function (_NodeBase) {
	  (0, _inherits3['default'])(Ellipse, _NodeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function Ellipse(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, Ellipse);
	    return (0, _possibleConstructorReturn3['default'])(this, (Ellipse.__proto__ || (0, _getPrototypeOf2['default'])(Ellipse)).call(this, options, body, labelModule));
	  }

	  /**
	   *
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {boolean} [selected]
	   * @param {boolean} [hover]
	   */


	  (0, _createClass3['default'])(Ellipse, [{
	    key: 'resize',
	    value: function resize(ctx) {
	      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
	      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;

	      if (this.needsRefresh(selected, hover)) {
	        var dimensions = this.getDimensionsFromLabel(ctx, selected, hover);

	        this.height = dimensions.height * 2;
	        this.width = dimensions.width + dimensions.height;
	        this.radius = 0.5 * this.width;
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} x width
	     * @param {number} y height
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: 'draw',
	    value: function draw(ctx, x, y, selected, hover, values) {
	      this.resize(ctx, selected, hover);
	      this.left = x - this.width * 0.5;
	      this.top = y - this.height * 0.5;

	      this.initContextForDraw(ctx, values);
	      ctx.ellipse_vis(this.left, this.top, this.width, this.height);
	      this.performFill(ctx, values);

	      this.updateBoundingBox(x, y, ctx, selected, hover);
	      this.labelModule.draw(ctx, x, y, selected, hover);
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} angle
	     * @returns {number}
	     */

	  }, {
	    key: 'distanceToBorder',
	    value: function distanceToBorder(ctx, angle) {
	      this.resize(ctx);
	      var a = this.width * 0.5;
	      var b = this.height * 0.5;
	      var w = Math.sin(angle) * a;
	      var h = Math.cos(angle) * b;
	      return a * b / Math.sqrt(w * w + h * h);
	    }
	  }]);
	  return Ellipse;
	}(_NodeBase3['default']);

	exports['default'] = Ellipse;

	/***/ }),
	/* 206 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _NodeBase2 = __webpack_require__(23);

	var _NodeBase3 = _interopRequireDefault(_NodeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * An icon replacement for the default Node shape.
	 *
	 * @extends NodeBase
	 */
	var Icon = function (_NodeBase) {
	  (0, _inherits3['default'])(Icon, _NodeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function Icon(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, Icon);

	    var _this = (0, _possibleConstructorReturn3['default'])(this, (Icon.__proto__ || (0, _getPrototypeOf2['default'])(Icon)).call(this, options, body, labelModule));

	    _this._setMargins(labelModule);
	    return _this;
	  }

	  /**
	   *
	   * @param {CanvasRenderingContext2D} ctx - Unused.
	   * @param {boolean} [selected]
	   * @param {boolean} [hover]
	   */


	  (0, _createClass3['default'])(Icon, [{
	    key: 'resize',
	    value: function resize(ctx, selected, hover) {
	      if (this.needsRefresh(selected, hover)) {
	        this.iconSize = {
	          width: Number(this.options.icon.size),
	          height: Number(this.options.icon.size)
	        };
	        this.width = this.iconSize.width + this.margin.right + this.margin.left;
	        this.height = this.iconSize.height + this.margin.top + this.margin.bottom;
	        this.radius = 0.5 * this.width;
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} x width
	     * @param {number} y height
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: 'draw',
	    value: function draw(ctx, x, y, selected, hover, values) {
	      this.resize(ctx, selected, hover);
	      this.options.icon.size = this.options.icon.size || 50;

	      this.left = x - this.width / 2;
	      this.top = y - this.height / 2;
	      this._icon(ctx, x, y, selected, hover, values);

	      if (this.options.label !== undefined) {
	        var iconTextSpacing = 5;
	        this.labelModule.draw(ctx, this.left + this.iconSize.width / 2 + this.margin.left, y + this.height / 2 + iconTextSpacing, selected);
	      }

	      this.updateBoundingBox(x, y);
	    }

	    /**
	     *
	     * @param {number} x
	     * @param {number} y
	     */

	  }, {
	    key: 'updateBoundingBox',
	    value: function updateBoundingBox(x, y) {
	      this.boundingBox.top = y - this.options.icon.size * 0.5;
	      this.boundingBox.left = x - this.options.icon.size * 0.5;
	      this.boundingBox.right = x + this.options.icon.size * 0.5;
	      this.boundingBox.bottom = y + this.options.icon.size * 0.5;

	      if (this.options.label !== undefined && this.labelModule.size.width > 0) {
	        var iconTextSpacing = 5;
	        this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
	        this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
	        this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelModule.size.height + iconTextSpacing);
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} x width
	     * @param {number} y height
	     * @param {boolean} selected
	     * @param {boolean} hover - Unused
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: '_icon',
	    value: function _icon(ctx, x, y, selected, hover, values) {
	      var iconSize = Number(this.options.icon.size);

	      if (this.options.icon.code !== undefined) {
	        ctx.font = (selected ? "bold " : "") + iconSize + "px " + this.options.icon.face;

	        // draw icon
	        ctx.fillStyle = this.options.icon.color || "black";
	        ctx.textAlign = "center";
	        ctx.textBaseline = "middle";

	        // draw shadow if enabled
	        this.enableShadow(ctx, values);
	        ctx.fillText(this.options.icon.code, x, y);

	        // disable shadows for other elements.
	        this.disableShadow(ctx, values);
	      } else {
	        console.error('When using the icon shape, you need to define the code in the icon options object. This can be done per node or globally.');
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} angle
	     * @returns {number}
	     */

	  }, {
	    key: 'distanceToBorder',
	    value: function distanceToBorder(ctx, angle) {
	      return this._distanceToBorder(ctx, angle);
	    }
	  }]);
	  return Icon;
	}(_NodeBase3['default']);

	exports['default'] = Icon;

	/***/ }),
	/* 207 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _CircleImageBase2 = __webpack_require__(73);

	var _CircleImageBase3 = _interopRequireDefault(_CircleImageBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * An image-based replacement for the default Node shape.
	 *
	 * @extends CircleImageBase
	 */
	var Image = function (_CircleImageBase) {
	  (0, _inherits3['default'])(Image, _CircleImageBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   * @param {Image} imageObj
	   * @param {Image} imageObjAlt
	   */
	  function Image(options, body, labelModule, imageObj, imageObjAlt) {
	    (0, _classCallCheck3['default'])(this, Image);

	    var _this = (0, _possibleConstructorReturn3['default'])(this, (Image.__proto__ || (0, _getPrototypeOf2['default'])(Image)).call(this, options, body, labelModule));

	    _this.setImages(imageObj, imageObjAlt);
	    return _this;
	  }

	  /**
	   *
	   * @param {CanvasRenderingContext2D} ctx - Unused.
	   * @param {boolean} [selected]
	   * @param {boolean} [hover]
	   */


	  (0, _createClass3['default'])(Image, [{
	    key: 'resize',
	    value: function resize(ctx) {
	      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.selected;
	      var hover = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hover;

	      var imageAbsent = this.imageObj.src === undefined || this.imageObj.width === undefined || this.imageObj.height === undefined;

	      if (imageAbsent) {
	        var side = this.options.size * 2;
	        this.width = side;
	        this.height = side;
	        return;
	      }

	      if (this.needsRefresh(selected, hover)) {
	        this._resizeImage();
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} x width
	     * @param {number} y height
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: 'draw',
	    value: function draw(ctx, x, y, selected, hover, values) {
	      this.switchImages(selected);
	      this.resize();
	      this.left = x - this.width / 2;
	      this.top = y - this.height / 2;

	      if (this.options.shapeProperties.useBorderWithImage === true) {
	        var neutralborderWidth = this.options.borderWidth;
	        var selectionLineWidth = this.options.borderWidthSelected || 2 * this.options.borderWidth;
	        var borderWidth = (selected ? selectionLineWidth : neutralborderWidth) / this.body.view.scale;
	        ctx.lineWidth = Math.min(this.width, borderWidth);

	        ctx.beginPath();

	        // setup the line properties.
	        ctx.strokeStyle = selected ? this.options.color.highlight.border : hover ? this.options.color.hover.border : this.options.color.border;

	        // set a fillstyle
	        ctx.fillStyle = selected ? this.options.color.highlight.background : hover ? this.options.color.hover.background : this.options.color.background;

	        // draw a rectangle to form the border around. This rectangle is filled so the opacity of a picture (in future vis releases?) can be used to tint the image
	        ctx.rect(this.left - 0.5 * ctx.lineWidth, this.top - 0.5 * ctx.lineWidth, this.width + ctx.lineWidth, this.height + ctx.lineWidth);
	        ctx.fill();

	        this.performStroke(ctx, values);

	        ctx.closePath();
	      }

	      this._drawImageAtPosition(ctx, values);

	      this._drawImageLabel(ctx, x, y, selected, hover);

	      this.updateBoundingBox(x, y);
	    }

	    /**
	     *
	     * @param {number} x
	     * @param {number} y
	     */

	  }, {
	    key: 'updateBoundingBox',
	    value: function updateBoundingBox(x, y) {
	      this.resize();
	      this._updateBoundingBox(x, y);

	      if (this.options.label !== undefined && this.labelModule.size.width > 0) {
	        this.boundingBox.left = Math.min(this.boundingBox.left, this.labelModule.size.left);
	        this.boundingBox.right = Math.max(this.boundingBox.right, this.labelModule.size.left + this.labelModule.size.width);
	        this.boundingBox.bottom = Math.max(this.boundingBox.bottom, this.boundingBox.bottom + this.labelOffset);
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} angle
	     * @returns {number}
	     */

	  }, {
	    key: 'distanceToBorder',
	    value: function distanceToBorder(ctx, angle) {
	      return this._distanceToBorder(ctx, angle);
	    }
	  }]);
	  return Image;
	}(_CircleImageBase3['default']);

	exports['default'] = Image;

	/***/ }),
	/* 208 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _ShapeBase2 = __webpack_require__(24);

	var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A Square Node/Cluster shape.
	 *
	 * @extends ShapeBase
	 */
	var Square = function (_ShapeBase) {
	  (0, _inherits3['default'])(Square, _ShapeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function Square(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, Square);
	    return (0, _possibleConstructorReturn3['default'])(this, (Square.__proto__ || (0, _getPrototypeOf2['default'])(Square)).call(this, options, body, labelModule));
	  }

	  /**
	   *
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {number} x width
	   * @param {number} y height
	   * @param {boolean} selected
	   * @param {boolean} hover
	   * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	   */


	  (0, _createClass3['default'])(Square, [{
	    key: 'draw',
	    value: function draw(ctx, x, y, selected, hover, values) {
	      this._drawShape(ctx, 'square', 2, x, y, selected, hover, values);
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} angle
	     * @returns {number}
	     */

	  }, {
	    key: 'distanceToBorder',
	    value: function distanceToBorder(ctx, angle) {
	      return this._distanceToBorder(ctx, angle);
	    }
	  }]);
	  return Square;
	}(_ShapeBase3['default']);

	exports['default'] = Square;

	/***/ }),
	/* 209 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _ShapeBase2 = __webpack_require__(24);

	var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A Hexagon Node/Cluster shape.
	 *
	 * @extends ShapeBase
	 */
	var Hexagon = function (_ShapeBase) {
	  (0, _inherits3['default'])(Hexagon, _ShapeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function Hexagon(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, Hexagon);
	    return (0, _possibleConstructorReturn3['default'])(this, (Hexagon.__proto__ || (0, _getPrototypeOf2['default'])(Hexagon)).call(this, options, body, labelModule));
	  }

	  /**
	   *
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {number} x width
	   * @param {number} y height
	   * @param {boolean} selected
	   * @param {boolean} hover
	   * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	   */


	  (0, _createClass3['default'])(Hexagon, [{
	    key: 'draw',
	    value: function draw(ctx, x, y, selected, hover, values) {
	      this._drawShape(ctx, 'hexagon', 4, x, y, selected, hover, values);
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} angle
	     * @returns {number}
	     */

	  }, {
	    key: 'distanceToBorder',
	    value: function distanceToBorder(ctx, angle) {
	      return this._distanceToBorder(ctx, angle);
	    }
	  }]);
	  return Hexagon;
	}(_ShapeBase3['default']);

	exports['default'] = Hexagon;

	/***/ }),
	/* 210 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _ShapeBase2 = __webpack_require__(24);

	var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A Star Node/Cluster shape.
	 *
	 * @extends ShapeBase
	 */
	var Star = function (_ShapeBase) {
	  (0, _inherits3['default'])(Star, _ShapeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function Star(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, Star);
	    return (0, _possibleConstructorReturn3['default'])(this, (Star.__proto__ || (0, _getPrototypeOf2['default'])(Star)).call(this, options, body, labelModule));
	  }

	  /**
	   *
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {number} x width
	   * @param {number} y height
	   * @param {boolean} selected
	   * @param {boolean} hover
	   * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	   */


	  (0, _createClass3['default'])(Star, [{
	    key: 'draw',
	    value: function draw(ctx, x, y, selected, hover, values) {
	      this._drawShape(ctx, 'star', 4, x, y, selected, hover, values);
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} angle
	     * @returns {number}
	     */

	  }, {
	    key: 'distanceToBorder',
	    value: function distanceToBorder(ctx, angle) {
	      return this._distanceToBorder(ctx, angle);
	    }
	  }]);
	  return Star;
	}(_ShapeBase3['default']);

	exports['default'] = Star;

	/***/ }),
	/* 211 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _NodeBase2 = __webpack_require__(23);

	var _NodeBase3 = _interopRequireDefault(_NodeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A text-based replacement for the default Node shape.
	 *
	 * @extends NodeBase
	 */
	var Text = function (_NodeBase) {
	  (0, _inherits3['default'])(Text, _NodeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function Text(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, Text);

	    var _this = (0, _possibleConstructorReturn3['default'])(this, (Text.__proto__ || (0, _getPrototypeOf2['default'])(Text)).call(this, options, body, labelModule));

	    _this._setMargins(labelModule);
	    return _this;
	  }

	  /**
	   *
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {boolean} selected
	   * @param {boolean} hover
	   */


	  (0, _createClass3['default'])(Text, [{
	    key: 'resize',
	    value: function resize(ctx, selected, hover) {
	      if (this.needsRefresh(selected, hover)) {
	        this.textSize = this.labelModule.getTextSize(ctx, selected, hover);
	        this.width = this.textSize.width + this.margin.right + this.margin.left;
	        this.height = this.textSize.height + this.margin.top + this.margin.bottom;
	        this.radius = 0.5 * this.width;
	      }
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} x width
	     * @param {number} y height
	     * @param {boolean} selected
	     * @param {boolean} hover
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     */

	  }, {
	    key: 'draw',
	    value: function draw(ctx, x, y, selected, hover, values) {
	      this.resize(ctx, selected, hover);
	      this.left = x - this.width / 2;
	      this.top = y - this.height / 2;

	      // draw shadow if enabled
	      this.enableShadow(ctx, values);
	      this.labelModule.draw(ctx, this.left + this.textSize.width / 2 + this.margin.left, this.top + this.textSize.height / 2 + this.margin.top, selected, hover);

	      // disable shadows for other elements.
	      this.disableShadow(ctx, values);

	      this.updateBoundingBox(x, y, ctx, selected, hover);
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} angle
	     * @returns {number}
	     */

	  }, {
	    key: 'distanceToBorder',
	    value: function distanceToBorder(ctx, angle) {
	      return this._distanceToBorder(ctx, angle);
	    }
	  }]);
	  return Text;
	}(_NodeBase3['default']);

	exports['default'] = Text;

	/***/ }),
	/* 212 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _ShapeBase2 = __webpack_require__(24);

	var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A Triangle Node/Cluster shape.
	 *
	 * @extends ShapeBase
	 */
	var Triangle = function (_ShapeBase) {
	  (0, _inherits3['default'])(Triangle, _ShapeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function Triangle(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, Triangle);
	    return (0, _possibleConstructorReturn3['default'])(this, (Triangle.__proto__ || (0, _getPrototypeOf2['default'])(Triangle)).call(this, options, body, labelModule));
	  }

	  /**
	   *
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {number} x
	   * @param {number} y
	   * @param {boolean} selected
	   * @param {boolean} hover
	   * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	   */


	  (0, _createClass3['default'])(Triangle, [{
	    key: 'draw',
	    value: function draw(ctx, x, y, selected, hover, values) {
	      this._drawShape(ctx, 'triangle', 3, x, y, selected, hover, values);
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} angle
	     * @returns {number}
	     */

	  }, {
	    key: 'distanceToBorder',
	    value: function distanceToBorder(ctx, angle) {
	      return this._distanceToBorder(ctx, angle);
	    }
	  }]);
	  return Triangle;
	}(_ShapeBase3['default']);

	exports['default'] = Triangle;

	/***/ }),
	/* 213 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _ShapeBase2 = __webpack_require__(24);

	var _ShapeBase3 = _interopRequireDefault(_ShapeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A downward facing Triangle Node/Cluster shape.
	 *
	 * @extends ShapeBase
	 */
	var TriangleDown = function (_ShapeBase) {
	  (0, _inherits3['default'])(TriangleDown, _ShapeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function TriangleDown(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, TriangleDown);
	    return (0, _possibleConstructorReturn3['default'])(this, (TriangleDown.__proto__ || (0, _getPrototypeOf2['default'])(TriangleDown)).call(this, options, body, labelModule));
	  }

	  /**
	   *
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {number} x
	   * @param {number} y
	   * @param {boolean} selected
	   * @param {boolean} hover
	   * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	   */


	  (0, _createClass3['default'])(TriangleDown, [{
	    key: 'draw',
	    value: function draw(ctx, x, y, selected, hover, values) {
	      this._drawShape(ctx, 'triangleDown', 3, x, y, selected, hover, values);
	    }

	    /**
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {number} angle
	     * @returns {number}
	     */

	  }, {
	    key: 'distanceToBorder',
	    value: function distanceToBorder(ctx, angle) {
	      return this._distanceToBorder(ctx, angle);
	    }
	  }]);
	  return TriangleDown;
	}(_ShapeBase3['default']);

	exports['default'] = TriangleDown;

	/***/ }),
	/* 214 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);
	var DataSet = __webpack_require__(11);
	var DataView = __webpack_require__(12);
	var Edge = __webpack_require__(74)['default'];

	/**
	 * Handler for Edges
	 */

	var EdgesHandler = function () {
	  /**
	   * @param {Object} body
	   * @param {Array.<Image>} images
	   * @param {Array.<Group>} groups
	   */
	  function EdgesHandler(body, images, groups) {
	    var _this = this;

	    (0, _classCallCheck3['default'])(this, EdgesHandler);

	    this.body = body;
	    this.images = images;
	    this.groups = groups;

	    // create the edge API in the body container
	    this.body.functions.createEdge = this.create.bind(this);

	    this.edgesListeners = {
	      add: function add(event, params) {
	        _this.add(params.items);
	      },
	      update: function update(event, params) {
	        _this.update(params.items);
	      },
	      remove: function remove(event, params) {
	        _this.remove(params.items);
	      }
	    };

	    this.options = {};
	    this.defaultOptions = {
	      arrows: {
	        to: { enabled: false, scaleFactor: 1, type: 'arrow' }, // boolean / {arrowScaleFactor:1} / {enabled: false, arrowScaleFactor:1}
	        middle: { enabled: false, scaleFactor: 1, type: 'arrow' },
	        from: { enabled: false, scaleFactor: 1, type: 'arrow' }
	      },
	      arrowStrikethrough: true,
	      color: {
	        color: '#848484',
	        highlight: '#848484',
	        hover: '#848484',
	        inherit: 'from',
	        opacity: 1.0
	      },
	      dashes: false,
	      font: {
	        color: '#343434',
	        size: 14, // px
	        face: 'arial',
	        background: 'none',
	        strokeWidth: 2, // px
	        strokeColor: '#ffffff',
	        align: 'horizontal',
	        multi: false,
	        vadjust: 0,
	        bold: {
	          mod: 'bold'
	        },
	        boldital: {
	          mod: 'bold italic'
	        },
	        ital: {
	          mod: 'italic'
	        },
	        mono: {
	          mod: '',
	          size: 15, // px
	          face: 'courier new',
	          vadjust: 2
	        }
	      },
	      hidden: false,
	      hoverWidth: 1.5,
	      label: undefined,
	      labelHighlightBold: true,
	      length: undefined,
	      physics: true,
	      scaling: {
	        min: 1,
	        max: 15,
	        label: {
	          enabled: true,
	          min: 14,
	          max: 30,
	          maxVisible: 30,
	          drawThreshold: 5
	        },
	        customScalingFunction: function customScalingFunction(min, max, total, value) {
	          if (max === min) {
	            return 0.5;
	          } else {
	            var scale = 1 / (max - min);
	            return Math.max(0, (value - min) * scale);
	          }
	        }
	      },
	      selectionWidth: 1.5,
	      selfReferenceSize: 20,
	      shadow: {
	        enabled: false,
	        color: 'rgba(0,0,0,0.5)',
	        size: 10,
	        x: 5,
	        y: 5
	      },
	      smooth: {
	        enabled: true,
	        type: "dynamic",
	        forceDirection: 'none',
	        roundness: 0.5
	      },
	      title: undefined,
	      width: 1,
	      value: undefined
	    };

	    util.deepExtend(this.options, this.defaultOptions);

	    this.bindEventListeners();
	  }

	  /**
	   * Binds event listeners
	   */


	  (0, _createClass3['default'])(EdgesHandler, [{
	    key: 'bindEventListeners',
	    value: function bindEventListeners() {
	      var _this2 = this;

	      // this allows external modules to force all dynamic curves to turn static.
	      this.body.emitter.on("_forceDisableDynamicCurves", function (type) {
	        var emit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	        if (type === 'dynamic') {
	          type = 'continuous';
	        }
	        var dataChanged = false;
	        for (var edgeId in _this2.body.edges) {
	          if (_this2.body.edges.hasOwnProperty(edgeId)) {
	            var edge = _this2.body.edges[edgeId];
	            var edgeData = _this2.body.data.edges._data[edgeId];

	            // only forcibly remove the smooth curve if the data has been set of the edge has the smooth curves defined.
	            // this is because a change in the global would not affect these curves.
	            if (edgeData !== undefined) {
	              var smoothOptions = edgeData.smooth;
	              if (smoothOptions !== undefined) {
	                if (smoothOptions.enabled === true && smoothOptions.type === 'dynamic') {
	                  if (type === undefined) {
	                    edge.setOptions({ smooth: false });
	                  } else {
	                    edge.setOptions({ smooth: { type: type } });
	                  }
	                  dataChanged = true;
	                }
	              }
	            }
	          }
	        }
	        if (emit === true && dataChanged === true) {
	          _this2.body.emitter.emit("_dataChanged");
	        }
	      });

	      // this is called when options of EXISTING nodes or edges have changed.
	      //
	      // NOTE: Not true, called when options have NOT changed, for both existing as well as new nodes.
	      //       See update() for logic.
	      // TODO: Verify and examine the consequences of this. It might still trigger when
	      //       non-option fields have changed, but then reconnecting edges is still useless.
	      //       Alternatively, it might also be called when edges are removed.
	      //
	      this.body.emitter.on("_dataUpdated", function () {
	        _this2.reconnectEdges();
	      });

	      // refresh the edges. Used when reverting from hierarchical layout
	      this.body.emitter.on("refreshEdges", this.refresh.bind(this));
	      this.body.emitter.on("refresh", this.refresh.bind(this));
	      this.body.emitter.on("destroy", function () {
	        util.forEach(_this2.edgesListeners, function (callback, event) {
	          if (_this2.body.data.edges) _this2.body.data.edges.off(event, callback);
	        });
	        delete _this2.body.functions.createEdge;
	        delete _this2.edgesListeners.add;
	        delete _this2.edgesListeners.update;
	        delete _this2.edgesListeners.remove;
	        delete _this2.edgesListeners;
	      });
	    }

	    /**
	     *
	     * @param {Object} options
	     */

	  }, {
	    key: 'setOptions',
	    value: function setOptions(options) {
	      if (options !== undefined) {
	        // use the parser from the Edge class to fill in all shorthand notations
	        Edge.parseOptions(this.options, options, true, this.defaultOptions, true);

	        // update smooth settings in all edges
	        var dataChanged = false;
	        if (options.smooth !== undefined) {
	          for (var edgeId in this.body.edges) {
	            if (this.body.edges.hasOwnProperty(edgeId)) {
	              dataChanged = this.body.edges[edgeId].updateEdgeType() || dataChanged;
	            }
	          }
	        }

	        // update fonts in all edges
	        if (options.font !== undefined) {
	          for (var _edgeId in this.body.edges) {
	            if (this.body.edges.hasOwnProperty(_edgeId)) {
	              this.body.edges[_edgeId].updateLabelModule();
	            }
	          }
	        }

	        // update the state of the variables if needed
	        if (options.hidden !== undefined || options.physics !== undefined || dataChanged === true) {
	          this.body.emitter.emit('_dataChanged');
	        }
	      }
	    }

	    /**
	     * Load edges by reading the data table
	     * @param {Array | DataSet | DataView} edges    The data containing the edges.
	     * @param {boolean} [doNotEmit=false]
	     * @private
	     */

	  }, {
	    key: 'setData',
	    value: function setData(edges) {
	      var _this3 = this;

	      var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	      var oldEdgesData = this.body.data.edges;

	      if (edges instanceof DataSet || edges instanceof DataView) {
	        this.body.data.edges = edges;
	      } else if (Array.isArray(edges)) {
	        this.body.data.edges = new DataSet();
	        this.body.data.edges.add(edges);
	      } else if (!edges) {
	        this.body.data.edges = new DataSet();
	      } else {
	        throw new TypeError('Array or DataSet expected');
	      }

	      // TODO: is this null or undefined or false?
	      if (oldEdgesData) {
	        // unsubscribe from old dataset
	        util.forEach(this.edgesListeners, function (callback, event) {
	          oldEdgesData.off(event, callback);
	        });
	      }

	      // remove drawn edges
	      this.body.edges = {};

	      // TODO: is this null or undefined or false?
	      if (this.body.data.edges) {
	        // subscribe to new dataset
	        util.forEach(this.edgesListeners, function (callback, event) {
	          _this3.body.data.edges.on(event, callback);
	        });

	        // draw all new nodes
	        var ids = this.body.data.edges.getIds();
	        this.add(ids, true);
	      }

	      this.body.emitter.emit('_adjustEdgesForHierarchicalLayout');
	      if (doNotEmit === false) {
	        this.body.emitter.emit("_dataChanged");
	      }
	    }

	    /**
	     * Add edges
	     * @param {number[] | string[]} ids
	     * @param {boolean} [doNotEmit=false]
	     * @private
	     */

	  }, {
	    key: 'add',
	    value: function add(ids) {
	      var doNotEmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	      var edges = this.body.edges;
	      var edgesData = this.body.data.edges;

	      for (var i = 0; i < ids.length; i++) {
	        var id = ids[i];

	        var oldEdge = edges[id];
	        if (oldEdge) {
	          oldEdge.disconnect();
	        }

	        var data = edgesData.get(id, { "showInternalIds": true });
	        edges[id] = this.create(data);
	      }

	      this.body.emitter.emit('_adjustEdgesForHierarchicalLayout');

	      if (doNotEmit === false) {
	        this.body.emitter.emit("_dataChanged");
	      }
	    }

	    /**
	     * Update existing edges, or create them when not yet existing
	     * @param {number[] | string[]} ids
	     * @private
	     */

	  }, {
	    key: 'update',
	    value: function update(ids) {
	      var edges = this.body.edges;
	      var edgesData = this.body.data.edges;
	      var dataChanged = false;
	      for (var i = 0; i < ids.length; i++) {
	        var id = ids[i];
	        var data = edgesData.get(id);
	        var edge = edges[id];
	        if (edge !== undefined) {
	          // update edge
	          edge.disconnect();
	          dataChanged = edge.setOptions(data) || dataChanged; // if a support node is added, data can be changed.
	          edge.connect();
	        } else {
	          // create edge
	          this.body.edges[id] = this.create(data);
	          dataChanged = true;
	        }
	      }

	      if (dataChanged === true) {
	        this.body.emitter.emit('_adjustEdgesForHierarchicalLayout');
	        this.body.emitter.emit("_dataChanged");
	      } else {
	        this.body.emitter.emit("_dataUpdated");
	      }
	    }

	    /**
	     * Remove existing edges. Non existing ids will be ignored
	     * @param {number[] | string[]} ids
	     * @param {boolean} [emit=true]
	     * @private
	     */

	  }, {
	    key: 'remove',
	    value: function remove(ids) {
	      var emit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	      if (ids.length === 0) return; // early out

	      var edges = this.body.edges;
	      util.forEach(ids, function (id) {
	        var edge = edges[id];
	        if (edge !== undefined) {
	          edge.remove();
	        }
	      });

	      if (emit) {
	        this.body.emitter.emit("_dataChanged");
	      }
	    }

	    /**
	     * Refreshes Edge Handler
	     */

	  }, {
	    key: 'refresh',
	    value: function refresh() {
	      var _this4 = this;

	      util.forEach(this.body.edges, function (edge, edgeId) {
	        var data = _this4.body.data.edges._data[edgeId];
	        if (data !== undefined) {
	          edge.setOptions(data);
	        }
	      });
	    }

	    /**
	     *
	     * @param {Object} properties
	     * @returns {Edge}
	     */

	  }, {
	    key: 'create',
	    value: function create(properties) {
	      return new Edge(properties, this.body, this.options, this.defaultOptions);
	    }

	    /**
	     * Reconnect all edges
	     * @private
	     */

	  }, {
	    key: 'reconnectEdges',
	    value: function reconnectEdges() {
	      var id;
	      var nodes = this.body.nodes;
	      var edges = this.body.edges;

	      for (id in nodes) {
	        if (nodes.hasOwnProperty(id)) {
	          nodes[id].edges = [];
	        }
	      }

	      for (id in edges) {
	        if (edges.hasOwnProperty(id)) {
	          var edge = edges[id];
	          edge.from = null;
	          edge.to = null;
	          edge.connect();
	        }
	      }
	    }

	    /**
	     *
	     * @param {Edge.id} edgeId
	     * @returns {Array}
	     */

	  }, {
	    key: 'getConnectedNodes',
	    value: function getConnectedNodes(edgeId) {
	      var nodeList = [];
	      if (this.body.edges[edgeId] !== undefined) {
	        var edge = this.body.edges[edgeId];
	        if (edge.fromId !== undefined) {
	          nodeList.push(edge.fromId);
	        }
	        if (edge.toId !== undefined) {
	          nodeList.push(edge.toId);
	        }
	      }
	      return nodeList;
	    }

	    /**
	     * There is no direct relation between the nodes and the edges DataSet,
	     * so the right place to do call this is in the handler for event `_dataUpdated`.
	     */

	  }, {
	    key: '_updateState',
	    value: function _updateState() {
	      this._addMissingEdges();
	      this._removeInvalidEdges();
	    }

	    /**
	     * Scan for missing nodes and remove corresponding edges, if any.
	     * @private
	     */

	  }, {
	    key: '_removeInvalidEdges',
	    value: function _removeInvalidEdges() {
	      var _this5 = this;

	      var edgesToDelete = [];

	      util.forEach(this.body.edges, function (edge, id) {
	        var toNode = _this5.body.nodes[edge.toId];
	        var fromNode = _this5.body.nodes[edge.fromId];

	        // Skip clustering edges here, let the Clustering module handle those
	        if (toNode !== undefined && toNode.isCluster === true || fromNode !== undefined && fromNode.isCluster === true) {
	          return;
	        }

	        if (toNode === undefined || fromNode === undefined) {
	          edgesToDelete.push(id);
	        }
	      });

	      this.remove(edgesToDelete, false);
	    }

	    /**
	     * add all edges from dataset that are not in the cached state
	     * @private
	     */

	  }, {
	    key: '_addMissingEdges',
	    value: function _addMissingEdges() {
	      var edges = this.body.edges;
	      var edgesData = this.body.data.edges;
	      var addIds = [];

	      edgesData.forEach(function (edgeData, edgeId) {
	        var edge = edges[edgeId];
	        if (edge === undefined) {
	          addIds.push(edgeId);
	        }
	      });

	      this.add(addIds, true);
	    }
	  }]);
	  return EdgesHandler;
	}();

	exports['default'] = EdgesHandler;

	/***/ }),
	/* 215 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _slicedToArray2 = __webpack_require__(30);

	var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _CubicBezierEdgeBase2 = __webpack_require__(216);

	var _CubicBezierEdgeBase3 = _interopRequireDefault(_CubicBezierEdgeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A Cubic Bezier Edge. Bezier curves are used to model smooth gradual
	 * curves in paths between nodes.
	 *
	 * @extends CubicBezierEdgeBase
	 */
	var CubicBezierEdge = function (_CubicBezierEdgeBase) {
	  (0, _inherits3['default'])(CubicBezierEdge, _CubicBezierEdgeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function CubicBezierEdge(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, CubicBezierEdge);
	    return (0, _possibleConstructorReturn3['default'])(this, (CubicBezierEdge.__proto__ || (0, _getPrototypeOf2['default'])(CubicBezierEdge)).call(this, options, body, labelModule));
	  }

	  /**
	   * Draw a line between two nodes
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	   * @param {Array.<Node>} viaNodes
	   * @private
	   */


	  (0, _createClass3['default'])(CubicBezierEdge, [{
	    key: '_line',
	    value: function _line(ctx, values, viaNodes) {
	      // get the coordinates of the support points.
	      var via1 = viaNodes[0];
	      var via2 = viaNodes[1];
	      this._bezierCurve(ctx, values, via1, via2);
	    }

	    /**
	     *
	     * @returns {Array.<{x: number, y: number}>}
	     * @private
	     */

	  }, {
	    key: '_getViaCoordinates',
	    value: function _getViaCoordinates() {
	      var dx = this.from.x - this.to.x;
	      var dy = this.from.y - this.to.y;

	      var x1 = void 0,
	          y1 = void 0,
	          x2 = void 0,
	          y2 = void 0;
	      var roundness = this.options.smooth.roundness;

	      // horizontal if x > y or if direction is forced or if direction is horizontal
	      if ((Math.abs(dx) > Math.abs(dy) || this.options.smooth.forceDirection === true || this.options.smooth.forceDirection === 'horizontal') && this.options.smooth.forceDirection !== 'vertical') {
	        y1 = this.from.y;
	        y2 = this.to.y;
	        x1 = this.from.x - roundness * dx;
	        x2 = this.to.x + roundness * dx;
	      } else {
	        y1 = this.from.y - roundness * dy;
	        y2 = this.to.y + roundness * dy;
	        x1 = this.from.x;
	        x2 = this.to.x;
	      }

	      return [{ x: x1, y: y1 }, { x: x2, y: y2 }];
	    }

	    /**
	     *
	     * @returns {Array.<{x: number, y: number}>}
	     */

	  }, {
	    key: 'getViaNode',
	    value: function getViaNode() {
	      return this._getViaCoordinates();
	    }

	    /**
	     *
	     * @param {Node} nearNode
	     * @param {CanvasRenderingContext2D} ctx
	     * @returns {{x: number, y: number, t: number}}
	     * @private
	     */

	  }, {
	    key: '_findBorderPosition',
	    value: function _findBorderPosition(nearNode, ctx) {
	      return this._findBorderPositionBezier(nearNode, ctx);
	    }

	    /**
	     *
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x3
	     * @param {number} y3
	     * @param {Node} via1
	     * @param {Node} via2
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_getDistanceToEdge',
	    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
	      var _ref = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : this._getViaCoordinates(),
	          _ref2 = (0, _slicedToArray3['default'])(_ref, 2),
	          via1 = _ref2[0],
	          via2 = _ref2[1];

	      // x3,y3 is the point
	      return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via1, via2);
	    }

	    /**
	     * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
	     * @param {number} percentage
	     * @param {{x: number, y: number}} [via1=this._getViaCoordinates()[0]]
	     * @param {{x: number, y: number}} [via2=this._getViaCoordinates()[1]]
	     * @returns {{x: number, y: number}}
	     * @private
	     */

	  }, {
	    key: 'getPoint',
	    value: function getPoint(percentage) {
	      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._getViaCoordinates(),
	          _ref4 = (0, _slicedToArray3['default'])(_ref3, 2),
	          via1 = _ref4[0],
	          via2 = _ref4[1];

	      var t = percentage;
	      var vec = [];
	      vec[0] = Math.pow(1 - t, 3);
	      vec[1] = 3 * t * Math.pow(1 - t, 2);
	      vec[2] = 3 * Math.pow(t, 2) * (1 - t);
	      vec[3] = Math.pow(t, 3);
	      var x = vec[0] * this.fromPoint.x + vec[1] * via1.x + vec[2] * via2.x + vec[3] * this.toPoint.x;
	      var y = vec[0] * this.fromPoint.y + vec[1] * via1.y + vec[2] * via2.y + vec[3] * this.toPoint.y;

	      return { x: x, y: y };
	    }
	  }]);
	  return CubicBezierEdge;
	}(_CubicBezierEdgeBase3['default']);

	exports['default'] = CubicBezierEdge;

	/***/ }),
	/* 216 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _BezierEdgeBase2 = __webpack_require__(75);

	var _BezierEdgeBase3 = _interopRequireDefault(_BezierEdgeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A Base Class for all Cubic Bezier Edges. Bezier curves are used to model
	 * smooth gradual curves in paths between nodes.
	 *
	 * @extends BezierEdgeBase
	 */
	var CubicBezierEdgeBase = function (_BezierEdgeBase) {
	  (0, _inherits3['default'])(CubicBezierEdgeBase, _BezierEdgeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function CubicBezierEdgeBase(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, CubicBezierEdgeBase);
	    return (0, _possibleConstructorReturn3['default'])(this, (CubicBezierEdgeBase.__proto__ || (0, _getPrototypeOf2['default'])(CubicBezierEdgeBase)).call(this, options, body, labelModule));
	  }

	  /**
	   * Calculate the distance between a point (x3,y3) and a line segment from
	   * (x1,y1) to (x2,y2).
	   * http://stackoverflow.com/questions/849211/shortest-distancae-between-a-point-and-a-line-segment
	   * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
	   * @param {number} x1 from x
	   * @param {number} y1 from y
	   * @param {number} x2 to x
	   * @param {number} y2 to y
	   * @param {number} x3 point to check x
	   * @param {number} y3 point to check y
	   * @param {Node} via1
	   * @param {Node} via2
	   * @returns {number}
	   * @private
	   */


	  (0, _createClass3['default'])(CubicBezierEdgeBase, [{
	    key: '_getDistanceToBezierEdge',
	    value: function _getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, via1, via2) {
	      // x3,y3 is the point
	      var minDistance = 1e9;
	      var distance = void 0;
	      var i = void 0,
	          t = void 0,
	          x = void 0,
	          y = void 0;
	      var lastX = x1;
	      var lastY = y1;
	      var vec = [0, 0, 0, 0];
	      for (i = 1; i < 10; i++) {
	        t = 0.1 * i;
	        vec[0] = Math.pow(1 - t, 3);
	        vec[1] = 3 * t * Math.pow(1 - t, 2);
	        vec[2] = 3 * Math.pow(t, 2) * (1 - t);
	        vec[3] = Math.pow(t, 3);
	        x = vec[0] * x1 + vec[1] * via1.x + vec[2] * via2.x + vec[3] * x2;
	        y = vec[0] * y1 + vec[1] * via1.y + vec[2] * via2.y + vec[3] * y2;
	        if (i > 0) {
	          distance = this._getDistanceToLine(lastX, lastY, x, y, x3, y3);
	          minDistance = distance < minDistance ? distance : minDistance;
	        }
	        lastX = x;
	        lastY = y;
	      }

	      return minDistance;
	    }
	  }]);
	  return CubicBezierEdgeBase;
	}(_BezierEdgeBase3['default']);

	exports['default'] = CubicBezierEdgeBase;

	/***/ }),
	/* 217 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _slicedToArray2 = __webpack_require__(30);

	var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _BezierEdgeBase2 = __webpack_require__(75);

	var _BezierEdgeBase3 = _interopRequireDefault(_BezierEdgeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * A Dynamic Bezier Edge. Bezier curves are used to model smooth gradual
	 * curves in paths between nodes. The Dynamic piece refers to how the curve
	 * reacts to physics changes.
	 *
	 * @extends BezierEdgeBase
	 */
	var BezierEdgeDynamic = function (_BezierEdgeBase) {
	  (0, _inherits3["default"])(BezierEdgeDynamic, _BezierEdgeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function BezierEdgeDynamic(options, body, labelModule) {
	    (0, _classCallCheck3["default"])(this, BezierEdgeDynamic);

	    // --> this calls the setOptions below
	    var _this = (0, _possibleConstructorReturn3["default"])(this, (BezierEdgeDynamic.__proto__ || (0, _getPrototypeOf2["default"])(BezierEdgeDynamic)).call(this, options, body, labelModule));
	    //this.via = undefined; // Here for completeness but not allowed to defined before super() is invoked.


	    _this._boundFunction = function () {
	      _this.positionBezierNode();
	    };
	    _this.body.emitter.on("_repositionBezierNodes", _this._boundFunction);
	    return _this;
	  }

	  /**
	   *
	   * @param {Object} options
	   */


	  (0, _createClass3["default"])(BezierEdgeDynamic, [{
	    key: "setOptions",
	    value: function setOptions(options) {
	      // check if the physics has changed.
	      var physicsChange = false;
	      if (this.options.physics !== options.physics) {
	        physicsChange = true;
	      }

	      // set the options and the to and from nodes
	      this.options = options;
	      this.id = this.options.id;
	      this.from = this.body.nodes[this.options.from];
	      this.to = this.body.nodes[this.options.to];

	      // setup the support node and connect
	      this.setupSupportNode();
	      this.connect();

	      // when we change the physics state of the edge, we reposition the support node.
	      if (physicsChange === true) {
	        this.via.setOptions({ physics: this.options.physics });
	        this.positionBezierNode();
	      }
	    }

	    /**
	     * Connects an edge to node(s)
	     */

	  }, {
	    key: "connect",
	    value: function connect() {
	      this.from = this.body.nodes[this.options.from];
	      this.to = this.body.nodes[this.options.to];
	      if (this.from === undefined || this.to === undefined || this.options.physics === false) {
	        this.via.setOptions({ physics: false });
	      } else {
	        // fix weird behaviour where a self referencing node has physics enabled
	        if (this.from.id === this.to.id) {
	          this.via.setOptions({ physics: false });
	        } else {
	          this.via.setOptions({ physics: true });
	        }
	      }
	    }

	    /**
	     * remove the support nodes
	     * @returns {boolean}
	     */

	  }, {
	    key: "cleanup",
	    value: function cleanup() {
	      this.body.emitter.off("_repositionBezierNodes", this._boundFunction);
	      if (this.via !== undefined) {
	        delete this.body.nodes[this.via.id];
	        this.via = undefined;
	        return true;
	      }
	      return false;
	    }

	    /**
	     * Bezier curves require an anchor point to calculate the smooth flow. These points are nodes. These nodes are invisible but
	     * are used for the force calculation.
	     *
	     * The changed data is not called, if needed, it is returned by the main edge constructor.
	     * @private
	     */

	  }, {
	    key: "setupSupportNode",
	    value: function setupSupportNode() {
	      if (this.via === undefined) {
	        var nodeId = "edgeId:" + this.id;
	        var node = this.body.functions.createNode({
	          id: nodeId,
	          shape: 'circle',
	          physics: true,
	          hidden: true
	        });
	        this.body.nodes[nodeId] = node;
	        this.via = node;
	        this.via.parentEdgeId = this.id;
	        this.positionBezierNode();
	      }
	    }

	    /**
	     * Positions bezier node
	     */

	  }, {
	    key: "positionBezierNode",
	    value: function positionBezierNode() {
	      if (this.via !== undefined && this.from !== undefined && this.to !== undefined) {
	        this.via.x = 0.5 * (this.from.x + this.to.x);
	        this.via.y = 0.5 * (this.from.y + this.to.y);
	      } else if (this.via !== undefined) {
	        this.via.x = 0;
	        this.via.y = 0;
	      }
	    }

	    /**
	     * Draw a line between two nodes
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	     * @param {Node} viaNode
	     * @private
	     */

	  }, {
	    key: "_line",
	    value: function _line(ctx, values, viaNode) {
	      this._bezierCurve(ctx, values, viaNode);
	    }

	    /**
	     *
	     * @returns {Node|undefined|*|{index, line, column}}
	     */

	  }, {
	    key: "getViaNode",
	    value: function getViaNode() {
	      return this.via;
	    }

	    /**
	     * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
	     *
	     * @param {number} percentage
	     * @param {Node} viaNode
	     * @returns {{x: number, y: number}}
	     * @private
	     */

	  }, {
	    key: "getPoint",
	    value: function getPoint(percentage) {
	      var viaNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.via;

	      var t = percentage;
	      var x = void 0,
	          y = void 0;
	      if (this.from === this.to) {
	        var _getCircleData = this._getCircleData(this.from),
	            _getCircleData2 = (0, _slicedToArray3["default"])(_getCircleData, 3),
	            cx = _getCircleData2[0],
	            cy = _getCircleData2[1],
	            cr = _getCircleData2[2];

	        var a = 2 * Math.PI * (1 - t);
	        x = cx + cr * Math.sin(a);
	        y = cy + cr - cr * (1 - Math.cos(a));
	      } else {
	        x = Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * viaNode.x + Math.pow(t, 2) * this.toPoint.x;
	        y = Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * viaNode.y + Math.pow(t, 2) * this.toPoint.y;
	      }

	      return { x: x, y: y };
	    }

	    /**
	     *
	     * @param {Node} nearNode
	     * @param {CanvasRenderingContext2D} ctx
	     * @returns {*}
	     * @private
	     */

	  }, {
	    key: "_findBorderPosition",
	    value: function _findBorderPosition(nearNode, ctx) {
	      return this._findBorderPositionBezier(nearNode, ctx, this.via);
	    }

	    /**
	     *
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x3
	     * @param {number} y3
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: "_getDistanceToEdge",
	    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
	      // x3,y3 is the point
	      return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, this.via);
	    }
	  }]);
	  return BezierEdgeDynamic;
	}(_BezierEdgeBase3["default"]);

	exports["default"] = BezierEdgeDynamic;

	/***/ }),
	/* 218 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _BezierEdgeBase2 = __webpack_require__(75);

	var _BezierEdgeBase3 = _interopRequireDefault(_BezierEdgeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A Static Bezier Edge. Bezier curves are used to model smooth gradual
	 * curves in paths between nodes.
	 *
	 * @extends BezierEdgeBase
	 */
	var BezierEdgeStatic = function (_BezierEdgeBase) {
	  (0, _inherits3['default'])(BezierEdgeStatic, _BezierEdgeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function BezierEdgeStatic(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, BezierEdgeStatic);
	    return (0, _possibleConstructorReturn3['default'])(this, (BezierEdgeStatic.__proto__ || (0, _getPrototypeOf2['default'])(BezierEdgeStatic)).call(this, options, body, labelModule));
	  }

	  /**
	   * Draw a line between two nodes
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	   * @param {Node} viaNode
	   * @private
	   */


	  (0, _createClass3['default'])(BezierEdgeStatic, [{
	    key: '_line',
	    value: function _line(ctx, values, viaNode) {
	      this._bezierCurve(ctx, values, viaNode);
	    }

	    /**
	     *
	     * @returns {Array.<{x: number, y: number}>}
	     */

	  }, {
	    key: 'getViaNode',
	    value: function getViaNode() {
	      return this._getViaCoordinates();
	    }

	    /**
	     * We do not use the to and fromPoints here to make the via nodes the same as edges without arrows.
	     * @returns {{x: undefined, y: undefined}}
	     * @private
	     */

	  }, {
	    key: '_getViaCoordinates',
	    value: function _getViaCoordinates() {
	      // Assumption: x/y coordinates in from/to always defined
	      var xVia = undefined;
	      var yVia = undefined;
	      var factor = this.options.smooth.roundness;
	      var type = this.options.smooth.type;
	      var dx = Math.abs(this.from.x - this.to.x);
	      var dy = Math.abs(this.from.y - this.to.y);
	      if (type === 'discrete' || type === 'diagonalCross') {
	        var stepX = void 0;
	        var stepY = void 0;

	        if (dx <= dy) {
	          stepX = stepY = factor * dy;
	        } else {
	          stepX = stepY = factor * dx;
	        }

	        if (this.from.x > this.to.x) stepX = -stepX;
	        if (this.from.y >= this.to.y) stepY = -stepY;

	        xVia = this.from.x + stepX;
	        yVia = this.from.y + stepY;

	        if (type === "discrete") {
	          if (dx <= dy) {
	            xVia = dx < factor * dy ? this.from.x : xVia;
	          } else {
	            yVia = dy < factor * dx ? this.from.y : yVia;
	          }
	        }
	      } else if (type === "straightCross") {
	        var _stepX = (1 - factor) * dx;
	        var _stepY = (1 - factor) * dy;

	        if (dx <= dy) {
	          // up - down
	          _stepX = 0;
	          if (this.from.y < this.to.y) _stepY = -_stepY;
	        } else {
	          // left - right
	          if (this.from.x < this.to.x) _stepX = -_stepX;
	          _stepY = 0;
	        }
	        xVia = this.to.x + _stepX;
	        yVia = this.to.y + _stepY;
	      } else if (type === 'horizontal') {
	        var _stepX2 = (1 - factor) * dx;
	        if (this.from.x < this.to.x) _stepX2 = -_stepX2;
	        xVia = this.to.x + _stepX2;
	        yVia = this.from.y;
	      } else if (type === 'vertical') {
	        var _stepY2 = (1 - factor) * dy;
	        if (this.from.y < this.to.y) _stepY2 = -_stepY2;
	        xVia = this.from.x;
	        yVia = this.to.y + _stepY2;
	      } else if (type === 'curvedCW') {
	        dx = this.to.x - this.from.x;
	        dy = this.from.y - this.to.y;
	        var radius = Math.sqrt(dx * dx + dy * dy);
	        var pi = Math.PI;

	        var originalAngle = Math.atan2(dy, dx);
	        var myAngle = (originalAngle + (factor * 0.5 + 0.5) * pi) % (2 * pi);

	        xVia = this.from.x + (factor * 0.5 + 0.5) * radius * Math.sin(myAngle);
	        yVia = this.from.y + (factor * 0.5 + 0.5) * radius * Math.cos(myAngle);
	      } else if (type === 'curvedCCW') {
	        dx = this.to.x - this.from.x;
	        dy = this.from.y - this.to.y;
	        var _radius = Math.sqrt(dx * dx + dy * dy);
	        var _pi = Math.PI;

	        var _originalAngle = Math.atan2(dy, dx);
	        var _myAngle = (_originalAngle + (-factor * 0.5 + 0.5) * _pi) % (2 * _pi);

	        xVia = this.from.x + (factor * 0.5 + 0.5) * _radius * Math.sin(_myAngle);
	        yVia = this.from.y + (factor * 0.5 + 0.5) * _radius * Math.cos(_myAngle);
	      } else {
	        // continuous
	        var _stepX3 = void 0;
	        var _stepY3 = void 0;

	        if (dx <= dy) {
	          _stepX3 = _stepY3 = factor * dy;
	        } else {
	          _stepX3 = _stepY3 = factor * dx;
	        }

	        if (this.from.x > this.to.x) _stepX3 = -_stepX3;
	        if (this.from.y >= this.to.y) _stepY3 = -_stepY3;

	        xVia = this.from.x + _stepX3;
	        yVia = this.from.y + _stepY3;

	        if (dx <= dy) {
	          if (this.from.x <= this.to.x) {
	            xVia = this.to.x < xVia ? this.to.x : xVia;
	          } else {
	            xVia = this.to.x > xVia ? this.to.x : xVia;
	          }
	        } else {
	          if (this.from.y >= this.to.y) {
	            yVia = this.to.y > yVia ? this.to.y : yVia;
	          } else {
	            yVia = this.to.y < yVia ? this.to.y : yVia;
	          }
	        }
	      }
	      return { x: xVia, y: yVia };
	    }

	    /**
	     *
	     * @param {Node} nearNode
	     * @param {CanvasRenderingContext2D} ctx
	     * @param {Object} options
	     * @returns {*}
	     * @private
	     */

	  }, {
	    key: '_findBorderPosition',
	    value: function _findBorderPosition(nearNode, ctx) {
	      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	      return this._findBorderPositionBezier(nearNode, ctx, options.via);
	    }

	    /**
	     *
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x3
	     * @param {number} y3
	     * @param {Node} viaNode
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_getDistanceToEdge',
	    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
	      var viaNode = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : this._getViaCoordinates();
	      // x3,y3 is the point
	      return this._getDistanceToBezierEdge(x1, y1, x2, y2, x3, y3, viaNode);
	    }

	    /**
	     * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
	     * @param {number} percentage
	     * @param {Node} viaNode
	     * @returns {{x: number, y: number}}
	     * @private
	     */

	  }, {
	    key: 'getPoint',
	    value: function getPoint(percentage) {
	      var viaNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._getViaCoordinates();

	      var t = percentage;
	      var x = Math.pow(1 - t, 2) * this.fromPoint.x + 2 * t * (1 - t) * viaNode.x + Math.pow(t, 2) * this.toPoint.x;
	      var y = Math.pow(1 - t, 2) * this.fromPoint.y + 2 * t * (1 - t) * viaNode.y + Math.pow(t, 2) * this.toPoint.y;

	      return { x: x, y: y };
	    }
	  }]);
	  return BezierEdgeStatic;
	}(_BezierEdgeBase3['default']);

	exports['default'] = BezierEdgeStatic;

	/***/ }),
	/* 219 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _EdgeBase2 = __webpack_require__(118);

	var _EdgeBase3 = _interopRequireDefault(_EdgeBase2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * A Straight Edge.
	 *
	 * @extends EdgeBase
	 */
	var StraightEdge = function (_EdgeBase) {
	  (0, _inherits3['default'])(StraightEdge, _EdgeBase);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Label} labelModule
	   */
	  function StraightEdge(options, body, labelModule) {
	    (0, _classCallCheck3['default'])(this, StraightEdge);
	    return (0, _possibleConstructorReturn3['default'])(this, (StraightEdge.__proto__ || (0, _getPrototypeOf2['default'])(StraightEdge)).call(this, options, body, labelModule));
	  }

	  /**
	   * Draw a line between two nodes
	   * @param {CanvasRenderingContext2D} ctx
	   * @param {{toArrow: boolean, toArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), toArrowType: *, middleArrow: boolean, middleArrowScale: (number|allOptions.edges.arrows.middle.scaleFactor|{number}|Array), middleArrowType: (allOptions.edges.arrows.middle.type|{string}|string|*), fromArrow: boolean, fromArrowScale: (allOptions.edges.arrows.to.scaleFactor|{number}|allOptions.edges.arrows.middle.scaleFactor|allOptions.edges.arrows.from.scaleFactor|Array|number), fromArrowType: *, arrowStrikethrough: (*|boolean|allOptions.edges.arrowStrikethrough|{boolean}), color: undefined, inheritsColor: (string|string|string|allOptions.edges.color.inherit|{string, boolean}|Array|*), opacity: *, hidden: *, length: *, shadow: *, shadowColor: *, shadowSize: *, shadowX: *, shadowY: *, dashes: (*|boolean|Array|allOptions.edges.dashes|{boolean, array}), width: *}} values
	   * @private
	   */


	  (0, _createClass3['default'])(StraightEdge, [{
	    key: '_line',
	    value: function _line(ctx, values) {
	      // draw a straight line
	      ctx.beginPath();
	      ctx.moveTo(this.fromPoint.x, this.fromPoint.y);
	      ctx.lineTo(this.toPoint.x, this.toPoint.y);
	      // draw shadow if enabled
	      this.enableShadow(ctx, values);
	      ctx.stroke();
	      this.disableShadow(ctx, values);
	    }

	    /**
	     *
	     * @returns {undefined}
	     */

	  }, {
	    key: 'getViaNode',
	    value: function getViaNode() {
	      return undefined;
	    }

	    /**
	     * Combined function of pointOnLine and pointOnBezier. This gives the coordinates of a point on the line at a certain percentage of the way
	     *
	     * @param {number} percentage
	     * @returns {{x: number, y: number}}
	     * @private
	     */

	  }, {
	    key: 'getPoint',
	    value: function getPoint(percentage) {
	      return {
	        x: (1 - percentage) * this.fromPoint.x + percentage * this.toPoint.x,
	        y: (1 - percentage) * this.fromPoint.y + percentage * this.toPoint.y
	      };
	    }

	    /**
	     *
	     * @param {Node} nearNode
	     * @param {CanvasRenderingContext2D} ctx
	     * @returns {{x: number, y: number}}
	     * @private
	     */

	  }, {
	    key: '_findBorderPosition',
	    value: function _findBorderPosition(nearNode, ctx) {
	      var node1 = this.to;
	      var node2 = this.from;
	      if (nearNode.id === this.from.id) {
	        node1 = this.from;
	        node2 = this.to;
	      }

	      var angle = Math.atan2(node1.y - node2.y, node1.x - node2.x);
	      var dx = node1.x - node2.x;
	      var dy = node1.y - node2.y;
	      var edgeSegmentLength = Math.sqrt(dx * dx + dy * dy);
	      var toBorderDist = nearNode.distanceToBorder(ctx, angle);
	      var toBorderPoint = (edgeSegmentLength - toBorderDist) / edgeSegmentLength;

	      var borderPos = {};
	      borderPos.x = (1 - toBorderPoint) * node2.x + toBorderPoint * node1.x;
	      borderPos.y = (1 - toBorderPoint) * node2.y + toBorderPoint * node1.y;

	      return borderPos;
	    }

	    /**
	     *
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x3
	     * @param {number} y3
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_getDistanceToEdge',
	    value: function _getDistanceToEdge(x1, y1, x2, y2, x3, y3) {
	      // x3,y3 is the point
	      return this._getDistanceToLine(x1, y1, x2, y2, x3, y3);
	    }
	  }]);
	  return StraightEdge;
	}(_EdgeBase3['default']);

	exports['default'] = StraightEdge;

	/***/ }),
	/* 220 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _keys = __webpack_require__(8);

	var _keys2 = _interopRequireDefault(_keys);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var BarnesHutSolver = __webpack_require__(120)['default'];
	var Repulsion = __webpack_require__(221)['default'];
	var HierarchicalRepulsion = __webpack_require__(222)['default'];
	var SpringSolver = __webpack_require__(223)['default'];
	var HierarchicalSpringSolver = __webpack_require__(224)['default'];
	var CentralGravitySolver = __webpack_require__(121)['default'];
	var ForceAtlas2BasedRepulsionSolver = __webpack_require__(225)['default'];
	var ForceAtlas2BasedCentralGravitySolver = __webpack_require__(226)['default'];
	var util = __webpack_require__(2);
	var EndPoints = __webpack_require__(119)['default']; // for debugging with _drawForces()


	/**
	 * The physics engine
	 */

	var PhysicsEngine = function () {
	  /**
	   * @param {Object} body
	   */
	  function PhysicsEngine(body) {
	    (0, _classCallCheck3['default'])(this, PhysicsEngine);

	    this.body = body;
	    this.physicsBody = { physicsNodeIndices: [], physicsEdgeIndices: [], forces: {}, velocities: {} };

	    this.physicsEnabled = true;
	    this.simulationInterval = 1000 / 60;
	    this.requiresTimeout = true;
	    this.previousStates = {};
	    this.referenceState = {};
	    this.freezeCache = {};
	    this.renderTimer = undefined;

	    // parameters for the adaptive timestep
	    this.adaptiveTimestep = false;
	    this.adaptiveTimestepEnabled = false;
	    this.adaptiveCounter = 0;
	    this.adaptiveInterval = 3;

	    this.stabilized = false;
	    this.startedStabilization = false;
	    this.stabilizationIterations = 0;
	    this.ready = false; // will be set to true if the stabilize

	    // default options
	    this.options = {};
	    this.defaultOptions = {
	      enabled: true,
	      barnesHut: {
	        theta: 0.5,
	        gravitationalConstant: -2000,
	        centralGravity: 0.3,
	        springLength: 95,
	        springConstant: 0.04,
	        damping: 0.09,
	        avoidOverlap: 0
	      },
	      forceAtlas2Based: {
	        theta: 0.5,
	        gravitationalConstant: -50,
	        centralGravity: 0.01,
	        springConstant: 0.08,
	        springLength: 100,
	        damping: 0.4,
	        avoidOverlap: 0
	      },
	      repulsion: {
	        centralGravity: 0.2,
	        springLength: 200,
	        springConstant: 0.05,
	        nodeDistance: 100,
	        damping: 0.09,
	        avoidOverlap: 0
	      },
	      hierarchicalRepulsion: {
	        centralGravity: 0.0,
	        springLength: 100,
	        springConstant: 0.01,
	        nodeDistance: 120,
	        damping: 0.09
	      },
	      maxVelocity: 50,
	      minVelocity: 0.75, // px/s
	      solver: 'barnesHut',
	      stabilization: {
	        enabled: true,
	        iterations: 1000, // maximum number of iteration to stabilize
	        updateInterval: 50,
	        onlyDynamicEdges: false,
	        fit: true
	      },
	      timestep: 0.5,
	      adaptiveTimestep: true
	    };
	    util.extend(this.options, this.defaultOptions);
	    this.timestep = 0.5;
	    this.layoutFailed = false;

	    this.bindEventListeners();
	  }

	  /**
	   * Binds event listeners
	   */


	  (0, _createClass3['default'])(PhysicsEngine, [{
	    key: 'bindEventListeners',
	    value: function bindEventListeners() {
	      var _this = this;

	      this.body.emitter.on('initPhysics', function () {
	        _this.initPhysics();
	      });
	      this.body.emitter.on('_layoutFailed', function () {
	        _this.layoutFailed = true;
	      });
	      this.body.emitter.on('resetPhysics', function () {
	        _this.stopSimulation();_this.ready = false;
	      });
	      this.body.emitter.on('disablePhysics', function () {
	        _this.physicsEnabled = false;_this.stopSimulation();
	      });
	      this.body.emitter.on('restorePhysics', function () {
	        _this.setOptions(_this.options);
	        if (_this.ready === true) {
	          _this.startSimulation();
	        }
	      });
	      this.body.emitter.on('startSimulation', function () {
	        if (_this.ready === true) {
	          _this.startSimulation();
	        }
	      });
	      this.body.emitter.on('stopSimulation', function () {
	        _this.stopSimulation();
	      });
	      this.body.emitter.on('destroy', function () {
	        _this.stopSimulation(false);
	        _this.body.emitter.off();
	      });
	      this.body.emitter.on("_dataChanged", function () {
	        // Nodes and/or edges have been added or removed, update shortcut lists.
	        _this.updatePhysicsData();
	      });

	      // debug: show forces
	      // this.body.emitter.on("afterDrawing", (ctx) => {this._drawForces(ctx);});
	    }

	    /**
	     * set the physics options
	     * @param {Object} options
	     */

	  }, {
	    key: 'setOptions',
	    value: function setOptions(options) {
	      if (options !== undefined) {
	        if (options === false) {
	          this.options.enabled = false;
	          this.physicsEnabled = false;
	          this.stopSimulation();
	        } else if (options === true) {
	          this.options.enabled = true;
	          this.physicsEnabled = true;
	          this.startSimulation();
	        } else {
	          this.physicsEnabled = true;
	          util.selectiveNotDeepExtend(['stabilization'], this.options, options);
	          util.mergeOptions(this.options, options, 'stabilization');

	          if (options.enabled === undefined) {
	            this.options.enabled = true;
	          }

	          if (this.options.enabled === false) {
	            this.physicsEnabled = false;
	            this.stopSimulation();
	          }

	          // set the timestep
	          this.timestep = this.options.timestep;
	        }
	      }
	      this.init();
	    }

	    /**
	     * configure the engine.
	     */

	  }, {
	    key: 'init',
	    value: function init() {
	      var options;
	      if (this.options.solver === 'forceAtlas2Based') {
	        options = this.options.forceAtlas2Based;
	        this.nodesSolver = new ForceAtlas2BasedRepulsionSolver(this.body, this.physicsBody, options);
	        this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);
	        this.gravitySolver = new ForceAtlas2BasedCentralGravitySolver(this.body, this.physicsBody, options);
	      } else if (this.options.solver === 'repulsion') {
	        options = this.options.repulsion;
	        this.nodesSolver = new Repulsion(this.body, this.physicsBody, options);
	        this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);
	        this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);
	      } else if (this.options.solver === 'hierarchicalRepulsion') {
	        options = this.options.hierarchicalRepulsion;
	        this.nodesSolver = new HierarchicalRepulsion(this.body, this.physicsBody, options);
	        this.edgesSolver = new HierarchicalSpringSolver(this.body, this.physicsBody, options);
	        this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);
	      } else {
	        // barnesHut
	        options = this.options.barnesHut;
	        this.nodesSolver = new BarnesHutSolver(this.body, this.physicsBody, options);
	        this.edgesSolver = new SpringSolver(this.body, this.physicsBody, options);
	        this.gravitySolver = new CentralGravitySolver(this.body, this.physicsBody, options);
	      }

	      this.modelOptions = options;
	    }

	    /**
	     * initialize the engine
	     */

	  }, {
	    key: 'initPhysics',
	    value: function initPhysics() {
	      if (this.physicsEnabled === true && this.options.enabled === true) {
	        if (this.options.stabilization.enabled === true) {
	          this.stabilize();
	        } else {
	          this.stabilized = false;
	          this.ready = true;
	          this.body.emitter.emit('fit', {}, this.layoutFailed); // if the layout failed, we use the approximation for the zoom
	          this.startSimulation();
	        }
	      } else {
	        this.ready = true;
	        this.body.emitter.emit('fit');
	      }
	    }

	    /**
	     * Start the simulation
	     */

	  }, {
	    key: 'startSimulation',
	    value: function startSimulation() {
	      if (this.physicsEnabled === true && this.options.enabled === true) {
	        this.stabilized = false;

	        // when visible, adaptivity is disabled.
	        this.adaptiveTimestep = false;

	        // this sets the width of all nodes initially which could be required for the avoidOverlap
	        this.body.emitter.emit("_resizeNodes");
	        if (this.viewFunction === undefined) {
	          this.viewFunction = this.simulationStep.bind(this);
	          this.body.emitter.on('initRedraw', this.viewFunction);
	          this.body.emitter.emit('_startRendering');
	        }
	      } else {
	        this.body.emitter.emit('_redraw');
	      }
	    }

	    /**
	     * Stop the simulation, force stabilization.
	     * @param {boolean} [emit=true]
	     */

	  }, {
	    key: 'stopSimulation',
	    value: function stopSimulation() {
	      var emit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	      this.stabilized = true;
	      if (emit === true) {
	        this._emitStabilized();
	      }
	      if (this.viewFunction !== undefined) {
	        this.body.emitter.off('initRedraw', this.viewFunction);
	        this.viewFunction = undefined;
	        if (emit === true) {
	          this.body.emitter.emit('_stopRendering');
	        }
	      }
	    }

	    /**
	     * The viewFunction inserts this step into each render loop. It calls the physics tick and handles the cleanup at stabilized.
	     *
	     */

	  }, {
	    key: 'simulationStep',
	    value: function simulationStep() {
	      // check if the physics have settled
	      var startTime = Date.now();
	      this.physicsTick();
	      var physicsTime = Date.now() - startTime;

	      // run double speed if it is a little graph
	      if ((physicsTime < 0.4 * this.simulationInterval || this.runDoubleSpeed === true) && this.stabilized === false) {
	        this.physicsTick();

	        // this makes sure there is no jitter. The decision is taken once to run it at double speed.
	        this.runDoubleSpeed = true;
	      }

	      if (this.stabilized === true) {
	        this.stopSimulation();
	      }
	    }

	    /**
	     * trigger the stabilized event.
	     *
	     * @param {number} [amountOfIterations=this.stabilizationIterations]
	     * @private
	     */

	  }, {
	    key: '_emitStabilized',
	    value: function _emitStabilized() {
	      var _this2 = this;

	      var amountOfIterations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.stabilizationIterations;

	      if (this.stabilizationIterations > 1 || this.startedStabilization === true) {
	        setTimeout(function () {
	          _this2.body.emitter.emit('stabilized', { iterations: amountOfIterations });
	          _this2.startedStabilization = false;
	          _this2.stabilizationIterations = 0;
	        }, 0);
	      }
	    }

	    /**
	     * Calculate the forces for one physics iteration and move the nodes.
	     * @private
	     */

	  }, {
	    key: 'physicsStep',
	    value: function physicsStep() {
	      this.gravitySolver.solve();
	      this.nodesSolver.solve();
	      this.edgesSolver.solve();
	      this.moveNodes();
	    }

	    /**
	     * Make dynamic adjustments to the timestep, based on current state.
	     *
	     * Helper function for physicsTick().
	     * @private
	     */

	  }, {
	    key: 'adjustTimeStep',
	    value: function adjustTimeStep() {
	      var factor = 1.2; // Factor for increasing the timestep on success.

	      // we compare the two steps. if it is acceptable we double the step.
	      if (this._evaluateStepQuality() === true) {
	        this.timestep = factor * this.timestep;
	      } else {
	        // if not, we decrease the step to a minimum of the options timestep.
	        // if the decreased timestep is smaller than the options step, we do not reset the counter
	        // we assume that the options timestep is stable enough.
	        if (this.timestep / factor < this.options.timestep) {
	          this.timestep = this.options.timestep;
	        } else {
	          // if the timestep was larger than 2 times the option one we check the adaptivity again to ensure
	          // that large instabilities do not form.
	          this.adaptiveCounter = -1; // check again next iteration
	          this.timestep = Math.max(this.options.timestep, this.timestep / factor);
	        }
	      }
	    }

	    /**
	     * A single simulation step (or 'tick') in the physics simulation
	     *
	     * @private
	     */

	  }, {
	    key: 'physicsTick',
	    value: function physicsTick() {
	      this._startStabilizing(); // this ensures that there is no start event when the network is already stable.
	      if (this.stabilized === true) return;

	      // adaptivity means the timestep adapts to the situation, only applicable for stabilization
	      if (this.adaptiveTimestep === true && this.adaptiveTimestepEnabled === true) {
	        // timestep remains stable for "interval" iterations.
	        var doAdaptive = this.adaptiveCounter % this.adaptiveInterval === 0;

	        if (doAdaptive) {
	          // first the big step and revert.
	          this.timestep = 2 * this.timestep;
	          this.physicsStep();
	          this.revert(); // saves the reference state

	          // now the normal step. Since this is the last step, it is the more stable one and we will take this.
	          this.timestep = 0.5 * this.timestep;

	          // since it's half the step, we do it twice.
	          this.physicsStep();
	          this.physicsStep();

	          this.adjustTimeStep();
	        } else {
	          this.physicsStep(); // normal step, keeping timestep constant
	        }

	        this.adaptiveCounter += 1;
	      } else {
	        // case for the static timestep, we reset it to the one in options and take a normal step.
	        this.timestep = this.options.timestep;
	        this.physicsStep();
	      }

	      if (this.stabilized === true) this.revert();
	      this.stabilizationIterations++;
	    }

	    /**
	     * Nodes and edges can have the physics toggles on or off. A collection of indices is created here so we can skip the check all the time.
	     *
	     * @private
	     */

	  }, {
	    key: 'updatePhysicsData',
	    value: function updatePhysicsData() {
	      this.physicsBody.forces = {};
	      this.physicsBody.physicsNodeIndices = [];
	      this.physicsBody.physicsEdgeIndices = [];
	      var nodes = this.body.nodes;
	      var edges = this.body.edges;

	      // get node indices for physics
	      for (var nodeId in nodes) {
	        if (nodes.hasOwnProperty(nodeId)) {
	          if (nodes[nodeId].options.physics === true) {
	            this.physicsBody.physicsNodeIndices.push(nodes[nodeId].id);
	          }
	        }
	      }

	      // get edge indices for physics
	      for (var edgeId in edges) {
	        if (edges.hasOwnProperty(edgeId)) {
	          if (edges[edgeId].options.physics === true) {
	            this.physicsBody.physicsEdgeIndices.push(edges[edgeId].id);
	          }
	        }
	      }

	      // get the velocity and the forces vector
	      for (var i = 0; i < this.physicsBody.physicsNodeIndices.length; i++) {
	        var _nodeId = this.physicsBody.physicsNodeIndices[i];
	        this.physicsBody.forces[_nodeId] = { x: 0, y: 0 };

	        // forces can be reset because they are recalculated. Velocities have to persist.
	        if (this.physicsBody.velocities[_nodeId] === undefined) {
	          this.physicsBody.velocities[_nodeId] = { x: 0, y: 0 };
	        }
	      }

	      // clean deleted nodes from the velocity vector
	      for (var _nodeId2 in this.physicsBody.velocities) {
	        if (nodes[_nodeId2] === undefined) {
	          delete this.physicsBody.velocities[_nodeId2];
	        }
	      }
	    }

	    /**
	     * Revert the simulation one step. This is done so after stabilization, every new start of the simulation will also say stabilized.
	     */

	  }, {
	    key: 'revert',
	    value: function revert() {
	      var nodeIds = (0, _keys2['default'])(this.previousStates);
	      var nodes = this.body.nodes;
	      var velocities = this.physicsBody.velocities;
	      this.referenceState = {};

	      for (var i = 0; i < nodeIds.length; i++) {
	        var nodeId = nodeIds[i];
	        if (nodes[nodeId] !== undefined) {
	          if (nodes[nodeId].options.physics === true) {
	            this.referenceState[nodeId] = {
	              positions: { x: nodes[nodeId].x, y: nodes[nodeId].y }
	            };
	            velocities[nodeId].x = this.previousStates[nodeId].vx;
	            velocities[nodeId].y = this.previousStates[nodeId].vy;
	            nodes[nodeId].x = this.previousStates[nodeId].x;
	            nodes[nodeId].y = this.previousStates[nodeId].y;
	          }
	        } else {
	          delete this.previousStates[nodeId];
	        }
	      }
	    }

	    /**
	     * This compares the reference state to the current state
	     *
	     * @returns {boolean}
	     * @private
	     */

	  }, {
	    key: '_evaluateStepQuality',
	    value: function _evaluateStepQuality() {
	      var dx = void 0,
	          dy = void 0,
	          dpos = void 0;
	      var nodes = this.body.nodes;
	      var reference = this.referenceState;
	      var posThreshold = 0.3;

	      for (var nodeId in this.referenceState) {
	        if (this.referenceState.hasOwnProperty(nodeId) && nodes[nodeId] !== undefined) {
	          dx = nodes[nodeId].x - reference[nodeId].positions.x;
	          dy = nodes[nodeId].y - reference[nodeId].positions.y;

	          dpos = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));

	          if (dpos > posThreshold) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * move the nodes one timestep and check if they are stabilized
	     */

	  }, {
	    key: 'moveNodes',
	    value: function moveNodes() {
	      var nodeIndices = this.physicsBody.physicsNodeIndices;
	      var maxNodeVelocity = 0;
	      var averageNodeVelocity = 0;

	      // the velocity threshold (energy in the system) for the adaptivity toggle
	      var velocityAdaptiveThreshold = 5;

	      for (var i = 0; i < nodeIndices.length; i++) {
	        var nodeId = nodeIndices[i];
	        var nodeVelocity = this._performStep(nodeId);
	        // stabilized is true if stabilized is true and velocity is smaller than vmin --> all nodes must be stabilized
	        maxNodeVelocity = Math.max(maxNodeVelocity, nodeVelocity);
	        averageNodeVelocity += nodeVelocity;
	      }

	      // evaluating the stabilized and adaptiveTimestepEnabled conditions
	      this.adaptiveTimestepEnabled = averageNodeVelocity / nodeIndices.length < velocityAdaptiveThreshold;
	      this.stabilized = maxNodeVelocity < this.options.minVelocity;
	    }

	    /**
	     * Calculate new velocity for a coordinate direction
	     *
	     * @param {number} v  velocity for current coordinate
	     * @param {number} f  regular force for current coordinate
	     * @param {number} m  mass of current node
	     * @returns {number} new velocity for current coordinate
	     * @private
	     */

	  }, {
	    key: 'calculateComponentVelocity',
	    value: function calculateComponentVelocity(v, f, m) {
	      var df = this.modelOptions.damping * v; // damping force
	      var a = (f - df) / m; // acceleration

	      v += a * this.timestep;

	      // Put a limit on the velocities if it is really high
	      var maxV = this.options.maxVelocity || 1e9;
	      if (Math.abs(v) > maxV) {
	        v = v > 0 ? maxV : -maxV;
	      }

	      return v;
	    }

	    /**
	     * Perform the actual step
	     *
	     * @param {Node.id} nodeId
	     * @returns {number} the new velocity of given node
	     * @private
	     */

	  }, {
	    key: '_performStep',
	    value: function _performStep(nodeId) {
	      var node = this.body.nodes[nodeId];
	      var force = this.physicsBody.forces[nodeId];
	      var velocity = this.physicsBody.velocities[nodeId];

	      // store the state so we can revert
	      this.previousStates[nodeId] = { x: node.x, y: node.y, vx: velocity.x, vy: velocity.y };

	      if (node.options.fixed.x === false) {
	        velocity.x = this.calculateComponentVelocity(velocity.x, force.x, node.options.mass);
	        node.x += velocity.x * this.timestep;
	      } else {
	        force.x = 0;
	        velocity.x = 0;
	      }

	      if (node.options.fixed.y === false) {
	        velocity.y = this.calculateComponentVelocity(velocity.y, force.y, node.options.mass);
	        node.y += velocity.y * this.timestep;
	      } else {
	        force.y = 0;
	        velocity.y = 0;
	      }

	      var totalVelocity = Math.sqrt(Math.pow(velocity.x, 2) + Math.pow(velocity.y, 2));
	      return totalVelocity;
	    }

	    /**
	     * When initializing and stabilizing, we can freeze nodes with a predefined position.
	     * This greatly speeds up stabilization because only the supportnodes for the smoothCurves have to settle.
	     *
	     * @private
	     */

	  }, {
	    key: '_freezeNodes',
	    value: function _freezeNodes() {
	      var nodes = this.body.nodes;
	      for (var id in nodes) {
	        if (nodes.hasOwnProperty(id)) {
	          if (nodes[id].x && nodes[id].y) {
	            var fixed = nodes[id].options.fixed;
	            this.freezeCache[id] = { x: fixed.x, y: fixed.y };
	            fixed.x = true;
	            fixed.y = true;
	          }
	        }
	      }
	    }

	    /**
	     * Unfreezes the nodes that have been frozen by _freezeDefinedNodes.
	     *
	     * @private
	     */

	  }, {
	    key: '_restoreFrozenNodes',
	    value: function _restoreFrozenNodes() {
	      var nodes = this.body.nodes;
	      for (var id in nodes) {
	        if (nodes.hasOwnProperty(id)) {
	          if (this.freezeCache[id] !== undefined) {
	            nodes[id].options.fixed.x = this.freezeCache[id].x;
	            nodes[id].options.fixed.y = this.freezeCache[id].y;
	          }
	        }
	      }
	      this.freezeCache = {};
	    }

	    /**
	     * Find a stable position for all nodes
	     *
	     * @param {number} [iterations=this.options.stabilization.iterations]
	     */

	  }, {
	    key: 'stabilize',
	    value: function stabilize() {
	      var _this3 = this;

	      var iterations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.stabilization.iterations;

	      if (typeof iterations !== 'number') {
	        iterations = this.options.stabilization.iterations;
	        console.log('The stabilize method needs a numeric amount of iterations. Switching to default: ', iterations);
	      }

	      if (this.physicsBody.physicsNodeIndices.length === 0) {
	        this.ready = true;
	        return;
	      }

	      // enable adaptive timesteps
	      this.adaptiveTimestep = true && this.options.adaptiveTimestep;

	      // this sets the width of all nodes initially which could be required for the avoidOverlap
	      this.body.emitter.emit("_resizeNodes");

	      this.stopSimulation(); // stop the render loop
	      this.stabilized = false;

	      // block redraw requests
	      this.body.emitter.emit('_blockRedraw');
	      this.targetIterations = iterations;

	      // start the stabilization
	      if (this.options.stabilization.onlyDynamicEdges === true) {
	        this._freezeNodes();
	      }
	      this.stabilizationIterations = 0;

	      setTimeout(function () {
	        return _this3._stabilizationBatch();
	      }, 0);
	    }

	    /**
	     * If not already stabilizing, start it and emit a start event.
	     *
	     * @returns {boolean} true if stabilization started with this call
	     * @private
	     */

	  }, {
	    key: '_startStabilizing',
	    value: function _startStabilizing() {
	      if (this.startedStabilization === true) return false;

	      this.body.emitter.emit('startStabilizing');
	      this.startedStabilization = true;
	      return true;
	    }

	    /**
	     * One batch of stabilization
	     * @private
	     */

	  }, {
	    key: '_stabilizationBatch',
	    value: function _stabilizationBatch() {
	      var _this4 = this;

	      var running = function running() {
	        return _this4.stabilized === false && _this4.stabilizationIterations < _this4.targetIterations;
	      };

	      var sendProgress = function sendProgress() {
	        _this4.body.emitter.emit('stabilizationProgress', {
	          iterations: _this4.stabilizationIterations,
	          total: _this4.targetIterations
	        });
	      };

	      if (this._startStabilizing()) {
	        sendProgress(); // Ensure that there is at least one start event.
	      }

	      var count = 0;
	      while (running() && count < this.options.stabilization.updateInterval) {
	        this.physicsTick();
	        count++;
	      }

	      sendProgress();

	      if (running()) {
	        setTimeout(this._stabilizationBatch.bind(this), 0);
	      } else {
	        this._finalizeStabilization();
	      }
	    }

	    /**
	     * Wrap up the stabilization, fit and emit the events.
	     * @private
	     */

	  }, {
	    key: '_finalizeStabilization',
	    value: function _finalizeStabilization() {
	      this.body.emitter.emit('_allowRedraw');
	      if (this.options.stabilization.fit === true) {
	        this.body.emitter.emit('fit');
	      }

	      if (this.options.stabilization.onlyDynamicEdges === true) {
	        this._restoreFrozenNodes();
	      }

	      this.body.emitter.emit('stabilizationIterationsDone');
	      this.body.emitter.emit('_requestRedraw');

	      if (this.stabilized === true) {
	        this._emitStabilized();
	      } else {
	        this.startSimulation();
	      }

	      this.ready = true;
	    }

	    //---------------------------  DEBUGGING BELOW  ---------------------------//


	    /**
	     * Debug function that display arrows for the forces currently active in the network.
	     *
	     * Use this when debugging only.
	     *
	     * @param {CanvasRenderingContext2D} ctx
	     * @private
	     */

	  }, {
	    key: '_drawForces',
	    value: function _drawForces(ctx) {
	      for (var i = 0; i < this.physicsBody.physicsNodeIndices.length; i++) {
	        var index = this.physicsBody.physicsNodeIndices[i];
	        var node = this.body.nodes[index];
	        var force = this.physicsBody.forces[index];
	        var factor = 20;
	        var colorFactor = 0.03;
	        var forceSize = Math.sqrt(Math.pow(force.x, 2) + Math.pow(force.x, 2));

	        var size = Math.min(Math.max(5, forceSize), 15);
	        var arrowSize = 3 * size;

	        var color = util.HSVToHex((180 - Math.min(1, Math.max(0, colorFactor * forceSize)) * 180) / 360, 1, 1);

	        var point = {
	          x: node.x + factor * force.x,
	          y: node.y + factor * force.y
	        };

	        ctx.lineWidth = size;
	        ctx.strokeStyle = color;
	        ctx.beginPath();
	        ctx.moveTo(node.x, node.y);
	        ctx.lineTo(point.x, point.y);
	        ctx.stroke();

	        var angle = Math.atan2(force.y, force.x);
	        ctx.fillStyle = color;
	        EndPoints.draw(ctx, { type: 'arrow', point: point, angle: angle, length: arrowSize });
	        ctx.fill();
	      }
	    }
	  }]);
	  return PhysicsEngine;
	}();

	exports['default'] = PhysicsEngine;

	/***/ }),
	/* 221 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * Repulsion Solver
	 */
	var RepulsionSolver = function () {
	  /**
	   * @param {Object} body
	   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
	   * @param {Object} options
	   */
	  function RepulsionSolver(body, physicsBody, options) {
	    (0, _classCallCheck3["default"])(this, RepulsionSolver);

	    this.body = body;
	    this.physicsBody = physicsBody;
	    this.setOptions(options);
	  }

	  /**
	   *
	   * @param {Object} options
	   */


	  (0, _createClass3["default"])(RepulsionSolver, [{
	    key: "setOptions",
	    value: function setOptions(options) {
	      this.options = options;
	    }

	    /**
	     * Calculate the forces the nodes apply on each other based on a repulsion field.
	     * This field is linearly approximated.
	     *
	     * @private
	     */

	  }, {
	    key: "solve",
	    value: function solve() {
	      var dx, dy, distance, fx, fy, repulsingForce, node1, node2;

	      var nodes = this.body.nodes;
	      var nodeIndices = this.physicsBody.physicsNodeIndices;
	      var forces = this.physicsBody.forces;

	      // repulsing forces between nodes
	      var nodeDistance = this.options.nodeDistance;

	      // approximation constants
	      var a = -2 / 3 / nodeDistance;
	      var b = 4 / 3;

	      // we loop from i over all but the last entree in the array
	      // j loops from i+1 to the last. This way we do not double count any of the indices, nor i === j
	      for (var i = 0; i < nodeIndices.length - 1; i++) {
	        node1 = nodes[nodeIndices[i]];
	        for (var j = i + 1; j < nodeIndices.length; j++) {
	          node2 = nodes[nodeIndices[j]];

	          dx = node2.x - node1.x;
	          dy = node2.y - node1.y;
	          distance = Math.sqrt(dx * dx + dy * dy);

	          // same condition as BarnesHutSolver, making sure nodes are never 100% overlapping.
	          if (distance === 0) {
	            distance = 0.1 * Math.random();
	            dx = distance;
	          }

	          if (distance < 2 * nodeDistance) {
	            if (distance < 0.5 * nodeDistance) {
	              repulsingForce = 1.0;
	            } else {
	              repulsingForce = a * distance + b; // linear approx of  1 / (1 + Math.exp((distance / nodeDistance - 1) * steepness))
	            }
	            repulsingForce = repulsingForce / distance;

	            fx = dx * repulsingForce;
	            fy = dy * repulsingForce;

	            forces[node1.id].x -= fx;
	            forces[node1.id].y -= fy;
	            forces[node2.id].x += fx;
	            forces[node2.id].y += fy;
	          }
	        }
	      }
	    }
	  }]);
	  return RepulsionSolver;
	}();

	exports["default"] = RepulsionSolver;

	/***/ }),
	/* 222 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * Hierarchical Repulsion Solver
	 */
	var HierarchicalRepulsionSolver = function () {
	  /**
	   * @param {Object} body
	   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
	   * @param {Object} options
	   */
	  function HierarchicalRepulsionSolver(body, physicsBody, options) {
	    (0, _classCallCheck3["default"])(this, HierarchicalRepulsionSolver);

	    this.body = body;
	    this.physicsBody = physicsBody;
	    this.setOptions(options);
	  }

	  /**
	   *
	   * @param {Object} options
	   */


	  (0, _createClass3["default"])(HierarchicalRepulsionSolver, [{
	    key: "setOptions",
	    value: function setOptions(options) {
	      this.options = options;
	    }

	    /**
	     * Calculate the forces the nodes apply on each other based on a repulsion field.
	     * This field is linearly approximated.
	     *
	     * @private
	     */

	  }, {
	    key: "solve",
	    value: function solve() {
	      var dx, dy, distance, fx, fy, repulsingForce, node1, node2, i, j;

	      var nodes = this.body.nodes;
	      var nodeIndices = this.physicsBody.physicsNodeIndices;
	      var forces = this.physicsBody.forces;

	      // repulsing forces between nodes
	      var nodeDistance = this.options.nodeDistance;

	      // we loop from i over all but the last entree in the array
	      // j loops from i+1 to the last. This way we do not double count any of the indices, nor i === j
	      for (i = 0; i < nodeIndices.length - 1; i++) {
	        node1 = nodes[nodeIndices[i]];
	        for (j = i + 1; j < nodeIndices.length; j++) {
	          node2 = nodes[nodeIndices[j]];

	          // nodes only affect nodes on their level
	          if (node1.level === node2.level) {
	            dx = node2.x - node1.x;
	            dy = node2.y - node1.y;
	            distance = Math.sqrt(dx * dx + dy * dy);

	            var steepness = 0.05;
	            if (distance < nodeDistance) {
	              repulsingForce = -Math.pow(steepness * distance, 2) + Math.pow(steepness * nodeDistance, 2);
	            } else {
	              repulsingForce = 0;
	            }
	            // normalize force with
	            if (distance === 0) {
	              distance = 0.01;
	            } else {
	              repulsingForce = repulsingForce / distance;
	            }
	            fx = dx * repulsingForce;
	            fy = dy * repulsingForce;

	            forces[node1.id].x -= fx;
	            forces[node1.id].y -= fy;
	            forces[node2.id].x += fx;
	            forces[node2.id].y += fy;
	          }
	        }
	      }
	    }
	  }]);
	  return HierarchicalRepulsionSolver;
	}();

	exports["default"] = HierarchicalRepulsionSolver;

	/***/ }),
	/* 223 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * Spring Solver
	 */
	var SpringSolver = function () {
	  /**
	   * @param {Object} body
	   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
	   * @param {Object} options
	   */
	  function SpringSolver(body, physicsBody, options) {
	    (0, _classCallCheck3["default"])(this, SpringSolver);

	    this.body = body;
	    this.physicsBody = physicsBody;
	    this.setOptions(options);
	  }

	  /**
	   *
	   * @param {Object} options
	   */


	  (0, _createClass3["default"])(SpringSolver, [{
	    key: "setOptions",
	    value: function setOptions(options) {
	      this.options = options;
	    }

	    /**
	     * This function calculates the springforces on the nodes, accounting for the support nodes.
	     *
	     * @private
	     */

	  }, {
	    key: "solve",
	    value: function solve() {
	      var edgeLength = void 0,
	          edge = void 0;
	      var edgeIndices = this.physicsBody.physicsEdgeIndices;
	      var edges = this.body.edges;
	      var node1 = void 0,
	          node2 = void 0,
	          node3 = void 0;

	      // forces caused by the edges, modelled as springs
	      for (var i = 0; i < edgeIndices.length; i++) {
	        edge = edges[edgeIndices[i]];
	        if (edge.connected === true && edge.toId !== edge.fromId) {
	          // only calculate forces if nodes are in the same sector
	          if (this.body.nodes[edge.toId] !== undefined && this.body.nodes[edge.fromId] !== undefined) {
	            if (edge.edgeType.via !== undefined) {
	              edgeLength = edge.options.length === undefined ? this.options.springLength : edge.options.length;
	              node1 = edge.to;
	              node2 = edge.edgeType.via;
	              node3 = edge.from;

	              this._calculateSpringForce(node1, node2, 0.5 * edgeLength);
	              this._calculateSpringForce(node2, node3, 0.5 * edgeLength);
	            } else {
	              // the * 1.5 is here so the edge looks as large as a smooth edge. It does not initially because the smooth edges use
	              // the support nodes which exert a repulsive force on the to and from nodes, making the edge appear larger.
	              edgeLength = edge.options.length === undefined ? this.options.springLength * 1.5 : edge.options.length;
	              this._calculateSpringForce(edge.from, edge.to, edgeLength);
	            }
	          }
	        }
	      }
	    }

	    /**
	     * This is the code actually performing the calculation for the function above.
	     *
	     * @param {Node} node1
	     * @param {Node} node2
	     * @param {number} edgeLength
	     * @private
	     */

	  }, {
	    key: "_calculateSpringForce",
	    value: function _calculateSpringForce(node1, node2, edgeLength) {
	      var dx = node1.x - node2.x;
	      var dy = node1.y - node2.y;
	      var distance = Math.max(Math.sqrt(dx * dx + dy * dy), 0.01);

	      // the 1/distance is so the fx and fy can be calculated without sine or cosine.
	      var springForce = this.options.springConstant * (edgeLength - distance) / distance;

	      var fx = dx * springForce;
	      var fy = dy * springForce;

	      // handle the case where one node is not part of the physcis
	      if (this.physicsBody.forces[node1.id] !== undefined) {
	        this.physicsBody.forces[node1.id].x += fx;
	        this.physicsBody.forces[node1.id].y += fy;
	      }

	      if (this.physicsBody.forces[node2.id] !== undefined) {
	        this.physicsBody.forces[node2.id].x -= fx;
	        this.physicsBody.forces[node2.id].y -= fy;
	      }
	    }
	  }]);
	  return SpringSolver;
	}();

	exports["default"] = SpringSolver;

	/***/ }),
	/* 224 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * Hierarchical Spring Solver
	 */
	var HierarchicalSpringSolver = function () {
	  /**
	   * @param {Object} body
	   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
	   * @param {Object} options
	   */
	  function HierarchicalSpringSolver(body, physicsBody, options) {
	    (0, _classCallCheck3["default"])(this, HierarchicalSpringSolver);

	    this.body = body;
	    this.physicsBody = physicsBody;
	    this.setOptions(options);
	  }

	  /**
	   *
	   * @param {Object} options
	   */


	  (0, _createClass3["default"])(HierarchicalSpringSolver, [{
	    key: "setOptions",
	    value: function setOptions(options) {
	      this.options = options;
	    }

	    /**
	     * This function calculates the springforces on the nodes, accounting for the support nodes.
	     *
	     * @private
	     */

	  }, {
	    key: "solve",
	    value: function solve() {
	      var edgeLength, edge;
	      var dx, dy, fx, fy, springForce, distance;
	      var edges = this.body.edges;
	      var factor = 0.5;

	      var edgeIndices = this.physicsBody.physicsEdgeIndices;
	      var nodeIndices = this.physicsBody.physicsNodeIndices;
	      var forces = this.physicsBody.forces;

	      // initialize the spring force counters
	      for (var i = 0; i < nodeIndices.length; i++) {
	        var nodeId = nodeIndices[i];
	        forces[nodeId].springFx = 0;
	        forces[nodeId].springFy = 0;
	      }

	      // forces caused by the edges, modelled as springs
	      for (var _i = 0; _i < edgeIndices.length; _i++) {
	        edge = edges[edgeIndices[_i]];
	        if (edge.connected === true) {
	          edgeLength = edge.options.length === undefined ? this.options.springLength : edge.options.length;

	          dx = edge.from.x - edge.to.x;
	          dy = edge.from.y - edge.to.y;
	          distance = Math.sqrt(dx * dx + dy * dy);
	          distance = distance === 0 ? 0.01 : distance;

	          // the 1/distance is so the fx and fy can be calculated without sine or cosine.
	          springForce = this.options.springConstant * (edgeLength - distance) / distance;

	          fx = dx * springForce;
	          fy = dy * springForce;

	          if (edge.to.level != edge.from.level) {
	            if (forces[edge.toId] !== undefined) {
	              forces[edge.toId].springFx -= fx;
	              forces[edge.toId].springFy -= fy;
	            }
	            if (forces[edge.fromId] !== undefined) {
	              forces[edge.fromId].springFx += fx;
	              forces[edge.fromId].springFy += fy;
	            }
	          } else {
	            if (forces[edge.toId] !== undefined) {
	              forces[edge.toId].x -= factor * fx;
	              forces[edge.toId].y -= factor * fy;
	            }
	            if (forces[edge.fromId] !== undefined) {
	              forces[edge.fromId].x += factor * fx;
	              forces[edge.fromId].y += factor * fy;
	            }
	          }
	        }
	      }

	      // normalize spring forces
	      springForce = 1;
	      var springFx, springFy;
	      for (var _i2 = 0; _i2 < nodeIndices.length; _i2++) {
	        var _nodeId = nodeIndices[_i2];
	        springFx = Math.min(springForce, Math.max(-springForce, forces[_nodeId].springFx));
	        springFy = Math.min(springForce, Math.max(-springForce, forces[_nodeId].springFy));

	        forces[_nodeId].x += springFx;
	        forces[_nodeId].y += springFy;
	      }

	      // retain energy balance
	      var totalFx = 0;
	      var totalFy = 0;
	      for (var _i3 = 0; _i3 < nodeIndices.length; _i3++) {
	        var _nodeId2 = nodeIndices[_i3];
	        totalFx += forces[_nodeId2].x;
	        totalFy += forces[_nodeId2].y;
	      }
	      var correctionFx = totalFx / nodeIndices.length;
	      var correctionFy = totalFy / nodeIndices.length;

	      for (var _i4 = 0; _i4 < nodeIndices.length; _i4++) {
	        var _nodeId3 = nodeIndices[_i4];
	        forces[_nodeId3].x -= correctionFx;
	        forces[_nodeId3].y -= correctionFy;
	      }
	    }
	  }]);
	  return HierarchicalSpringSolver;
	}();

	exports["default"] = HierarchicalSpringSolver;

	/***/ }),
	/* 225 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _BarnesHutSolver2 = __webpack_require__(120);

	var _BarnesHutSolver3 = _interopRequireDefault(_BarnesHutSolver2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * @extends BarnesHutSolver
	 */
	var ForceAtlas2BasedRepulsionSolver = function (_BarnesHutSolver) {
	  (0, _inherits3["default"])(ForceAtlas2BasedRepulsionSolver, _BarnesHutSolver);

	  /**
	   * @param {Object} body
	   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
	   * @param {Object} options
	   */
	  function ForceAtlas2BasedRepulsionSolver(body, physicsBody, options) {
	    (0, _classCallCheck3["default"])(this, ForceAtlas2BasedRepulsionSolver);
	    return (0, _possibleConstructorReturn3["default"])(this, (ForceAtlas2BasedRepulsionSolver.__proto__ || (0, _getPrototypeOf2["default"])(ForceAtlas2BasedRepulsionSolver)).call(this, body, physicsBody, options));
	  }

	  /**
	   * Calculate the forces based on the distance.
	   *
	   * @param {number} distance
	   * @param {number} dx
	   * @param {number} dy
	   * @param {Node} node
	   * @param {Object} parentBranch
	   * @private
	   */


	  (0, _createClass3["default"])(ForceAtlas2BasedRepulsionSolver, [{
	    key: "_calculateForces",
	    value: function _calculateForces(distance, dx, dy, node, parentBranch) {
	      if (distance === 0) {
	        distance = 0.1 * Math.random();
	        dx = distance;
	      }

	      if (this.overlapAvoidanceFactor < 1 && node.shape.radius) {
	        distance = Math.max(0.1 + this.overlapAvoidanceFactor * node.shape.radius, distance - node.shape.radius);
	      }

	      var degree = node.edges.length + 1;
	      // the dividing by the distance cubed instead of squared allows us to get the fx and fy components without sines and cosines
	      // it is shorthand for gravityforce with distance squared and fx = dx/distance * gravityForce
	      var gravityForce = this.options.gravitationalConstant * parentBranch.mass * node.options.mass * degree / Math.pow(distance, 2);
	      var fx = dx * gravityForce;
	      var fy = dy * gravityForce;

	      this.physicsBody.forces[node.id].x += fx;
	      this.physicsBody.forces[node.id].y += fy;
	    }
	  }]);
	  return ForceAtlas2BasedRepulsionSolver;
	}(_BarnesHutSolver3["default"]);

	exports["default"] = ForceAtlas2BasedRepulsionSolver;

	/***/ }),
	/* 226 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _CentralGravitySolver2 = __webpack_require__(121);

	var _CentralGravitySolver3 = _interopRequireDefault(_CentralGravitySolver2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * @extends CentralGravitySolver
	 */
	var ForceAtlas2BasedCentralGravitySolver = function (_CentralGravitySolver) {
	  (0, _inherits3["default"])(ForceAtlas2BasedCentralGravitySolver, _CentralGravitySolver);

	  /**
	   * @param {Object} body
	   * @param {{physicsNodeIndices: Array, physicsEdgeIndices: Array, forces: {}, velocities: {}}} physicsBody
	   * @param {Object} options
	   */
	  function ForceAtlas2BasedCentralGravitySolver(body, physicsBody, options) {
	    (0, _classCallCheck3["default"])(this, ForceAtlas2BasedCentralGravitySolver);
	    return (0, _possibleConstructorReturn3["default"])(this, (ForceAtlas2BasedCentralGravitySolver.__proto__ || (0, _getPrototypeOf2["default"])(ForceAtlas2BasedCentralGravitySolver)).call(this, body, physicsBody, options));
	  }

	  /**
	   * Calculate the forces based on the distance.
	   *
	   * @param {number} distance
	   * @param {number} dx
	   * @param {number} dy
	   * @param {Object<Node.id, Node>} forces
	   * @param {Node} node
	   * @private
	   */


	  (0, _createClass3["default"])(ForceAtlas2BasedCentralGravitySolver, [{
	    key: "_calculateForces",
	    value: function _calculateForces(distance, dx, dy, forces, node) {
	      if (distance > 0) {
	        var degree = node.edges.length + 1;
	        var gravityForce = this.options.centralGravity * degree * node.options.mass;
	        forces[node.id].x = dx * gravityForce;
	        forces[node.id].y = dy * gravityForce;
	      }
	    }
	  }]);
	  return ForceAtlas2BasedCentralGravitySolver;
	}(_CentralGravitySolver3["default"]);

	exports["default"] = ForceAtlas2BasedCentralGravitySolver;

	/***/ }),
	/* 227 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _keys = __webpack_require__(8);

	var _keys2 = _interopRequireDefault(_keys);

	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/* ===========================================================================

	# TODO

	- `edgeReplacedById` not cleaned up yet on cluster edge removal
	- allowSingleNodeCluster could be a global option as well; currently needs to always
	  be passed to clustering methods

	----------------------------------------------

	# State Model for Clustering

	The total state for clustering is non-trivial. It is useful to have a model
	available as to how it works. The following documents the relevant state items.


	## Network State

	The following `network`-members are relevant to clustering:

	- `body.nodes`       - all nodes actively participating in the network
	- `body.edges`       - same for edges
	- `body.nodeIndices` - id's of nodes that are visible at a given moment
	- `body.edgeIndices` - same for edges

	This includes:

	- helper nodes for dragging in `manipulation`
	- helper nodes for edge type `dynamic`
	- cluster nodes and edges
	- there may be more than this.

	A node/edge may be missing in the `Indices` member if:

	- it is a helper node
	- the node or edge state has option `hidden` set
	- It is not visible due to clustering


	## Clustering State

	For the hashes, the id's of the nodes/edges are used as key.

	Member `network.clustering` contains the following items:

	- `clusteredNodes` - hash with values: { clusterId: <id of cluster>, node: <node instance>}
	- `clusteredEdges` - hash with values: restore information for given edge


	Due to nesting of clusters, these members can contain cluster nodes and edges as well.

	The important thing to note here, is that the clustered nodes and edges also
	appear in the members of the cluster nodes. For data update, it is therefore 
	important to scan these lists as well as the cluster nodes.


	### Cluster Node

	A cluster node has the following extra fields:

	- `isCluster : true` - indication that this is a cluster node
	- `containedNodes`   - hash of nodes contained in this cluster
	- `containedEdges`   - same for edges
	- `edges`            - array of cluster edges for this node 


	**NOTE:**

	- `containedEdges` can also contain edges which are not clustered; e.g. an edge
	   connecting two nodes in the same cluster.


	### Cluster Edge

	These are the items in the `edges` member of a clustered node. They have the
	following relevant members:

	- 'clusteringEdgeReplacingIds` - array of id's of edges replaced by this edge

	Note that it's possible to nest clusters, so that `clusteringEdgeReplacingIds`
	can contain edge id's of other clusters.


	### Clustered Edge

	This is any edge contained by a cluster edge. It gets the following additional
	member:

	- `edgeReplacedById` - id of the cluster edge in which current edge is clustered


	   =========================================================================== */
	var util = __webpack_require__(2);
	var NetworkUtil = __webpack_require__(76)['default'];
	var Cluster = __webpack_require__(228)['default'];
	var Edge = __webpack_require__(74)['default']; // Only needed for check on type!
	var Node = __webpack_require__(47)['default']; // Only needed for check on type!

	/**
	 * The clustering engine
	 */

	var ClusterEngine = function () {
	  /**
	   * @param {Object} body
	   */
	  function ClusterEngine(body) {
	    var _this = this;

	    (0, _classCallCheck3['default'])(this, ClusterEngine);

	    this.body = body;
	    this.clusteredNodes = {}; // key: node id, value: { clusterId: <id of cluster>, node: <node instance>}
	    this.clusteredEdges = {}; // key: edge id, value: restore information for given edge

	    this.options = {};
	    this.defaultOptions = {};
	    util.extend(this.options, this.defaultOptions);

	    this.body.emitter.on('_resetData', function () {
	      _this.clusteredNodes = {};_this.clusteredEdges = {};
	    });
	  }

	  /**
	  *
	  * @param {number} hubsize
	  * @param {Object} options
	  */


	  (0, _createClass3['default'])(ClusterEngine, [{
	    key: 'clusterByHubsize',
	    value: function clusterByHubsize(hubsize, options) {
	      if (hubsize === undefined) {
	        hubsize = this._getHubSize();
	      } else if ((typeof hubsize === 'undefined' ? 'undefined' : (0, _typeof3['default'])(hubsize)) === "object") {
	        options = this._checkOptions(hubsize);
	        hubsize = this._getHubSize();
	      }

	      var nodesToCluster = [];
	      for (var i = 0; i < this.body.nodeIndices.length; i++) {
	        var node = this.body.nodes[this.body.nodeIndices[i]];
	        if (node.edges.length >= hubsize) {
	          nodesToCluster.push(node.id);
	        }
	      }

	      for (var _i = 0; _i < nodesToCluster.length; _i++) {
	        this.clusterByConnection(nodesToCluster[_i], options, true);
	      }

	      this.body.emitter.emit('_dataChanged');
	    }

	    /**
	     * loop over all nodes, check if they adhere to the condition and cluster if needed.
	     * @param {Object} options
	     * @param {boolean} [refreshData=true]
	     */

	  }, {
	    key: 'cluster',
	    value: function cluster() {
	      var _this2 = this;

	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	      if (options.joinCondition === undefined) {
	        throw new Error("Cannot call clusterByNodeData without a joinCondition function in the options.");
	      }

	      // check if the options object is fine, append if needed
	      options = this._checkOptions(options);

	      var childNodesObj = {};
	      var childEdgesObj = {};

	      // collect the nodes that will be in the cluster
	      util.forEach(this.body.nodes, function (node, nodeId) {
	        var clonedOptions = NetworkUtil.cloneOptions(node);
	        if (options.joinCondition(clonedOptions) === true) {
	          childNodesObj[nodeId] = node;

	          // collect the edges that will be in the cluster
	          util.forEach(node.edges, function (edge) {
	            if (_this2.clusteredEdges[edge.id] === undefined) {
	              childEdgesObj[edge.id] = edge;
	            }
	          });
	        }
	      });

	      this._cluster(childNodesObj, childEdgesObj, options, refreshData);
	    }

	    /**
	     * Cluster all nodes in the network that have only X edges
	     * @param {number} edgeCount
	     * @param {Object} options
	     * @param {boolean} [refreshData=true]
	     */

	  }, {
	    key: 'clusterByEdgeCount',
	    value: function clusterByEdgeCount(edgeCount, options) {
	      var _this3 = this;

	      var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	      options = this._checkOptions(options);
	      var clusters = [];
	      var usedNodes = {};
	      var edge = void 0,
	          edges = void 0,
	          relevantEdgeCount = void 0;
	      // collect the nodes that will be in the cluster

	      var _loop = function _loop(i) {
	        var childNodesObj = {};
	        var childEdgesObj = {};
	        var nodeId = _this3.body.nodeIndices[i];
	        var node = _this3.body.nodes[nodeId];

	        // if this node is already used in another cluster this session, we do not have to re-evaluate it.
	        if (usedNodes[nodeId] === undefined) {
	          relevantEdgeCount = 0;
	          edges = [];
	          for (var j = 0; j < node.edges.length; j++) {
	            edge = node.edges[j];
	            if (_this3.clusteredEdges[edge.id] === undefined) {
	              if (edge.toId !== edge.fromId) {
	                relevantEdgeCount++;
	              }
	              edges.push(edge);
	            }
	          }

	          // this node qualifies, we collect its neighbours to start the clustering process.
	          if (relevantEdgeCount === edgeCount) {
	            checkJoinCondition = function checkJoinCondition(node) {
	              if (options.joinCondition === undefined || options.joinCondition === null) {
	                return true;
	              }

	              var clonedOptions = NetworkUtil.cloneOptions(node);
	              return options.joinCondition(clonedOptions);
	            };

	            var gatheringSuccessful = true;
	            for (var _j = 0; _j < edges.length; _j++) {
	              edge = edges[_j];
	              var childNodeId = _this3._getConnectedId(edge, nodeId);
	              // add the nodes to the list by the join condition.
	              if (checkJoinCondition(node)) {
	                childEdgesObj[edge.id] = edge;
	                childNodesObj[nodeId] = node;
	                childNodesObj[childNodeId] = _this3.body.nodes[childNodeId];
	                usedNodes[nodeId] = true;
	              } else {
	                // this node does not qualify after all.
	                gatheringSuccessful = false;
	                break;
	              }
	            }

	            // add to the cluster queue
	            if ((0, _keys2['default'])(childNodesObj).length > 0 && (0, _keys2['default'])(childEdgesObj).length > 0 && gatheringSuccessful === true) {
	              /**
	               * Search for cluster data that contains any of the node id's
	               * @returns {Boolean} true if no joinCondition, otherwise return value of joinCondition
	               */
	              findClusterData = function findClusterData() {
	                for (var n = 0; n < clusters.length; ++n) {
	                  // Search for a cluster containing any of the node id's
	                  for (var m in childNodesObj) {
	                    if (clusters[n].nodes[m] !== undefined) {
	                      return clusters[n];
	                    }
	                  }
	                }

	                return undefined;
	              };

	              // If any of the found nodes is part of a cluster found in this method,
	              // add the current values to that cluster


	              foundCluster = findClusterData();

	              if (foundCluster !== undefined) {
	                // Add nodes to found cluster if not present
	                for (var m in childNodesObj) {
	                  if (foundCluster.nodes[m] === undefined) {
	                    foundCluster.nodes[m] = childNodesObj[m];
	                  }
	                }

	                // Add edges to found cluster, if not present
	                for (var _m in childEdgesObj) {
	                  if (foundCluster.edges[_m] === undefined) {
	                    foundCluster.edges[_m] = childEdgesObj[_m];
	                  }
	                }
	              } else {
	                // Create a new cluster group
	                clusters.push({ nodes: childNodesObj, edges: childEdgesObj });
	              }
	            }
	          }
	        }
	      };

	      for (var i = 0; i < this.body.nodeIndices.length; i++) {
	        var checkJoinCondition;
	        var findClusterData;
	        var foundCluster;

	        _loop(i);
	      }

	      for (var i = 0; i < clusters.length; i++) {
	        this._cluster(clusters[i].nodes, clusters[i].edges, options, false);
	      }

	      if (refreshData === true) {
	        this.body.emitter.emit('_dataChanged');
	      }
	    }

	    /**
	     * Cluster all nodes in the network that have only 1 edge
	     * @param {Object} options
	     * @param {boolean} [refreshData=true]
	     */

	  }, {
	    key: 'clusterOutliers',
	    value: function clusterOutliers(options) {
	      var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	      this.clusterByEdgeCount(1, options, refreshData);
	    }

	    /**
	     * Cluster all nodes in the network that have only 2 edge
	     * @param {Object} options
	     * @param {boolean} [refreshData=true]
	     */

	  }, {
	    key: 'clusterBridges',
	    value: function clusterBridges(options) {
	      var refreshData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	      this.clusterByEdgeCount(2, options, refreshData);
	    }

	    /**
	    * suck all connected nodes of a node into the node.
	    * @param {Node.id} nodeId
	    * @param {Object} options
	    * @param {boolean} [refreshData=true]
	    */

	  }, {
	    key: 'clusterByConnection',
	    value: function clusterByConnection(nodeId, options) {
	      var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	      // kill conditions
	      if (nodeId === undefined) {
	        throw new Error("No nodeId supplied to clusterByConnection!");
	      }
	      if (this.body.nodes[nodeId] === undefined) {
	        throw new Error("The nodeId given to clusterByConnection does not exist!");
	      }

	      var node = this.body.nodes[nodeId];
	      options = this._checkOptions(options, node);
	      if (options.clusterNodeProperties.x === undefined) {
	        options.clusterNodeProperties.x = node.x;
	      }
	      if (options.clusterNodeProperties.y === undefined) {
	        options.clusterNodeProperties.y = node.y;
	      }
	      if (options.clusterNodeProperties.fixed === undefined) {
	        options.clusterNodeProperties.fixed = {};
	        options.clusterNodeProperties.fixed.x = node.options.fixed.x;
	        options.clusterNodeProperties.fixed.y = node.options.fixed.y;
	      }

	      var childNodesObj = {};
	      var childEdgesObj = {};
	      var parentNodeId = node.id;
	      var parentClonedOptions = NetworkUtil.cloneOptions(node);
	      childNodesObj[parentNodeId] = node;

	      // collect the nodes that will be in the cluster
	      for (var i = 0; i < node.edges.length; i++) {
	        var edge = node.edges[i];
	        if (this.clusteredEdges[edge.id] === undefined) {
	          var childNodeId = this._getConnectedId(edge, parentNodeId);

	          // if the child node is not in a cluster
	          if (this.clusteredNodes[childNodeId] === undefined) {
	            if (childNodeId !== parentNodeId) {
	              if (options.joinCondition === undefined) {
	                childEdgesObj[edge.id] = edge;
	                childNodesObj[childNodeId] = this.body.nodes[childNodeId];
	              } else {
	                // clone the options and insert some additional parameters that could be interesting.
	                var childClonedOptions = NetworkUtil.cloneOptions(this.body.nodes[childNodeId]);
	                if (options.joinCondition(parentClonedOptions, childClonedOptions) === true) {
	                  childEdgesObj[edge.id] = edge;
	                  childNodesObj[childNodeId] = this.body.nodes[childNodeId];
	                }
	              }
	            } else {
	              // swallow the edge if it is self-referencing.
	              childEdgesObj[edge.id] = edge;
	            }
	          }
	        }
	      }
	      var childNodeIDs = (0, _keys2['default'])(childNodesObj).map(function (childNode) {
	        return childNodesObj[childNode].id;
	      });

	      for (childNode in childNodesObj) {
	        if (!childNodesObj.hasOwnProperty(childNode)) continue;

	        var childNode = childNodesObj[childNode];
	        for (var y = 0; y < childNode.edges.length; y++) {
	          var childEdge = childNode.edges[y];
	          if (childNodeIDs.indexOf(this._getConnectedId(childEdge, childNode.id)) > -1) {
	            childEdgesObj[childEdge.id] = childEdge;
	          }
	        }
	      }
	      this._cluster(childNodesObj, childEdgesObj, options, refreshData);
	    }

	    /**
	    * This function creates the edges that will be attached to the cluster
	    * It looks for edges that are connected to the nodes from the "outside' of the cluster.
	    *
	    * @param {{Node.id: vis.Node}} childNodesObj
	    * @param {{vis.Edge.id: vis.Edge}} childEdgesObj
	    * @param {Object} clusterNodeProperties
	    * @param {Object} clusterEdgeProperties
	    * @private
	    */

	  }, {
	    key: '_createClusterEdges',
	    value: function _createClusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, clusterEdgeProperties) {
	      var edge = void 0,
	          childNodeId = void 0,
	          childNode = void 0,
	          toId = void 0,
	          fromId = void 0,
	          otherNodeId = void 0;

	      // loop over all child nodes and their edges to find edges going out of the cluster
	      // these edges will be replaced by clusterEdges.
	      var childKeys = (0, _keys2['default'])(childNodesObj);
	      var createEdges = [];
	      for (var i = 0; i < childKeys.length; i++) {
	        childNodeId = childKeys[i];
	        childNode = childNodesObj[childNodeId];

	        // construct new edges from the cluster to others
	        for (var j = 0; j < childNode.edges.length; j++) {
	          edge = childNode.edges[j];
	          // we only handle edges that are visible to the system, not the disabled ones from the clustering process.
	          if (this.clusteredEdges[edge.id] === undefined) {
	            // self-referencing edges will be added to the "hidden" list
	            if (edge.toId == edge.fromId) {
	              childEdgesObj[edge.id] = edge;
	            } else {
	              // set up the from and to.
	              if (edge.toId == childNodeId) {
	                // this is a double equals because ints and strings can be interchanged here.
	                toId = clusterNodeProperties.id;
	                fromId = edge.fromId;
	                otherNodeId = fromId;
	              } else {
	                toId = edge.toId;
	                fromId = clusterNodeProperties.id;
	                otherNodeId = toId;
	              }
	            }

	            // Only edges from the cluster outwards are being replaced.
	            if (childNodesObj[otherNodeId] === undefined) {
	              createEdges.push({ edge: edge, fromId: fromId, toId: toId });
	            }
	          }
	        }
	      }

	      //
	      // Here we actually create the replacement edges.
	      //
	      // We could not do this in the loop above as the creation process
	      // would add an edge to the edges array we are iterating over.
	      //
	      // NOTE: a clustered edge can have multiple base edges!
	      //
	      var newEdges = [];

	      /**
	       * Find a cluster edge which matches the given created edge.
	       * @param {vis.Edge} createdEdge
	       * @returns {vis.Edge}
	       */
	      var getNewEdge = function getNewEdge(createdEdge) {
	        for (var _j2 = 0; _j2 < newEdges.length; _j2++) {
	          var newEdge = newEdges[_j2];

	          // We replace both to and from edges with a single cluster edge
	          var matchToDirection = createdEdge.fromId === newEdge.fromId && createdEdge.toId === newEdge.toId;
	          var matchFromDirection = createdEdge.fromId === newEdge.toId && createdEdge.toId === newEdge.fromId;

	          if (matchToDirection || matchFromDirection) {
	            return newEdge;
	          }
	        }

	        return null;
	      };

	      for (var _j3 = 0; _j3 < createEdges.length; _j3++) {
	        var createdEdge = createEdges[_j3];
	        var _edge = createdEdge.edge;
	        var newEdge = getNewEdge(createdEdge);

	        if (newEdge === null) {
	          // Create a clustered edge for this connection
	          newEdge = this._createClusteredEdge(createdEdge.fromId, createdEdge.toId, _edge, clusterEdgeProperties);

	          newEdges.push(newEdge);
	        } else {
	          newEdge.clusteringEdgeReplacingIds.push(_edge.id);
	        }

	        // also reference the new edge in the old edge
	        this.body.edges[_edge.id].edgeReplacedById = newEdge.id;

	        // hide the replaced edge
	        this._backupEdgeOptions(_edge);
	        _edge.setOptions({ physics: false });
	      }
	    }

	    /**
	    * This function checks the options that can be supplied to the different cluster functions
	    * for certain fields and inserts defaults if needed
	    * @param {Object} options
	    * @returns {*}
	    * @private
	    */

	  }, {
	    key: '_checkOptions',
	    value: function _checkOptions() {
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	      if (options.clusterEdgeProperties === undefined) {
	        options.clusterEdgeProperties = {};
	      }
	      if (options.clusterNodeProperties === undefined) {
	        options.clusterNodeProperties = {};
	      }

	      return options;
	    }

	    /**
	    *
	    * @param {Object}    childNodesObj         | object with node objects, id as keys, same as childNodes except it also contains a source node
	    * @param {Object}    childEdgesObj         | object with edge objects, id as keys
	    * @param {Array}     options               | object with {clusterNodeProperties, clusterEdgeProperties, processProperties}
	    * @param {boolean}   refreshData | when true, do not wrap up
	    * @private
	    */

	  }, {
	    key: '_cluster',
	    value: function _cluster(childNodesObj, childEdgesObj, options) {
	      var refreshData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

	      // Remove nodes which are already clustered
	      var tmpNodesToRemove = [];
	      for (var _nodeId in childNodesObj) {
	        if (childNodesObj.hasOwnProperty(_nodeId)) {
	          if (this.clusteredNodes[_nodeId] !== undefined) {
	            tmpNodesToRemove.push(_nodeId);
	          }
	        }
	      }

	      for (var n = 0; n < tmpNodesToRemove.length; ++n) {
	        delete childNodesObj[tmpNodesToRemove[n]];
	      }

	      // kill condition: no nodes don't bother
	      if ((0, _keys2['default'])(childNodesObj).length == 0) {
	        return;
	      }

	      // allow clusters of 1 if options allow
	      if ((0, _keys2['default'])(childNodesObj).length == 1 && options.clusterNodeProperties.allowSingleNodeCluster != true) {
	        return;
	      }

	      var clusterNodeProperties = util.deepExtend({}, options.clusterNodeProperties);

	      // construct the clusterNodeProperties
	      if (options.processProperties !== undefined) {
	        // get the childNode options
	        var childNodesOptions = [];
	        for (var _nodeId2 in childNodesObj) {
	          if (childNodesObj.hasOwnProperty(_nodeId2)) {
	            var clonedOptions = NetworkUtil.cloneOptions(childNodesObj[_nodeId2]);
	            childNodesOptions.push(clonedOptions);
	          }
	        }

	        // get cluster properties based on childNodes
	        var childEdgesOptions = [];
	        for (var edgeId in childEdgesObj) {
	          if (childEdgesObj.hasOwnProperty(edgeId)) {
	            // these cluster edges will be removed on creation of the cluster.
	            if (edgeId.substr(0, 12) !== "clusterEdge:") {
	              var _clonedOptions = NetworkUtil.cloneOptions(childEdgesObj[edgeId], 'edge');
	              childEdgesOptions.push(_clonedOptions);
	            }
	          }
	        }

	        clusterNodeProperties = options.processProperties(clusterNodeProperties, childNodesOptions, childEdgesOptions);
	        if (!clusterNodeProperties) {
	          throw new Error("The processProperties function does not return properties!");
	        }
	      }

	      // check if we have an unique id;
	      if (clusterNodeProperties.id === undefined) {
	        clusterNodeProperties.id = 'cluster:' + util.randomUUID();
	      }
	      var clusterId = clusterNodeProperties.id;

	      if (clusterNodeProperties.label === undefined) {
	        clusterNodeProperties.label = 'cluster';
	      }

	      // give the clusterNode a position if it does not have one.
	      var pos = undefined;
	      if (clusterNodeProperties.x === undefined) {
	        pos = this._getClusterPosition(childNodesObj);
	        clusterNodeProperties.x = pos.x;
	      }
	      if (clusterNodeProperties.y === undefined) {
	        if (pos === undefined) {
	          pos = this._getClusterPosition(childNodesObj);
	        }
	        clusterNodeProperties.y = pos.y;
	      }

	      // force the ID to remain the same
	      clusterNodeProperties.id = clusterId;

	      // create the cluster Node
	      // Note that allowSingleNodeCluster, if present, is stored in the options as well
	      var clusterNode = this.body.functions.createNode(clusterNodeProperties, Cluster);
	      clusterNode.containedNodes = childNodesObj;
	      clusterNode.containedEdges = childEdgesObj;
	      // cache a copy from the cluster edge properties if we have to reconnect others later on
	      clusterNode.clusterEdgeProperties = options.clusterEdgeProperties;

	      // finally put the cluster node into global
	      this.body.nodes[clusterNodeProperties.id] = clusterNode;

	      this._clusterEdges(childNodesObj, childEdgesObj, clusterNodeProperties, options.clusterEdgeProperties);

	      // set ID to undefined so no duplicates arise
	      clusterNodeProperties.id = undefined;

	      // wrap up
	      if (refreshData === true) {
	        this.body.emitter.emit('_dataChanged');
	      }
	    }

	    /**
	     *
	     * @param {Edge} edge
	     * @private
	     */

	  }, {
	    key: '_backupEdgeOptions',
	    value: function _backupEdgeOptions(edge) {
	      if (this.clusteredEdges[edge.id] === undefined) {
	        this.clusteredEdges[edge.id] = { physics: edge.options.physics };
	      }
	    }

	    /**
	     *
	     * @param {Edge} edge
	     * @private
	     */

	  }, {
	    key: '_restoreEdge',
	    value: function _restoreEdge(edge) {
	      var originalOptions = this.clusteredEdges[edge.id];
	      if (originalOptions !== undefined) {
	        edge.setOptions({ physics: originalOptions.physics });
	        delete this.clusteredEdges[edge.id];
	      }
	    }

	    /**
	    * Check if a node is a cluster.
	    * @param {Node.id} nodeId
	    * @returns {*}
	    */

	  }, {
	    key: 'isCluster',
	    value: function isCluster(nodeId) {
	      if (this.body.nodes[nodeId] !== undefined) {
	        return this.body.nodes[nodeId].isCluster === true;
	      } else {
	        console.log("Node does not exist.");
	        return false;
	      }
	    }

	    /**
	    * get the position of the cluster node based on what's inside
	    * @param {object} childNodesObj    | object with node objects, id as keys
	    * @returns {{x: number, y: number}}
	    * @private
	    */

	  }, {
	    key: '_getClusterPosition',
	    value: function _getClusterPosition(childNodesObj) {
	      var childKeys = (0, _keys2['default'])(childNodesObj);
	      var minX = childNodesObj[childKeys[0]].x;
	      var maxX = childNodesObj[childKeys[0]].x;
	      var minY = childNodesObj[childKeys[0]].y;
	      var maxY = childNodesObj[childKeys[0]].y;
	      var node = void 0;
	      for (var i = 1; i < childKeys.length; i++) {
	        node = childNodesObj[childKeys[i]];
	        minX = node.x < minX ? node.x : minX;
	        maxX = node.x > maxX ? node.x : maxX;
	        minY = node.y < minY ? node.y : minY;
	        maxY = node.y > maxY ? node.y : maxY;
	      }

	      return { x: 0.5 * (minX + maxX), y: 0.5 * (minY + maxY) };
	    }

	    /**
	     * Open a cluster by calling this function.
	     * @param {vis.Edge.id}  clusterNodeId | the ID of the cluster node
	     * @param {Object} options
	     * @param {boolean} refreshData | wrap up afterwards if not true
	     */

	  }, {
	    key: 'openCluster',
	    value: function openCluster(clusterNodeId, options) {
	      var refreshData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	      // kill conditions
	      if (clusterNodeId === undefined) {
	        throw new Error("No clusterNodeId supplied to openCluster.");
	      }

	      var clusterNode = this.body.nodes[clusterNodeId];

	      if (clusterNode === undefined) {
	        throw new Error("The clusterNodeId supplied to openCluster does not exist.");
	      }
	      if (clusterNode.isCluster !== true || clusterNode.containedNodes === undefined || clusterNode.containedEdges === undefined) {
	        throw new Error("The node:" + clusterNodeId + " is not a valid cluster.");
	      }

	      // Check if current cluster is clustered itself
	      var stack = this.findNode(clusterNodeId);
	      var parentIndex = stack.indexOf(clusterNodeId) - 1;
	      if (parentIndex >= 0) {
	        // Current cluster is clustered; transfer contained nodes and edges to parent
	        var parentClusterNodeId = stack[parentIndex];
	        var parentClusterNode = this.body.nodes[parentClusterNodeId];

	        // clustering.clusteredNodes and clustering.clusteredEdges remain unchanged
	        parentClusterNode._openChildCluster(clusterNodeId);

	        // All components of child cluster node have been transferred. It can die now.
	        delete this.body.nodes[clusterNodeId];
	        if (refreshData === true) {
	          this.body.emitter.emit('_dataChanged');
	        }

	        return;
	      }

	      // main body 
	      var containedNodes = clusterNode.containedNodes;
	      var containedEdges = clusterNode.containedEdges;

	      // allow the user to position the nodes after release.
	      if (options !== undefined && options.releaseFunction !== undefined && typeof options.releaseFunction === 'function') {
	        var positions = {};
	        var clusterPosition = { x: clusterNode.x, y: clusterNode.y };
	        for (var _nodeId3 in containedNodes) {
	          if (containedNodes.hasOwnProperty(_nodeId3)) {
	            var containedNode = this.body.nodes[_nodeId3];
	            positions[_nodeId3] = { x: containedNode.x, y: containedNode.y };
	          }
	        }
	        var newPositions = options.releaseFunction(clusterPosition, positions);

	        for (var _nodeId4 in containedNodes) {
	          if (containedNodes.hasOwnProperty(_nodeId4)) {
	            var _containedNode = this.body.nodes[_nodeId4];
	            if (newPositions[_nodeId4] !== undefined) {
	              _containedNode.x = newPositions[_nodeId4].x === undefined ? clusterNode.x : newPositions[_nodeId4].x;
	              _containedNode.y = newPositions[_nodeId4].y === undefined ? clusterNode.y : newPositions[_nodeId4].y;
	            }
	          }
	        }
	      } else {
	        // copy the position from the cluster
	        util.forEach(containedNodes, function (containedNode) {
	          // inherit position
	          if (containedNode.options.fixed.x === false) {
	            containedNode.x = clusterNode.x;
	          }
	          if (containedNode.options.fixed.y === false) {
	            containedNode.y = clusterNode.y;
	          }
	        });
	      }

	      // release nodes
	      for (var _nodeId5 in containedNodes) {
	        if (containedNodes.hasOwnProperty(_nodeId5)) {
	          var _containedNode2 = this.body.nodes[_nodeId5];

	          // inherit speed
	          _containedNode2.vx = clusterNode.vx;
	          _containedNode2.vy = clusterNode.vy;

	          _containedNode2.setOptions({ physics: true });

	          delete this.clusteredNodes[_nodeId5];
	        }
	      }

	      // copy the clusterNode edges because we cannot iterate over an object that we add or remove from.
	      var edgesToBeDeleted = [];
	      for (var i = 0; i < clusterNode.edges.length; i++) {
	        edgesToBeDeleted.push(clusterNode.edges[i]);
	      }

	      // actually handling the deleting.
	      for (var _i2 = 0; _i2 < edgesToBeDeleted.length; _i2++) {
	        var edge = edgesToBeDeleted[_i2];
	        var otherNodeId = this._getConnectedId(edge, clusterNodeId);
	        var otherNode = this.clusteredNodes[otherNodeId];

	        for (var j = 0; j < edge.clusteringEdgeReplacingIds.length; j++) {
	          var transferId = edge.clusteringEdgeReplacingIds[j];
	          var transferEdge = this.body.edges[transferId];
	          if (transferEdge === undefined) continue;

	          // if the other node is in another cluster, we transfer ownership of this edge to the other cluster
	          if (otherNode !== undefined) {
	            // transfer ownership:
	            var otherCluster = this.body.nodes[otherNode.clusterId];
	            otherCluster.containedEdges[transferEdge.id] = transferEdge;

	            // delete local reference
	            delete containedEdges[transferEdge.id];

	            // get to and from
	            var fromId = transferEdge.fromId;
	            var toId = transferEdge.toId;
	            if (transferEdge.toId == otherNodeId) {
	              toId = otherNode.clusterId;
	            } else {
	              fromId = otherNode.clusterId;
	            }

	            // create new cluster edge from the otherCluster
	            this._createClusteredEdge(fromId, toId, transferEdge, otherCluster.clusterEdgeProperties, { hidden: false, physics: true });
	          } else {
	            this._restoreEdge(transferEdge);
	          }
	        }

	        edge.remove();
	      }

	      // handle the releasing of the edges
	      for (var edgeId in containedEdges) {
	        if (containedEdges.hasOwnProperty(edgeId)) {
	          this._restoreEdge(containedEdges[edgeId]);
	        }
	      }

	      // remove clusterNode
	      delete this.body.nodes[clusterNodeId];

	      if (refreshData === true) {
	        this.body.emitter.emit('_dataChanged');
	      }
	    }

	    /**
	     *
	     * @param {Cluster.id} clusterId
	     * @returns {Array.<Node.id>}
	     */

	  }, {
	    key: 'getNodesInCluster',
	    value: function getNodesInCluster(clusterId) {
	      var nodesArray = [];
	      if (this.isCluster(clusterId) === true) {
	        var containedNodes = this.body.nodes[clusterId].containedNodes;
	        for (var _nodeId6 in containedNodes) {
	          if (containedNodes.hasOwnProperty(_nodeId6)) {
	            nodesArray.push(this.body.nodes[_nodeId6].id);
	          }
	        }
	      }

	      return nodesArray;
	    }

	    /**
	    * Get the stack clusterId's that a certain node resides in. cluster A -> cluster B -> cluster C -> node
	    *
	    * If a node can't be found in the chain, return an empty array.
	    *
	    * @param {string|number} nodeId
	    * @returns {Array}
	    */

	  }, {
	    key: 'findNode',
	    value: function findNode(nodeId) {
	      var stack = [];
	      var max = 100;
	      var counter = 0;
	      var node = void 0;

	      while (this.clusteredNodes[nodeId] !== undefined && counter < max) {
	        node = this.body.nodes[nodeId];
	        if (node === undefined) return [];
	        stack.push(node.id);

	        nodeId = this.clusteredNodes[nodeId].clusterId;
	        counter++;
	      }

	      node = this.body.nodes[nodeId];
	      if (node === undefined) return [];
	      stack.push(node.id);

	      stack.reverse();
	      return stack;
	    }

	    /**
	    * Using a clustered nodeId, update with the new options
	    * @param {vis.Edge.id} clusteredNodeId
	    * @param {object} newOptions
	    */

	  }, {
	    key: 'updateClusteredNode',
	    value: function updateClusteredNode(clusteredNodeId, newOptions) {
	      if (clusteredNodeId === undefined) {
	        throw new Error("No clusteredNodeId supplied to updateClusteredNode.");
	      }
	      if (newOptions === undefined) {
	        throw new Error("No newOptions supplied to updateClusteredNode.");
	      }
	      if (this.body.nodes[clusteredNodeId] === undefined) {
	        throw new Error("The clusteredNodeId supplied to updateClusteredNode does not exist.");
	      }

	      this.body.nodes[clusteredNodeId].setOptions(newOptions);
	      this.body.emitter.emit('_dataChanged');
	    }

	    /**
	    * Using a base edgeId, update all related clustered edges with the new options
	    * @param {vis.Edge.id} startEdgeId
	    * @param {object} newOptions
	    */

	  }, {
	    key: 'updateEdge',
	    value: function updateEdge(startEdgeId, newOptions) {
	      if (startEdgeId === undefined) {
	        throw new Error("No startEdgeId supplied to updateEdge.");
	      }
	      if (newOptions === undefined) {
	        throw new Error("No newOptions supplied to updateEdge.");
	      }
	      if (this.body.edges[startEdgeId] === undefined) {
	        throw new Error("The startEdgeId supplied to updateEdge does not exist.");
	      }

	      var allEdgeIds = this.getClusteredEdges(startEdgeId);
	      for (var i = 0; i < allEdgeIds.length; i++) {
	        var edge = this.body.edges[allEdgeIds[i]];
	        edge.setOptions(newOptions);
	      }
	      this.body.emitter.emit('_dataChanged');
	    }

	    /**
	    * Get a stack of clusterEdgeId's (+base edgeid) that a base edge is the same as. cluster edge C -> cluster edge B -> cluster edge A -> base edge(edgeId)
	    * @param {vis.Edge.id} edgeId
	    * @returns {Array.<vis.Edge.id>}
	    */

	  }, {
	    key: 'getClusteredEdges',
	    value: function getClusteredEdges(edgeId) {
	      var stack = [];
	      var max = 100;
	      var counter = 0;

	      while (edgeId !== undefined && this.body.edges[edgeId] !== undefined && counter < max) {
	        stack.push(this.body.edges[edgeId].id);
	        edgeId = this.body.edges[edgeId].edgeReplacedById;
	        counter++;
	      }
	      stack.reverse();
	      return stack;
	    }

	    /**
	    * Get the base edge id of clusterEdgeId. cluster edge (clusteredEdgeId) -> cluster edge B -> cluster edge C -> base edge
	    * @param {vis.Edge.id} clusteredEdgeId
	    * @returns {vis.Edge.id} baseEdgeId
	    *
	    * TODO: deprecate in 5.0.0. Method getBaseEdges() is the correct one to use.
	    */

	  }, {
	    key: 'getBaseEdge',
	    value: function getBaseEdge(clusteredEdgeId) {
	      // Just kludge this by returning the first base edge id found
	      return this.getBaseEdges(clusteredEdgeId)[0];
	    }

	    /**
	     * Get all regular edges for this clustered edge id.
	     *
	     * @param {vis.Edge.id} clusteredEdgeId
	     * @returns {Array.<vis.Edge.id>} all baseEdgeId's under this clustered edge
	     */

	  }, {
	    key: 'getBaseEdges',
	    value: function getBaseEdges(clusteredEdgeId) {
	      var IdsToHandle = [clusteredEdgeId];
	      var doneIds = [];
	      var foundIds = [];
	      var max = 100;
	      var counter = 0;

	      while (IdsToHandle.length > 0 && counter < max) {
	        var nextId = IdsToHandle.pop();
	        if (nextId === undefined) continue; // Paranoia here and onwards
	        var nextEdge = this.body.edges[nextId];
	        if (nextEdge === undefined) continue;
	        counter++;

	        var replacingIds = nextEdge.clusteringEdgeReplacingIds;
	        if (replacingIds === undefined) {
	          // nextId is a base id
	          foundIds.push(nextId);
	        } else {
	          // Another cluster edge, unravel this one as well
	          for (var i = 0; i < replacingIds.length; ++i) {
	            var replacingId = replacingIds[i];

	            // Don't add if already handled
	            // TODO: never triggers; find a test-case which does
	            if (IdsToHandle.indexOf(replacingIds) !== -1 || doneIds.indexOf(replacingIds) !== -1) {
	              continue;
	            }

	            IdsToHandle.push(replacingId);
	          }
	        }

	        doneIds.push(nextId);
	      }

	      return foundIds;
	    }

	    /**
	    * Get the Id the node is connected to
	    * @param {vis.Edge} edge
	    * @param {Node.id} nodeId
	    * @returns {*}
	    * @private
	    */

	  }, {
	    key: '_getConnectedId',
	    value: function _getConnectedId(edge, nodeId) {
	      if (edge.toId != nodeId) {
	        return edge.toId;
	      } else if (edge.fromId != nodeId) {
	        return edge.fromId;
	      } else {
	        return edge.fromId;
	      }
	    }

	    /**
	    * We determine how many connections denote an important hub.
	    * We take the mean + 2*std as the important hub size. (Assuming a normal distribution of data, ~2.2%)
	    *
	    * @returns {number}
	    * @private
	    */

	  }, {
	    key: '_getHubSize',
	    value: function _getHubSize() {
	      var average = 0;
	      var averageSquared = 0;
	      var hubCounter = 0;
	      var largestHub = 0;

	      for (var i = 0; i < this.body.nodeIndices.length; i++) {
	        var _node = this.body.nodes[this.body.nodeIndices[i]];
	        if (_node.edges.length > largestHub) {
	          largestHub = _node.edges.length;
	        }
	        average += _node.edges.length;
	        averageSquared += Math.pow(_node.edges.length, 2);
	        hubCounter += 1;
	      }
	      average = average / hubCounter;
	      averageSquared = averageSquared / hubCounter;

	      var variance = averageSquared - Math.pow(average, 2);
	      var standardDeviation = Math.sqrt(variance);

	      var hubThreshold = Math.floor(average + 2 * standardDeviation);

	      // always have at least one to cluster
	      if (hubThreshold > largestHub) {
	        hubThreshold = largestHub;
	      }

	      return hubThreshold;
	    }

	    /**
	     * Create an edge for the cluster representation.
	     *
	     * @param {Node.id} fromId
	     * @param {Node.id} toId
	     * @param {vis.Edge} baseEdge
	     * @param {Object} clusterEdgeProperties
	     * @param {Object} extraOptions
	     * @returns {Edge} newly created clustered edge
	     * @private
	     */

	  }, {
	    key: '_createClusteredEdge',
	    value: function _createClusteredEdge(fromId, toId, baseEdge, clusterEdgeProperties, extraOptions) {
	      // copy the options of the edge we will replace
	      var clonedOptions = NetworkUtil.cloneOptions(baseEdge, 'edge');
	      // make sure the properties of clusterEdges are superimposed on it
	      util.deepExtend(clonedOptions, clusterEdgeProperties);

	      // set up the edge
	      clonedOptions.from = fromId;
	      clonedOptions.to = toId;
	      clonedOptions.id = 'clusterEdge:' + util.randomUUID();

	      // apply the edge specific options to it if specified
	      if (extraOptions !== undefined) {
	        util.deepExtend(clonedOptions, extraOptions);
	      }

	      var newEdge = this.body.functions.createEdge(clonedOptions);
	      newEdge.clusteringEdgeReplacingIds = [baseEdge.id];
	      newEdge.connect();

	      // Register the new edge
	      this.body.edges[newEdge.id] = newEdge;

	      return newEdge;
	    }

	    /**
	     * Add the passed child nodes and edges to the given cluster node.
	     *
	     * @param {Object|Node} childNodes  hash of nodes or single node to add in cluster
	     * @param {Object|Edge} childEdges  hash of edges or single edge to take into account when clustering
	     * @param {Node} clusterNode  cluster node to add nodes and edges to
	     * @param {Object} [clusterEdgeProperties]
	     * @private
	     */

	  }, {
	    key: '_clusterEdges',
	    value: function _clusterEdges(childNodes, childEdges, clusterNode, clusterEdgeProperties) {
	      if (childEdges instanceof Edge) {
	        var edge = childEdges;
	        var obj = {};
	        obj[edge.id] = edge;
	        childEdges = obj;
	      }

	      if (childNodes instanceof Node) {
	        var _node2 = childNodes;
	        var _obj = {};
	        _obj[_node2.id] = _node2;
	        childNodes = _obj;
	      }

	      if (clusterNode === undefined || clusterNode === null) {
	        throw new Error("_clusterEdges: parameter clusterNode required");
	      }

	      if (clusterEdgeProperties === undefined) {
	        // Take the required properties from the cluster node
	        clusterEdgeProperties = clusterNode.clusterEdgeProperties;
	      }

	      // create the new edges that will connect to the cluster.
	      // All self-referencing edges will be added to childEdges here.
	      this._createClusterEdges(childNodes, childEdges, clusterNode, clusterEdgeProperties);

	      // disable the childEdges
	      for (var edgeId in childEdges) {
	        if (childEdges.hasOwnProperty(edgeId)) {
	          if (this.body.edges[edgeId] !== undefined) {
	            var _edge2 = this.body.edges[edgeId];
	            // cache the options before changing
	            this._backupEdgeOptions(_edge2);
	            // disable physics and hide the edge
	            _edge2.setOptions({ physics: false });
	          }
	        }
	      }

	      // disable the childNodes
	      for (var _nodeId7 in childNodes) {
	        if (childNodes.hasOwnProperty(_nodeId7)) {
	          this.clusteredNodes[_nodeId7] = { clusterId: clusterNode.id, node: this.body.nodes[_nodeId7] };
	          this.body.nodes[_nodeId7].setOptions({ physics: false });
	        }
	      }
	    }

	    /**
	     * Determine in which cluster given nodeId resides.
	     *
	     * If not in cluster, return undefined.
	     *
	     * NOTE: If you know a cleaner way to do this, please enlighten me (wimrijnders).
	     *
	     * @param {Node.id} nodeId
	     * @returns {Node|undefined} Node instance for cluster, if present
	     * @private
	     */

	  }, {
	    key: '_getClusterNodeForNode',
	    value: function _getClusterNodeForNode(nodeId) {
	      if (nodeId === undefined) return undefined;
	      var clusteredNode = this.clusteredNodes[nodeId];

	      // NOTE: If no cluster info found, it should actually be an error
	      if (clusteredNode === undefined) return undefined;
	      var clusterId = clusteredNode.clusterId;
	      if (clusterId === undefined) return undefined;

	      return this.body.nodes[clusterId];
	    }

	    /**
	     * Internal helper function for conditionally removing items in array
	     *
	     * Done like this because Array.filter() is not fully supported by all IE's.
	     *
	     * @param {Array} arr
	     * @param {function} callback
	     * @returns {Array}
	     * @private
	     */

	  }, {
	    key: '_filter',
	    value: function _filter(arr, callback) {
	      var ret = [];

	      util.forEach(arr, function (item) {
	        if (callback(item)) {
	          ret.push(item);
	        }
	      });

	      return ret;
	    }

	    /**
	     * Scan all edges for changes in clustering and adjust this if necessary.
	     *
	     * Call this (internally) after there has been a change in node or edge data.
	     *
	     * Pre: States of this.body.nodes and this.body.edges consistent
	     * Pre: this.clusteredNodes and this.clusteredEdge consistent with containedNodes and containedEdges
	     *      of cluster nodes.
	     */

	  }, {
	    key: '_updateState',
	    value: function _updateState() {
	      var _this4 = this;

	      var nodeId = void 0;
	      var deletedNodeIds = [];
	      var deletedEdgeIds = [];

	      /**
	       * Utility function to iterate over clustering nodes only
	       *
	       * @param {Function} callback  function to call for each cluster node
	       */
	      var eachClusterNode = function eachClusterNode(callback) {
	        util.forEach(_this4.body.nodes, function (node) {
	          if (node.isCluster === true) {
	            callback(node);
	          }
	        });
	      };

	      //
	      // Remove deleted regular nodes from clustering
	      //

	      // Determine the deleted nodes
	      for (nodeId in this.clusteredNodes) {
	        if (!this.clusteredNodes.hasOwnProperty(nodeId)) continue;
	        var _node3 = this.body.nodes[nodeId];

	        if (_node3 === undefined) {
	          deletedNodeIds.push(nodeId);
	        }
	      }

	      // Remove nodes from cluster nodes
	      eachClusterNode(function (clusterNode) {
	        for (var n = 0; n < deletedNodeIds.length; n++) {
	          delete clusterNode.containedNodes[deletedNodeIds[n]];
	        }
	      });

	      // Remove nodes from cluster list
	      for (var n = 0; n < deletedNodeIds.length; n++) {
	        delete this.clusteredNodes[deletedNodeIds[n]];
	      }

	      //
	      // Remove deleted edges from clustering
	      //

	      // Add the deleted clustered edges to the list
	      util.forEach(this.clusteredEdges, function (edgeId) {
	        var edge = _this4.body.edges[edgeId];
	        if (edge === undefined || !edge.endPointsValid()) {
	          deletedEdgeIds.push(edgeId);
	        }
	      });

	      // Cluster nodes can also contain edges which are not clustered, 
	      // i.e. nodes 1-2 within cluster with an edge in between.
	      // So the cluster nodes also need to be scanned for invalid edges
	      eachClusterNode(function (clusterNode) {
	        util.forEach(clusterNode.containedEdges, function (edge, edgeId) {
	          if (!edge.endPointsValid() && deletedEdgeIds.indexOf(edgeId) === -1) {
	            deletedEdgeIds.push(edgeId);
	          }
	        });
	      });

	      // Also scan for cluster edges which need to be removed in the active list.
	      // Regular edges have been removed beforehand, so this only picks up the cluster edges.
	      util.forEach(this.body.edges, function (edge, edgeId) {
	        // Explicitly scan the contained edges for validity
	        var isValid = true;
	        var replacedIds = edge.clusteringEdgeReplacingIds;
	        if (replacedIds !== undefined) {
	          var numValid = 0;

	          util.forEach(replacedIds, function (containedEdgeId) {
	            var containedEdge = _this4.body.edges[containedEdgeId];

	            if (containedEdge !== undefined && containedEdge.endPointsValid()) {
	              numValid += 1;
	            }
	          });

	          isValid = numValid > 0;
	        }

	        if (!edge.endPointsValid() || !isValid) {
	          deletedEdgeIds.push(edgeId);
	        }
	      });

	      // Remove edges from cluster nodes
	      eachClusterNode(function (clusterNode) {
	        util.forEach(deletedEdgeIds, function (deletedEdgeId) {
	          delete clusterNode.containedEdges[deletedEdgeId];

	          util.forEach(clusterNode.edges, function (edge, m) {
	            if (edge.id === deletedEdgeId) {
	              clusterNode.edges[m] = null; // Don't want to directly delete here, because in the loop
	              return;
	            }

	            edge.clusteringEdgeReplacingIds = _this4._filter(edge.clusteringEdgeReplacingIds, function (id) {
	              return deletedEdgeIds.indexOf(id) === -1;
	            });
	          });

	          // Clean up the nulls
	          clusterNode.edges = _this4._filter(clusterNode.edges, function (item) {
	            return item !== null;
	          });
	        });
	      });

	      // Remove from cluster list
	      util.forEach(deletedEdgeIds, function (edgeId) {
	        delete _this4.clusteredEdges[edgeId];
	      });

	      // Remove cluster edges from active list (this.body.edges).
	      // deletedEdgeIds still contains id of regular edges, but these should all
	      // be gone when you reach here.
	      util.forEach(deletedEdgeIds, function (edgeId) {
	        delete _this4.body.edges[edgeId];
	      });

	      //
	      // Check changed cluster state of edges
	      //

	      // Iterating over keys here, because edges may be removed in the loop
	      var ids = (0, _keys2['default'])(this.body.edges);
	      util.forEach(ids, function (edgeId) {
	        var edge = _this4.body.edges[edgeId];

	        var shouldBeClustered = _this4._isClusteredNode(edge.fromId) || _this4._isClusteredNode(edge.toId);
	        if (shouldBeClustered === _this4._isClusteredEdge(edge.id)) {
	          return; // all is well
	        }

	        if (shouldBeClustered) {
	          // add edge to clustering
	          var clusterFrom = _this4._getClusterNodeForNode(edge.fromId);
	          if (clusterFrom !== undefined) {
	            _this4._clusterEdges(_this4.body.nodes[edge.fromId], edge, clusterFrom);
	          }

	          var clusterTo = _this4._getClusterNodeForNode(edge.toId);
	          if (clusterTo !== undefined) {
	            _this4._clusterEdges(_this4.body.nodes[edge.toId], edge, clusterTo);
	          }

	          // TODO: check that it works for both edges clustered
	          //       (This might be paranoia)
	        } else {
	          // This should not be happening, the state should
	          // be properly updated at this point.
	          // 
	          // If it *is* reached during normal operation, then we have to implement
	          // undo clustering for this edge here.
	          throw new Error('remove edge from clustering not implemented!');
	        }
	      });

	      // Clusters may be nested to any level. Keep on opening until nothing to open
	      var changed = false;
	      var continueLoop = true;

	      var _loop2 = function _loop2() {
	        var clustersToOpen = [];

	        // Determine the id's of clusters that need opening
	        eachClusterNode(function (clusterNode) {
	          var numNodes = (0, _keys2['default'])(clusterNode.containedNodes).length;
	          var allowSingle = clusterNode.options.allowSingleNodeCluster === true;
	          if (allowSingle && numNodes < 1 || !allowSingle && numNodes < 2) {
	            clustersToOpen.push(clusterNode.id);
	          }
	        });

	        // Open them
	        for (var _n = 0; _n < clustersToOpen.length; ++_n) {
	          _this4.openCluster(clustersToOpen[_n], {}, false /* Don't refresh, we're in an refresh/update already */);
	        }

	        continueLoop = clustersToOpen.length > 0;
	        changed = changed || continueLoop;
	      };

	      while (continueLoop) {
	        _loop2();
	      }

	      if (changed) {
	        this._updateState(); // Redo this method (recursion possible! should be safe)
	      }
	    }

	    /**
	     * Determine if node with given id is part of a cluster.
	     *
	     * @param {Node.id} nodeId
	     * @return {boolean} true if part of a cluster.
	     */

	  }, {
	    key: '_isClusteredNode',
	    value: function _isClusteredNode(nodeId) {
	      return this.clusteredNodes[nodeId] !== undefined;
	    }

	    /**
	     * Determine if edge with given id is not visible due to clustering.
	     *
	     * An edge is considered clustered if:
	     * - it is directly replaced by a clustering edge
	     * - any of its connecting nodes is in a cluster
	     *
	     * @param {vis.Edge.id} edgeId
	     * @return {boolean} true if part of a cluster.
	     */

	  }, {
	    key: '_isClusteredEdge',
	    value: function _isClusteredEdge(edgeId) {
	      return this.clusteredEdges[edgeId] !== undefined;
	    }
	  }]);
	  return ClusterEngine;
	}();

	exports['default'] = ClusterEngine;

	/***/ }),
	/* 228 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var util = __webpack_require__(2);
	var Node = __webpack_require__(47)["default"];

	/**
	 * A Cluster is a special Node that allows a group of Nodes positioned closely together
	 * to be represented by a single Cluster Node.
	 *
	 * @extends Node
	 */

	var Cluster = function (_Node) {
	  (0, _inherits3["default"])(Cluster, _Node);

	  /**
	   * @param {Object} options
	   * @param {Object} body
	   * @param {Array.<HTMLImageElement>}imagelist
	   * @param {Array} grouplist
	   * @param {Object} globalOptions
	   * @param {Object} defaultOptions     Global default options for nodes
	   */
	  function Cluster(options, body, imagelist, grouplist, globalOptions, defaultOptions) {
	    (0, _classCallCheck3["default"])(this, Cluster);

	    var _this = (0, _possibleConstructorReturn3["default"])(this, (Cluster.__proto__ || (0, _getPrototypeOf2["default"])(Cluster)).call(this, options, body, imagelist, grouplist, globalOptions, defaultOptions));

	    _this.isCluster = true;
	    _this.containedNodes = {};
	    _this.containedEdges = {};
	    return _this;
	  }

	  /**
	   * Transfer child cluster data to current and disconnect the child cluster.
	   *
	   * Please consult the header comment in 'Clustering.js' for the fields set here.
	   *
	   * @param {string|number} childClusterId  id of child cluster to open
	   */


	  (0, _createClass3["default"])(Cluster, [{
	    key: "_openChildCluster",
	    value: function _openChildCluster(childClusterId) {
	      var _this2 = this;

	      var childCluster = this.body.nodes[childClusterId];
	      if (this.containedNodes[childClusterId] === undefined) {
	        throw new Error('node with id: ' + childClusterId + ' not in current cluster');
	      }
	      if (!childCluster.isCluster) {
	        throw new Error('node with id: ' + childClusterId + ' is not a cluster');
	      }

	      // Disconnect child cluster from current cluster
	      delete this.containedNodes[childClusterId];
	      util.forEach(childCluster.edges, function (edge) {
	        delete _this2.containedEdges[edge.id];
	      });

	      // Transfer nodes and edges
	      util.forEach(childCluster.containedNodes, function (node, nodeId) {
	        _this2.containedNodes[nodeId] = node;
	      });
	      childCluster.containedNodes = {};

	      util.forEach(childCluster.containedEdges, function (edge, edgeId) {
	        _this2.containedEdges[edgeId] = edge;
	      });
	      childCluster.containedEdges = {};

	      // Transfer edges within cluster edges which are clustered
	      util.forEach(childCluster.edges, function (clusterEdge) {
	        util.forEach(_this2.edges, function (parentClusterEdge) {
	          // Assumption: a clustered edge can only be present in a single clustering edge
	          // Not tested here
	          var index = parentClusterEdge.clusteringEdgeReplacingIds.indexOf(clusterEdge.id);
	          if (index === -1) return;

	          util.forEach(clusterEdge.clusteringEdgeReplacingIds, function (srcId) {
	            parentClusterEdge.clusteringEdgeReplacingIds.push(srcId);

	            // Maintain correct bookkeeping for transferred edge
	            _this2.body.edges[srcId].edgeReplacedById = parentClusterEdge.id;
	          });

	          // Remove cluster edge from parent cluster edge
	          parentClusterEdge.clusteringEdgeReplacingIds.splice(index, 1);
	        });
	      });
	      childCluster.edges = [];
	    }
	  }]);
	  return Cluster;
	}(Node);

	exports["default"] = Cluster;

	/***/ }),
	/* 229 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * Initializes window.requestAnimationFrame() to a usable form.
	 *
	 * Specifically, set up this method for the case of running on node.js with jsdom enabled.
	 *
	 * NOTES:
	 *
	 * * On node.js, when calling this directly outside of this class, `window` is not defined.
	 *   This happens even if jsdom is used.
	 * * For node.js + jsdom, `window` is available at the moment the constructor is called.
	 *   For this reason, the called is placed within the constructor.
	 * * Even then, `window.requestAnimationFrame()` is not defined, so it still needs to be added.
	 * * During unit testing, it happens that the window object is reset during execution, causing
	 *   a runtime error due to missing `requestAnimationFrame()`. This needs to be compensated for,
	 *   see `_requestNextFrame()`.
	 * * Since this is a global object, it may affect other modules besides `Network`. With normal
	 *   usage, this does not cause any problems. During unit testing, errors may occur. These have
	 *   been compensated for, see comment block in _requestNextFrame().
	 *
	 * @private
	 */
	function _initRequestAnimationFrame() {
	  var func;

	  if (window !== undefined) {
	    func = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
	  }

	  if (func === undefined) {
	    // window or method not present, setting mock requestAnimationFrame
	    window.requestAnimationFrame = function (callback) {
	      //console.log("Called mock requestAnimationFrame");
	      callback();
	    };
	  } else {
	    window.requestAnimationFrame = func;
	  }
	}

	var util = __webpack_require__(2);

	/**
	 * The canvas renderer
	 */

	var CanvasRenderer = function () {
	  /**
	   * @param {Object} body
	   * @param {Canvas} canvas
	   */
	  function CanvasRenderer(body, canvas) {
	    (0, _classCallCheck3["default"])(this, CanvasRenderer);

	    _initRequestAnimationFrame();
	    this.body = body;
	    this.canvas = canvas;

	    this.redrawRequested = false;
	    this.renderTimer = undefined;
	    this.requiresTimeout = true;
	    this.renderingActive = false;
	    this.renderRequests = 0;
	    this.allowRedraw = true;

	    this.dragging = false;
	    this.options = {};
	    this.defaultOptions = {
	      hideEdgesOnDrag: false,
	      hideNodesOnDrag: false
	    };
	    util.extend(this.options, this.defaultOptions);

	    this._determineBrowserMethod();
	    this.bindEventListeners();
	  }

	  /**
	   * Binds event listeners
	   */


	  (0, _createClass3["default"])(CanvasRenderer, [{
	    key: "bindEventListeners",
	    value: function bindEventListeners() {
	      var _this = this;

	      this.body.emitter.on("dragStart", function () {
	        _this.dragging = true;
	      });
	      this.body.emitter.on("dragEnd", function () {
	        _this.dragging = false;
	      });
	      this.body.emitter.on("_resizeNodes", function () {
	        _this._resizeNodes();
	      });
	      this.body.emitter.on("_redraw", function () {
	        if (_this.renderingActive === false) {
	          _this._redraw();
	        }
	      });
	      this.body.emitter.on("_blockRedraw", function () {
	        _this.allowRedraw = false;
	      });
	      this.body.emitter.on("_allowRedraw", function () {
	        _this.allowRedraw = true;_this.redrawRequested = false;
	      });
	      this.body.emitter.on("_requestRedraw", this._requestRedraw.bind(this));
	      this.body.emitter.on("_startRendering", function () {
	        _this.renderRequests += 1;
	        _this.renderingActive = true;
	        _this._startRendering();
	      });
	      this.body.emitter.on("_stopRendering", function () {
	        _this.renderRequests -= 1;
	        _this.renderingActive = _this.renderRequests > 0;
	        _this.renderTimer = undefined;
	      });
	      this.body.emitter.on('destroy', function () {
	        _this.renderRequests = 0;
	        _this.allowRedraw = false;
	        _this.renderingActive = false;
	        if (_this.requiresTimeout === true) {
	          clearTimeout(_this.renderTimer);
	        } else {
	          window.cancelAnimationFrame(_this.renderTimer);
	        }
	        _this.body.emitter.off();
	      });
	    }

	    /**
	     *
	     * @param {Object} options
	     */

	  }, {
	    key: "setOptions",
	    value: function setOptions(options) {
	      if (options !== undefined) {
	        var fields = ['hideEdgesOnDrag', 'hideNodesOnDrag'];
	        util.selectiveDeepExtend(fields, this.options, options);
	      }
	    }

	    /**
	     * Prepare the drawing of the next frame.
	     *
	     * Calls the callback when the next frame can or will be drawn.
	     *
	     * @param {function} callback
	     * @param {number} delay - timeout case only, wait this number of milliseconds
	     * @returns {function|undefined}
	     * @private
	     */

	  }, {
	    key: "_requestNextFrame",
	    value: function _requestNextFrame(callback, delay) {
	      // During unit testing, it happens that the mock window object is reset while
	      // the next frame is still pending. Then, either 'window' is not present, or
	      // 'requestAnimationFrame()' is not present because it is not defined on the
	      // mock window object.
	      //
	      // As a consequence, unrelated unit tests may appear to fail, even if the problem
	      // described happens in the current unit test.
	      //
	      // This is not something that will happen in normal operation, but we still need
	      // to take it into account.
	      //
	      if (typeof window === 'undefined') return; // Doing `if (window === undefined)` does not work here!

	      var timer = void 0;

	      var myWindow = window; // Grab a reference to reduce the possibility that 'window' is reset
	      // while running this method.

	      if (this.requiresTimeout === true) {
	        // wait given number of milliseconds and perform the animation step function
	        timer = myWindow.setTimeout(callback, delay);
	      } else {
	        if (myWindow.requestAnimationFrame) {
	          timer = myWindow.requestAnimationFrame(callback);
	        }
	      }

	      return timer;
	    }

	    /**
	     *
	     * @private
	     */

	  }, {
	    key: "_startRendering",
	    value: function _startRendering() {
	      if (this.renderingActive === true) {
	        if (this.renderTimer === undefined) {
	          this.renderTimer = this._requestNextFrame(this._renderStep.bind(this), this.simulationInterval);
	        }
	      }
	    }

	    /**
	     *
	     * @private
	     */

	  }, {
	    key: "_renderStep",
	    value: function _renderStep() {
	      if (this.renderingActive === true) {
	        // reset the renderTimer so a new scheduled animation step can be set
	        this.renderTimer = undefined;

	        if (this.requiresTimeout === true) {
	          // this schedules a new simulation step
	          this._startRendering();
	        }

	        this._redraw();

	        if (this.requiresTimeout === false) {
	          // this schedules a new simulation step
	          this._startRendering();
	        }
	      }
	    }

	    /**
	     * Redraw the network with the current data
	     * chart will be resized too.
	     */

	  }, {
	    key: "redraw",
	    value: function redraw() {
	      this.body.emitter.emit('setSize');
	      this._redraw();
	    }

	    /**
	     * Redraw the network with the current data
	     * @private
	     */

	  }, {
	    key: "_requestRedraw",
	    value: function _requestRedraw() {
	      var _this2 = this;

	      if (this.redrawRequested !== true && this.renderingActive === false && this.allowRedraw === true) {
	        this.redrawRequested = true;
	        this._requestNextFrame(function () {
	          _this2._redraw(false);
	        }, 0);
	      }
	    }

	    /**
	     * Redraw the network with the current data
	     * @param {boolean} [hidden=false] | Used to get the first estimate of the node sizes.
	     *                                   Only the nodes are drawn after which they are quickly drawn over.
	     * @private
	     */

	  }, {
	    key: "_redraw",
	    value: function _redraw() {
	      var hidden = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	      if (this.allowRedraw === true) {
	        this.body.emitter.emit("initRedraw");

	        this.redrawRequested = false;

	        // when the container div was hidden, this fixes it back up!
	        if (this.canvas.frame.canvas.width === 0 || this.canvas.frame.canvas.height === 0) {
	          this.canvas.setSize();
	        }

	        this.canvas.setTransform();

	        var ctx = this.canvas.getContext();

	        // clear the canvas
	        var w = this.canvas.frame.canvas.clientWidth;
	        var h = this.canvas.frame.canvas.clientHeight;
	        ctx.clearRect(0, 0, w, h);

	        // if the div is hidden, we stop the redraw here for performance.
	        if (this.canvas.frame.clientWidth === 0) {
	          return;
	        }

	        // set scaling and translation
	        ctx.save();
	        ctx.translate(this.body.view.translation.x, this.body.view.translation.y);
	        ctx.scale(this.body.view.scale, this.body.view.scale);

	        ctx.beginPath();
	        this.body.emitter.emit("beforeDrawing", ctx);
	        ctx.closePath();

	        if (hidden === false) {
	          if (this.dragging === false || this.dragging === true && this.options.hideEdgesOnDrag === false) {
	            this._drawEdges(ctx);
	          }
	        }

	        if (this.dragging === false || this.dragging === true && this.options.hideNodesOnDrag === false) {
	          this._drawNodes(ctx, hidden);
	        }

	        ctx.beginPath();
	        this.body.emitter.emit("afterDrawing", ctx);
	        ctx.closePath();

	        // restore original scaling and translation
	        ctx.restore();
	        if (hidden === true) {
	          ctx.clearRect(0, 0, w, h);
	        }
	      }
	    }

	    /**
	     * Redraw all nodes
	     *
	     * @param {CanvasRenderingContext2D}   ctx
	     * @param {boolean} [alwaysShow]
	     * @private
	     */

	  }, {
	    key: "_resizeNodes",
	    value: function _resizeNodes() {
	      this.canvas.setTransform();
	      var ctx = this.canvas.getContext();
	      ctx.save();
	      ctx.translate(this.body.view.translation.x, this.body.view.translation.y);
	      ctx.scale(this.body.view.scale, this.body.view.scale);

	      var nodes = this.body.nodes;
	      var node = void 0;

	      // resize all nodes
	      for (var nodeId in nodes) {
	        if (nodes.hasOwnProperty(nodeId)) {
	          node = nodes[nodeId];
	          node.resize(ctx);
	          node.updateBoundingBox(ctx, node.selected);
	        }
	      }

	      // restore original scaling and translation
	      ctx.restore();
	    }

	    /**
	     * Redraw all nodes
	     *
	     * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas
	     * @param {boolean} [alwaysShow]
	     * @private
	     */

	  }, {
	    key: "_drawNodes",
	    value: function _drawNodes(ctx) {
	      var alwaysShow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	      var nodes = this.body.nodes;
	      var nodeIndices = this.body.nodeIndices;
	      var node = void 0;
	      var selected = [];
	      var margin = 20;
	      var topLeft = this.canvas.DOMtoCanvas({ x: -margin, y: -margin });
	      var bottomRight = this.canvas.DOMtoCanvas({
	        x: this.canvas.frame.canvas.clientWidth + margin,
	        y: this.canvas.frame.canvas.clientHeight + margin
	      });
	      var viewableArea = { top: topLeft.y, left: topLeft.x, bottom: bottomRight.y, right: bottomRight.x };

	      // draw unselected nodes;
	      for (var i = 0; i < nodeIndices.length; i++) {
	        node = nodes[nodeIndices[i]];
	        // set selected nodes aside
	        if (node.isSelected()) {
	          selected.push(nodeIndices[i]);
	        } else {
	          if (alwaysShow === true) {
	            node.draw(ctx);
	          } else if (node.isBoundingBoxOverlappingWith(viewableArea) === true) {
	            node.draw(ctx);
	          } else {
	            node.updateBoundingBox(ctx, node.selected);
	          }
	        }
	      }

	      // draw the selected nodes on top
	      for (var _i = 0; _i < selected.length; _i++) {
	        node = nodes[selected[_i]];
	        node.draw(ctx);
	      }
	    }

	    /**
	     * Redraw all edges
	     * @param {CanvasRenderingContext2D} ctx  2D context of a HTML canvas
	     * @private
	     */

	  }, {
	    key: "_drawEdges",
	    value: function _drawEdges(ctx) {
	      var edges = this.body.edges;
	      var edgeIndices = this.body.edgeIndices;
	      var edge = void 0;

	      for (var i = 0; i < edgeIndices.length; i++) {
	        edge = edges[edgeIndices[i]];
	        if (edge.connected === true) {
	          edge.draw(ctx);
	        }
	      }
	    }

	    /**
	     * Determine if the browser requires a setTimeout or a requestAnimationFrame. This was required because
	     * some implementations (safari and IE9) did not support requestAnimationFrame
	     * @private
	     */

	  }, {
	    key: "_determineBrowserMethod",
	    value: function _determineBrowserMethod() {
	      if (typeof window !== 'undefined') {
	        var browserType = navigator.userAgent.toLowerCase();
	        this.requiresTimeout = false;
	        if (browserType.indexOf('msie 9.0') != -1) {
	          // IE 9
	          this.requiresTimeout = true;
	        } else if (browserType.indexOf('safari') != -1) {
	          // safari
	          if (browserType.indexOf('chrome') <= -1) {
	            this.requiresTimeout = true;
	          }
	        }
	      } else {
	        this.requiresTimeout = true;
	      }
	    }
	  }]);
	  return CanvasRenderer;
	}();

	exports["default"] = CanvasRenderer;

	/***/ }),
	/* 230 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var Hammer = __webpack_require__(10);
	var hammerUtil = __webpack_require__(37);

	var util = __webpack_require__(2);

	/**
	 * Create the main frame for the Network.
	 * This function is executed once when a Network object is created. The frame
	 * contains a canvas, and this canvas contains all objects like the axis and
	 * nodes.
	 */

	var Canvas = function () {
	  /**
	   * @param {Object} body
	   */
	  function Canvas(body) {
	    (0, _classCallCheck3['default'])(this, Canvas);

	    this.body = body;
	    this.pixelRatio = 1;
	    this.resizeTimer = undefined;
	    this.resizeFunction = this._onResize.bind(this);
	    this.cameraState = {};
	    this.initialized = false;
	    this.canvasViewCenter = {};

	    this.options = {};
	    this.defaultOptions = {
	      autoResize: true,
	      height: '100%',
	      width: '100%'
	    };
	    util.extend(this.options, this.defaultOptions);

	    this.bindEventListeners();
	  }

	  /**
	   * Binds event listeners
	   */


	  (0, _createClass3['default'])(Canvas, [{
	    key: 'bindEventListeners',
	    value: function bindEventListeners() {
	      var _this = this;

	      // bind the events
	      this.body.emitter.once("resize", function (obj) {
	        if (obj.width !== 0) {
	          _this.body.view.translation.x = obj.width * 0.5;
	        }
	        if (obj.height !== 0) {
	          _this.body.view.translation.y = obj.height * 0.5;
	        }
	      });
	      this.body.emitter.on("setSize", this.setSize.bind(this));
	      this.body.emitter.on("destroy", function () {
	        _this.hammerFrame.destroy();
	        _this.hammer.destroy();
	        _this._cleanUp();
	      });
	    }

	    /**
	     * @param {Object} options
	     */

	  }, {
	    key: 'setOptions',
	    value: function setOptions(options) {
	      var _this2 = this;

	      if (options !== undefined) {
	        var fields = ['width', 'height', 'autoResize'];
	        util.selectiveDeepExtend(fields, this.options, options);
	      }

	      if (this.options.autoResize === true) {
	        // automatically adapt to a changing size of the browser.
	        this._cleanUp();
	        this.resizeTimer = setInterval(function () {
	          var changed = _this2.setSize();
	          if (changed === true) {
	            _this2.body.emitter.emit("_requestRedraw");
	          }
	        }, 1000);
	        this.resizeFunction = this._onResize.bind(this);
	        util.addEventListener(window, 'resize', this.resizeFunction);
	      }
	    }

	    /**
	     * @private
	     */

	  }, {
	    key: '_cleanUp',
	    value: function _cleanUp() {
	      // automatically adapt to a changing size of the browser.
	      if (this.resizeTimer !== undefined) {
	        clearInterval(this.resizeTimer);
	      }
	      util.removeEventListener(window, 'resize', this.resizeFunction);
	      this.resizeFunction = undefined;
	    }

	    /**
	     * @private
	     */

	  }, {
	    key: '_onResize',
	    value: function _onResize() {
	      this.setSize();
	      this.body.emitter.emit("_redraw");
	    }

	    /**
	     * Get and store the cameraState
	     *
	     * @param {number} [pixelRatio=this.pixelRatio]
	     * @private
	     */

	  }, {
	    key: '_getCameraState',
	    value: function _getCameraState() {
	      var pixelRatio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.pixelRatio;

	      if (this.initialized === true) {
	        this.cameraState.previousWidth = this.frame.canvas.width / pixelRatio;
	        this.cameraState.previousHeight = this.frame.canvas.height / pixelRatio;
	        this.cameraState.scale = this.body.view.scale;
	        this.cameraState.position = this.DOMtoCanvas({
	          x: 0.5 * this.frame.canvas.width / pixelRatio,
	          y: 0.5 * this.frame.canvas.height / pixelRatio
	        });
	      }
	    }

	    /**
	     * Set the cameraState
	     * @private
	     */

	  }, {
	    key: '_setCameraState',
	    value: function _setCameraState() {
	      if (this.cameraState.scale !== undefined && this.frame.canvas.clientWidth !== 0 && this.frame.canvas.clientHeight !== 0 && this.pixelRatio !== 0 && this.cameraState.previousWidth > 0) {

	        var widthRatio = this.frame.canvas.width / this.pixelRatio / this.cameraState.previousWidth;
	        var heightRatio = this.frame.canvas.height / this.pixelRatio / this.cameraState.previousHeight;
	        var newScale = this.cameraState.scale;

	        if (widthRatio != 1 && heightRatio != 1) {
	          newScale = this.cameraState.scale * 0.5 * (widthRatio + heightRatio);
	        } else if (widthRatio != 1) {
	          newScale = this.cameraState.scale * widthRatio;
	        } else if (heightRatio != 1) {
	          newScale = this.cameraState.scale * heightRatio;
	        }

	        this.body.view.scale = newScale;
	        // this comes from the view module.
	        var currentViewCenter = this.DOMtoCanvas({
	          x: 0.5 * this.frame.canvas.clientWidth,
	          y: 0.5 * this.frame.canvas.clientHeight
	        });

	        var distanceFromCenter = { // offset from view, distance view has to change by these x and y to center the node
	          x: currentViewCenter.x - this.cameraState.position.x,
	          y: currentViewCenter.y - this.cameraState.position.y
	        };
	        this.body.view.translation.x += distanceFromCenter.x * this.body.view.scale;
	        this.body.view.translation.y += distanceFromCenter.y * this.body.view.scale;
	      }
	    }

	    /**
	     *
	     * @param {number|string} value
	     * @returns {string}
	     * @private
	     */

	  }, {
	    key: '_prepareValue',
	    value: function _prepareValue(value) {
	      if (typeof value === 'number') {
	        return value + 'px';
	      } else if (typeof value === 'string') {
	        if (value.indexOf('%') !== -1 || value.indexOf('px') !== -1) {
	          return value;
	        } else if (value.indexOf('%') === -1) {
	          return value + 'px';
	        }
	      }
	      throw new Error('Could not use the value supplied for width or height:' + value);
	    }

	    /**
	     * Create the HTML
	     */

	  }, {
	    key: '_create',
	    value: function _create() {
	      // remove all elements from the container element.
	      while (this.body.container.hasChildNodes()) {
	        this.body.container.removeChild(this.body.container.firstChild);
	      }

	      this.frame = document.createElement('div');
	      this.frame.className = 'vis-network';
	      this.frame.style.position = 'relative';
	      this.frame.style.overflow = 'hidden';
	      this.frame.tabIndex = 900; // tab index is required for keycharm to bind keystrokes to the div instead of the window

	      //////////////////////////////////////////////////////////////////

	      this.frame.canvas = document.createElement("canvas");
	      this.frame.canvas.style.position = 'relative';
	      this.frame.appendChild(this.frame.canvas);

	      if (!this.frame.canvas.getContext) {
	        var noCanvas = document.createElement('DIV');
	        noCanvas.style.color = 'red';
	        noCanvas.style.fontWeight = 'bold';
	        noCanvas.style.padding = '10px';
	        noCanvas.innerHTML = 'Error: your browser does not support HTML canvas';
	        this.frame.canvas.appendChild(noCanvas);
	      } else {
	        this._setPixelRatio();
	        this.setTransform();
	      }

	      // add the frame to the container element
	      this.body.container.appendChild(this.frame);

	      this.body.view.scale = 1;
	      this.body.view.translation = { x: 0.5 * this.frame.canvas.clientWidth, y: 0.5 * this.frame.canvas.clientHeight };

	      this._bindHammer();
	    }

	    /**
	     * This function binds hammer, it can be repeated over and over due to the uniqueness check.
	     * @private
	     */

	  }, {
	    key: '_bindHammer',
	    value: function _bindHammer() {
	      var _this3 = this;

	      if (this.hammer !== undefined) {
	        this.hammer.destroy();
	      }
	      this.drag = {};
	      this.pinch = {};

	      // init hammer
	      this.hammer = new Hammer(this.frame.canvas);
	      this.hammer.get('pinch').set({ enable: true });
	      // enable to get better response, todo: test on mobile.
	      this.hammer.get('pan').set({ threshold: 5, direction: Hammer.DIRECTION_ALL });

	      hammerUtil.onTouch(this.hammer, function (event) {
	        _this3.body.eventListeners.onTouch(event);
	      });
	      this.hammer.on('tap', function (event) {
	        _this3.body.eventListeners.onTap(event);
	      });
	      this.hammer.on('doubletap', function (event) {
	        _this3.body.eventListeners.onDoubleTap(event);
	      });
	      this.hammer.on('press', function (event) {
	        _this3.body.eventListeners.onHold(event);
	      });
	      this.hammer.on('panstart', function (event) {
	        _this3.body.eventListeners.onDragStart(event);
	      });
	      this.hammer.on('panmove', function (event) {
	        _this3.body.eventListeners.onDrag(event);
	      });
	      this.hammer.on('panend', function (event) {
	        _this3.body.eventListeners.onDragEnd(event);
	      });
	      this.hammer.on('pinch', function (event) {
	        _this3.body.eventListeners.onPinch(event);
	      });

	      // TODO: neatly cleanup these handlers when re-creating the Canvas, IF these are done with hammer, event.stopPropagation will not work?
	      this.frame.canvas.addEventListener('mousewheel', function (event) {
	        _this3.body.eventListeners.onMouseWheel(event);
	      });
	      this.frame.canvas.addEventListener('DOMMouseScroll', function (event) {
	        _this3.body.eventListeners.onMouseWheel(event);
	      });

	      this.frame.canvas.addEventListener('mousemove', function (event) {
	        _this3.body.eventListeners.onMouseMove(event);
	      });
	      this.frame.canvas.addEventListener('contextmenu', function (event) {
	        _this3.body.eventListeners.onContext(event);
	      });

	      this.hammerFrame = new Hammer(this.frame);
	      hammerUtil.onRelease(this.hammerFrame, function (event) {
	        _this3.body.eventListeners.onRelease(event);
	      });
	    }

	    /**
	     * Set a new size for the network
	     * @param {string} width   Width in pixels or percentage (for example '800px'
	     *                         or '50%')
	     * @param {string} height  Height in pixels or percentage  (for example '400px'
	     *                         or '30%')
	     * @returns {boolean}
	     */

	  }, {
	    key: 'setSize',
	    value: function setSize() {
	      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.width;
	      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.height;

	      width = this._prepareValue(width);
	      height = this._prepareValue(height);

	      var emitEvent = false;
	      var oldWidth = this.frame.canvas.width;
	      var oldHeight = this.frame.canvas.height;

	      // update the pixel ratio
	      //
	      // NOTE: Comment in following is rather inconsistent; this is the ONLY place in the code
	      //       where it is assumed that the pixel ratio could change at runtime.
	      //       The only way I can think of this happening is a rotating screen or tablet; but then
	      //       there should be a mechanism for reloading the data (TODO: check if this is present).
	      //
	      //       If the assumption is true (i.e. pixel ratio can change at runtime), then *all* usage
	      //       of pixel ratio must be overhauled for this.
	      //
	      //       For the time being, I will humor the assumption here, and in the rest of the code assume it is
	      //       constant.
	      var previousRatio = this.pixelRatio; // we cache this because the camera state storage needs the old value
	      this._setPixelRatio();

	      if (width != this.options.width || height != this.options.height || this.frame.style.width != width || this.frame.style.height != height) {
	        this._getCameraState(previousRatio);

	        this.frame.style.width = width;
	        this.frame.style.height = height;

	        this.frame.canvas.style.width = '100%';
	        this.frame.canvas.style.height = '100%';

	        this.frame.canvas.width = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);
	        this.frame.canvas.height = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);

	        this.options.width = width;
	        this.options.height = height;

	        this.canvasViewCenter = {
	          x: 0.5 * this.frame.clientWidth,
	          y: 0.5 * this.frame.clientHeight
	        };

	        emitEvent = true;
	      } else {
	        // this would adapt the width of the canvas to the width from 100% if and only if
	        // there is a change.

	        var newWidth = Math.round(this.frame.canvas.clientWidth * this.pixelRatio);
	        var newHeight = Math.round(this.frame.canvas.clientHeight * this.pixelRatio);

	        // store the camera if there is a change in size.
	        if (this.frame.canvas.width !== newWidth || this.frame.canvas.height !== newHeight) {
	          this._getCameraState(previousRatio);
	        }

	        if (this.frame.canvas.width !== newWidth) {
	          this.frame.canvas.width = newWidth;
	          emitEvent = true;
	        }
	        if (this.frame.canvas.height !== newHeight) {
	          this.frame.canvas.height = newHeight;
	          emitEvent = true;
	        }
	      }

	      if (emitEvent === true) {
	        this.body.emitter.emit('resize', {
	          width: Math.round(this.frame.canvas.width / this.pixelRatio),
	          height: Math.round(this.frame.canvas.height / this.pixelRatio),
	          oldWidth: Math.round(oldWidth / this.pixelRatio),
	          oldHeight: Math.round(oldHeight / this.pixelRatio)
	        });

	        // restore the camera on change.
	        this._setCameraState();
	      }

	      // set initialized so the get and set camera will work from now on.
	      this.initialized = true;
	      return emitEvent;
	    }

	    /**
	     *
	     * @returns {CanvasRenderingContext2D}
	     */

	  }, {
	    key: 'getContext',
	    value: function getContext() {
	      return this.frame.canvas.getContext("2d");
	    }

	    /**
	     * Determine the pixel ratio for various browsers.
	     *
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_determinePixelRatio',
	    value: function _determinePixelRatio() {
	      var ctx = this.getContext();
	      if (ctx === undefined) {
	        throw new Error("Could not get canvax context");
	      }

	      var numerator = 1;
	      if (typeof window !== 'undefined') {
	        // (window !== undefined) doesn't work here!
	        // Protection during unit tests, where 'window' can be missing
	        numerator = window.devicePixelRatio || 1;
	      }

	      var denominator = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;

	      return numerator / denominator;
	    }

	    /**
	     * Lazy determination of pixel ratio.
	     *
	     * @private
	     */

	  }, {
	    key: '_setPixelRatio',
	    value: function _setPixelRatio() {
	      this.pixelRatio = this._determinePixelRatio();
	    }

	    /**
	     * Set the transform in the contained context, based on its pixelRatio
	     */

	  }, {
	    key: 'setTransform',
	    value: function setTransform() {
	      var ctx = this.getContext();
	      if (ctx === undefined) {
	        throw new Error("Could not get canvax context");
	      }

	      ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);
	    }

	    /**
	     * Convert the X coordinate in DOM-space (coordinate point in browser relative to the container div) to
	     * the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon)
	     * @param {number} x
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_XconvertDOMtoCanvas',
	    value: function _XconvertDOMtoCanvas(x) {
	      return (x - this.body.view.translation.x) / this.body.view.scale;
	    }

	    /**
	     * Convert the X coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to
	     * the X coordinate in DOM-space (coordinate point in browser relative to the container div)
	     * @param {number} x
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_XconvertCanvasToDOM',
	    value: function _XconvertCanvasToDOM(x) {
	      return x * this.body.view.scale + this.body.view.translation.x;
	    }

	    /**
	     * Convert the Y coordinate in DOM-space (coordinate point in browser relative to the container div) to
	     * the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon)
	     * @param {number} y
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_YconvertDOMtoCanvas',
	    value: function _YconvertDOMtoCanvas(y) {
	      return (y - this.body.view.translation.y) / this.body.view.scale;
	    }

	    /**
	     * Convert the Y coordinate in canvas-space (the simulation sandbox, which the camera looks upon) to
	     * the Y coordinate in DOM-space (coordinate point in browser relative to the container div)
	     * @param {number} y
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_YconvertCanvasToDOM',
	    value: function _YconvertCanvasToDOM(y) {
	      return y * this.body.view.scale + this.body.view.translation.y;
	    }

	    /**
	     * @param {point} pos
	     * @returns {point}
	     */

	  }, {
	    key: 'canvasToDOM',
	    value: function canvasToDOM(pos) {
	      return { x: this._XconvertCanvasToDOM(pos.x), y: this._YconvertCanvasToDOM(pos.y) };
	    }

	    /**
	     *
	     * @param {point} pos
	     * @returns {point}
	     */

	  }, {
	    key: 'DOMtoCanvas',
	    value: function DOMtoCanvas(pos) {
	      return { x: this._XconvertDOMtoCanvas(pos.x), y: this._YconvertDOMtoCanvas(pos.y) };
	    }
	  }]);
	  return Canvas;
	}();

	exports['default'] = Canvas;

	/***/ }),
	/* 231 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);

	var NetworkUtil = __webpack_require__(76)['default'];

	/**
	 * The view
	 */

	var View = function () {
	  /**
	   * @param {Object} body
	   * @param {Canvas} canvas
	   */
	  function View(body, canvas) {
	    var _this = this;

	    (0, _classCallCheck3['default'])(this, View);

	    this.body = body;
	    this.canvas = canvas;

	    this.animationSpeed = 1 / this.renderRefreshRate;
	    this.animationEasingFunction = "easeInOutQuint";
	    this.easingTime = 0;
	    this.sourceScale = 0;
	    this.targetScale = 0;
	    this.sourceTranslation = 0;
	    this.targetTranslation = 0;
	    this.lockedOnNodeId = undefined;
	    this.lockedOnNodeOffset = undefined;
	    this.touchTime = 0;

	    this.viewFunction = undefined;

	    this.body.emitter.on("fit", this.fit.bind(this));
	    this.body.emitter.on("animationFinished", function () {
	      _this.body.emitter.emit("_stopRendering");
	    });
	    this.body.emitter.on("unlockNode", this.releaseNode.bind(this));
	  }

	  /**
	   *
	   * @param {Object} [options={}]
	   */


	  (0, _createClass3['default'])(View, [{
	    key: 'setOptions',
	    value: function setOptions() {
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	      this.options = options;
	    }

	    /**
	     * This function zooms out to fit all data on screen based on amount of nodes
	     * @param {Object} [options={{nodes=Array}}]
	     * @param {boolean} [initialZoom=false]  | zoom based on fitted formula or range, true = fitted, default = false;
	     */

	  }, {
	    key: 'fit',
	    value: function fit() {
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { nodes: [] };
	      var initialZoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	      var range = void 0;
	      var zoomLevel = void 0;
	      if (options.nodes === undefined || options.nodes.length === 0) {
	        options.nodes = this.body.nodeIndices;
	      }

	      if (initialZoom === true) {
	        // check if more than half of the nodes have a predefined position. If so, we use the range, not the approximation.
	        var positionDefined = 0;
	        for (var nodeId in this.body.nodes) {
	          if (this.body.nodes.hasOwnProperty(nodeId)) {
	            var node = this.body.nodes[nodeId];
	            if (node.predefinedPosition === true) {
	              positionDefined += 1;
	            }
	          }
	        }
	        if (positionDefined > 0.5 * this.body.nodeIndices.length) {
	          this.fit(options, false);
	          return;
	        }

	        range = NetworkUtil.getRange(this.body.nodes, options.nodes);

	        var numberOfNodes = this.body.nodeIndices.length;
	        zoomLevel = 12.662 / (numberOfNodes + 7.4147) + 0.0964822; // this is obtained from fitting a dataset from 5 points with scale levels that looked good.

	        // correct for larger canvasses.
	        var factor = Math.min(this.canvas.frame.canvas.clientWidth / 600, this.canvas.frame.canvas.clientHeight / 600);
	        zoomLevel *= factor;
	      } else {
	        this.body.emitter.emit("_resizeNodes");
	        range = NetworkUtil.getRange(this.body.nodes, options.nodes);

	        var xDistance = Math.abs(range.maxX - range.minX) * 1.1;
	        var yDistance = Math.abs(range.maxY - range.minY) * 1.1;

	        var xZoomLevel = this.canvas.frame.canvas.clientWidth / xDistance;
	        var yZoomLevel = this.canvas.frame.canvas.clientHeight / yDistance;

	        zoomLevel = xZoomLevel <= yZoomLevel ? xZoomLevel : yZoomLevel;
	      }

	      if (zoomLevel > 1.0) {
	        zoomLevel = 1.0;
	      } else if (zoomLevel === 0) {
	        zoomLevel = 1.0;
	      }

	      var center = NetworkUtil.findCenter(range);
	      var animationOptions = { position: center, scale: zoomLevel, animation: options.animation };
	      this.moveTo(animationOptions);
	    }

	    // animation

	    /**
	     * Center a node in view.
	     *
	     * @param {number} nodeId
	     * @param {number} [options]
	     */

	  }, {
	    key: 'focus',
	    value: function focus(nodeId) {
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	      if (this.body.nodes[nodeId] !== undefined) {
	        var nodePosition = { x: this.body.nodes[nodeId].x, y: this.body.nodes[nodeId].y };
	        options.position = nodePosition;
	        options.lockedOnNode = nodeId;

	        this.moveTo(options);
	      } else {
	        console.log("Node: " + nodeId + " cannot be found.");
	      }
	    }

	    /**
	     *
	     * @param {Object} options  |  options.offset   = {x:number, y:number}   // offset from the center in DOM pixels
	     *                          |  options.scale    = number                 // scale to move to
	     *                          |  options.position = {x:number, y:number}   // position to move to
	     *                          |  options.animation = {duration:number, easingFunction:String} || Boolean   // position to move to
	     */

	  }, {
	    key: 'moveTo',
	    value: function moveTo(options) {
	      if (options === undefined) {
	        options = {};
	        return;
	      }
	      if (options.offset === undefined) {
	        options.offset = { x: 0, y: 0 };
	      }
	      if (options.offset.x === undefined) {
	        options.offset.x = 0;
	      }
	      if (options.offset.y === undefined) {
	        options.offset.y = 0;
	      }
	      if (options.scale === undefined) {
	        options.scale = this.body.view.scale;
	      }
	      if (options.position === undefined) {
	        options.position = this.getViewPosition();
	      }
	      if (options.animation === undefined) {
	        options.animation = { duration: 0 };
	      }
	      if (options.animation === false) {
	        options.animation = { duration: 0 };
	      }
	      if (options.animation === true) {
	        options.animation = {};
	      }
	      if (options.animation.duration === undefined) {
	        options.animation.duration = 1000;
	      } // default duration
	      if (options.animation.easingFunction === undefined) {
	        options.animation.easingFunction = "easeInOutQuad";
	      } // default easing function

	      this.animateView(options);
	    }

	    /**
	     *
	     * @param {Object} options  |  options.offset   = {x:number, y:number}   // offset from the center in DOM pixels
	     *                          |  options.time     = number                 // animation time in milliseconds
	     *                          |  options.scale    = number                 // scale to animate to
	     *                          |  options.position = {x:number, y:number}   // position to animate to
	     *                          |  options.easingFunction = String           // linear, easeInQuad, easeOutQuad, easeInOutQuad,
	     *                                                                       // easeInCubic, easeOutCubic, easeInOutCubic,
	     *                                                                       // easeInQuart, easeOutQuart, easeInOutQuart,
	     *                                                                       // easeInQuint, easeOutQuint, easeInOutQuint
	     */

	  }, {
	    key: 'animateView',
	    value: function animateView(options) {
	      if (options === undefined) {
	        return;
	      }
	      this.animationEasingFunction = options.animation.easingFunction;
	      // release if something focussed on the node
	      this.releaseNode();
	      if (options.locked === true) {
	        this.lockedOnNodeId = options.lockedOnNode;
	        this.lockedOnNodeOffset = options.offset;
	      }

	      // forcefully complete the old animation if it was still running
	      if (this.easingTime != 0) {
	        this._transitionRedraw(true); // by setting easingtime to 1, we finish the animation.
	      }

	      this.sourceScale = this.body.view.scale;
	      this.sourceTranslation = this.body.view.translation;
	      this.targetScale = options.scale;

	      // set the scale so the viewCenter is based on the correct zoom level. This is overridden in the transitionRedraw
	      // but at least then we'll have the target transition
	      this.body.view.scale = this.targetScale;
	      var viewCenter = this.canvas.DOMtoCanvas({ x: 0.5 * this.canvas.frame.canvas.clientWidth, y: 0.5 * this.canvas.frame.canvas.clientHeight });

	      var distanceFromCenter = { // offset from view, distance view has to change by these x and y to center the node
	        x: viewCenter.x - options.position.x,
	        y: viewCenter.y - options.position.y
	      };
	      this.targetTranslation = {
	        x: this.sourceTranslation.x + distanceFromCenter.x * this.targetScale + options.offset.x,
	        y: this.sourceTranslation.y + distanceFromCenter.y * this.targetScale + options.offset.y
	      };

	      // if the time is set to 0, don't do an animation
	      if (options.animation.duration === 0) {
	        if (this.lockedOnNodeId != undefined) {
	          this.viewFunction = this._lockedRedraw.bind(this);
	          this.body.emitter.on("initRedraw", this.viewFunction);
	        } else {
	          this.body.view.scale = this.targetScale;
	          this.body.view.translation = this.targetTranslation;
	          this.body.emitter.emit("_requestRedraw");
	        }
	      } else {
	        this.animationSpeed = 1 / (60 * options.animation.duration * 0.001) || 1 / 60; // 60 for 60 seconds, 0.001 for milli's
	        this.animationEasingFunction = options.animation.easingFunction;

	        this.viewFunction = this._transitionRedraw.bind(this);
	        this.body.emitter.on("initRedraw", this.viewFunction);
	        this.body.emitter.emit("_startRendering");
	      }
	    }

	    /**
	     * used to animate smoothly by hijacking the redraw function.
	     * @private
	     */

	  }, {
	    key: '_lockedRedraw',
	    value: function _lockedRedraw() {
	      var nodePosition = { x: this.body.nodes[this.lockedOnNodeId].x, y: this.body.nodes[this.lockedOnNodeId].y };
	      var viewCenter = this.canvas.DOMtoCanvas({ x: 0.5 * this.canvas.frame.canvas.clientWidth, y: 0.5 * this.canvas.frame.canvas.clientHeight });
	      var distanceFromCenter = { // offset from view, distance view has to change by these x and y to center the node
	        x: viewCenter.x - nodePosition.x,
	        y: viewCenter.y - nodePosition.y
	      };
	      var sourceTranslation = this.body.view.translation;
	      var targetTranslation = {
	        x: sourceTranslation.x + distanceFromCenter.x * this.body.view.scale + this.lockedOnNodeOffset.x,
	        y: sourceTranslation.y + distanceFromCenter.y * this.body.view.scale + this.lockedOnNodeOffset.y
	      };

	      this.body.view.translation = targetTranslation;
	    }

	    /**
	     * Resets state of a locked on Node
	     */

	  }, {
	    key: 'releaseNode',
	    value: function releaseNode() {
	      if (this.lockedOnNodeId !== undefined && this.viewFunction !== undefined) {
	        this.body.emitter.off("initRedraw", this.viewFunction);
	        this.lockedOnNodeId = undefined;
	        this.lockedOnNodeOffset = undefined;
	      }
	    }

	    /**
	     * @param {boolean} [finished=false]
	     * @private
	     */

	  }, {
	    key: '_transitionRedraw',
	    value: function _transitionRedraw() {
	      var finished = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	      this.easingTime += this.animationSpeed;
	      this.easingTime = finished === true ? 1.0 : this.easingTime;

	      var progress = util.easingFunctions[this.animationEasingFunction](this.easingTime);

	      this.body.view.scale = this.sourceScale + (this.targetScale - this.sourceScale) * progress;
	      this.body.view.translation = {
	        x: this.sourceTranslation.x + (this.targetTranslation.x - this.sourceTranslation.x) * progress,
	        y: this.sourceTranslation.y + (this.targetTranslation.y - this.sourceTranslation.y) * progress
	      };

	      // cleanup
	      if (this.easingTime >= 1.0) {
	        this.body.emitter.off("initRedraw", this.viewFunction);
	        this.easingTime = 0;
	        if (this.lockedOnNodeId != undefined) {
	          this.viewFunction = this._lockedRedraw.bind(this);
	          this.body.emitter.on("initRedraw", this.viewFunction);
	        }
	        this.body.emitter.emit("animationFinished");
	      }
	    }

	    /**
	     *
	     * @returns {number}
	     */

	  }, {
	    key: 'getScale',
	    value: function getScale() {
	      return this.body.view.scale;
	    }

	    /**
	     *
	     * @returns {{x: number, y: number}}
	     */

	  }, {
	    key: 'getViewPosition',
	    value: function getViewPosition() {
	      return this.canvas.DOMtoCanvas({ x: 0.5 * this.canvas.frame.canvas.clientWidth, y: 0.5 * this.canvas.frame.canvas.clientHeight });
	    }
	  }]);
	  return View;
	}();

	exports['default'] = View;

	/***/ }),
	/* 232 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);
	var NavigationHandler = __webpack_require__(233)['default'];
	var Popup = __webpack_require__(104)['default'];

	/**
	 * Handler for interactions
	 */

	var InteractionHandler = function () {
	  /**
	   * @param {Object} body
	   * @param {Canvas} canvas
	   * @param {SelectionHandler} selectionHandler
	   */
	  function InteractionHandler(body, canvas, selectionHandler) {
	    (0, _classCallCheck3['default'])(this, InteractionHandler);

	    this.body = body;
	    this.canvas = canvas;
	    this.selectionHandler = selectionHandler;
	    this.navigationHandler = new NavigationHandler(body, canvas);

	    // bind the events from hammer to functions in this object
	    this.body.eventListeners.onTap = this.onTap.bind(this);
	    this.body.eventListeners.onTouch = this.onTouch.bind(this);
	    this.body.eventListeners.onDoubleTap = this.onDoubleTap.bind(this);
	    this.body.eventListeners.onHold = this.onHold.bind(this);
	    this.body.eventListeners.onDragStart = this.onDragStart.bind(this);
	    this.body.eventListeners.onDrag = this.onDrag.bind(this);
	    this.body.eventListeners.onDragEnd = this.onDragEnd.bind(this);
	    this.body.eventListeners.onMouseWheel = this.onMouseWheel.bind(this);
	    this.body.eventListeners.onPinch = this.onPinch.bind(this);
	    this.body.eventListeners.onMouseMove = this.onMouseMove.bind(this);
	    this.body.eventListeners.onRelease = this.onRelease.bind(this);
	    this.body.eventListeners.onContext = this.onContext.bind(this);

	    this.touchTime = 0;
	    this.drag = {};
	    this.pinch = {};
	    this.popup = undefined;
	    this.popupObj = undefined;
	    this.popupTimer = undefined;

	    this.body.functions.getPointer = this.getPointer.bind(this);

	    this.options = {};
	    this.defaultOptions = {
	      dragNodes: true,
	      dragView: true,
	      hover: false,
	      keyboard: {
	        enabled: false,
	        speed: { x: 10, y: 10, zoom: 0.02 },
	        bindToWindow: true
	      },
	      navigationButtons: false,
	      tooltipDelay: 300,
	      zoomView: true
	    };
	    util.extend(this.options, this.defaultOptions);

	    this.bindEventListeners();
	  }

	  /**
	   * Binds event listeners
	   */


	  (0, _createClass3['default'])(InteractionHandler, [{
	    key: 'bindEventListeners',
	    value: function bindEventListeners() {
	      var _this = this;

	      this.body.emitter.on('destroy', function () {
	        clearTimeout(_this.popupTimer);
	        delete _this.body.functions.getPointer;
	      });
	    }

	    /**
	     *
	     * @param {Object} options
	     */

	  }, {
	    key: 'setOptions',
	    value: function setOptions(options) {
	      if (options !== undefined) {
	        // extend all but the values in fields
	        var fields = ['hideEdgesOnDrag', 'hideNodesOnDrag', 'keyboard', 'multiselect', 'selectable', 'selectConnectedEdges'];
	        util.selectiveNotDeepExtend(fields, this.options, options);

	        // merge the keyboard options in.
	        util.mergeOptions(this.options, options, 'keyboard');

	        if (options.tooltip) {
	          util.extend(this.options.tooltip, options.tooltip);
	          if (options.tooltip.color) {
	            this.options.tooltip.color = util.parseColor(options.tooltip.color);
	          }
	        }
	      }

	      this.navigationHandler.setOptions(this.options);
	    }

	    /**
	     * Get the pointer location from a touch location
	     * @param {{x: number, y: number}} touch
	     * @return {{x: number, y: number}} pointer
	     * @private
	     */

	  }, {
	    key: 'getPointer',
	    value: function getPointer(touch) {
	      return {
	        x: touch.x - util.getAbsoluteLeft(this.canvas.frame.canvas),
	        y: touch.y - util.getAbsoluteTop(this.canvas.frame.canvas)
	      };
	    }

	    /**
	     * On start of a touch gesture, store the pointer
	     * @param {Event}  event   The event
	     * @private
	     */

	  }, {
	    key: 'onTouch',
	    value: function onTouch(event) {
	      if (new Date().valueOf() - this.touchTime > 50) {
	        this.drag.pointer = this.getPointer(event.center);
	        this.drag.pinched = false;
	        this.pinch.scale = this.body.view.scale;
	        // to avoid double fireing of this event because we have two hammer instances. (on canvas and on frame)
	        this.touchTime = new Date().valueOf();
	      }
	    }

	    /**
	     * handle tap/click event: select/unselect a node
	     * @param {Event} event
	     * @private
	     */

	  }, {
	    key: 'onTap',
	    value: function onTap(event) {
	      var pointer = this.getPointer(event.center);
	      var multiselect = this.selectionHandler.options.multiselect && (event.changedPointers[0].ctrlKey || event.changedPointers[0].metaKey);

	      this.checkSelectionChanges(pointer, event, multiselect);
	      this.selectionHandler._generateClickEvent('click', event, pointer);
	    }

	    /**
	     * handle doubletap event
	     * @param {Event} event
	     * @private
	     */

	  }, {
	    key: 'onDoubleTap',
	    value: function onDoubleTap(event) {
	      var pointer = this.getPointer(event.center);
	      this.selectionHandler._generateClickEvent('doubleClick', event, pointer);
	    }

	    /**
	     * handle long tap event: multi select nodes
	     * @param {Event} event
	     * @private
	     */

	  }, {
	    key: 'onHold',
	    value: function onHold(event) {
	      var pointer = this.getPointer(event.center);
	      var multiselect = this.selectionHandler.options.multiselect;

	      this.checkSelectionChanges(pointer, event, multiselect);

	      this.selectionHandler._generateClickEvent('click', event, pointer);
	      this.selectionHandler._generateClickEvent('hold', event, pointer);
	    }

	    /**
	     * handle the release of the screen
	     *
	     * @param {Event} event
	     * @private
	     */

	  }, {
	    key: 'onRelease',
	    value: function onRelease(event) {
	      if (new Date().valueOf() - this.touchTime > 10) {
	        var pointer = this.getPointer(event.center);
	        this.selectionHandler._generateClickEvent('release', event, pointer);
	        // to avoid double fireing of this event because we have two hammer instances. (on canvas and on frame)
	        this.touchTime = new Date().valueOf();
	      }
	    }

	    /**
	     *
	     * @param {Event} event
	     */

	  }, {
	    key: 'onContext',
	    value: function onContext(event) {
	      var pointer = this.getPointer({ x: event.clientX, y: event.clientY });
	      this.selectionHandler._generateClickEvent('oncontext', event, pointer);
	    }

	    /**
	     * Select and deselect nodes depending current selection change.
	     *
	     * For changing nodes, select/deselect events are fired.
	     *
	     * NOTE: For a given edge, if one connecting node is deselected and with the same
	     *       click the other node is selected, no events for the edge will fire.
	     *       It was selected and it will remain selected.
	     *
	     * TODO: This is all SelectionHandler calls; the method should be moved to there.
	     *
	     * @param {{x: number, y: number}} pointer
	     * @param {Event} event
	     * @param {boolean} [add=false]
	     */

	  }, {
	    key: 'checkSelectionChanges',
	    value: function checkSelectionChanges(pointer, event) {
	      var add = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	      var previousSelection = this.selectionHandler.getSelection();
	      var selected = false;
	      if (add === true) {
	        selected = this.selectionHandler.selectAdditionalOnPoint(pointer);
	      } else {
	        selected = this.selectionHandler.selectOnPoint(pointer);
	      }
	      var currentSelection = this.selectionHandler.getSelection();

	      // See NOTE in method comment for the reason to do it like this
	      var deselectedItems = this._determineDifference(previousSelection, currentSelection);
	      var selectedItems = this._determineDifference(currentSelection, previousSelection);

	      if (deselectedItems.edges.length > 0) {
	        this.selectionHandler._generateClickEvent('deselectEdge', event, pointer, previousSelection);
	        selected = true;
	      }

	      if (deselectedItems.nodes.length > 0) {
	        this.selectionHandler._generateClickEvent('deselectNode', event, pointer, previousSelection);
	        selected = true;
	      }

	      if (selectedItems.nodes.length > 0) {
	        this.selectionHandler._generateClickEvent('selectNode', event, pointer);
	        selected = true;
	      }

	      if (selectedItems.edges.length > 0) {
	        this.selectionHandler._generateClickEvent('selectEdge', event, pointer);
	        selected = true;
	      }

	      // fire the select event if anything has been selected or deselected
	      if (selected === true) {
	        // select or unselect
	        this.selectionHandler._generateClickEvent('select', event, pointer);
	      }
	    }

	    /**
	     * Remove all node and edge id's from the first set that are present in the second one.
	     *
	     * @param {{nodes: Array.<Node>, edges: Array.<vis.Edge>}} firstSet
	     * @param {{nodes: Array.<Node>, edges: Array.<vis.Edge>}} secondSet
	     * @returns {{nodes: Array.<Node>, edges: Array.<vis.Edge>}}
	     * @private
	     */

	  }, {
	    key: '_determineDifference',
	    value: function _determineDifference(firstSet, secondSet) {
	      var arrayDiff = function arrayDiff(firstArr, secondArr) {
	        var result = [];

	        for (var i = 0; i < firstArr.length; i++) {
	          var value = firstArr[i];
	          if (secondArr.indexOf(value) === -1) {
	            result.push(value);
	          }
	        }

	        return result;
	      };

	      return {
	        nodes: arrayDiff(firstSet.nodes, secondSet.nodes),
	        edges: arrayDiff(firstSet.edges, secondSet.edges)
	      };
	    }

	    /**
	     * This function is called by onDragStart.
	     * It is separated out because we can then overload it for the datamanipulation system.
	     *
	     * @param {Event} event
	     * @private
	     */

	  }, {
	    key: 'onDragStart',
	    value: function onDragStart(event) {
	      //in case the touch event was triggered on an external div, do the initial touch now.
	      if (this.drag.pointer === undefined) {
	        this.onTouch(event);
	      }

	      // note: drag.pointer is set in onTouch to get the initial touch location
	      var node = this.selectionHandler.getNodeAt(this.drag.pointer);

	      this.drag.dragging = true;
	      this.drag.selection = [];
	      this.drag.translation = util.extend({}, this.body.view.translation); // copy the object
	      this.drag.nodeId = undefined;

	      if (node !== undefined && this.options.dragNodes === true) {
	        this.drag.nodeId = node.id;
	        // select the clicked node if not yet selected
	        if (node.isSelected() === false) {
	          this.selectionHandler.unselectAll();
	          this.selectionHandler.selectObject(node);
	        }

	        // after select to contain the node
	        this.selectionHandler._generateClickEvent('dragStart', event, this.drag.pointer);

	        var selection = this.selectionHandler.selectionObj.nodes;
	        // create an array with the selected nodes and their original location and status
	        for (var nodeId in selection) {
	          if (selection.hasOwnProperty(nodeId)) {
	            var object = selection[nodeId];
	            var s = {
	              id: object.id,
	              node: object,

	              // store original x, y, xFixed and yFixed, make the node temporarily Fixed
	              x: object.x,
	              y: object.y,
	              xFixed: object.options.fixed.x,
	              yFixed: object.options.fixed.y
	            };

	            object.options.fixed.x = true;
	            object.options.fixed.y = true;

	            this.drag.selection.push(s);
	          }
	        }
	      } else {
	        // fallback if no node is selected and thus the view is dragged.
	        this.selectionHandler._generateClickEvent('dragStart', event, this.drag.pointer, undefined, true);
	      }
	    }

	    /**
	     * handle drag event
	     * @param {Event} event
	     * @private
	     */

	  }, {
	    key: 'onDrag',
	    value: function onDrag(event) {
	      var _this2 = this;

	      if (this.drag.pinched === true) {
	        return;
	      }

	      // remove the focus on node if it is focussed on by the focusOnNode
	      this.body.emitter.emit('unlockNode');

	      var pointer = this.getPointer(event.center);

	      var selection = this.drag.selection;
	      if (selection && selection.length && this.options.dragNodes === true) {
	        this.selectionHandler._generateClickEvent('dragging', event, pointer);

	        // calculate delta's and new location
	        var deltaX = pointer.x - this.drag.pointer.x;
	        var deltaY = pointer.y - this.drag.pointer.y;

	        // update position of all selected nodes
	        selection.forEach(function (selection) {
	          var node = selection.node;
	          // only move the node if it was not fixed initially
	          if (selection.xFixed === false) {
	            node.x = _this2.canvas._XconvertDOMtoCanvas(_this2.canvas._XconvertCanvasToDOM(selection.x) + deltaX);
	          }
	          // only move the node if it was not fixed initially
	          if (selection.yFixed === false) {
	            node.y = _this2.canvas._YconvertDOMtoCanvas(_this2.canvas._YconvertCanvasToDOM(selection.y) + deltaY);
	          }
	        });

	        // start the simulation of the physics
	        this.body.emitter.emit('startSimulation');
	      } else {
	        // move the network
	        if (this.options.dragView === true) {
	          this.selectionHandler._generateClickEvent('dragging', event, pointer, undefined, true);

	          // if the drag was not started properly because the click started outside the network div, start it now.
	          if (this.drag.pointer === undefined) {
	            this.onDragStart(event);
	            return;
	          }
	          var diffX = pointer.x - this.drag.pointer.x;
	          var diffY = pointer.y - this.drag.pointer.y;

	          this.body.view.translation = { x: this.drag.translation.x + diffX, y: this.drag.translation.y + diffY };
	          this.body.emitter.emit('_requestRedraw');
	        }
	      }
	    }

	    /**
	     * handle drag start event
	     * @param {Event} event
	     * @private
	     */

	  }, {
	    key: 'onDragEnd',
	    value: function onDragEnd(event) {
	      this.drag.dragging = false;
	      var selection = this.drag.selection;
	      if (selection && selection.length) {
	        selection.forEach(function (s) {
	          // restore original xFixed and yFixed
	          s.node.options.fixed.x = s.xFixed;
	          s.node.options.fixed.y = s.yFixed;
	        });
	        this.selectionHandler._generateClickEvent('dragEnd', event, this.getPointer(event.center));
	        this.body.emitter.emit('startSimulation');
	      } else {
	        this.selectionHandler._generateClickEvent('dragEnd', event, this.getPointer(event.center), undefined, true);
	        this.body.emitter.emit('_requestRedraw');
	      }
	    }

	    /**
	     * Handle pinch event
	     * @param {Event}  event   The event
	     * @private
	     */

	  }, {
	    key: 'onPinch',
	    value: function onPinch(event) {
	      var pointer = this.getPointer(event.center);

	      this.drag.pinched = true;
	      if (this.pinch['scale'] === undefined) {
	        this.pinch.scale = 1;
	      }

	      // TODO: enabled moving while pinching?
	      var scale = this.pinch.scale * event.scale;
	      this.zoom(scale, pointer);
	    }

	    /**
	     * Zoom the network in or out
	     * @param {number} scale a number around 1, and between 0.01 and 10
	     * @param {{x: number, y: number}} pointer    Position on screen
	     * @private
	     */

	  }, {
	    key: 'zoom',
	    value: function zoom(scale, pointer) {
	      if (this.options.zoomView === true) {
	        var scaleOld = this.body.view.scale;
	        if (scale < 0.00001) {
	          scale = 0.00001;
	        }
	        if (scale > 10) {
	          scale = 10;
	        }

	        var preScaleDragPointer = undefined;
	        if (this.drag !== undefined) {
	          if (this.drag.dragging === true) {
	            preScaleDragPointer = this.canvas.DOMtoCanvas(this.drag.pointer);
	          }
	        }
	        // + this.canvas.frame.canvas.clientHeight / 2
	        var translation = this.body.view.translation;

	        var scaleFrac = scale / scaleOld;
	        var tx = (1 - scaleFrac) * pointer.x + translation.x * scaleFrac;
	        var ty = (1 - scaleFrac) * pointer.y + translation.y * scaleFrac;

	        this.body.view.scale = scale;
	        this.body.view.translation = { x: tx, y: ty };

	        if (preScaleDragPointer != undefined) {
	          var postScaleDragPointer = this.canvas.canvasToDOM(preScaleDragPointer);
	          this.drag.pointer.x = postScaleDragPointer.x;
	          this.drag.pointer.y = postScaleDragPointer.y;
	        }

	        this.body.emitter.emit('_requestRedraw');

	        if (scaleOld < scale) {
	          this.body.emitter.emit('zoom', { direction: '+', scale: this.body.view.scale, pointer: pointer });
	        } else {
	          this.body.emitter.emit('zoom', { direction: '-', scale: this.body.view.scale, pointer: pointer });
	        }
	      }
	    }

	    /**
	     * Event handler for mouse wheel event, used to zoom the timeline
	     * See http://adomas.org/javascript-mouse-wheel/
	     *     https://github.com/EightMedia/hammer.js/issues/256
	     * @param {MouseEvent}  event
	     * @private
	     */

	  }, {
	    key: 'onMouseWheel',
	    value: function onMouseWheel(event) {
	      if (this.options.zoomView === true) {
	        // retrieve delta
	        var delta = 0;
	        if (event.wheelDelta) {
	          /* IE/Opera. */
	          delta = event.wheelDelta / 120;
	        } else if (event.detail) {
	          /* Mozilla case. */
	          // In Mozilla, sign of delta is different than in IE.
	          // Also, delta is multiple of 3.
	          delta = -event.detail / 3;
	        }

	        // If delta is nonzero, handle it.
	        // Basically, delta is now positive if wheel was scrolled up,
	        // and negative, if wheel was scrolled down.
	        if (delta !== 0) {

	          // calculate the new scale
	          var scale = this.body.view.scale;
	          var zoom = delta / 10;
	          if (delta < 0) {
	            zoom = zoom / (1 - zoom);
	          }
	          scale *= 1 + zoom;

	          // calculate the pointer location
	          var pointer = this.getPointer({ x: event.clientX, y: event.clientY });

	          // apply the new scale
	          this.zoom(scale, pointer);
	        }

	        // Prevent default actions caused by mouse wheel.
	        event.preventDefault();
	      }
	    }

	    /**
	     * Mouse move handler for checking whether the title moves over a node with a title.
	     * @param  {Event} event
	     * @private
	     */

	  }, {
	    key: 'onMouseMove',
	    value: function onMouseMove(event) {
	      var _this3 = this;

	      var pointer = this.getPointer({ x: event.clientX, y: event.clientY });
	      var popupVisible = false;

	      // check if the previously selected node is still selected
	      if (this.popup !== undefined) {
	        if (this.popup.hidden === false) {
	          this._checkHidePopup(pointer);
	        }

	        // if the popup was not hidden above
	        if (this.popup.hidden === false) {
	          popupVisible = true;
	          this.popup.setPosition(pointer.x + 3, pointer.y - 5);
	          this.popup.show();
	        }
	      }

	      // if we bind the keyboard to the div, we have to highlight it to use it. This highlights it on mouse over.
	      if (this.options.keyboard.bindToWindow === false && this.options.keyboard.enabled === true) {
	        this.canvas.frame.focus();
	      }

	      // start a timeout that will check if the mouse is positioned above an element
	      if (popupVisible === false) {
	        if (this.popupTimer !== undefined) {
	          clearInterval(this.popupTimer); // stop any running calculationTimer
	          this.popupTimer = undefined;
	        }
	        if (!this.drag.dragging) {
	          this.popupTimer = setTimeout(function () {
	            return _this3._checkShowPopup(pointer);
	          }, this.options.tooltipDelay);
	        }
	      }

	      // adding hover highlights
	      if (this.options.hover === true) {
	        this.selectionHandler.hoverObject(event, pointer);
	      }
	    }

	    /**
	     * Check if there is an element on the given position in the network
	     * (a node or edge). If so, and if this element has a title,
	     * show a popup window with its title.
	     *
	     * @param {{x:number, y:number}} pointer
	     * @private
	     */

	  }, {
	    key: '_checkShowPopup',
	    value: function _checkShowPopup(pointer) {
	      var x = this.canvas._XconvertDOMtoCanvas(pointer.x);
	      var y = this.canvas._YconvertDOMtoCanvas(pointer.y);
	      var pointerObj = {
	        left: x,
	        top: y,
	        right: x,
	        bottom: y
	      };

	      var previousPopupObjId = this.popupObj === undefined ? undefined : this.popupObj.id;
	      var nodeUnderCursor = false;
	      var popupType = 'node';

	      // check if a node is under the cursor.
	      if (this.popupObj === undefined) {
	        // search the nodes for overlap, select the top one in case of multiple nodes
	        var nodeIndices = this.body.nodeIndices;
	        var nodes = this.body.nodes;
	        var node = void 0;
	        var overlappingNodes = [];
	        for (var i = 0; i < nodeIndices.length; i++) {
	          node = nodes[nodeIndices[i]];
	          if (node.isOverlappingWith(pointerObj) === true) {
	            if (node.getTitle() !== undefined) {
	              overlappingNodes.push(nodeIndices[i]);
	            }
	          }
	        }

	        if (overlappingNodes.length > 0) {
	          // if there are overlapping nodes, select the last one, this is the one which is drawn on top of the others
	          this.popupObj = nodes[overlappingNodes[overlappingNodes.length - 1]];
	          // if you hover over a node, the title of the edge is not supposed to be shown.
	          nodeUnderCursor = true;
	        }
	      }

	      if (this.popupObj === undefined && nodeUnderCursor === false) {
	        // search the edges for overlap
	        var edgeIndices = this.body.edgeIndices;
	        var edges = this.body.edges;
	        var edge = void 0;
	        var overlappingEdges = [];
	        for (var _i = 0; _i < edgeIndices.length; _i++) {
	          edge = edges[edgeIndices[_i]];
	          if (edge.isOverlappingWith(pointerObj) === true) {
	            if (edge.connected === true && edge.getTitle() !== undefined) {
	              overlappingEdges.push(edgeIndices[_i]);
	            }
	          }
	        }

	        if (overlappingEdges.length > 0) {
	          this.popupObj = edges[overlappingEdges[overlappingEdges.length - 1]];
	          popupType = 'edge';
	        }
	      }

	      if (this.popupObj !== undefined) {
	        // show popup message window
	        if (this.popupObj.id !== previousPopupObjId) {
	          if (this.popup === undefined) {
	            this.popup = new Popup(this.canvas.frame);
	          }

	          this.popup.popupTargetType = popupType;
	          this.popup.popupTargetId = this.popupObj.id;

	          // adjust a small offset such that the mouse cursor is located in the
	          // bottom left location of the popup, and you can easily move over the
	          // popup area
	          this.popup.setPosition(pointer.x + 3, pointer.y - 5);
	          this.popup.setText(this.popupObj.getTitle());
	          this.popup.show();
	          this.body.emitter.emit('showPopup', this.popupObj.id);
	        }
	      } else {
	        if (this.popup !== undefined) {
	          this.popup.hide();
	          this.body.emitter.emit('hidePopup');
	        }
	      }
	    }

	    /**
	     * Check if the popup must be hidden, which is the case when the mouse is no
	     * longer hovering on the object
	     * @param {{x:number, y:number}} pointer
	     * @private
	     */

	  }, {
	    key: '_checkHidePopup',
	    value: function _checkHidePopup(pointer) {
	      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);

	      var stillOnObj = false;
	      if (this.popup.popupTargetType === 'node') {
	        if (this.body.nodes[this.popup.popupTargetId] !== undefined) {
	          stillOnObj = this.body.nodes[this.popup.popupTargetId].isOverlappingWith(pointerObj);

	          // if the mouse is still one the node, we have to check if it is not also on one that is drawn on top of it.
	          // we initially only check stillOnObj because this is much faster.
	          if (stillOnObj === true) {
	            var overNode = this.selectionHandler.getNodeAt(pointer);
	            stillOnObj = overNode === undefined ? false : overNode.id === this.popup.popupTargetId;
	          }
	        }
	      } else {
	        if (this.selectionHandler.getNodeAt(pointer) === undefined) {
	          if (this.body.edges[this.popup.popupTargetId] !== undefined) {
	            stillOnObj = this.body.edges[this.popup.popupTargetId].isOverlappingWith(pointerObj);
	          }
	        }
	      }

	      if (stillOnObj === false) {
	        this.popupObj = undefined;
	        this.popup.hide();
	        this.body.emitter.emit('hidePopup');
	      }
	    }
	  }]);
	  return InteractionHandler;
	}();

	exports['default'] = InteractionHandler;

	/***/ }),
	/* 233 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var Hammer = __webpack_require__(10);
	var hammerUtil = __webpack_require__(37);
	var keycharm = __webpack_require__(35);

	/**
	 * Navigation Handler
	 */

	var NavigationHandler = function () {
	  /**
	   * @param {Object} body
	   * @param {Canvas} canvas
	   */
	  function NavigationHandler(body, canvas) {
	    var _this = this;

	    (0, _classCallCheck3['default'])(this, NavigationHandler);

	    this.body = body;
	    this.canvas = canvas;

	    this.iconsCreated = false;
	    this.navigationHammers = [];
	    this.boundFunctions = {};
	    this.touchTime = 0;
	    this.activated = false;

	    this.body.emitter.on("activate", function () {
	      _this.activated = true;_this.configureKeyboardBindings();
	    });
	    this.body.emitter.on("deactivate", function () {
	      _this.activated = false;_this.configureKeyboardBindings();
	    });
	    this.body.emitter.on("destroy", function () {
	      if (_this.keycharm !== undefined) {
	        _this.keycharm.destroy();
	      }
	    });

	    this.options = {};
	  }

	  /**
	   *
	   * @param {Object} options
	   */


	  (0, _createClass3['default'])(NavigationHandler, [{
	    key: 'setOptions',
	    value: function setOptions(options) {
	      if (options !== undefined) {
	        this.options = options;
	        this.create();
	      }
	    }

	    /**
	     * Creates or refreshes navigation and sets key bindings
	     */

	  }, {
	    key: 'create',
	    value: function create() {
	      if (this.options.navigationButtons === true) {
	        if (this.iconsCreated === false) {
	          this.loadNavigationElements();
	        }
	      } else if (this.iconsCreated === true) {
	        this.cleanNavigation();
	      }

	      this.configureKeyboardBindings();
	    }

	    /**
	     * Cleans up previous navigation items
	     */

	  }, {
	    key: 'cleanNavigation',
	    value: function cleanNavigation() {
	      // clean hammer bindings
	      if (this.navigationHammers.length != 0) {
	        for (var i = 0; i < this.navigationHammers.length; i++) {
	          this.navigationHammers[i].destroy();
	        }
	        this.navigationHammers = [];
	      }

	      // clean up previous navigation items
	      if (this.navigationDOM && this.navigationDOM['wrapper'] && this.navigationDOM['wrapper'].parentNode) {
	        this.navigationDOM['wrapper'].parentNode.removeChild(this.navigationDOM['wrapper']);
	      }

	      this.iconsCreated = false;
	    }

	    /**
	     * Creation of the navigation controls nodes. They are drawn over the rest of the nodes and are not affected by scale and translation
	     * they have a triggerFunction which is called on click. If the position of the navigation controls is dependent
	     * on this.frame.canvas.clientWidth or this.frame.canvas.clientHeight, we flag horizontalAlignLeft and verticalAlignTop false.
	     * This means that the location will be corrected by the _relocateNavigation function on a size change of the canvas.
	     *
	     * @private
	     */

	  }, {
	    key: 'loadNavigationElements',
	    value: function loadNavigationElements() {
	      var _this2 = this;

	      this.cleanNavigation();

	      this.navigationDOM = {};
	      var navigationDivs = ['up', 'down', 'left', 'right', 'zoomIn', 'zoomOut', 'zoomExtends'];
	      var navigationDivActions = ['_moveUp', '_moveDown', '_moveLeft', '_moveRight', '_zoomIn', '_zoomOut', '_fit'];

	      this.navigationDOM['wrapper'] = document.createElement('div');
	      this.navigationDOM['wrapper'].className = 'vis-navigation';
	      this.canvas.frame.appendChild(this.navigationDOM['wrapper']);

	      for (var i = 0; i < navigationDivs.length; i++) {
	        this.navigationDOM[navigationDivs[i]] = document.createElement('div');
	        this.navigationDOM[navigationDivs[i]].className = 'vis-button vis-' + navigationDivs[i];
	        this.navigationDOM['wrapper'].appendChild(this.navigationDOM[navigationDivs[i]]);

	        var hammer = new Hammer(this.navigationDOM[navigationDivs[i]]);
	        if (navigationDivActions[i] === "_fit") {
	          hammerUtil.onTouch(hammer, this._fit.bind(this));
	        } else {
	          hammerUtil.onTouch(hammer, this.bindToRedraw.bind(this, navigationDivActions[i]));
	        }

	        this.navigationHammers.push(hammer);
	      }

	      // use a hammer for the release so we do not require the one used in the rest of the network
	      // the one the rest uses can be overloaded by the manipulation system.
	      var hammerFrame = new Hammer(this.canvas.frame);
	      hammerUtil.onRelease(hammerFrame, function () {
	        _this2._stopMovement();
	      });
	      this.navigationHammers.push(hammerFrame);

	      this.iconsCreated = true;
	    }

	    /**
	     *
	     * @param {string} action
	     */

	  }, {
	    key: 'bindToRedraw',
	    value: function bindToRedraw(action) {
	      if (this.boundFunctions[action] === undefined) {
	        this.boundFunctions[action] = this[action].bind(this);
	        this.body.emitter.on("initRedraw", this.boundFunctions[action]);
	        this.body.emitter.emit("_startRendering");
	      }
	    }

	    /**
	     *
	     * @param {string} action
	     */

	  }, {
	    key: 'unbindFromRedraw',
	    value: function unbindFromRedraw(action) {
	      if (this.boundFunctions[action] !== undefined) {
	        this.body.emitter.off("initRedraw", this.boundFunctions[action]);
	        this.body.emitter.emit("_stopRendering");
	        delete this.boundFunctions[action];
	      }
	    }

	    /**
	     * this stops all movement induced by the navigation buttons
	     *
	     * @private
	     */

	  }, {
	    key: '_fit',
	    value: function _fit() {
	      if (new Date().valueOf() - this.touchTime > 700) {
	        // TODO: fix ugly hack to avoid hammer's double fireing of event (because we use release?)
	        this.body.emitter.emit("fit", { duration: 700 });
	        this.touchTime = new Date().valueOf();
	      }
	    }

	    /**
	     * this stops all movement induced by the navigation buttons
	     *
	     * @private
	     */

	  }, {
	    key: '_stopMovement',
	    value: function _stopMovement() {
	      for (var boundAction in this.boundFunctions) {
	        if (this.boundFunctions.hasOwnProperty(boundAction)) {
	          this.body.emitter.off("initRedraw", this.boundFunctions[boundAction]);
	          this.body.emitter.emit("_stopRendering");
	        }
	      }
	      this.boundFunctions = {};
	    }
	    /**
	     *
	     * @private
	     */

	  }, {
	    key: '_moveUp',
	    value: function _moveUp() {
	      this.body.view.translation.y += this.options.keyboard.speed.y;
	    }
	    /**
	     *
	     * @private
	     */

	  }, {
	    key: '_moveDown',
	    value: function _moveDown() {
	      this.body.view.translation.y -= this.options.keyboard.speed.y;
	    }
	    /**
	     *
	     * @private
	     */

	  }, {
	    key: '_moveLeft',
	    value: function _moveLeft() {
	      this.body.view.translation.x += this.options.keyboard.speed.x;
	    }
	    /**
	     *
	     * @private
	     */

	  }, {
	    key: '_moveRight',
	    value: function _moveRight() {
	      this.body.view.translation.x -= this.options.keyboard.speed.x;
	    }
	    /**
	     *
	     * @private
	     */

	  }, {
	    key: '_zoomIn',
	    value: function _zoomIn() {
	      var scaleOld = this.body.view.scale;
	      var scale = this.body.view.scale * (1 + this.options.keyboard.speed.zoom);
	      var translation = this.body.view.translation;
	      var scaleFrac = scale / scaleOld;
	      var tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;
	      var ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;

	      this.body.view.scale = scale;
	      this.body.view.translation = { x: tx, y: ty };
	      this.body.emitter.emit('zoom', { direction: '+', scale: this.body.view.scale, pointer: null });
	    }

	    /**
	     *
	     * @private
	     */

	  }, {
	    key: '_zoomOut',
	    value: function _zoomOut() {
	      var scaleOld = this.body.view.scale;
	      var scale = this.body.view.scale / (1 + this.options.keyboard.speed.zoom);
	      var translation = this.body.view.translation;
	      var scaleFrac = scale / scaleOld;
	      var tx = (1 - scaleFrac) * this.canvas.canvasViewCenter.x + translation.x * scaleFrac;
	      var ty = (1 - scaleFrac) * this.canvas.canvasViewCenter.y + translation.y * scaleFrac;

	      this.body.view.scale = scale;
	      this.body.view.translation = { x: tx, y: ty };
	      this.body.emitter.emit('zoom', { direction: '-', scale: this.body.view.scale, pointer: null });
	    }

	    /**
	     * bind all keys using keycharm.
	     */

	  }, {
	    key: 'configureKeyboardBindings',
	    value: function configureKeyboardBindings() {
	      var _this3 = this;

	      if (this.keycharm !== undefined) {
	        this.keycharm.destroy();
	      }

	      if (this.options.keyboard.enabled === true) {
	        if (this.options.keyboard.bindToWindow === true) {
	          this.keycharm = keycharm({ container: window, preventDefault: true });
	        } else {
	          this.keycharm = keycharm({ container: this.canvas.frame, preventDefault: true });
	        }

	        this.keycharm.reset();

	        if (this.activated === true) {
	          this.keycharm.bind("up", function () {
	            _this3.bindToRedraw("_moveUp");
	          }, "keydown");
	          this.keycharm.bind("down", function () {
	            _this3.bindToRedraw("_moveDown");
	          }, "keydown");
	          this.keycharm.bind("left", function () {
	            _this3.bindToRedraw("_moveLeft");
	          }, "keydown");
	          this.keycharm.bind("right", function () {
	            _this3.bindToRedraw("_moveRight");
	          }, "keydown");
	          this.keycharm.bind("=", function () {
	            _this3.bindToRedraw("_zoomIn");
	          }, "keydown");
	          this.keycharm.bind("num+", function () {
	            _this3.bindToRedraw("_zoomIn");
	          }, "keydown");
	          this.keycharm.bind("num-", function () {
	            _this3.bindToRedraw("_zoomOut");
	          }, "keydown");
	          this.keycharm.bind("-", function () {
	            _this3.bindToRedraw("_zoomOut");
	          }, "keydown");
	          this.keycharm.bind("[", function () {
	            _this3.bindToRedraw("_zoomOut");
	          }, "keydown");
	          this.keycharm.bind("]", function () {
	            _this3.bindToRedraw("_zoomIn");
	          }, "keydown");
	          this.keycharm.bind("pageup", function () {
	            _this3.bindToRedraw("_zoomIn");
	          }, "keydown");
	          this.keycharm.bind("pagedown", function () {
	            _this3.bindToRedraw("_zoomOut");
	          }, "keydown");

	          this.keycharm.bind("up", function () {
	            _this3.unbindFromRedraw("_moveUp");
	          }, "keyup");
	          this.keycharm.bind("down", function () {
	            _this3.unbindFromRedraw("_moveDown");
	          }, "keyup");
	          this.keycharm.bind("left", function () {
	            _this3.unbindFromRedraw("_moveLeft");
	          }, "keyup");
	          this.keycharm.bind("right", function () {
	            _this3.unbindFromRedraw("_moveRight");
	          }, "keyup");
	          this.keycharm.bind("=", function () {
	            _this3.unbindFromRedraw("_zoomIn");
	          }, "keyup");
	          this.keycharm.bind("num+", function () {
	            _this3.unbindFromRedraw("_zoomIn");
	          }, "keyup");
	          this.keycharm.bind("num-", function () {
	            _this3.unbindFromRedraw("_zoomOut");
	          }, "keyup");
	          this.keycharm.bind("-", function () {
	            _this3.unbindFromRedraw("_zoomOut");
	          }, "keyup");
	          this.keycharm.bind("[", function () {
	            _this3.unbindFromRedraw("_zoomOut");
	          }, "keyup");
	          this.keycharm.bind("]", function () {
	            _this3.unbindFromRedraw("_zoomIn");
	          }, "keyup");
	          this.keycharm.bind("pageup", function () {
	            _this3.unbindFromRedraw("_zoomIn");
	          }, "keyup");
	          this.keycharm.bind("pagedown", function () {
	            _this3.unbindFromRedraw("_zoomOut");
	          }, "keyup");
	        }
	      }
	    }
	  }]);
	  return NavigationHandler;
	}();

	exports['default'] = NavigationHandler;

	/***/ }),
	/* 234 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var Node = __webpack_require__(47)['default'];
	var Edge = __webpack_require__(74)['default'];

	var util = __webpack_require__(2);

	/**
	 * The handler for selections
	 */

	var SelectionHandler = function () {
	  /**
	   * @param {Object} body
	   * @param {Canvas} canvas
	   */
	  function SelectionHandler(body, canvas) {
	    var _this = this;

	    (0, _classCallCheck3['default'])(this, SelectionHandler);

	    this.body = body;
	    this.canvas = canvas;
	    this.selectionObj = { nodes: [], edges: [] };
	    this.hoverObj = { nodes: {}, edges: {} };

	    this.options = {};
	    this.defaultOptions = {
	      multiselect: false,
	      selectable: true,
	      selectConnectedEdges: true,
	      hoverConnectedEdges: true
	    };
	    util.extend(this.options, this.defaultOptions);

	    this.body.emitter.on("_dataChanged", function () {
	      _this.updateSelection();
	    });
	  }

	  /**
	   *
	   * @param {Object} [options]
	   */


	  (0, _createClass3['default'])(SelectionHandler, [{
	    key: 'setOptions',
	    value: function setOptions(options) {
	      if (options !== undefined) {
	        var fields = ['multiselect', 'hoverConnectedEdges', 'selectable', 'selectConnectedEdges'];
	        util.selectiveDeepExtend(fields, this.options, options);
	      }
	    }

	    /**
	     * handles the selection part of the tap;
	     *
	     * @param {{x: number, y: number}} pointer
	     * @returns {boolean}
	     */

	  }, {
	    key: 'selectOnPoint',
	    value: function selectOnPoint(pointer) {
	      var selected = false;
	      if (this.options.selectable === true) {
	        var obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);

	        // unselect after getting the objects in order to restore width and height.
	        this.unselectAll();

	        if (obj !== undefined) {
	          selected = this.selectObject(obj);
	        }
	        this.body.emitter.emit("_requestRedraw");
	      }
	      return selected;
	    }

	    /**
	     *
	     * @param {{x: number, y: number}} pointer
	     * @returns {boolean}
	     */

	  }, {
	    key: 'selectAdditionalOnPoint',
	    value: function selectAdditionalOnPoint(pointer) {
	      var selectionChanged = false;
	      if (this.options.selectable === true) {
	        var obj = this.getNodeAt(pointer) || this.getEdgeAt(pointer);

	        if (obj !== undefined) {
	          selectionChanged = true;
	          if (obj.isSelected() === true) {
	            this.deselectObject(obj);
	          } else {
	            this.selectObject(obj);
	          }

	          this.body.emitter.emit("_requestRedraw");
	        }
	      }
	      return selectionChanged;
	    }

	    /**
	     * Create an object containing the standard fields for an event.
	     *
	     * @param {Event} event
	     * @param {{x: number, y: number}} pointer Object with the x and y screen coordinates of the mouse
	     * @returns {{}}
	     * @private
	     */

	  }, {
	    key: '_initBaseEvent',
	    value: function _initBaseEvent(event, pointer) {
	      var properties = {};

	      properties['pointer'] = {
	        DOM: { x: pointer.x, y: pointer.y },
	        canvas: this.canvas.DOMtoCanvas(pointer)
	      };
	      properties['event'] = event;

	      return properties;
	    }

	    /**
	     * Generate an event which the user can catch.
	     *
	     * This adds some extra data to the event with respect to cursor position and
	     * selected nodes and edges.
	     *
	     * @param {string} eventType                          Name of event to send
	     * @param {Event}  event
	     * @param {{x: number, y: number}} pointer            Object with the x and y screen coordinates of the mouse
	     * @param {Object|undefined} oldSelection             If present, selection state before event occured
	     * @param {boolean|undefined} [emptySelection=false]  Indicate if selection data should be passed
	     */

	  }, {
	    key: '_generateClickEvent',
	    value: function _generateClickEvent(eventType, event, pointer, oldSelection) {
	      var emptySelection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

	      var properties = this._initBaseEvent(event, pointer);

	      if (emptySelection === true) {
	        properties.nodes = [];
	        properties.edges = [];
	      } else {
	        var tmp = this.getSelection();
	        properties.nodes = tmp.nodes;
	        properties.edges = tmp.edges;
	      }

	      if (oldSelection !== undefined) {
	        properties['previousSelection'] = oldSelection;
	      }

	      if (eventType == 'click') {
	        // For the time being, restrict this functionality to
	        // just the click event.
	        properties.items = this.getClickedItems(pointer);
	      }

	      this.body.emitter.emit(eventType, properties);
	    }

	    /**
	     *
	     * @param {Object} obj
	     * @param {boolean} [highlightEdges=this.options.selectConnectedEdges]
	     * @returns {boolean}
	     */

	  }, {
	    key: 'selectObject',
	    value: function selectObject(obj) {
	      var highlightEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.options.selectConnectedEdges;

	      if (obj !== undefined) {
	        if (obj instanceof Node) {
	          if (highlightEdges === true) {
	            this._selectConnectedEdges(obj);
	          }
	        }
	        obj.select();
	        this._addToSelection(obj);
	        return true;
	      }
	      return false;
	    }

	    /**
	     *
	     * @param {Object} obj
	     */

	  }, {
	    key: 'deselectObject',
	    value: function deselectObject(obj) {
	      if (obj.isSelected() === true) {
	        obj.selected = false;
	        this._removeFromSelection(obj);
	      }
	    }

	    /**
	     * retrieve all nodes overlapping with given object
	     * @param {Object} object  An object with parameters left, top, right, bottom
	     * @return {number[]}   An array with id's of the overlapping nodes
	     * @private
	     */

	  }, {
	    key: '_getAllNodesOverlappingWith',
	    value: function _getAllNodesOverlappingWith(object) {
	      var overlappingNodes = [];
	      var nodes = this.body.nodes;
	      for (var i = 0; i < this.body.nodeIndices.length; i++) {
	        var nodeId = this.body.nodeIndices[i];
	        if (nodes[nodeId].isOverlappingWith(object)) {
	          overlappingNodes.push(nodeId);
	        }
	      }
	      return overlappingNodes;
	    }

	    /**
	     * Return a position object in canvasspace from a single point in screenspace
	     *
	     * @param {{x: number, y: number}} pointer
	     * @returns {{left: number, top: number, right: number, bottom: number}}
	     * @private
	     */

	  }, {
	    key: '_pointerToPositionObject',
	    value: function _pointerToPositionObject(pointer) {
	      var canvasPos = this.canvas.DOMtoCanvas(pointer);
	      return {
	        left: canvasPos.x - 1,
	        top: canvasPos.y + 1,
	        right: canvasPos.x + 1,
	        bottom: canvasPos.y - 1
	      };
	    }

	    /**
	     * Get the top node at the passed point (like a click)
	     *
	     * @param {{x: number, y: number}} pointer
	     * @param {boolean} [returnNode=true]
	     * @return {Node | undefined} node
	     */

	  }, {
	    key: 'getNodeAt',
	    value: function getNodeAt(pointer) {
	      var returnNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	      // we first check if this is an navigation controls element
	      var positionObject = this._pointerToPositionObject(pointer);
	      var overlappingNodes = this._getAllNodesOverlappingWith(positionObject);
	      // if there are overlapping nodes, select the last one, this is the
	      // one which is drawn on top of the others
	      if (overlappingNodes.length > 0) {
	        if (returnNode === true) {
	          return this.body.nodes[overlappingNodes[overlappingNodes.length - 1]];
	        } else {
	          return overlappingNodes[overlappingNodes.length - 1];
	        }
	      } else {
	        return undefined;
	      }
	    }

	    /**
	     * retrieve all edges overlapping with given object, selector is around center
	     * @param {Object} object  An object with parameters left, top, right, bottom
	     * @param {number[]} overlappingEdges An array with id's of the overlapping nodes
	     * @private
	     */

	  }, {
	    key: '_getEdgesOverlappingWith',
	    value: function _getEdgesOverlappingWith(object, overlappingEdges) {
	      var edges = this.body.edges;
	      for (var i = 0; i < this.body.edgeIndices.length; i++) {
	        var edgeId = this.body.edgeIndices[i];
	        if (edges[edgeId].isOverlappingWith(object)) {
	          overlappingEdges.push(edgeId);
	        }
	      }
	    }

	    /**
	     * retrieve all nodes overlapping with given object
	     * @param {Object} object  An object with parameters left, top, right, bottom
	     * @return {number[]}   An array with id's of the overlapping nodes
	     * @private
	     */

	  }, {
	    key: '_getAllEdgesOverlappingWith',
	    value: function _getAllEdgesOverlappingWith(object) {
	      var overlappingEdges = [];
	      this._getEdgesOverlappingWith(object, overlappingEdges);
	      return overlappingEdges;
	    }

	    /**
	     * Get the edges nearest to the passed point (like a click)
	     *
	     * @param {{x: number, y: number}} pointer
	     * @param {boolean} [returnEdge=true]
	     * @return {Edge | undefined} node
	     */

	  }, {
	    key: 'getEdgeAt',
	    value: function getEdgeAt(pointer) {
	      var returnEdge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	      // Iterate over edges, pick closest within 10
	      var canvasPos = this.canvas.DOMtoCanvas(pointer);
	      var mindist = 10;
	      var overlappingEdge = null;
	      var edges = this.body.edges;
	      for (var i = 0; i < this.body.edgeIndices.length; i++) {
	        var edgeId = this.body.edgeIndices[i];
	        var edge = edges[edgeId];
	        if (edge.connected) {
	          var xFrom = edge.from.x;
	          var yFrom = edge.from.y;
	          var xTo = edge.to.x;
	          var yTo = edge.to.y;
	          var dist = edge.edgeType.getDistanceToEdge(xFrom, yFrom, xTo, yTo, canvasPos.x, canvasPos.y);
	          if (dist < mindist) {
	            overlappingEdge = edgeId;
	            mindist = dist;
	          }
	        }
	      }
	      if (overlappingEdge !== null) {
	        if (returnEdge === true) {
	          return this.body.edges[overlappingEdge];
	        } else {
	          return overlappingEdge;
	        }
	      } else {
	        return undefined;
	      }
	    }

	    /**
	     * Add object to the selection array.
	     *
	     * @param {Object} obj
	     * @private
	     */

	  }, {
	    key: '_addToSelection',
	    value: function _addToSelection(obj) {
	      if (obj instanceof Node) {
	        this.selectionObj.nodes[obj.id] = obj;
	      } else {
	        this.selectionObj.edges[obj.id] = obj;
	      }
	    }

	    /**
	     * Add object to the selection array.
	     *
	     * @param {Object} obj
	     * @private
	     */

	  }, {
	    key: '_addToHover',
	    value: function _addToHover(obj) {
	      if (obj instanceof Node) {
	        this.hoverObj.nodes[obj.id] = obj;
	      } else {
	        this.hoverObj.edges[obj.id] = obj;
	      }
	    }

	    /**
	     * Remove a single option from selection.
	     *
	     * @param {Object} obj
	     * @private
	     */

	  }, {
	    key: '_removeFromSelection',
	    value: function _removeFromSelection(obj) {
	      if (obj instanceof Node) {
	        delete this.selectionObj.nodes[obj.id];
	        this._unselectConnectedEdges(obj);
	      } else {
	        delete this.selectionObj.edges[obj.id];
	      }
	    }

	    /**
	     * Unselect all. The selectionObj is useful for this.
	     */

	  }, {
	    key: 'unselectAll',
	    value: function unselectAll() {
	      for (var nodeId in this.selectionObj.nodes) {
	        if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
	          this.selectionObj.nodes[nodeId].unselect();
	        }
	      }
	      for (var edgeId in this.selectionObj.edges) {
	        if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
	          this.selectionObj.edges[edgeId].unselect();
	        }
	      }

	      this.selectionObj = { nodes: {}, edges: {} };
	    }

	    /**
	     * return the number of selected nodes
	     *
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_getSelectedNodeCount',
	    value: function _getSelectedNodeCount() {
	      var count = 0;
	      for (var nodeId in this.selectionObj.nodes) {
	        if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
	          count += 1;
	        }
	      }
	      return count;
	    }

	    /**
	     * return the selected node
	     *
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_getSelectedNode',
	    value: function _getSelectedNode() {
	      for (var nodeId in this.selectionObj.nodes) {
	        if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
	          return this.selectionObj.nodes[nodeId];
	        }
	      }
	      return undefined;
	    }

	    /**
	     * return the selected edge
	     *
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_getSelectedEdge',
	    value: function _getSelectedEdge() {
	      for (var edgeId in this.selectionObj.edges) {
	        if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
	          return this.selectionObj.edges[edgeId];
	        }
	      }
	      return undefined;
	    }

	    /**
	     * return the number of selected edges
	     *
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_getSelectedEdgeCount',
	    value: function _getSelectedEdgeCount() {
	      var count = 0;
	      for (var edgeId in this.selectionObj.edges) {
	        if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
	          count += 1;
	        }
	      }
	      return count;
	    }

	    /**
	     * return the number of selected objects.
	     *
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_getSelectedObjectCount',
	    value: function _getSelectedObjectCount() {
	      var count = 0;
	      for (var nodeId in this.selectionObj.nodes) {
	        if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
	          count += 1;
	        }
	      }
	      for (var edgeId in this.selectionObj.edges) {
	        if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
	          count += 1;
	        }
	      }
	      return count;
	    }

	    /**
	     * Check if anything is selected
	     *
	     * @returns {boolean}
	     * @private
	     */

	  }, {
	    key: '_selectionIsEmpty',
	    value: function _selectionIsEmpty() {
	      for (var nodeId in this.selectionObj.nodes) {
	        if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
	          return false;
	        }
	      }
	      for (var edgeId in this.selectionObj.edges) {
	        if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * check if one of the selected nodes is a cluster.
	     *
	     * @returns {boolean}
	     * @private
	     */

	  }, {
	    key: '_clusterInSelection',
	    value: function _clusterInSelection() {
	      for (var nodeId in this.selectionObj.nodes) {
	        if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
	          if (this.selectionObj.nodes[nodeId].clusterSize > 1) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }

	    /**
	     * select the edges connected to the node that is being selected
	     *
	     * @param {Node} node
	     * @private
	     */

	  }, {
	    key: '_selectConnectedEdges',
	    value: function _selectConnectedEdges(node) {
	      for (var i = 0; i < node.edges.length; i++) {
	        var edge = node.edges[i];
	        edge.select();
	        this._addToSelection(edge);
	      }
	    }

	    /**
	     * select the edges connected to the node that is being selected
	     *
	     * @param {Node} node
	     * @private
	     */

	  }, {
	    key: '_hoverConnectedEdges',
	    value: function _hoverConnectedEdges(node) {
	      for (var i = 0; i < node.edges.length; i++) {
	        var edge = node.edges[i];
	        edge.hover = true;
	        this._addToHover(edge);
	      }
	    }

	    /**
	     * unselect the edges connected to the node that is being selected
	     *
	     * @param {Node} node
	     * @private
	     */

	  }, {
	    key: '_unselectConnectedEdges',
	    value: function _unselectConnectedEdges(node) {
	      for (var i = 0; i < node.edges.length; i++) {
	        var edge = node.edges[i];
	        edge.unselect();
	        this._removeFromSelection(edge);
	      }
	    }

	    /**
	     * Remove the highlight from a node or edge, in response to mouse movement
	     *
	     * @param {Event}  event
	     * @param {{x: number, y: number}} pointer object with the x and y screen coordinates of the mouse
	     * @param {Node|vis.Edge} object
	     * @private
	     */

	  }, {
	    key: 'emitBlurEvent',
	    value: function emitBlurEvent(event, pointer, object) {
	      var properties = this._initBaseEvent(event, pointer);

	      if (object.hover === true) {
	        object.hover = false;
	        if (object instanceof Node) {
	          properties.node = object.id;
	          this.body.emitter.emit("blurNode", properties);
	        } else {
	          properties.edge = object.id;
	          this.body.emitter.emit("blurEdge", properties);
	        }
	      }
	    }

	    /**
	     * Create the highlight for a node or edge, in response to mouse movement
	     *
	     * @param {Event}  event
	     * @param {{x: number, y: number}} pointer object with the x and y screen coordinates of the mouse
	     * @param {Node|vis.Edge} object
	     * @returns {boolean} hoverChanged
	     * @private
	     */

	  }, {
	    key: 'emitHoverEvent',
	    value: function emitHoverEvent(event, pointer, object) {
	      var properties = this._initBaseEvent(event, pointer);
	      var hoverChanged = false;

	      if (object.hover === false) {
	        object.hover = true;
	        this._addToHover(object);
	        hoverChanged = true;
	        if (object instanceof Node) {
	          properties.node = object.id;
	          this.body.emitter.emit("hoverNode", properties);
	        } else {
	          properties.edge = object.id;
	          this.body.emitter.emit("hoverEdge", properties);
	        }
	      }

	      return hoverChanged;
	    }

	    /**
	     * Perform actions in response to a mouse movement.
	     *
	     * @param {Event}  event
	     * @param {{x: number, y: number}} pointer | object with the x and y screen coordinates of the mouse
	     */

	  }, {
	    key: 'hoverObject',
	    value: function hoverObject(event, pointer) {
	      var object = this.getNodeAt(pointer);
	      if (object === undefined) {
	        object = this.getEdgeAt(pointer);
	      }

	      var hoverChanged = false;
	      // remove all node hover highlights
	      for (var nodeId in this.hoverObj.nodes) {
	        if (this.hoverObj.nodes.hasOwnProperty(nodeId)) {
	          if (object === undefined || object instanceof Node && object.id != nodeId || object instanceof Edge) {
	            this.emitBlurEvent(event, pointer, this.hoverObj.nodes[nodeId]);
	            delete this.hoverObj.nodes[nodeId];
	            hoverChanged = true;
	          }
	        }
	      }

	      // removing all edge hover highlights
	      for (var edgeId in this.hoverObj.edges) {
	        if (this.hoverObj.edges.hasOwnProperty(edgeId)) {
	          // if the hover has been changed here it means that the node has been hovered over or off
	          // we then do not use the emitBlurEvent method here.
	          if (hoverChanged === true) {
	            this.hoverObj.edges[edgeId].hover = false;
	            delete this.hoverObj.edges[edgeId];
	          }
	          // if the blur remains the same and the object is undefined (mouse off) or another
	          // edge has been hovered, or another node has been hovered we blur the edge.
	          else if (object === undefined || object instanceof Edge && object.id != edgeId || object instanceof Node && !object.hover) {
	              this.emitBlurEvent(event, pointer, this.hoverObj.edges[edgeId]);
	              delete this.hoverObj.edges[edgeId];
	              hoverChanged = true;
	            }
	        }
	      }

	      if (object !== undefined) {
	        hoverChanged = hoverChanged || this.emitHoverEvent(event, pointer, object);
	        if (object instanceof Node && this.options.hoverConnectedEdges === true) {
	          this._hoverConnectedEdges(object);
	        }
	      }

	      if (hoverChanged === true) {
	        this.body.emitter.emit('_requestRedraw');
	      }
	    }

	    /**
	     *
	     * retrieve the currently selected objects
	     * @return {{nodes: Array.<string>, edges: Array.<string>}} selection
	     */

	  }, {
	    key: 'getSelection',
	    value: function getSelection() {
	      var nodeIds = this.getSelectedNodes();
	      var edgeIds = this.getSelectedEdges();
	      return { nodes: nodeIds, edges: edgeIds };
	    }

	    /**
	     *
	     * retrieve the currently selected nodes
	     * @return {string[]} selection    An array with the ids of the
	     *                                            selected nodes.
	     */

	  }, {
	    key: 'getSelectedNodes',
	    value: function getSelectedNodes() {
	      var idArray = [];
	      if (this.options.selectable === true) {
	        for (var nodeId in this.selectionObj.nodes) {
	          if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
	            idArray.push(this.selectionObj.nodes[nodeId].id);
	          }
	        }
	      }
	      return idArray;
	    }

	    /**
	     *
	     * retrieve the currently selected edges
	     * @return {Array} selection    An array with the ids of the
	     *                                            selected nodes.
	     */

	  }, {
	    key: 'getSelectedEdges',
	    value: function getSelectedEdges() {
	      var idArray = [];
	      if (this.options.selectable === true) {
	        for (var edgeId in this.selectionObj.edges) {
	          if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
	            idArray.push(this.selectionObj.edges[edgeId].id);
	          }
	        }
	      }
	      return idArray;
	    }

	    /**
	     * Updates the current selection
	     * @param {{nodes: Array.<string>, edges: Array.<string>}} selection
	     * @param {Object} options                                 Options
	     */

	  }, {
	    key: 'setSelection',
	    value: function setSelection(selection) {
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	      var i = void 0,
	          id = void 0;

	      if (!selection || !selection.nodes && !selection.edges) throw 'Selection must be an object with nodes and/or edges properties';
	      // first unselect any selected node, if option is true or undefined
	      if (options.unselectAll || options.unselectAll === undefined) {
	        this.unselectAll();
	      }
	      if (selection.nodes) {
	        for (i = 0; i < selection.nodes.length; i++) {
	          id = selection.nodes[i];

	          var node = this.body.nodes[id];
	          if (!node) {
	            throw new RangeError('Node with id "' + id + '" not found');
	          }
	          // don't select edges with it
	          this.selectObject(node, options.highlightEdges);
	        }
	      }

	      if (selection.edges) {
	        for (i = 0; i < selection.edges.length; i++) {
	          id = selection.edges[i];

	          var edge = this.body.edges[id];
	          if (!edge) {
	            throw new RangeError('Edge with id "' + id + '" not found');
	          }
	          this.selectObject(edge);
	        }
	      }
	      this.body.emitter.emit('_requestRedraw');
	    }

	    /**
	     * select zero or more nodes with the option to highlight edges
	     * @param {number[] | string[]} selection     An array with the ids of the
	     *                                            selected nodes.
	     * @param {boolean} [highlightEdges]
	     */

	  }, {
	    key: 'selectNodes',
	    value: function selectNodes(selection) {
	      var highlightEdges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	      if (!selection || selection.length === undefined) throw 'Selection must be an array with ids';

	      this.setSelection({ nodes: selection }, { highlightEdges: highlightEdges });
	    }

	    /**
	     * select zero or more edges
	     * @param {number[] | string[]} selection     An array with the ids of the
	     *                                            selected nodes.
	     */

	  }, {
	    key: 'selectEdges',
	    value: function selectEdges(selection) {
	      if (!selection || selection.length === undefined) throw 'Selection must be an array with ids';

	      this.setSelection({ edges: selection });
	    }

	    /**
	     * Validate the selection: remove ids of nodes which no longer exist
	     * @private
	     */

	  }, {
	    key: 'updateSelection',
	    value: function updateSelection() {
	      for (var nodeId in this.selectionObj.nodes) {
	        if (this.selectionObj.nodes.hasOwnProperty(nodeId)) {
	          if (!this.body.nodes.hasOwnProperty(nodeId)) {
	            delete this.selectionObj.nodes[nodeId];
	          }
	        }
	      }
	      for (var edgeId in this.selectionObj.edges) {
	        if (this.selectionObj.edges.hasOwnProperty(edgeId)) {
	          if (!this.body.edges.hasOwnProperty(edgeId)) {
	            delete this.selectionObj.edges[edgeId];
	          }
	        }
	      }
	    }

	    /**
	     * Determine all the visual elements clicked which are on the given point.
	     *
	     * All elements are returned; this includes nodes, edges and their labels.
	     * The order returned is from highest to lowest, i.e. element 0 of the return
	     * value is the topmost item clicked on.
	     *
	     * The return value consists of an array of the following possible elements:
	     *
	     * - `{nodeId:number}`             - node with given id clicked on
	     * - `{nodeId:number, labelId:0}`  - label of node with given id clicked on
	     * - `{edgeId:number}`             - edge with given id clicked on
	     * - `{edge:number, labelId:0}`    - label of edge with given id clicked on
	     *
	     * ## NOTES
	     *
	     * - Currently, there is only one label associated with a node or an edge,
	     *   but this is expected to change somewhere in the future.
	     * - Since there is no z-indexing yet, it is not really possible to set the nodes and
	     *   edges in the correct order. For the time being, nodes come first.
	     *
	     * @param {point} pointer  mouse position in screen coordinates
	     * @returns {Array.<nodeClickItem|nodeLabelClickItem|edgeClickItem|edgeLabelClickItem>}
	     * @private
	     */

	  }, {
	    key: 'getClickedItems',
	    value: function getClickedItems(pointer) {
	      var point = this.canvas.DOMtoCanvas(pointer);
	      var items = [];

	      // Note reverse order; we want the topmost clicked items to be first in the array
	      // Also note that selected nodes are disregarded here; these normally display on top
	      var nodeIndices = this.body.nodeIndices;
	      var nodes = this.body.nodes;
	      for (var i = nodeIndices.length - 1; i >= 0; i--) {
	        var node = nodes[nodeIndices[i]];
	        var ret = node.getItemsOnPoint(point);
	        items.push.apply(items, ret); // Append the return value to the running list.
	      }

	      var edgeIndices = this.body.edgeIndices;
	      var edges = this.body.edges;
	      for (var _i = edgeIndices.length - 1; _i >= 0; _i--) {
	        var edge = edges[edgeIndices[_i]];
	        var _ret = edge.getItemsOnPoint(point);
	        items.push.apply(items, _ret); // Append the return value to the running list.
	      }

	      return items;
	    }
	  }]);
	  return SelectionHandler;
	}();

	exports['default'] = SelectionHandler;

	/***/ }),
	/* 235 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	/**
	 * There's a mix-up with terms in the code. Following are the formal definitions:
	 *
	 *   tree   - a strict hierarchical network, i.e. every node has at most one parent
	 *   forest - a collection of trees. These distinct trees are thus not connected.
	 *
	 * So:
	 * - in a network that is not a tree, there exist nodes with multiple parents.
	 * - a network consisting of unconnected sub-networks, of which at least one
	 *   is not a tree, is not a forest.
	 *
	 * In the code, the definitions are:
	 *
	 *   tree   - any disconnected sub-network, strict hierarchical or not.
	 *   forest - a bunch of these sub-networks
	 *
	 * The difference between tree and not-tree is important in the code, notably within
	 * to the block-shifting algorithm. The algorithm assumes formal trees and fails
	 * for not-trees, often in a spectacular manner (search for 'exploding network' in the issues).
	 *
	 * In order to distinguish the definitions in the following code, the adjective 'formal' is
	 * used. If 'formal' is absent, you must assume the non-formal definition.
	 *
	 * ----------------------------------------------------------------------------------
	 * NOTES
	 * =====
	 *
	 * A hierarchical layout is a different thing from a hierarchical network.
	 * The layout is a way to arrange the nodes in the view; this can be done
	 * on non-hierarchical networks as well. The converse is also possible.
	 */

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _slicedToArray2 = __webpack_require__(30);

	var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	var _keys = __webpack_require__(8);

	var _keys2 = _interopRequireDefault(_keys);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);
	var NetworkUtil = __webpack_require__(76)['default'];

	var _require = __webpack_require__(236),
	    HorizontalStrategy = _require.HorizontalStrategy,
	    VerticalStrategy = _require.VerticalStrategy;

	/**
	 * Container for derived data on current network, relating to hierarchy.
	 *
	 * @private
	 */


	var HierarchicalStatus = function () {
	  /**
	   * @ignore
	   */
	  function HierarchicalStatus() {
	    (0, _classCallCheck3['default'])(this, HierarchicalStatus);

	    this.childrenReference = {}; // child id's per node id
	    this.parentReference = {}; // parent id's per node id
	    this.trees = {}; // tree id per node id; i.e. to which tree does given node id belong

	    this.distributionOrdering = {}; // The nodes per level, in the display order
	    this.levels = {}; // hierarchy level per node id
	    this.distributionIndex = {}; // The position of the node in the level sorting order, per node id.

	    this.isTree = false; // True if current network is a formal tree 
	    this.treeIndex = -1; // Highest tree id in current network.
	  }

	  /**
	   * Add the relation between given nodes to the current state.
	   *
	   * @param {Node.id} parentNodeId
	   * @param {Node.id} childNodeId
	   */


	  (0, _createClass3['default'])(HierarchicalStatus, [{
	    key: 'addRelation',
	    value: function addRelation(parentNodeId, childNodeId) {
	      if (this.childrenReference[parentNodeId] === undefined) {
	        this.childrenReference[parentNodeId] = [];
	      }
	      this.childrenReference[parentNodeId].push(childNodeId);

	      if (this.parentReference[childNodeId] === undefined) {
	        this.parentReference[childNodeId] = [];
	      }
	      this.parentReference[childNodeId].push(parentNodeId);
	    }

	    /**
	     * Check if the current state is for a formal tree or formal forest.
	     *
	     * This is the case if every node has at most one parent.
	     *
	     * Pre: parentReference init'ed properly for current network
	     */

	  }, {
	    key: 'checkIfTree',
	    value: function checkIfTree() {
	      for (var i in this.parentReference) {
	        if (this.parentReference[i].length > 1) {
	          this.isTree = false;
	          return;
	        }
	      }

	      this.isTree = true;
	    }

	    /**
	     * Return the number of separate trees in the current network.
	     * @returns {number}
	     */

	  }, {
	    key: 'numTrees',
	    value: function numTrees() {
	      return this.treeIndex + 1; // This assumes the indexes are assigned consecitively
	    }

	    /**
	     * Assign a tree id to a node
	     * @param {Node} node
	     * @param {string|number} treeId
	     */

	  }, {
	    key: 'setTreeIndex',
	    value: function setTreeIndex(node, treeId) {
	      if (treeId === undefined) return; // Don't bother

	      if (this.trees[node.id] === undefined) {
	        this.trees[node.id] = treeId;
	        this.treeIndex = Math.max(treeId, this.treeIndex);
	      }
	    }

	    /**
	     * Ensure level for given id is defined.
	     *
	     * Sets level to zero for given node id if not already present
	     *
	     * @param {Node.id} nodeId
	     */

	  }, {
	    key: 'ensureLevel',
	    value: function ensureLevel(nodeId) {
	      if (this.levels[nodeId] === undefined) {
	        this.levels[nodeId] = 0;
	      }
	    }

	    /**
	     * get the maximum level of a branch.
	     *
	     * TODO: Never entered; find a test case to test this!
	     * @param {Node.id} nodeId
	     * @returns {number}
	     */

	  }, {
	    key: 'getMaxLevel',
	    value: function getMaxLevel(nodeId) {
	      var _this = this;

	      var accumulator = {};

	      var _getMaxLevel = function _getMaxLevel(nodeId) {
	        if (accumulator[nodeId] !== undefined) {
	          return accumulator[nodeId];
	        }
	        var level = _this.levels[nodeId];
	        if (_this.childrenReference[nodeId]) {
	          var children = _this.childrenReference[nodeId];
	          if (children.length > 0) {
	            for (var i = 0; i < children.length; i++) {
	              level = Math.max(level, _getMaxLevel(children[i]));
	            }
	          }
	        }
	        accumulator[nodeId] = level;
	        return level;
	      };

	      return _getMaxLevel(nodeId);
	    }

	    /**
	     *
	     * @param {Node} nodeA
	     * @param {Node} nodeB
	     */

	  }, {
	    key: 'levelDownstream',
	    value: function levelDownstream(nodeA, nodeB) {
	      if (this.levels[nodeB.id] === undefined) {
	        // set initial level
	        if (this.levels[nodeA.id] === undefined) {
	          this.levels[nodeA.id] = 0;
	        }
	        // set level
	        this.levels[nodeB.id] = this.levels[nodeA.id] + 1;
	      }
	    }

	    /**
	     * Small util method to set the minimum levels of the nodes to zero.
	     *
	     * @param {Array.<Node>} nodes
	     */

	  }, {
	    key: 'setMinLevelToZero',
	    value: function setMinLevelToZero(nodes) {
	      var minLevel = 1e9;
	      // get the minimum level
	      for (var nodeId in nodes) {
	        if (nodes.hasOwnProperty(nodeId)) {
	          if (this.levels[nodeId] !== undefined) {
	            minLevel = Math.min(this.levels[nodeId], minLevel);
	          }
	        }
	      }

	      // subtract the minimum from the set so we have a range starting from 0
	      for (var _nodeId in nodes) {
	        if (nodes.hasOwnProperty(_nodeId)) {
	          if (this.levels[_nodeId] !== undefined) {
	            this.levels[_nodeId] -= minLevel;
	          }
	        }
	      }
	    }

	    /**
	     * Get the min and max xy-coordinates of a given tree
	     *
	     * @param {Array.<Node>} nodes
	     * @param {number} index
	     * @returns {{min_x: number, max_x: number, min_y: number, max_y: number}}
	     */

	  }, {
	    key: 'getTreeSize',
	    value: function getTreeSize(nodes, index) {
	      var min_x = 1e9;
	      var max_x = -1e9;
	      var min_y = 1e9;
	      var max_y = -1e9;

	      for (var nodeId in this.trees) {
	        if (this.trees.hasOwnProperty(nodeId)) {
	          if (this.trees[nodeId] === index) {
	            var node = nodes[nodeId];
	            min_x = Math.min(node.x, min_x);
	            max_x = Math.max(node.x, max_x);
	            min_y = Math.min(node.y, min_y);
	            max_y = Math.max(node.y, max_y);
	          }
	        }
	      }

	      return {
	        min_x: min_x,
	        max_x: max_x,
	        min_y: min_y,
	        max_y: max_y
	      };
	    }

	    /**
	     * Check if two nodes have the same parent(s)
	     *
	     * @param {Node} node1
	     * @param {Node} node2
	     * @return {boolean} true if the two nodes have a same ancestor node, false otherwise
	     */

	  }, {
	    key: 'hasSameParent',
	    value: function hasSameParent(node1, node2) {
	      var parents1 = this.parentReference[node1.id];
	      var parents2 = this.parentReference[node2.id];
	      if (parents1 === undefined || parents2 === undefined) {
	        return false;
	      }

	      for (var i = 0; i < parents1.length; i++) {
	        for (var j = 0; j < parents2.length; j++) {
	          if (parents1[i] == parents2[j]) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }

	    /**
	     * Check if two nodes are in the same tree.
	     *
	     * @param {Node} node1
	     * @param {Node} node2
	     * @return {Boolean} true if this is so, false otherwise
	     */

	  }, {
	    key: 'inSameSubNetwork',
	    value: function inSameSubNetwork(node1, node2) {
	      return this.trees[node1.id] === this.trees[node2.id];
	    }

	    /**
	     * Get a list of the distinct levels in the current network
	     *
	     * @returns {Array}
	     */

	  }, {
	    key: 'getLevels',
	    value: function getLevels() {
	      return (0, _keys2['default'])(this.distributionOrdering);
	    }

	    /**
	     * Add a node to the ordering per level
	     *
	     * @param {Node} node
	     * @param {number} level
	     */

	  }, {
	    key: 'addToOrdering',
	    value: function addToOrdering(node, level) {
	      if (this.distributionOrdering[level] === undefined) {
	        this.distributionOrdering[level] = [];
	      }

	      var isPresent = false;
	      var curLevel = this.distributionOrdering[level];
	      for (var n in curLevel) {
	        //if (curLevel[n].id === node.id) {
	        if (curLevel[n] === node) {
	          isPresent = true;
	          break;
	        }
	      }

	      if (!isPresent) {
	        this.distributionOrdering[level].push(node);
	        this.distributionIndex[node.id] = this.distributionOrdering[level].length - 1;
	      }
	    }
	  }]);
	  return HierarchicalStatus;
	}();

	/**
	 * The Layout Engine
	 */


	var LayoutEngine = function () {
	  /**
	   * @param {Object} body
	   */
	  function LayoutEngine(body) {
	    (0, _classCallCheck3['default'])(this, LayoutEngine);

	    this.body = body;

	    this.initialRandomSeed = Math.round(Math.random() * 1000000);
	    this.randomSeed = this.initialRandomSeed;
	    this.setPhysics = false;
	    this.options = {};
	    this.optionsBackup = { physics: {} };

	    this.defaultOptions = {
	      randomSeed: undefined,
	      improvedLayout: true,
	      hierarchical: {
	        enabled: false,
	        levelSeparation: 150,
	        nodeSpacing: 100,
	        treeSpacing: 200,
	        blockShifting: true,
	        edgeMinimization: true,
	        parentCentralization: true,
	        direction: 'UD', // UD, DU, LR, RL
	        sortMethod: 'hubsize' // hubsize, directed
	      }
	    };
	    util.extend(this.options, this.defaultOptions);
	    this.bindEventListeners();
	  }

	  /**
	   * Binds event listeners
	   */


	  (0, _createClass3['default'])(LayoutEngine, [{
	    key: 'bindEventListeners',
	    value: function bindEventListeners() {
	      var _this2 = this;

	      this.body.emitter.on('_dataChanged', function () {
	        _this2.setupHierarchicalLayout();
	      });
	      this.body.emitter.on('_dataLoaded', function () {
	        _this2.layoutNetwork();
	      });
	      this.body.emitter.on('_resetHierarchicalLayout', function () {
	        _this2.setupHierarchicalLayout();
	      });
	      this.body.emitter.on('_adjustEdgesForHierarchicalLayout', function () {
	        if (_this2.options.hierarchical.enabled !== true) {
	          return;
	        }
	        // get the type of static smooth curve in case it is required
	        var type = _this2.direction.curveType();

	        // force all edges into static smooth curves.
	        _this2.body.emitter.emit('_forceDisableDynamicCurves', type, false);
	      });
	    }

	    /**
	     *
	     * @param {Object} options
	     * @param {Object} allOptions
	     * @returns {Object}
	     */

	  }, {
	    key: 'setOptions',
	    value: function setOptions(options, allOptions) {
	      if (options !== undefined) {
	        var hierarchical = this.options.hierarchical;
	        var prevHierarchicalState = hierarchical.enabled;
	        util.selectiveDeepExtend(["randomSeed", "improvedLayout"], this.options, options);
	        util.mergeOptions(this.options, options, 'hierarchical');
	        if (options.randomSeed !== undefined) {
	          this.initialRandomSeed = options.randomSeed;
	        }

	        if (hierarchical.enabled === true) {
	          if (prevHierarchicalState === true) {
	            // refresh the overridden options for nodes and edges.
	            this.body.emitter.emit('refresh', true);
	          }

	          // make sure the level separation is the right way up
	          if (hierarchical.direction === 'RL' || hierarchical.direction === 'DU') {
	            if (hierarchical.levelSeparation > 0) {
	              hierarchical.levelSeparation *= -1;
	            }
	          } else {
	            if (hierarchical.levelSeparation < 0) {
	              hierarchical.levelSeparation *= -1;
	            }
	          }

	          this.setDirectionStrategy();

	          this.body.emitter.emit('_resetHierarchicalLayout');
	          // because the hierarchical system needs it's own physics and smooth curve settings,
	          // we adapt the other options if needed.
	          return this.adaptAllOptionsForHierarchicalLayout(allOptions);
	        } else {
	          if (prevHierarchicalState === true) {
	            // refresh the overridden options for nodes and edges.
	            this.body.emitter.emit('refresh');
	            return util.deepExtend(allOptions, this.optionsBackup);
	          }
	        }
	      }
	      return allOptions;
	    }

	    /**
	     *
	     * @param {Object} allOptions
	     * @returns {Object}
	     */

	  }, {
	    key: 'adaptAllOptionsForHierarchicalLayout',
	    value: function adaptAllOptionsForHierarchicalLayout(allOptions) {
	      if (this.options.hierarchical.enabled === true) {
	        var backupPhysics = this.optionsBackup.physics;

	        // set the physics
	        if (allOptions.physics === undefined || allOptions.physics === true) {
	          allOptions.physics = {
	            enabled: backupPhysics.enabled === undefined ? true : backupPhysics.enabled,
	            solver: 'hierarchicalRepulsion'
	          };
	          backupPhysics.enabled = backupPhysics.enabled === undefined ? true : backupPhysics.enabled;
	          backupPhysics.solver = backupPhysics.solver || 'barnesHut';
	        } else if ((0, _typeof3['default'])(allOptions.physics) === 'object') {
	          backupPhysics.enabled = allOptions.physics.enabled === undefined ? true : allOptions.physics.enabled;
	          backupPhysics.solver = allOptions.physics.solver || 'barnesHut';
	          allOptions.physics.solver = 'hierarchicalRepulsion';
	        } else if (allOptions.physics !== false) {
	          backupPhysics.solver = 'barnesHut';
	          allOptions.physics = { solver: 'hierarchicalRepulsion' };
	        }

	        // get the type of static smooth curve in case it is required
	        var type = this.direction.curveType();

	        // disable smooth curves if nothing is defined. If smooth curves have been turned on,
	        // turn them into static smooth curves.
	        if (allOptions.edges === undefined) {
	          this.optionsBackup.edges = { smooth: { enabled: true, type: 'dynamic' } };
	          allOptions.edges = { smooth: false };
	        } else if (allOptions.edges.smooth === undefined) {
	          this.optionsBackup.edges = { smooth: { enabled: true, type: 'dynamic' } };
	          allOptions.edges.smooth = false;
	        } else {
	          if (typeof allOptions.edges.smooth === 'boolean') {
	            this.optionsBackup.edges = { smooth: allOptions.edges.smooth };
	            allOptions.edges.smooth = { enabled: allOptions.edges.smooth, type: type };
	          } else {
	            var smooth = allOptions.edges.smooth;

	            // allow custom types except for dynamic
	            if (smooth.type !== undefined && smooth.type !== 'dynamic') {
	              type = smooth.type;
	            }

	            // TODO: this is options merging; see if the standard routines can be used here.
	            this.optionsBackup.edges = {
	              smooth: smooth.enabled === undefined ? true : smooth.enabled,
	              type: smooth.type === undefined ? 'dynamic' : smooth.type,
	              roundness: smooth.roundness === undefined ? 0.5 : smooth.roundness,
	              forceDirection: smooth.forceDirection === undefined ? false : smooth.forceDirection
	            };

	            // NOTE: Copying an object to self; this is basically setting defaults for undefined variables
	            allOptions.edges.smooth = {
	              enabled: smooth.enabled === undefined ? true : smooth.enabled,
	              type: type,
	              roundness: smooth.roundness === undefined ? 0.5 : smooth.roundness,
	              forceDirection: smooth.forceDirection === undefined ? false : smooth.forceDirection
	            };
	          }
	        }

	        // Force all edges into static smooth curves.
	        // Only applies to edges that do not use the global options for smooth.
	        this.body.emitter.emit('_forceDisableDynamicCurves', type);
	      }

	      return allOptions;
	    }

	    /**
	     *
	     * @returns {number}
	     */

	  }, {
	    key: 'seededRandom',
	    value: function seededRandom() {
	      var x = Math.sin(this.randomSeed++) * 10000;
	      return x - Math.floor(x);
	    }

	    /**
	     *
	     * @param {Array.<Node>} nodesArray
	     */

	  }, {
	    key: 'positionInitially',
	    value: function positionInitially(nodesArray) {
	      if (this.options.hierarchical.enabled !== true) {
	        this.randomSeed = this.initialRandomSeed;
	        var radius = nodesArray.length + 50;
	        for (var i = 0; i < nodesArray.length; i++) {
	          var node = nodesArray[i];
	          var angle = 2 * Math.PI * this.seededRandom();
	          if (node.x === undefined) {
	            node.x = radius * Math.cos(angle);
	          }
	          if (node.y === undefined) {
	            node.y = radius * Math.sin(angle);
	          }
	        }
	      }
	    }

	    /**
	     * Use Kamada Kawai to position nodes. This is quite a heavy algorithm so if there are a lot of nodes we
	     * cluster them first to reduce the amount.
	     */

	  }, {
	    key: 'layoutNetwork',
	    value: function layoutNetwork() {
	      if (this.options.hierarchical.enabled !== true && this.options.improvedLayout === true) {
	        var indices = this.body.nodeIndices;

	        // first check if we should Kamada Kawai to layout. The threshold is if less than half of the visible
	        // nodes have predefined positions we use this.
	        var positionDefined = 0;
	        for (var i = 0; i < indices.length; i++) {
	          var node = this.body.nodes[indices[i]];
	          if (node.predefinedPosition === true) {
	            positionDefined += 1;
	          }
	        }

	        // if less than half of the nodes have a predefined position we continue
	        if (positionDefined < 0.5 * indices.length) {
	          var MAX_LEVELS = 10;
	          var level = 0;
	          var clusterThreshold = 150; // TODO add this to options

	          //
	          // Define the options for the hidden cluster nodes
	          // These options don't propagate outside the clustering phase.
	          //
	          // Some options are explicitly disabled, because they may be set in group or default node options.
	          // The clusters are never displayed, so most explicit settings here serve as performance optimizations.
	          //
	          // The explicit setting of 'shape' is to avoid `shape: 'image'`; images are not passed to the hidden
	          // cluster nodes, leading to an exception on creation.
	          //
	          // All settings here are performance related, except when noted otherwise.
	          //
	          var clusterOptions = {
	            clusterNodeProperties: {
	              shape: 'ellipse', // Bugfix: avoid type 'image', no images supplied
	              label: '', // avoid label handling
	              group: '', // avoid group handling
	              font: { multi: false } // avoid font propagation
	            },
	            clusterEdgeProperties: {
	              label: '', // avoid label handling
	              font: { multi: false }, // avoid font propagation
	              smooth: {
	                enabled: false // avoid drawing penalty for complex edges
	              }
	            }
	          };

	          // if there are a lot of nodes, we cluster before we run the algorithm.
	          // NOTE: this part fails to find clusters for large scale-free networks, which should
	          //       be easily clusterable.
	          // TODO: examine why this is so
	          if (indices.length > clusterThreshold) {
	            var startLength = indices.length;
	            while (indices.length > clusterThreshold && level <= MAX_LEVELS) {
	              //console.time("clustering")
	              level += 1;
	              var before = indices.length;
	              // if there are many nodes we do a hubsize cluster
	              if (level % 3 === 0) {
	                this.body.modules.clustering.clusterBridges(clusterOptions);
	              } else {
	                this.body.modules.clustering.clusterOutliers(clusterOptions);
	              }
	              var after = indices.length;
	              if (before == after && level % 3 !== 0) {
	                this._declusterAll();
	                this.body.emitter.emit("_layoutFailed");
	                console.info("This network could not be positioned by this version of the improved layout algorithm." + " Please disable improvedLayout for better performance.");
	                return;
	              }
	              //console.timeEnd("clustering")
	              //console.log(before,level,after);
	            }
	            // increase the size of the edges
	            this.body.modules.kamadaKawai.setOptions({ springLength: Math.max(150, 2 * startLength) });
	          }
	          if (level > MAX_LEVELS) {
	            console.info("The clustering didn't succeed within the amount of interations allowed," + " progressing with partial result.");
	          }

	          // position the system for these nodes and edges
	          this.body.modules.kamadaKawai.solve(indices, this.body.edgeIndices, true);

	          // shift to center point
	          this._shiftToCenter();

	          // perturb the nodes a little bit to force the physics to kick in
	          var offset = 70;
	          for (var _i = 0; _i < indices.length; _i++) {
	            // Only perturb the nodes that aren't fixed
	            var _node = this.body.nodes[indices[_i]];
	            if (_node.predefinedPosition === false) {
	              _node.x += (0.5 - this.seededRandom()) * offset;
	              _node.y += (0.5 - this.seededRandom()) * offset;
	            }
	          }

	          // uncluster all clusters
	          this._declusterAll();

	          // reposition all bezier nodes.
	          this.body.emitter.emit("_repositionBezierNodes");
	        }
	      }
	    }

	    /**
	     * Move all the nodes towards to the center so gravitational pull wil not move the nodes away from view
	     * @private
	     */

	  }, {
	    key: '_shiftToCenter',
	    value: function _shiftToCenter() {
	      var range = NetworkUtil.getRangeCore(this.body.nodes, this.body.nodeIndices);
	      var center = NetworkUtil.findCenter(range);
	      for (var i = 0; i < this.body.nodeIndices.length; i++) {
	        var node = this.body.nodes[this.body.nodeIndices[i]];
	        node.x -= center.x;
	        node.y -= center.y;
	      }
	    }

	    /**
	     * Expands all clusters
	     * @private
	     */

	  }, {
	    key: '_declusterAll',
	    value: function _declusterAll() {
	      var clustersPresent = true;
	      while (clustersPresent === true) {
	        clustersPresent = false;
	        for (var i = 0; i < this.body.nodeIndices.length; i++) {
	          if (this.body.nodes[this.body.nodeIndices[i]].isCluster === true) {
	            clustersPresent = true;
	            this.body.modules.clustering.openCluster(this.body.nodeIndices[i], {}, false);
	          }
	        }
	        if (clustersPresent === true) {
	          this.body.emitter.emit('_dataChanged');
	        }
	      }
	    }

	    /**
	     *
	     * @returns {number|*}
	     */

	  }, {
	    key: 'getSeed',
	    value: function getSeed() {
	      return this.initialRandomSeed;
	    }

	    /**
	     * This is the main function to layout the nodes in a hierarchical way.
	     * It checks if the node details are supplied correctly
	     *
	     * @private
	     */

	  }, {
	    key: 'setupHierarchicalLayout',
	    value: function setupHierarchicalLayout() {
	      if (this.options.hierarchical.enabled === true && this.body.nodeIndices.length > 0) {
	        // get the size of the largest hubs and check if the user has defined a level for a node.
	        var node = void 0,
	            nodeId = void 0;
	        var definedLevel = false;
	        var undefinedLevel = false;
	        this.lastNodeOnLevel = {};
	        this.hierarchical = new HierarchicalStatus();

	        for (nodeId in this.body.nodes) {
	          if (this.body.nodes.hasOwnProperty(nodeId)) {
	            node = this.body.nodes[nodeId];
	            if (node.options.level !== undefined) {
	              definedLevel = true;
	              this.hierarchical.levels[nodeId] = node.options.level;
	            } else {
	              undefinedLevel = true;
	            }
	          }
	        }

	        // if the user defined some levels but not all, alert and run without hierarchical layout
	        if (undefinedLevel === true && definedLevel === true) {
	          throw new Error('To use the hierarchical layout, nodes require either no predefined levels' + ' or levels have to be defined for all nodes.');
	        } else {
	          // define levels if undefined by the users. Based on hubsize.
	          if (undefinedLevel === true) {
	            var sortMethod = this.options.hierarchical.sortMethod;
	            if (sortMethod === 'hubsize') {
	              this._determineLevelsByHubsize();
	            } else if (sortMethod === 'directed') {
	              this._determineLevelsDirected();
	            } else if (sortMethod === 'custom') {
	              this._determineLevelsCustomCallback();
	            }
	          }

	          // fallback for cases where there are nodes but no edges
	          for (var _nodeId2 in this.body.nodes) {
	            if (this.body.nodes.hasOwnProperty(_nodeId2)) {
	              this.hierarchical.ensureLevel(_nodeId2);
	            }
	          }
	          // check the distribution of the nodes per level.
	          var distribution = this._getDistribution();

	          // get the parent children relations.
	          this._generateMap();

	          // place the nodes on the canvas.
	          this._placeNodesByHierarchy(distribution);

	          // condense the whitespace.
	          this._condenseHierarchy();

	          // shift to center so gravity does not have to do much
	          this._shiftToCenter();
	        }
	      }
	    }

	    /**
	     * @private
	     */

	  }, {
	    key: '_condenseHierarchy',
	    value: function _condenseHierarchy() {
	      var _this3 = this;

	      // Global var in this scope to define when the movement has stopped.
	      var stillShifting = false;
	      var branches = {};
	      // first we have some methods to help shifting trees around.
	      // the main method to shift the trees
	      var shiftTrees = function shiftTrees() {
	        var treeSizes = getTreeSizes();
	        var shiftBy = 0;
	        for (var i = 0; i < treeSizes.length - 1; i++) {
	          var diff = treeSizes[i].max - treeSizes[i + 1].min;
	          shiftBy += diff + _this3.options.hierarchical.treeSpacing;
	          shiftTree(i + 1, shiftBy);
	        }
	      };

	      // shift a single tree by an offset
	      var shiftTree = function shiftTree(index, offset) {
	        var trees = _this3.hierarchical.trees;

	        for (var nodeId in trees) {
	          if (trees.hasOwnProperty(nodeId)) {
	            if (trees[nodeId] === index) {
	              _this3.direction.shift(nodeId, offset);
	            }
	          }
	        }
	      };

	      // get the width of all trees
	      var getTreeSizes = function getTreeSizes() {
	        var treeWidths = [];
	        for (var i = 0; i < _this3.hierarchical.numTrees(); i++) {
	          treeWidths.push(_this3.direction.getTreeSize(i));
	        }
	        return treeWidths;
	      };

	      // get a map of all nodes in this branch
	      var getBranchNodes = function getBranchNodes(source, map) {
	        if (map[source.id]) {
	          return;
	        }
	        map[source.id] = true;
	        if (_this3.hierarchical.childrenReference[source.id]) {
	          var children = _this3.hierarchical.childrenReference[source.id];
	          if (children.length > 0) {
	            for (var i = 0; i < children.length; i++) {
	              getBranchNodes(_this3.body.nodes[children[i]], map);
	            }
	          }
	        }
	      };

	      // get a min max width as well as the maximum movement space it has on either sides
	      // we use min max terminology because width and height can interchange depending on the direction of the layout
	      var getBranchBoundary = function getBranchBoundary(branchMap) {
	        var maxLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1e9;

	        var minSpace = 1e9;
	        var maxSpace = 1e9;
	        var min = 1e9;
	        var max = -1e9;
	        for (var branchNode in branchMap) {
	          if (branchMap.hasOwnProperty(branchNode)) {
	            var node = _this3.body.nodes[branchNode];
	            var level = _this3.hierarchical.levels[node.id];
	            var position = _this3.direction.getPosition(node);

	            // get the space around the node.

	            var _getSpaceAroundNode2 = _this3._getSpaceAroundNode(node, branchMap),
	                _getSpaceAroundNode3 = (0, _slicedToArray3['default'])(_getSpaceAroundNode2, 2),
	                minSpaceNode = _getSpaceAroundNode3[0],
	                maxSpaceNode = _getSpaceAroundNode3[1];

	            minSpace = Math.min(minSpaceNode, minSpace);
	            maxSpace = Math.min(maxSpaceNode, maxSpace);

	            // the width is only relevant for the levels two nodes have in common. This is why we filter on this.
	            if (level <= maxLevel) {
	              min = Math.min(position, min);
	              max = Math.max(position, max);
	            }
	          }
	        }

	        return [min, max, minSpace, maxSpace];
	      };

	      // check what the maximum level is these nodes have in common.
	      var getCollisionLevel = function getCollisionLevel(node1, node2) {
	        var maxLevel1 = _this3.hierarchical.getMaxLevel(node1.id);
	        var maxLevel2 = _this3.hierarchical.getMaxLevel(node2.id);
	        return Math.min(maxLevel1, maxLevel2);
	      };

	      /**
	       * Condense elements. These can be nodes or branches depending on the callback.
	       *
	       * @param {function} callback
	       * @param {Array.<number>} levels
	       * @param {*} centerParents
	       */
	      var shiftElementsCloser = function shiftElementsCloser(callback, levels, centerParents) {
	        var hier = _this3.hierarchical;

	        for (var i = 0; i < levels.length; i++) {
	          var level = levels[i];
	          var levelNodes = hier.distributionOrdering[level];
	          if (levelNodes.length > 1) {
	            for (var j = 0; j < levelNodes.length - 1; j++) {
	              var node1 = levelNodes[j];
	              var node2 = levelNodes[j + 1];

	              // NOTE: logic maintained as it was; if nodes have same ancestor,
	              //       then of course they are in the same sub-network.
	              if (hier.hasSameParent(node1, node2) && hier.inSameSubNetwork(node1, node2)) {
	                callback(node1, node2, centerParents);
	              }
	            }
	          }
	        }
	      };

	      // callback for shifting branches
	      var branchShiftCallback = function branchShiftCallback(node1, node2) {
	        var centerParent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	        //window.CALLBACKS.push(() => {
	        var pos1 = _this3.direction.getPosition(node1);
	        var pos2 = _this3.direction.getPosition(node2);
	        var diffAbs = Math.abs(pos2 - pos1);
	        var nodeSpacing = _this3.options.hierarchical.nodeSpacing;
	        //console.log("NOW CHECKING:", node1.id, node2.id, diffAbs);
	        if (diffAbs > nodeSpacing) {
	          var branchNodes1 = {};
	          var branchNodes2 = {};

	          getBranchNodes(node1, branchNodes1);
	          getBranchNodes(node2, branchNodes2);

	          // check the largest distance between the branches
	          var maxLevel = getCollisionLevel(node1, node2);
	          var branchNodeBoundary1 = getBranchBoundary(branchNodes1, maxLevel);
	          var branchNodeBoundary2 = getBranchBoundary(branchNodes2, maxLevel);
	          var max1 = branchNodeBoundary1[1];
	          var min2 = branchNodeBoundary2[0];
	          var minSpace2 = branchNodeBoundary2[2];

	          //console.log(node1.id, getBranchBoundary(branchNodes1, maxLevel), node2.id,
	          //            getBranchBoundary(branchNodes2, maxLevel), maxLevel);
	          var diffBranch = Math.abs(max1 - min2);
	          if (diffBranch > nodeSpacing) {
	            var offset = max1 - min2 + nodeSpacing;
	            if (offset < -minSpace2 + nodeSpacing) {
	              offset = -minSpace2 + nodeSpacing;
	              //console.log("RESETTING OFFSET", max1 - min2 + this.options.hierarchical.nodeSpacing, -minSpace2, offset);
	            }
	            if (offset < 0) {
	              //console.log("SHIFTING", node2.id, offset);
	              _this3._shiftBlock(node2.id, offset);
	              stillShifting = true;

	              if (centerParent === true) _this3._centerParent(node2);
	            }
	          }
	        }
	        //this.body.emitter.emit("_redraw");})
	      };

	      var minimizeEdgeLength = function minimizeEdgeLength(iterations, node) {
	        //window.CALLBACKS.push(() => {
	        //  console.log("ts",node.id);
	        var nodeId = node.id;
	        var allEdges = node.edges;
	        var nodeLevel = _this3.hierarchical.levels[node.id];

	        // gather constants
	        var C2 = _this3.options.hierarchical.levelSeparation * _this3.options.hierarchical.levelSeparation;
	        var referenceNodes = {};
	        var aboveEdges = [];
	        for (var i = 0; i < allEdges.length; i++) {
	          var edge = allEdges[i];
	          if (edge.toId != edge.fromId) {
	            var otherNode = edge.toId == nodeId ? edge.from : edge.to;
	            referenceNodes[allEdges[i].id] = otherNode;
	            if (_this3.hierarchical.levels[otherNode.id] < nodeLevel) {
	              aboveEdges.push(edge);
	            }
	          }
	        }

	        // differentiated sum of lengths based on only moving one node over one axis
	        var getFx = function getFx(point, edges) {
	          var sum = 0;
	          for (var _i2 = 0; _i2 < edges.length; _i2++) {
	            if (referenceNodes[edges[_i2].id] !== undefined) {
	              var a = _this3.direction.getPosition(referenceNodes[edges[_i2].id]) - point;
	              sum += a / Math.sqrt(a * a + C2);
	            }
	          }
	          return sum;
	        };

	        // doubly differentiated sum of lengths based on only moving one node over one axis
	        var getDFx = function getDFx(point, edges) {
	          var sum = 0;
	          for (var _i3 = 0; _i3 < edges.length; _i3++) {
	            if (referenceNodes[edges[_i3].id] !== undefined) {
	              var a = _this3.direction.getPosition(referenceNodes[edges[_i3].id]) - point;
	              sum -= C2 * Math.pow(a * a + C2, -1.5);
	            }
	          }
	          return sum;
	        };

	        var getGuess = function getGuess(iterations, edges) {
	          var guess = _this3.direction.getPosition(node);
	          // Newton's method for optimization
	          var guessMap = {};
	          for (var _i4 = 0; _i4 < iterations; _i4++) {
	            var fx = getFx(guess, edges);
	            var dfx = getDFx(guess, edges);

	            // we limit the movement to avoid instability.
	            var limit = 40;
	            var ratio = Math.max(-limit, Math.min(limit, Math.round(fx / dfx)));
	            guess = guess - ratio;
	            // reduce duplicates
	            if (guessMap[guess] !== undefined) {
	              break;
	            }
	            guessMap[guess] = _i4;
	          }
	          return guess;
	        };

	        var moveBranch = function moveBranch(guess) {
	          // position node if there is space
	          var nodePosition = _this3.direction.getPosition(node);

	          // check movable area of the branch
	          if (branches[node.id] === undefined) {
	            var branchNodes = {};
	            getBranchNodes(node, branchNodes);
	            branches[node.id] = branchNodes;
	          }
	          var branchBoundary = getBranchBoundary(branches[node.id]);
	          var minSpaceBranch = branchBoundary[2];
	          var maxSpaceBranch = branchBoundary[3];

	          var diff = guess - nodePosition;

	          // check if we are allowed to move the node:
	          var branchOffset = 0;
	          if (diff > 0) {
	            branchOffset = Math.min(diff, maxSpaceBranch - _this3.options.hierarchical.nodeSpacing);
	          } else if (diff < 0) {
	            branchOffset = -Math.min(-diff, minSpaceBranch - _this3.options.hierarchical.nodeSpacing);
	          }

	          if (branchOffset != 0) {
	            //console.log("moving branch:",branchOffset, maxSpaceBranch, minSpaceBranch)
	            _this3._shiftBlock(node.id, branchOffset);
	            //this.body.emitter.emit("_redraw");
	            stillShifting = true;
	          }
	        };

	        var moveNode = function moveNode(guess) {
	          var nodePosition = _this3.direction.getPosition(node);

	          // position node if there is space

	          var _getSpaceAroundNode4 = _this3._getSpaceAroundNode(node),
	              _getSpaceAroundNode5 = (0, _slicedToArray3['default'])(_getSpaceAroundNode4, 2),
	              minSpace = _getSpaceAroundNode5[0],
	              maxSpace = _getSpaceAroundNode5[1];

	          var diff = guess - nodePosition;
	          // check if we are allowed to move the node:
	          var newPosition = nodePosition;
	          if (diff > 0) {
	            newPosition = Math.min(nodePosition + (maxSpace - _this3.options.hierarchical.nodeSpacing), guess);
	          } else if (diff < 0) {
	            newPosition = Math.max(nodePosition - (minSpace - _this3.options.hierarchical.nodeSpacing), guess);
	          }

	          if (newPosition !== nodePosition) {
	            //console.log("moving Node:",diff, minSpace, maxSpace);
	            _this3.direction.setPosition(node, newPosition);
	            //this.body.emitter.emit("_redraw");
	            stillShifting = true;
	          }
	        };

	        var guess = getGuess(iterations, aboveEdges);
	        moveBranch(guess);
	        guess = getGuess(iterations, allEdges);
	        moveNode(guess);
	        //})
	      };

	      // method to remove whitespace between branches. Because we do bottom up, we can center the parents.
	      var minimizeEdgeLengthBottomUp = function minimizeEdgeLengthBottomUp(iterations) {
	        var levels = _this3.hierarchical.getLevels();
	        levels = levels.reverse();
	        for (var i = 0; i < iterations; i++) {
	          stillShifting = false;
	          for (var j = 0; j < levels.length; j++) {
	            var level = levels[j];
	            var levelNodes = _this3.hierarchical.distributionOrdering[level];
	            for (var k = 0; k < levelNodes.length; k++) {
	              minimizeEdgeLength(1000, levelNodes[k]);
	            }
	          }
	          if (stillShifting !== true) {
	            //console.log("FINISHED minimizeEdgeLengthBottomUp IN " + i);
	            break;
	          }
	        }
	      };

	      // method to remove whitespace between branches. Because we do bottom up, we can center the parents.
	      var shiftBranchesCloserBottomUp = function shiftBranchesCloserBottomUp(iterations) {
	        var levels = _this3.hierarchical.getLevels();
	        levels = levels.reverse();
	        for (var i = 0; i < iterations; i++) {
	          stillShifting = false;
	          shiftElementsCloser(branchShiftCallback, levels, true);
	          if (stillShifting !== true) {
	            //console.log("FINISHED shiftBranchesCloserBottomUp IN " + (i+1));
	            break;
	          }
	        }
	      };

	      // center all parents
	      var centerAllParents = function centerAllParents() {
	        for (var nodeId in _this3.body.nodes) {
	          if (_this3.body.nodes.hasOwnProperty(nodeId)) _this3._centerParent(_this3.body.nodes[nodeId]);
	        }
	      };

	      // center all parents
	      var centerAllParentsBottomUp = function centerAllParentsBottomUp() {
	        var levels = _this3.hierarchical.getLevels();
	        levels = levels.reverse();
	        for (var i = 0; i < levels.length; i++) {
	          var level = levels[i];
	          var levelNodes = _this3.hierarchical.distributionOrdering[level];
	          for (var j = 0; j < levelNodes.length; j++) {
	            _this3._centerParent(levelNodes[j]);
	          }
	        }
	      };

	      // the actual work is done here.
	      if (this.options.hierarchical.blockShifting === true) {
	        shiftBranchesCloserBottomUp(5);
	        centerAllParents();
	      }

	      // minimize edge length
	      if (this.options.hierarchical.edgeMinimization === true) {
	        minimizeEdgeLengthBottomUp(20);
	      }

	      if (this.options.hierarchical.parentCentralization === true) {
	        centerAllParentsBottomUp();
	      }

	      shiftTrees();
	    }

	    /**
	     * This gives the space around the node. IF a map is supplied, it will only check against nodes NOT in the map.
	     * This is used to only get the distances to nodes outside of a branch.
	     * @param {Node} node
	     * @param {{Node.id: vis.Node}} map
	     * @returns {number[]}
	     * @private
	     */

	  }, {
	    key: '_getSpaceAroundNode',
	    value: function _getSpaceAroundNode(node, map) {
	      var useMap = true;
	      if (map === undefined) {
	        useMap = false;
	      }
	      var level = this.hierarchical.levels[node.id];
	      if (level !== undefined) {
	        var index = this.hierarchical.distributionIndex[node.id];
	        var position = this.direction.getPosition(node);
	        var ordering = this.hierarchical.distributionOrdering[level];
	        var minSpace = 1e9;
	        var maxSpace = 1e9;
	        if (index !== 0) {
	          var prevNode = ordering[index - 1];
	          if (useMap === true && map[prevNode.id] === undefined || useMap === false) {
	            var prevPos = this.direction.getPosition(prevNode);
	            minSpace = position - prevPos;
	          }
	        }

	        if (index != ordering.length - 1) {
	          var nextNode = ordering[index + 1];
	          if (useMap === true && map[nextNode.id] === undefined || useMap === false) {
	            var nextPos = this.direction.getPosition(nextNode);
	            maxSpace = Math.min(maxSpace, nextPos - position);
	          }
	        }

	        return [minSpace, maxSpace];
	      } else {
	        return [0, 0];
	      }
	    }

	    /**
	     * We use this method to center a parent node and check if it does not cross other nodes when it does.
	     * @param {Node} node
	     * @private
	     */

	  }, {
	    key: '_centerParent',
	    value: function _centerParent(node) {
	      if (this.hierarchical.parentReference[node.id]) {
	        var parents = this.hierarchical.parentReference[node.id];
	        for (var i = 0; i < parents.length; i++) {
	          var parentId = parents[i];
	          var parentNode = this.body.nodes[parentId];
	          var children = this.hierarchical.childrenReference[parentId];

	          if (children !== undefined) {
	            // get the range of the children
	            var newPosition = this._getCenterPosition(children);

	            var position = this.direction.getPosition(parentNode);

	            var _getSpaceAroundNode6 = this._getSpaceAroundNode(parentNode),
	                _getSpaceAroundNode7 = (0, _slicedToArray3['default'])(_getSpaceAroundNode6, 2),
	                minSpace = _getSpaceAroundNode7[0],
	                maxSpace = _getSpaceAroundNode7[1];

	            var diff = position - newPosition;
	            if (diff < 0 && Math.abs(diff) < maxSpace - this.options.hierarchical.nodeSpacing || diff > 0 && Math.abs(diff) < minSpace - this.options.hierarchical.nodeSpacing) {
	              this.direction.setPosition(parentNode, newPosition);
	            }
	          }
	        }
	      }
	    }

	    /**
	     * This function places the nodes on the canvas based on the hierarchial distribution.
	     *
	     * @param {Object} distribution | obtained by the function this._getDistribution()
	     * @private
	     */

	  }, {
	    key: '_placeNodesByHierarchy',
	    value: function _placeNodesByHierarchy(distribution) {
	      this.positionedNodes = {};
	      // start placing all the level 0 nodes first. Then recursively position their branches.
	      for (var level in distribution) {
	        if (distribution.hasOwnProperty(level)) {
	          // sort nodes in level by position:
	          var nodeArray = (0, _keys2['default'])(distribution[level]);
	          nodeArray = this._indexArrayToNodes(nodeArray);
	          this.direction.sort(nodeArray);
	          var handledNodeCount = 0;

	          for (var i = 0; i < nodeArray.length; i++) {
	            var node = nodeArray[i];
	            if (this.positionedNodes[node.id] === undefined) {
	              var spacing = this.options.hierarchical.nodeSpacing;
	              var pos = spacing * handledNodeCount;
	              // We get the X or Y values we need and store them in pos and previousPos.
	              // The get and set make sure we get X or Y
	              if (handledNodeCount > 0) {
	                pos = this.direction.getPosition(nodeArray[i - 1]) + spacing;
	              }
	              this.direction.setPosition(node, pos, level);
	              this._validatePositionAndContinue(node, level, pos);

	              handledNodeCount++;
	            }
	          }
	        }
	      }
	    }

	    /**
	     * This is a recursively called function to enumerate the branches from the largest hubs and place the nodes
	     * on a X position that ensures there will be no overlap.
	     *
	     * @param {Node.id} parentId
	     * @param {number} parentLevel
	     * @private
	     */

	  }, {
	    key: '_placeBranchNodes',
	    value: function _placeBranchNodes(parentId, parentLevel) {
	      var childRef = this.hierarchical.childrenReference[parentId];

	      // if this is not a parent, cancel the placing. This can happen with multiple parents to one child.
	      if (childRef === undefined) {
	        return;
	      }

	      // get a list of childNodes
	      var childNodes = [];
	      for (var i = 0; i < childRef.length; i++) {
	        childNodes.push(this.body.nodes[childRef[i]]);
	      }

	      // use the positions to order the nodes.
	      this.direction.sort(childNodes);

	      // position the childNodes
	      for (var _i5 = 0; _i5 < childNodes.length; _i5++) {
	        var childNode = childNodes[_i5];
	        var childNodeLevel = this.hierarchical.levels[childNode.id];
	        // check if the child node is below the parent node and if it has already been positioned.
	        if (childNodeLevel > parentLevel && this.positionedNodes[childNode.id] === undefined) {
	          // get the amount of space required for this node. If parent the width is based on the amount of children.
	          var spacing = this.options.hierarchical.nodeSpacing;
	          var pos = void 0;

	          // we get the X or Y values we need and store them in pos and previousPos.
	          // The get and set make sure we get X or Y
	          if (_i5 === 0) {
	            pos = this.direction.getPosition(this.body.nodes[parentId]);
	          } else {
	            pos = this.direction.getPosition(childNodes[_i5 - 1]) + spacing;
	          }
	          this.direction.setPosition(childNode, pos, childNodeLevel);
	          this._validatePositionAndContinue(childNode, childNodeLevel, pos);
	        } else {
	          return;
	        }
	      }

	      // center the parent nodes.
	      var center = this._getCenterPosition(childNodes);
	      this.direction.setPosition(this.body.nodes[parentId], center, parentLevel);
	    }

	    /**
	     * This method checks for overlap and if required shifts the branch. It also keeps records of positioned nodes.
	     * Finally it will call _placeBranchNodes to place the branch nodes.
	     * @param {Node} node
	     * @param {number} level
	     * @param {number} pos
	     * @private
	     */

	  }, {
	    key: '_validatePositionAndContinue',
	    value: function _validatePositionAndContinue(node, level, pos) {
	      // This method only works for formal trees and formal forests
	      // Early exit if this is not the case
	      if (!this.hierarchical.isTree) return;

	      // if overlap has been detected, we shift the branch
	      if (this.lastNodeOnLevel[level] !== undefined) {
	        var previousPos = this.direction.getPosition(this.body.nodes[this.lastNodeOnLevel[level]]);
	        if (pos - previousPos < this.options.hierarchical.nodeSpacing) {
	          var diff = previousPos + this.options.hierarchical.nodeSpacing - pos;
	          var sharedParent = this._findCommonParent(this.lastNodeOnLevel[level], node.id);
	          this._shiftBlock(sharedParent.withChild, diff);
	        }
	      }

	      this.lastNodeOnLevel[level] = node.id; // store change in position.
	      this.positionedNodes[node.id] = true;
	      this._placeBranchNodes(node.id, level);
	    }

	    /**
	     * Receives an array with node indices and returns an array with the actual node references.
	     * Used for sorting based on node properties.
	     * @param {Array.<Node.id>} idArray
	     * @returns {Array.<Node>}
	     */

	  }, {
	    key: '_indexArrayToNodes',
	    value: function _indexArrayToNodes(idArray) {
	      var array = [];
	      for (var i = 0; i < idArray.length; i++) {
	        array.push(this.body.nodes[idArray[i]]);
	      }
	      return array;
	    }

	    /**
	     * This function get the distribution of levels based on hubsize
	     *
	     * @returns {Object}
	     * @private
	     */

	  }, {
	    key: '_getDistribution',
	    value: function _getDistribution() {
	      var distribution = {};
	      var nodeId = void 0,
	          node = void 0;

	      // we fix Y because the hierarchy is vertical,
	      // we fix X so we do not give a node an x position for a second time.
	      // the fix of X is removed after the x value has been set.
	      for (nodeId in this.body.nodes) {
	        if (this.body.nodes.hasOwnProperty(nodeId)) {
	          node = this.body.nodes[nodeId];
	          var level = this.hierarchical.levels[nodeId] === undefined ? 0 : this.hierarchical.levels[nodeId];
	          this.direction.fix(node, level);
	          if (distribution[level] === undefined) {
	            distribution[level] = {};
	          }
	          distribution[level][nodeId] = node;
	        }
	      }
	      return distribution;
	    }

	    /**
	     * Return the active (i.e. visible) edges for this node
	     *
	     * @param {Node} node
	     * @returns {Array.<vis.Edge>} Array of edge instances
	     * @private
	     */

	  }, {
	    key: '_getActiveEdges',
	    value: function _getActiveEdges(node) {
	      var _this4 = this;

	      var result = [];

	      util.forEach(node.edges, function (edge) {
	        if (_this4.body.edgeIndices.indexOf(edge.id) !== -1) {
	          result.push(edge);
	        }
	      });

	      return result;
	    }

	    /**
	     * Get the hubsizes for all active nodes.
	     *
	     * @returns {number}
	     * @private
	     */

	  }, {
	    key: '_getHubSizes',
	    value: function _getHubSizes() {
	      var _this5 = this;

	      var hubSizes = {};
	      var nodeIds = this.body.nodeIndices;

	      util.forEach(nodeIds, function (nodeId) {
	        var node = _this5.body.nodes[nodeId];
	        var hubSize = _this5._getActiveEdges(node).length;
	        hubSizes[hubSize] = true;
	      });

	      // Make an array of the size sorted descending
	      var result = [];
	      util.forEach(hubSizes, function (size) {
	        result.push(Number(size));
	      });

	      result.sort(function (a, b) {
	        return b - a;
	      });

	      return result;
	    }

	    /**
	     * this function allocates nodes in levels based on the recursive branching from the largest hubs.
	     *
	     * @private
	     */

	  }, {
	    key: '_determineLevelsByHubsize',
	    value: function _determineLevelsByHubsize() {
	      var _this6 = this;

	      var levelDownstream = function levelDownstream(nodeA, nodeB) {
	        _this6.hierarchical.levelDownstream(nodeA, nodeB);
	      };

	      var hubSizes = this._getHubSizes();

	      var _loop = function _loop(i) {
	        var hubSize = hubSizes[i];
	        if (hubSize === 0) return 'break';

	        util.forEach(_this6.body.nodeIndices, function (nodeId) {
	          var node = _this6.body.nodes[nodeId];

	          if (hubSize === _this6._getActiveEdges(node).length) {
	            _this6._crawlNetwork(levelDownstream, nodeId);
	          }
	        });
	      };

	      for (var i = 0; i < hubSizes.length; ++i) {
	        var _ret = _loop(i);

	        if (_ret === 'break') break;
	      }
	    }

	    /**
	     * TODO: release feature
	     * TODO: Determine if this feature is needed at all
	     *
	     * @private
	     */

	  }, {
	    key: '_determineLevelsCustomCallback',
	    value: function _determineLevelsCustomCallback() {
	      var _this7 = this;

	      var minLevel = 100000;

	      // TODO: this should come from options.
	      var customCallback = function customCallback(nodeA, nodeB, edge) {// eslint-disable-line no-unused-vars

	      };

	      // TODO: perhaps move to HierarchicalStatus.
	      //       But I currently don't see the point, this method is not used.
	      var levelByDirection = function levelByDirection(nodeA, nodeB, edge) {
	        var levelA = _this7.hierarchical.levels[nodeA.id];
	        // set initial level
	        if (levelA === undefined) {
	          levelA = _this7.hierarchical.levels[nodeA.id] = minLevel;
	        }

	        var diff = customCallback(NetworkUtil.cloneOptions(nodeA, 'node'), NetworkUtil.cloneOptions(nodeB, 'node'), NetworkUtil.cloneOptions(edge, 'edge'));

	        _this7.hierarchical.levels[nodeB.id] = levelA + diff;
	      };

	      this._crawlNetwork(levelByDirection);
	      this.hierarchical.setMinLevelToZero(this.body.nodes);
	    }

	    /**
	     * Allocate nodes in levels based on the direction of the edges.
	     *
	     * @private
	     */

	  }, {
	    key: '_determineLevelsDirected',
	    value: function _determineLevelsDirected() {
	      var _this8 = this;

	      var minLevel = 10000;

	      /**
	       * Check if there is an edge going the opposite direction for given edge
	       *
	       * @param {Edge} edge  edge to check
	       * @returns {boolean} true if there's another edge going into the opposite direction
	       */
	      var isBidirectional = function isBidirectional(edge) {
	        util.forEach(_this8.body.edges, function (otherEdge) {
	          if (otherEdge.toId === edge.fromId && otherEdge.fromId === edge.toId) {
	            return true;
	          }
	        });

	        return false;
	      };

	      var levelByDirection = function levelByDirection(nodeA, nodeB, edge) {
	        var levelA = _this8.hierarchical.levels[nodeA.id];
	        var levelB = _this8.hierarchical.levels[nodeB.id];

	        if (isBidirectional(edge) && levelA !== undefined && levelB !== undefined) {
	          // Don't redo the level determination if already done in this case.
	          return;
	        }

	        // set initial level
	        if (levelA === undefined) {
	          levelA = _this8.hierarchical.levels[nodeA.id] = minLevel;
	        }
	        if (edge.toId == nodeB.id) {
	          _this8.hierarchical.levels[nodeB.id] = levelA + 1;
	        } else {
	          _this8.hierarchical.levels[nodeB.id] = levelA - 1;
	        }
	      };

	      this._crawlNetwork(levelByDirection);
	      this.hierarchical.setMinLevelToZero(this.body.nodes);
	    }

	    /**
	     * Update the bookkeeping of parent and child.
	     * @private
	     */

	  }, {
	    key: '_generateMap',
	    value: function _generateMap() {
	      var _this9 = this;

	      var fillInRelations = function fillInRelations(parentNode, childNode) {
	        if (_this9.hierarchical.levels[childNode.id] > _this9.hierarchical.levels[parentNode.id]) {
	          _this9.hierarchical.addRelation(parentNode.id, childNode.id);
	        }
	      };

	      this._crawlNetwork(fillInRelations);
	      this.hierarchical.checkIfTree();
	    }

	    /**
	     * Crawl over the entire network and use a callback on each node couple that is connected to each other.
	     * @param {function} [callback=function(){}]          | will receive nodeA, nodeB and the connecting edge. A and B are distinct.
	     * @param {Node.id} startingNodeId
	     * @private
	     */

	  }, {
	    key: '_crawlNetwork',
	    value: function _crawlNetwork() {
	      var _this10 = this;

	      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
	      var startingNodeId = arguments[1];

	      var progress = {};

	      var crawler = function crawler(node, tree) {
	        if (progress[node.id] === undefined) {
	          _this10.hierarchical.setTreeIndex(node, tree);

	          progress[node.id] = true;
	          var childNode = void 0;
	          var edges = _this10._getActiveEdges(node);
	          for (var i = 0; i < edges.length; i++) {
	            var edge = edges[i];
	            if (edge.connected === true) {
	              if (edge.toId == node.id) {
	                // Not '===' because id's can be string and numeric
	                childNode = edge.from;
	              } else {
	                childNode = edge.to;
	              }

	              if (node.id != childNode.id) {
	                // Not '!==' because id's can be string and numeric
	                callback(node, childNode, edge);
	                crawler(childNode, tree);
	              }
	            }
	          }
	        }
	      };

	      if (startingNodeId === undefined) {
	        // Crawl over all nodes
	        var treeIndex = 0; // Serves to pass a unique id for the current distinct tree

	        for (var i = 0; i < this.body.nodeIndices.length; i++) {
	          var nodeId = this.body.nodeIndices[i];

	          if (progress[nodeId] === undefined) {
	            var node = this.body.nodes[nodeId];
	            crawler(node, treeIndex);
	            treeIndex += 1;
	          }
	        }
	      } else {
	        // Crawl from the given starting node
	        var _node2 = this.body.nodes[startingNodeId];
	        if (_node2 === undefined) {
	          console.error("Node not found:", startingNodeId);
	          return;
	        }
	        crawler(_node2);
	      }
	    }

	    /**
	     * Shift a branch a certain distance
	     * @param {Node.id} parentId
	     * @param {number} diff
	     * @private
	     */

	  }, {
	    key: '_shiftBlock',
	    value: function _shiftBlock(parentId, diff) {
	      var _this11 = this;

	      var progress = {};
	      var shifter = function shifter(parentId) {
	        if (progress[parentId]) {
	          return;
	        }
	        progress[parentId] = true;
	        _this11.direction.shift(parentId, diff);

	        var childRef = _this11.hierarchical.childrenReference[parentId];
	        if (childRef !== undefined) {
	          for (var i = 0; i < childRef.length; i++) {
	            shifter(childRef[i]);
	          }
	        }
	      };
	      shifter(parentId);
	    }

	    /**
	     * Find a common parent between branches.
	     * @param {Node.id} childA
	     * @param {Node.id} childB
	     * @returns {{foundParent, withChild}}
	     * @private
	     */

	  }, {
	    key: '_findCommonParent',
	    value: function _findCommonParent(childA, childB) {
	      var _this12 = this;

	      var parents = {};
	      var iterateParents = function iterateParents(parents, child) {
	        var parentRef = _this12.hierarchical.parentReference[child];
	        if (parentRef !== undefined) {
	          for (var i = 0; i < parentRef.length; i++) {
	            var parent = parentRef[i];
	            parents[parent] = true;
	            iterateParents(parents, parent);
	          }
	        }
	      };
	      var findParent = function findParent(parents, child) {
	        var parentRef = _this12.hierarchical.parentReference[child];
	        if (parentRef !== undefined) {
	          for (var i = 0; i < parentRef.length; i++) {
	            var parent = parentRef[i];
	            if (parents[parent] !== undefined) {
	              return { foundParent: parent, withChild: child };
	            }
	            var branch = findParent(parents, parent);
	            if (branch.foundParent !== null) {
	              return branch;
	            }
	          }
	        }
	        return { foundParent: null, withChild: child };
	      };

	      iterateParents(parents, childA);
	      return findParent(parents, childB);
	    }

	    /**
	     * Set the strategy pattern for handling the coordinates given the current direction.
	     *
	     * The individual instances contain all the operations and data specific to a layout direction.
	     *
	     * @param {Node} node
	     * @param {{x: number, y: number}} position
	     * @param {number} level
	     * @param {boolean} [doNotUpdate=false]
	     * @private
	     */

	  }, {
	    key: 'setDirectionStrategy',
	    value: function setDirectionStrategy() {
	      var isVertical = this.options.hierarchical.direction === 'UD' || this.options.hierarchical.direction === 'DU';

	      if (isVertical) {
	        this.direction = new VerticalStrategy(this);
	      } else {
	        this.direction = new HorizontalStrategy(this);
	      }
	    }

	    /**
	     * Determine the center position of a branch from the passed list of child nodes
	     *
	     * This takes into account the positions of all the child nodes.
	     * @param {Array.<Node|vis.Node.id>} childNodes  Array of either child nodes or node id's
	     * @return {number}
	     * @private
	     */

	  }, {
	    key: '_getCenterPosition',
	    value: function _getCenterPosition(childNodes) {
	      var minPos = 1e9;
	      var maxPos = -1e9;

	      for (var i = 0; i < childNodes.length; i++) {
	        var childNode = void 0;
	        if (childNodes[i].id !== undefined) {
	          childNode = childNodes[i];
	        } else {
	          var childNodeId = childNodes[i];
	          childNode = this.body.nodes[childNodeId];
	        }

	        var position = this.direction.getPosition(childNode);
	        minPos = Math.min(minPos, position);
	        maxPos = Math.max(maxPos, position);
	      }

	      return 0.5 * (minPos + maxPos);
	    }
	  }]);
	  return LayoutEngine;
	}();

	exports['default'] = LayoutEngine;

	/***/ }),
	/* 236 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.VerticalStrategy = exports.HorizontalStrategy = undefined;

	var _getPrototypeOf = __webpack_require__(3);

	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

	var _possibleConstructorReturn2 = __webpack_require__(4);

	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

	var _inherits2 = __webpack_require__(5);

	var _inherits3 = _interopRequireDefault(_inherits2);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Helper classes for LayoutEngine.
	 *
	 * Strategy pattern for usage of direction methods for hierarchical layouts.
	 */

	/**
	 * Interface definition for direction strategy classes.
	 *
	 * This class describes the interface for the Strategy
	 * pattern classes used to differentiate horizontal and vertical
	 * direction of hierarchical results.
	 *
	 * For a given direction, one coordinate will be 'fixed', meaning that it is
	 * determined by level.
	 * The other coordinate is 'unfixed', meaning that the nodes on a given level
	 * can still move along that coordinate. So:
	 *
	 * - `vertical` layout: `x` unfixed, `y` fixed per level
	 * - `horizontal` layout: `x` fixed per level, `y` unfixed
	 *
	 * The local methods are stubs and should be regarded as abstract.
	 * Derived classes **must** implement all the methods themselves.
	 *
	 * @private
	 */
	var DirectionInterface = function () {
	  function DirectionInterface() {
	    (0, _classCallCheck3['default'])(this, DirectionInterface);
	  }

	  (0, _createClass3['default'])(DirectionInterface, [{
	    key: 'abstract',

	    /** @ignore **/
	    value: function abstract() {
	      throw new Error("Can't instantiate abstract class!");
	    }

	    /**
	     * This is a dummy call which is used to suppress the jsdoc errors of type:
	     *
	     *   "'param' is assigned a value but never used"
	     *
	     * @ignore
	     **/

	  }, {
	    key: 'fake_use',
	    value: function fake_use() {}
	    // Do nothing special


	    /**
	     * Type to use to translate dynamic curves to, in the case of hierarchical layout.
	     * Dynamic curves do not work for these.
	     *
	     * The value should be perpendicular to the actual direction of the layout.
	     *
	     * @return {string} Direction, either 'vertical' or 'horizontal'
	     */

	  }, {
	    key: 'curveType',
	    value: function curveType() {
	      return this.abstract();
	    }

	    /**
	     * Return the value of the coordinate that is not fixed for this direction.
	     *
	     * @param {Node} node The node to read
	     * @return {number} Value of the unfixed coordinate
	     */

	  }, {
	    key: 'getPosition',
	    value: function getPosition(node) {
	      this.fake_use(node);return this.abstract();
	    }

	    /**
	     * Set the value of the coordinate that is not fixed for this direction.
	     *
	     * @param {Node} node The node to adjust
	     * @param {number} position
	     * @param {number} [level] if specified, the hierarchy level that this node should be fixed to
	     */

	  }, {
	    key: 'setPosition',
	    value: function setPosition(node, position) {
	      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
	      this.fake_use(node, position, level);this.abstract();
	    }

	    /**
	     * Get the width of a tree.
	     *
	     * A `tree` here is a subset of nodes within the network which are not connected to other nodes,
	     * only among themselves. In essence, it is a sub-network.
	     *
	     * @param {number} index The index number of a tree
	     * @return {number} the width of a tree in the view coordinates
	     */

	  }, {
	    key: 'getTreeSize',
	    value: function getTreeSize(index) {
	      this.fake_use(index);return this.abstract();
	    }

	    /**
	     * Sort array of nodes on the unfixed coordinates.
	     *
	     * @param {Array.<Node>} nodeArray array of nodes to sort
	     */

	  }, {
	    key: 'sort',
	    value: function sort(nodeArray) {
	      this.fake_use(nodeArray);this.abstract();
	    }

	    /**
	     * Assign the fixed coordinate of the node to the given level
	     *
	     * @param {Node} node The node to adjust
	     * @param {number} level The level to fix to
	     */

	  }, {
	    key: 'fix',
	    value: function fix(node, level) {
	      this.fake_use(node, level);this.abstract();
	    }

	    /**
	     * Add an offset to the unfixed coordinate of the given node. 
	     *
	     * @param {NodeId} nodeId Id of the node to adjust
	     * @param {number} diff Offset to add to the unfixed coordinate
	     */

	  }, {
	    key: 'shift',
	    value: function shift(nodeId, diff) {
	      this.fake_use(nodeId, diff);this.abstract();
	    }
	  }]);
	  return DirectionInterface;
	}();

	/**
	 * Vertical Strategy
	 *
	 * Coordinate `y` is fixed on levels, coordinate `x` is unfixed.
	 *
	 * @extends DirectionInterface
	 * @private
	 */


	var VerticalStrategy = function (_DirectionInterface) {
	  (0, _inherits3['default'])(VerticalStrategy, _DirectionInterface);

	  /**
	   * Constructor
	   *
	   * @param {Object} layout reference to the parent LayoutEngine instance.
	   */
	  function VerticalStrategy(layout) {
	    (0, _classCallCheck3['default'])(this, VerticalStrategy);

	    var _this = (0, _possibleConstructorReturn3['default'])(this, (VerticalStrategy.__proto__ || (0, _getPrototypeOf2['default'])(VerticalStrategy)).call(this));

	    _this.layout = layout;
	    return _this;
	  }

	  /** @inheritdoc */


	  (0, _createClass3['default'])(VerticalStrategy, [{
	    key: 'curveType',
	    value: function curveType() {
	      return 'horizontal';
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'getPosition',
	    value: function getPosition(node) {
	      return node.x;
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'setPosition',
	    value: function setPosition(node, position) {
	      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

	      if (level !== undefined) {
	        this.layout.hierarchical.addToOrdering(node, level);
	      }
	      node.x = position;
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'getTreeSize',
	    value: function getTreeSize(index) {
	      var res = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, index);
	      return { min: res.min_x, max: res.max_x };
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'sort',
	    value: function sort(nodeArray) {
	      nodeArray.sort(function (a, b) {
	        // Test on 'undefined' takes care of divergent behaviour in chrome
	        if (a.x === undefined || b.x === undefined) return 0; // THIS HAPPENS
	        return a.x - b.x;
	      });
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'fix',
	    value: function fix(node, level) {
	      node.y = this.layout.options.hierarchical.levelSeparation * level;
	      node.options.fixed.y = true;
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'shift',
	    value: function shift(nodeId, diff) {
	      this.layout.body.nodes[nodeId].x += diff;
	    }
	  }]);
	  return VerticalStrategy;
	}(DirectionInterface);

	/**
	 * Horizontal Strategy
	 *
	 * Coordinate `x` is fixed on levels, coordinate `y` is unfixed.
	 *
	 * @extends DirectionInterface
	 * @private
	 */


	var HorizontalStrategy = function (_DirectionInterface2) {
	  (0, _inherits3['default'])(HorizontalStrategy, _DirectionInterface2);

	  /**
	   * Constructor
	   *
	   * @param {Object} layout reference to the parent LayoutEngine instance.
	   */
	  function HorizontalStrategy(layout) {
	    (0, _classCallCheck3['default'])(this, HorizontalStrategy);

	    var _this2 = (0, _possibleConstructorReturn3['default'])(this, (HorizontalStrategy.__proto__ || (0, _getPrototypeOf2['default'])(HorizontalStrategy)).call(this));

	    _this2.layout = layout;
	    return _this2;
	  }

	  /** @inheritdoc */


	  (0, _createClass3['default'])(HorizontalStrategy, [{
	    key: 'curveType',
	    value: function curveType() {
	      return 'vertical';
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'getPosition',
	    value: function getPosition(node) {
	      return node.y;
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'setPosition',
	    value: function setPosition(node, position) {
	      var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

	      if (level !== undefined) {
	        this.layout.hierarchical.addToOrdering(node, level);
	      }
	      node.y = position;
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'getTreeSize',
	    value: function getTreeSize(index) {
	      var res = this.layout.hierarchical.getTreeSize(this.layout.body.nodes, index);
	      return { min: res.min_y, max: res.max_y };
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'sort',
	    value: function sort(nodeArray) {
	      nodeArray.sort(function (a, b) {
	        // Test on 'undefined' takes care of divergent behaviour in chrome
	        if (a.y === undefined || b.y === undefined) return 0; // THIS HAPPENS
	        return a.y - b.y;
	      });
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'fix',
	    value: function fix(node, level) {
	      node.x = this.layout.options.hierarchical.levelSeparation * level;
	      node.options.fixed.x = true;
	    }

	    /** @inheritdoc */

	  }, {
	    key: 'shift',
	    value: function shift(nodeId, diff) {
	      this.layout.body.nodes[nodeId].y += diff;
	    }
	  }]);
	  return HorizontalStrategy;
	}(DirectionInterface);

	exports.HorizontalStrategy = HorizontalStrategy;
	exports.VerticalStrategy = VerticalStrategy;

	/***/ }),
	/* 237 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _keys = __webpack_require__(8);

	var _keys2 = _interopRequireDefault(_keys);

	var _stringify = __webpack_require__(19);

	var _stringify2 = _interopRequireDefault(_stringify);

	var _typeof2 = __webpack_require__(6);

	var _typeof3 = _interopRequireDefault(_typeof2);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var util = __webpack_require__(2);
	var Hammer = __webpack_require__(10);
	var hammerUtil = __webpack_require__(37);

	/**
	 * Clears the toolbar div element of children
	 *
	 * @private
	 */

	var ManipulationSystem = function () {
	  /**
	   * @param {Object} body
	   * @param {Canvas} canvas
	   * @param {SelectionHandler} selectionHandler
	   */
	  function ManipulationSystem(body, canvas, selectionHandler) {
	    var _this = this;

	    (0, _classCallCheck3['default'])(this, ManipulationSystem);

	    this.body = body;
	    this.canvas = canvas;
	    this.selectionHandler = selectionHandler;

	    this.editMode = false;
	    this.manipulationDiv = undefined;
	    this.editModeDiv = undefined;
	    this.closeDiv = undefined;

	    this.manipulationHammers = [];
	    this.temporaryUIFunctions = {};
	    this.temporaryEventFunctions = [];

	    this.touchTime = 0;
	    this.temporaryIds = { nodes: [], edges: [] };
	    this.guiEnabled = false;
	    this.inMode = false;
	    this.selectedControlNode = undefined;

	    this.options = {};
	    this.defaultOptions = {
	      enabled: false,
	      initiallyActive: false,
	      addNode: true,
	      addEdge: true,
	      editNode: undefined,
	      editEdge: true,
	      deleteNode: true,
	      deleteEdge: true,
	      controlNodeStyle: {
	        shape: 'dot',
	        size: 6,
	        color: { background: '#ff0000', border: '#3c3c3c', highlight: { background: '#07f968', border: '#3c3c3c' } },
	        borderWidth: 2,
	        borderWidthSelected: 2
	      }
	    };
	    util.extend(this.options, this.defaultOptions);

	    this.body.emitter.on('destroy', function () {
	      _this._clean();
	    });
	    this.body.emitter.on('_dataChanged', this._restore.bind(this));
	    this.body.emitter.on('_resetData', this._restore.bind(this));
	  }

	  /**
	   * If something changes in the data during editing, switch back to the initial datamanipulation state and close all edit modes.
	   * @private
	   */


	  (0, _createClass3['default'])(ManipulationSystem, [{
	    key: '_restore',
	    value: function _restore() {
	      if (this.inMode !== false) {
	        if (this.options.initiallyActive === true) {
	          this.enableEditMode();
	        } else {
	          this.disableEditMode();
	        }
	      }
	    }

	    /**
	     * Set the Options
	     *
	     * @param {Object} options
	     * @param {Object} allOptions
	     * @param {Object} globalOptions
	     */

	  }, {
	    key: 'setOptions',
	    value: function setOptions(options, allOptions, globalOptions) {
	      if (allOptions !== undefined) {
	        if (allOptions.locale !== undefined) {
	          this.options.locale = allOptions.locale;
	        } else {
	          this.options.locale = globalOptions.locale;
	        }
	        if (allOptions.locales !== undefined) {
	          this.options.locales = allOptions.locales;
	        } else {
	          this.options.locales = globalOptions.locales;
	        }
	      }

	      if (options !== undefined) {
	        if (typeof options === 'boolean') {
	          this.options.enabled = options;
	        } else {
	          this.options.enabled = true;
	          util.deepExtend(this.options, options);
	        }
	        if (this.options.initiallyActive === true) {
	          this.editMode = true;
	        }
	        this._setup();
	      }
	    }

	    /**
	     * Enable or disable edit-mode. Draws the DOM required and cleans up after itself.
	     *
	     * @private
	     */

	  }, {
	    key: 'toggleEditMode',
	    value: function toggleEditMode() {
	      if (this.editMode === true) {
	        this.disableEditMode();
	      } else {
	        this.enableEditMode();
	      }
	    }

	    /**
	     * Enables Edit Mode
	     */

	  }, {
	    key: 'enableEditMode',
	    value: function enableEditMode() {
	      this.editMode = true;

	      this._clean();
	      if (this.guiEnabled === true) {
	        this.manipulationDiv.style.display = 'block';
	        this.closeDiv.style.display = 'block';
	        this.editModeDiv.style.display = 'none';
	        this.showManipulatorToolbar();
	      }
	    }

	    /**
	     * Disables Edit Mode
	     */

	  }, {
	    key: 'disableEditMode',
	    value: function disableEditMode() {
	      this.editMode = false;

	      this._clean();
	      if (this.guiEnabled === true) {
	        this.manipulationDiv.style.display = 'none';
	        this.closeDiv.style.display = 'none';
	        this.editModeDiv.style.display = 'block';
	        this._createEditButton();
	      }
	    }

	    /**
	     * Creates the main toolbar. Removes functions bound to the select event. Binds all the buttons of the toolbar.
	     *
	     * @private
	     */

	  }, {
	    key: 'showManipulatorToolbar',
	    value: function showManipulatorToolbar() {
	      // restore the state of any bound functions or events, remove control nodes, restore physics
	      this._clean();

	      // reset global variables
	      this.manipulationDOM = {};

	      // if the gui is enabled, draw all elements.
	      if (this.guiEnabled === true) {
	        // a _restore will hide these menus
	        this.editMode = true;
	        this.manipulationDiv.style.display = 'block';
	        this.closeDiv.style.display = 'block';

	        var selectedNodeCount = this.selectionHandler._getSelectedNodeCount();
	        var selectedEdgeCount = this.selectionHandler._getSelectedEdgeCount();
	        var selectedTotalCount = selectedNodeCount + selectedEdgeCount;
	        var locale = this.options.locales[this.options.locale];
	        var needSeperator = false;

	        if (this.options.addNode !== false) {
	          this._createAddNodeButton(locale);
	          needSeperator = true;
	        }
	        if (this.options.addEdge !== false) {
	          if (needSeperator === true) {
	            this._createSeperator(1);
	          } else {
	            needSeperator = true;
	          }
	          this._createAddEdgeButton(locale);
	        }

	        if (selectedNodeCount === 1 && typeof this.options.editNode === 'function') {
	          if (needSeperator === true) {
	            this._createSeperator(2);
	          } else {
	            needSeperator = true;
	          }
	          this._createEditNodeButton(locale);
	        } else if (selectedEdgeCount === 1 && selectedNodeCount === 0 && this.options.editEdge !== false) {
	          if (needSeperator === true) {
	            this._createSeperator(3);
	          } else {
	            needSeperator = true;
	          }
	          this._createEditEdgeButton(locale);
	        }

	        // remove buttons
	        if (selectedTotalCount !== 0) {
	          if (selectedNodeCount > 0 && this.options.deleteNode !== false) {
	            if (needSeperator === true) {
	              this._createSeperator(4);
	            }
	            this._createDeleteButton(locale);
	          } else if (selectedNodeCount === 0 && this.options.deleteEdge !== false) {
	            if (needSeperator === true) {
	              this._createSeperator(4);
	            }
	            this._createDeleteButton(locale);
	          }
	        }

	        // bind the close button
	        this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));

	        // refresh this bar based on what has been selected
	        this._temporaryBindEvent('select', this.showManipulatorToolbar.bind(this));
	      }

	      // redraw to show any possible changes
	      this.body.emitter.emit('_redraw');
	    }

	    /**
	     * Create the toolbar for adding Nodes
	     */

	  }, {
	    key: 'addNodeMode',
	    value: function addNodeMode() {
	      // when using the gui, enable edit mode if it wasnt already.
	      if (this.editMode !== true) {
	        this.enableEditMode();
	      }

	      // restore the state of any bound functions or events, remove control nodes, restore physics
	      this._clean();

	      this.inMode = 'addNode';
	      if (this.guiEnabled === true) {
	        var locale = this.options.locales[this.options.locale];
	        this.manipulationDOM = {};
	        this._createBackButton(locale);
	        this._createSeperator();
	        this._createDescription(locale['addDescription'] || this.options.locales['en']['addDescription']);

	        // bind the close button
	        this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));
	      }

	      this._temporaryBindEvent('click', this._performAddNode.bind(this));
	    }

	    /**
	     * call the bound function to handle the editing of the node. The node has to be selected.
	     */

	  }, {
	    key: 'editNode',
	    value: function editNode() {
	      var _this2 = this;

	      // when using the gui, enable edit mode if it wasnt already.
	      if (this.editMode !== true) {
	        this.enableEditMode();
	      }

	      // restore the state of any bound functions or events, remove control nodes, restore physics
	      this._clean();
	      var node = this.selectionHandler._getSelectedNode();
	      if (node !== undefined) {
	        this.inMode = 'editNode';
	        if (typeof this.options.editNode === 'function') {
	          if (node.isCluster !== true) {
	            var data = util.deepExtend({}, node.options, false);
	            data.x = node.x;
	            data.y = node.y;

	            if (this.options.editNode.length === 2) {
	              this.options.editNode(data, function (finalizedData) {
	                if (finalizedData !== null && finalizedData !== undefined && _this2.inMode === 'editNode') {
	                  // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {
	                  _this2.body.data.nodes.getDataSet().update(finalizedData);
	                }
	                _this2.showManipulatorToolbar();
	              });
	            } else {
	              throw new Error('The function for edit does not support two arguments (data, callback)');
	            }
	          } else {
	            alert(this.options.locales[this.options.locale]['editClusterError'] || this.options.locales['en']['editClusterError']);
	          }
	        } else {
	          throw new Error('No function has been configured to handle the editing of nodes.');
	        }
	      } else {
	        this.showManipulatorToolbar();
	      }
	    }

	    /**
	     * create the toolbar to connect nodes
	     */

	  }, {
	    key: 'addEdgeMode',
	    value: function addEdgeMode() {
	      // when using the gui, enable edit mode if it wasnt already.
	      if (this.editMode !== true) {
	        this.enableEditMode();
	      }

	      // restore the state of any bound functions or events, remove control nodes, restore physics
	      this._clean();

	      this.inMode = 'addEdge';
	      if (this.guiEnabled === true) {
	        var locale = this.options.locales[this.options.locale];
	        this.manipulationDOM = {};
	        this._createBackButton(locale);
	        this._createSeperator();
	        this._createDescription(locale['edgeDescription'] || this.options.locales['en']['edgeDescription']);

	        // bind the close button
	        this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));
	      }

	      // temporarily overload functions
	      this._temporaryBindUI('onTouch', this._handleConnect.bind(this));
	      this._temporaryBindUI('onDragEnd', this._finishConnect.bind(this));
	      this._temporaryBindUI('onDrag', this._dragControlNode.bind(this));
	      this._temporaryBindUI('onRelease', this._finishConnect.bind(this));
	      this._temporaryBindUI('onDragStart', this._dragStartEdge.bind(this));
	      this._temporaryBindUI('onHold', function () {});
	    }

	    /**
	     * create the toolbar to edit edges
	     */

	  }, {
	    key: 'editEdgeMode',
	    value: function editEdgeMode() {
	      // when using the gui, enable edit mode if it wasn't already.
	      if (this.editMode !== true) {
	        this.enableEditMode();
	      }

	      // restore the state of any bound functions or events, remove control nodes, restore physics
	      this._clean();

	      this.inMode = 'editEdge';
	      if ((0, _typeof3['default'])(this.options.editEdge) === 'object' && typeof this.options.editEdge.editWithoutDrag === "function") {
	        this.edgeBeingEditedId = this.selectionHandler.getSelectedEdges()[0];
	        if (this.edgeBeingEditedId !== undefined) {
	          var edge = this.body.edges[this.edgeBeingEditedId];
	          this._performEditEdge(edge.from, edge.to);
	          return;
	        }
	      }
	      if (this.guiEnabled === true) {
	        var locale = this.options.locales[this.options.locale];
	        this.manipulationDOM = {};
	        this._createBackButton(locale);
	        this._createSeperator();
	        this._createDescription(locale['editEdgeDescription'] || this.options.locales['en']['editEdgeDescription']);

	        // bind the close button
	        this._bindHammerToDiv(this.closeDiv, this.toggleEditMode.bind(this));
	      }

	      this.edgeBeingEditedId = this.selectionHandler.getSelectedEdges()[0];
	      if (this.edgeBeingEditedId !== undefined) {
	        var _edge = this.body.edges[this.edgeBeingEditedId];

	        // create control nodes
	        var controlNodeFrom = this._getNewTargetNode(_edge.from.x, _edge.from.y);
	        var controlNodeTo = this._getNewTargetNode(_edge.to.x, _edge.to.y);

	        this.temporaryIds.nodes.push(controlNodeFrom.id);
	        this.temporaryIds.nodes.push(controlNodeTo.id);

	        this.body.nodes[controlNodeFrom.id] = controlNodeFrom;
	        this.body.nodeIndices.push(controlNodeFrom.id);
	        this.body.nodes[controlNodeTo.id] = controlNodeTo;
	        this.body.nodeIndices.push(controlNodeTo.id);

	        // temporarily overload UI functions, cleaned up automatically because of _temporaryBindUI
	        this._temporaryBindUI('onTouch', this._controlNodeTouch.bind(this)); // used to get the position
	        this._temporaryBindUI('onTap', function () {}); // disabled
	        this._temporaryBindUI('onHold', function () {}); // disabled
	        this._temporaryBindUI('onDragStart', this._controlNodeDragStart.bind(this)); // used to select control node
	        this._temporaryBindUI('onDrag', this._controlNodeDrag.bind(this)); // used to drag control node
	        this._temporaryBindUI('onDragEnd', this._controlNodeDragEnd.bind(this)); // used to connect or revert control nodes
	        this._temporaryBindUI('onMouseMove', function () {}); // disabled

	        // create function to position control nodes correctly on movement
	        // automatically cleaned up because we use the temporary bind
	        this._temporaryBindEvent('beforeDrawing', function (ctx) {
	          var positions = _edge.edgeType.findBorderPositions(ctx);
	          if (controlNodeFrom.selected === false) {
	            controlNodeFrom.x = positions.from.x;
	            controlNodeFrom.y = positions.from.y;
	          }
	          if (controlNodeTo.selected === false) {
	            controlNodeTo.x = positions.to.x;
	            controlNodeTo.y = positions.to.y;
	          }
	        });

	        this.body.emitter.emit('_redraw');
	      } else {
	        this.showManipulatorToolbar();
	      }
	    }

	    /**
	     * delete everything in the selection
	     */

	  }, {
	    key: 'deleteSelected',
	    value: function deleteSelected() {
	      var _this3 = this;

	      // when using the gui, enable edit mode if it wasnt already.
	      if (this.editMode !== true) {
	        this.enableEditMode();
	      }

	      // restore the state of any bound functions or events, remove control nodes, restore physics
	      this._clean();

	      this.inMode = 'delete';
	      var selectedNodes = this.selectionHandler.getSelectedNodes();
	      var selectedEdges = this.selectionHandler.getSelectedEdges();
	      var deleteFunction = undefined;
	      if (selectedNodes.length > 0) {
	        for (var i = 0; i < selectedNodes.length; i++) {
	          if (this.body.nodes[selectedNodes[i]].isCluster === true) {
	            alert(this.options.locales[this.options.locale]['deleteClusterError'] || this.options.locales['en']['deleteClusterError']);
	            return;
	          }
	        }

	        if (typeof this.options.deleteNode === 'function') {
	          deleteFunction = this.options.deleteNode;
	        }
	      } else if (selectedEdges.length > 0) {
	        if (typeof this.options.deleteEdge === 'function') {
	          deleteFunction = this.options.deleteEdge;
	        }
	      }

	      if (typeof deleteFunction === 'function') {
	        var data = { nodes: selectedNodes, edges: selectedEdges };
	        if (deleteFunction.length === 2) {
	          deleteFunction(data, function (finalizedData) {
	            if (finalizedData !== null && finalizedData !== undefined && _this3.inMode === 'delete') {
	              // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {
	              _this3.body.data.edges.getDataSet().remove(finalizedData.edges);
	              _this3.body.data.nodes.getDataSet().remove(finalizedData.nodes);
	              _this3.body.emitter.emit('startSimulation');
	              _this3.showManipulatorToolbar();
	            } else {
	              _this3.body.emitter.emit('startSimulation');
	              _this3.showManipulatorToolbar();
	            }
	          });
	        } else {
	          throw new Error('The function for delete does not support two arguments (data, callback)');
	        }
	      } else {
	        this.body.data.edges.getDataSet().remove(selectedEdges);
	        this.body.data.nodes.getDataSet().remove(selectedNodes);
	        this.body.emitter.emit('startSimulation');
	        this.showManipulatorToolbar();
	      }
	    }

	    //********************************************** PRIVATE ***************************************//

	    /**
	     * draw or remove the DOM
	     * @private
	     */

	  }, {
	    key: '_setup',
	    value: function _setup() {
	      if (this.options.enabled === true) {
	        // Enable the GUI
	        this.guiEnabled = true;

	        this._createWrappers();
	        if (this.editMode === false) {
	          this._createEditButton();
	        } else {
	          this.showManipulatorToolbar();
	        }
	      } else {
	        this._removeManipulationDOM();

	        // disable the gui
	        this.guiEnabled = false;
	      }
	    }

	    /**
	     * create the div overlays that contain the DOM
	     * @private
	     */

	  }, {
	    key: '_createWrappers',
	    value: function _createWrappers() {
	      // load the manipulator HTML elements. All styling done in css.
	      if (this.manipulationDiv === undefined) {
	        this.manipulationDiv = document.createElement('div');
	        this.manipulationDiv.className = 'vis-manipulation';
	        if (this.editMode === true) {
	          this.manipulationDiv.style.display = 'block';
	        } else {
	          this.manipulationDiv.style.display = 'none';
	        }
	        this.canvas.frame.appendChild(this.manipulationDiv);
	      }

	      // container for the edit button.
	      if (this.editModeDiv === undefined) {
	        this.editModeDiv = document.createElement('div');
	        this.editModeDiv.className = 'vis-edit-mode';
	        if (this.editMode === true) {
	          this.editModeDiv.style.display = 'none';
	        } else {
	          this.editModeDiv.style.display = 'block';
	        }
	        this.canvas.frame.appendChild(this.editModeDiv);
	      }

	      // container for the close div button
	      if (this.closeDiv === undefined) {
	        this.closeDiv = document.createElement('div');
	        this.closeDiv.className = 'vis-close';
	        this.closeDiv.style.display = this.manipulationDiv.style.display;
	        this.canvas.frame.appendChild(this.closeDiv);
	      }
	    }

	    /**
	     * generate a new target node. Used for creating new edges and editing edges
	     *
	     * @param {number} x
	     * @param {number} y
	     * @returns {Node}
	     * @private
	     */

	  }, {
	    key: '_getNewTargetNode',
	    value: function _getNewTargetNode(x, y) {
	      var controlNodeStyle = util.deepExtend({}, this.options.controlNodeStyle);

	      controlNodeStyle.id = 'targetNode' + util.randomUUID();
	      controlNodeStyle.hidden = false;
	      controlNodeStyle.physics = false;
	      controlNodeStyle.x = x;
	      controlNodeStyle.y = y;

	      // we have to define the bounding box in order for the nodes to be drawn immediately
	      var node = this.body.functions.createNode(controlNodeStyle);
	      node.shape.boundingBox = { left: x, right: x, top: y, bottom: y };

	      return node;
	    }

	    /**
	     * Create the edit button
	     */

	  }, {
	    key: '_createEditButton',
	    value: function _createEditButton() {
	      // restore everything to it's original state (if applicable)
	      this._clean();

	      // reset the manipulationDOM
	      this.manipulationDOM = {};

	      // empty the editModeDiv
	      util.recursiveDOMDelete(this.editModeDiv);

	      // create the contents for the editMode button
	      var locale = this.options.locales[this.options.locale];
	      var button = this._createButton('editMode', 'vis-button vis-edit vis-edit-mode', locale['edit'] || this.options.locales['en']['edit']);
	      this.editModeDiv.appendChild(button);

	      // bind a hammer listener to the button, calling the function toggleEditMode.
	      this._bindHammerToDiv(button, this.toggleEditMode.bind(this));
	    }

	    /**
	     * this function cleans up after everything this module does. Temporary elements, functions and events are removed, physics restored, hammers removed.
	     * @private
	     */

	  }, {
	    key: '_clean',
	    value: function _clean() {
	      // not in mode
	      this.inMode = false;

	      // _clean the divs
	      if (this.guiEnabled === true) {
	        util.recursiveDOMDelete(this.editModeDiv);
	        util.recursiveDOMDelete(this.manipulationDiv);

	        // removes all the bindings and overloads
	        this._cleanManipulatorHammers();
	      }

	      // remove temporary nodes and edges
	      this._cleanupTemporaryNodesAndEdges();

	      // restore overloaded UI functions
	      this._unbindTemporaryUIs();

	      // remove the temporaryEventFunctions
	      this._unbindTemporaryEvents();

	      // restore the physics if required
	      this.body.emitter.emit('restorePhysics');
	    }

	    /**
	     * Each dom element has it's own hammer. They are stored in this.manipulationHammers. This cleans them up.
	     * @private
	     */

	  }, {
	    key: '_cleanManipulatorHammers',
	    value: function _cleanManipulatorHammers() {
	      // _clean hammer bindings
	      if (this.manipulationHammers.length != 0) {
	        for (var i = 0; i < this.manipulationHammers.length; i++) {
	          this.manipulationHammers[i].destroy();
	        }
	        this.manipulationHammers = [];
	      }
	    }

	    /**
	     * Remove all DOM elements created by this module.
	     * @private
	     */

	  }, {
	    key: '_removeManipulationDOM',
	    value: function _removeManipulationDOM() {
	      // removes all the bindings and overloads
	      this._clean();

	      // empty the manipulation divs
	      util.recursiveDOMDelete(this.manipulationDiv);
	      util.recursiveDOMDelete(this.editModeDiv);
	      util.recursiveDOMDelete(this.closeDiv);

	      // remove the manipulation divs
	      if (this.manipulationDiv) {
	        this.canvas.frame.removeChild(this.manipulationDiv);
	      }
	      if (this.editModeDiv) {
	        this.canvas.frame.removeChild(this.editModeDiv);
	      }
	      if (this.closeDiv) {
	        this.canvas.frame.removeChild(this.closeDiv);
	      }

	      // set the references to undefined
	      this.manipulationDiv = undefined;
	      this.editModeDiv = undefined;
	      this.closeDiv = undefined;
	    }

	    /**
	     * create a seperator line. the index is to differentiate in the manipulation dom
	     * @param {number} [index=1]
	     * @private
	     */

	  }, {
	    key: '_createSeperator',
	    value: function _createSeperator() {
	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

	      this.manipulationDOM['seperatorLineDiv' + index] = document.createElement('div');
	      this.manipulationDOM['seperatorLineDiv' + index].className = 'vis-separator-line';
	      this.manipulationDiv.appendChild(this.manipulationDOM['seperatorLineDiv' + index]);
	    }

	    // ----------------------    DOM functions for buttons    --------------------------//

	    /**
	     *
	     * @param {Locale} locale
	     * @private
	     */

	  }, {
	    key: '_createAddNodeButton',
	    value: function _createAddNodeButton(locale) {
	      var button = this._createButton('addNode', 'vis-button vis-add', locale['addNode'] || this.options.locales['en']['addNode']);
	      this.manipulationDiv.appendChild(button);
	      this._bindHammerToDiv(button, this.addNodeMode.bind(this));
	    }

	    /**
	     *
	     * @param {Locale} locale
	     * @private
	     */

	  }, {
	    key: '_createAddEdgeButton',
	    value: function _createAddEdgeButton(locale) {
	      var button = this._createButton('addEdge', 'vis-button vis-connect', locale['addEdge'] || this.options.locales['en']['addEdge']);
	      this.manipulationDiv.appendChild(button);
	      this._bindHammerToDiv(button, this.addEdgeMode.bind(this));
	    }

	    /**
	     *
	     * @param {Locale} locale
	     * @private
	     */

	  }, {
	    key: '_createEditNodeButton',
	    value: function _createEditNodeButton(locale) {
	      var button = this._createButton('editNode', 'vis-button vis-edit', locale['editNode'] || this.options.locales['en']['editNode']);
	      this.manipulationDiv.appendChild(button);
	      this._bindHammerToDiv(button, this.editNode.bind(this));
	    }

	    /**
	     *
	     * @param {Locale} locale
	     * @private
	     */

	  }, {
	    key: '_createEditEdgeButton',
	    value: function _createEditEdgeButton(locale) {
	      var button = this._createButton('editEdge', 'vis-button vis-edit', locale['editEdge'] || this.options.locales['en']['editEdge']);
	      this.manipulationDiv.appendChild(button);
	      this._bindHammerToDiv(button, this.editEdgeMode.bind(this));
	    }

	    /**
	     *
	     * @param {Locale} locale
	     * @private
	     */

	  }, {
	    key: '_createDeleteButton',
	    value: function _createDeleteButton(locale) {
	      var deleteBtnClass;
	      if (this.options.rtl) {
	        deleteBtnClass = 'vis-button vis-delete-rtl';
	      } else {
	        deleteBtnClass = 'vis-button vis-delete';
	      }
	      var button = this._createButton('delete', deleteBtnClass, locale['del'] || this.options.locales['en']['del']);
	      this.manipulationDiv.appendChild(button);
	      this._bindHammerToDiv(button, this.deleteSelected.bind(this));
	    }

	    /**
	     *
	     * @param {Locale} locale
	     * @private
	     */

	  }, {
	    key: '_createBackButton',
	    value: function _createBackButton(locale) {
	      var button = this._createButton('back', 'vis-button vis-back', locale['back'] || this.options.locales['en']['back']);
	      this.manipulationDiv.appendChild(button);
	      this._bindHammerToDiv(button, this.showManipulatorToolbar.bind(this));
	    }

	    /**
	     *
	     * @param {number|string} id
	     * @param {string} className
	     * @param {label} label
	     * @param {string} labelClassName
	     * @returns {HTMLElement}
	     * @private
	     */

	  }, {
	    key: '_createButton',
	    value: function _createButton(id, className, label) {
	      var labelClassName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'vis-label';


	      this.manipulationDOM[id + 'Div'] = document.createElement('div');
	      this.manipulationDOM[id + 'Div'].className = className;
	      this.manipulationDOM[id + 'Label'] = document.createElement('div');
	      this.manipulationDOM[id + 'Label'].className = labelClassName;
	      this.manipulationDOM[id + 'Label'].innerHTML = label;
	      this.manipulationDOM[id + 'Div'].appendChild(this.manipulationDOM[id + 'Label']);
	      return this.manipulationDOM[id + 'Div'];
	    }

	    /**
	     *
	     * @param {Label} label
	     * @private
	     */

	  }, {
	    key: '_createDescription',
	    value: function _createDescription(label) {
	      this.manipulationDiv.appendChild(this._createButton('description', 'vis-button vis-none', label));
	    }

	    // -------------------------- End of DOM functions for buttons ------------------------------//

	    /**
	     * this binds an event until cleanup by the clean functions.
	     * @param {Event}  event   The event
	     * @param {function} newFunction
	     * @private
	     */

	  }, {
	    key: '_temporaryBindEvent',
	    value: function _temporaryBindEvent(event, newFunction) {
	      this.temporaryEventFunctions.push({ event: event, boundFunction: newFunction });
	      this.body.emitter.on(event, newFunction);
	    }

	    /**
	     * this overrides an UI function until cleanup by the clean function
	     * @param {string} UIfunctionName
	     * @param {function} newFunction
	     * @private
	     */

	  }, {
	    key: '_temporaryBindUI',
	    value: function _temporaryBindUI(UIfunctionName, newFunction) {
	      if (this.body.eventListeners[UIfunctionName] !== undefined) {
	        this.temporaryUIFunctions[UIfunctionName] = this.body.eventListeners[UIfunctionName];
	        this.body.eventListeners[UIfunctionName] = newFunction;
	      } else {
	        throw new Error('This UI function does not exist. Typo? You tried: ' + UIfunctionName + ' possible are: ' + (0, _stringify2['default'])((0, _keys2['default'])(this.body.eventListeners)));
	      }
	    }

	    /**
	     * Restore the overridden UI functions to their original state.
	     *
	     * @private
	     */

	  }, {
	    key: '_unbindTemporaryUIs',
	    value: function _unbindTemporaryUIs() {
	      for (var functionName in this.temporaryUIFunctions) {
	        if (this.temporaryUIFunctions.hasOwnProperty(functionName)) {
	          this.body.eventListeners[functionName] = this.temporaryUIFunctions[functionName];
	          delete this.temporaryUIFunctions[functionName];
	        }
	      }
	      this.temporaryUIFunctions = {};
	    }

	    /**
	     * Unbind the events created by _temporaryBindEvent
	     * @private
	     */

	  }, {
	    key: '_unbindTemporaryEvents',
	    value: function _unbindTemporaryEvents() {
	      for (var i = 0; i < this.temporaryEventFunctions.length; i++) {
	        var eventName = this.temporaryEventFunctions[i].event;
	        var boundFunction = this.temporaryEventFunctions[i].boundFunction;
	        this.body.emitter.off(eventName, boundFunction);
	      }
	      this.temporaryEventFunctions = [];
	    }

	    /**
	     * Bind an hammer instance to a DOM element.
	     *
	     * @param {Element} domElement
	     * @param {function} boundFunction
	     */

	  }, {
	    key: '_bindHammerToDiv',
	    value: function _bindHammerToDiv(domElement, boundFunction) {
	      var hammer = new Hammer(domElement, {});
	      hammerUtil.onTouch(hammer, boundFunction);
	      this.manipulationHammers.push(hammer);
	    }

	    /**
	     * Neatly clean up temporary edges and nodes
	     * @private
	     */

	  }, {
	    key: '_cleanupTemporaryNodesAndEdges',
	    value: function _cleanupTemporaryNodesAndEdges() {
	      // _clean temporary edges
	      for (var i = 0; i < this.temporaryIds.edges.length; i++) {
	        this.body.edges[this.temporaryIds.edges[i]].disconnect();
	        delete this.body.edges[this.temporaryIds.edges[i]];
	        var indexTempEdge = this.body.edgeIndices.indexOf(this.temporaryIds.edges[i]);
	        if (indexTempEdge !== -1) {
	          this.body.edgeIndices.splice(indexTempEdge, 1);
	        }
	      }

	      // _clean temporary nodes
	      for (var _i = 0; _i < this.temporaryIds.nodes.length; _i++) {
	        delete this.body.nodes[this.temporaryIds.nodes[_i]];
	        var indexTempNode = this.body.nodeIndices.indexOf(this.temporaryIds.nodes[_i]);
	        if (indexTempNode !== -1) {
	          this.body.nodeIndices.splice(indexTempNode, 1);
	        }
	      }

	      this.temporaryIds = { nodes: [], edges: [] };
	    }

	    // ------------------------------------------ EDIT EDGE FUNCTIONS -----------------------------------------//

	    /**
	     * the touch is used to get the position of the initial click
	     * @param {Event}  event   The event
	     * @private
	     */

	  }, {
	    key: '_controlNodeTouch',
	    value: function _controlNodeTouch(event) {
	      this.selectionHandler.unselectAll();
	      this.lastTouch = this.body.functions.getPointer(event.center);
	      this.lastTouch.translation = util.extend({}, this.body.view.translation); // copy the object
	    }

	    /**
	     * the drag start is used to mark one of the control nodes as selected.
	     * @param {Event}  event   The event
	     * @private
	     */

	  }, {
	    key: '_controlNodeDragStart',
	    value: function _controlNodeDragStart(event) {
	      // eslint-disable-line no-unused-vars
	      var pointer = this.lastTouch;
	      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
	      var from = this.body.nodes[this.temporaryIds.nodes[0]];
	      var to = this.body.nodes[this.temporaryIds.nodes[1]];
	      var edge = this.body.edges[this.edgeBeingEditedId];
	      this.selectedControlNode = undefined;

	      var fromSelect = from.isOverlappingWith(pointerObj);
	      var toSelect = to.isOverlappingWith(pointerObj);

	      if (fromSelect === true) {
	        this.selectedControlNode = from;
	        edge.edgeType.from = from;
	      } else if (toSelect === true) {
	        this.selectedControlNode = to;
	        edge.edgeType.to = to;
	      }

	      // we use the selection to find the node that is being dragged. We explicitly select it here.
	      if (this.selectedControlNode !== undefined) {
	        this.selectionHandler.selectObject(this.selectedControlNode);
	      }

	      this.body.emitter.emit('_redraw');
	    }

	    /**
	     * dragging the control nodes or the canvas
	     * @param {Event}  event   The event
	     * @private
	     */

	  }, {
	    key: '_controlNodeDrag',
	    value: function _controlNodeDrag(event) {
	      this.body.emitter.emit('disablePhysics');
	      var pointer = this.body.functions.getPointer(event.center);
	      var pos = this.canvas.DOMtoCanvas(pointer);
	      if (this.selectedControlNode !== undefined) {
	        this.selectedControlNode.x = pos.x;
	        this.selectedControlNode.y = pos.y;
	      } else {
	        // if the drag was not started properly because the click started outside the network div, start it now.
	        var diffX = pointer.x - this.lastTouch.x;
	        var diffY = pointer.y - this.lastTouch.y;
	        this.body.view.translation = { x: this.lastTouch.translation.x + diffX, y: this.lastTouch.translation.y + diffY };
	      }
	      this.body.emitter.emit('_redraw');
	    }

	    /**
	     * connecting or restoring the control nodes.
	     * @param {Event}  event   The event
	     * @private
	     */

	  }, {
	    key: '_controlNodeDragEnd',
	    value: function _controlNodeDragEnd(event) {
	      var pointer = this.body.functions.getPointer(event.center);
	      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);
	      var edge = this.body.edges[this.edgeBeingEditedId];
	      // if the node that was dragged is not a control node, return
	      if (this.selectedControlNode === undefined) {
	        return;
	      }

	      // we use the selection to find the node that is being dragged. We explicitly DEselect the control node here.
	      this.selectionHandler.unselectAll();
	      var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
	      var node = undefined;
	      for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {
	        if (overlappingNodeIds[i] !== this.selectedControlNode.id) {
	          node = this.body.nodes[overlappingNodeIds[i]];
	          break;
	        }
	      }
	      // perform the connection
	      if (node !== undefined && this.selectedControlNode !== undefined) {
	        if (node.isCluster === true) {
	          alert(this.options.locales[this.options.locale]['createEdgeError'] || this.options.locales['en']['createEdgeError']);
	        } else {
	          var from = this.body.nodes[this.temporaryIds.nodes[0]];
	          if (this.selectedControlNode.id === from.id) {
	            this._performEditEdge(node.id, edge.to.id);
	          } else {
	            this._performEditEdge(edge.from.id, node.id);
	          }
	        }
	      } else {
	        edge.updateEdgeType();
	        this.body.emitter.emit('restorePhysics');
	      }

	      this.body.emitter.emit('_redraw');
	    }

	    // ------------------------------------ END OF EDIT EDGE FUNCTIONS -----------------------------------------//


	    // ------------------------------------------- ADD EDGE FUNCTIONS -----------------------------------------//
	    /**
	     * the function bound to the selection event. It checks if you want to connect a cluster and changes the description
	     * to walk the user through the process.
	     *
	     * @param {Event} event
	     * @private
	     */

	  }, {
	    key: '_handleConnect',
	    value: function _handleConnect(event) {
	      // check to avoid double fireing of this function.
	      if (new Date().valueOf() - this.touchTime > 100) {
	        this.lastTouch = this.body.functions.getPointer(event.center);
	        this.lastTouch.translation = util.extend({}, this.body.view.translation); // copy the object

	        var pointer = this.lastTouch;
	        var node = this.selectionHandler.getNodeAt(pointer);

	        if (node !== undefined) {
	          if (node.isCluster === true) {
	            alert(this.options.locales[this.options.locale]['createEdgeError'] || this.options.locales['en']['createEdgeError']);
	          } else {
	            // create a node the temporary line can look at
	            var targetNode = this._getNewTargetNode(node.x, node.y);
	            this.body.nodes[targetNode.id] = targetNode;
	            this.body.nodeIndices.push(targetNode.id);

	            // create a temporary edge
	            var connectionEdge = this.body.functions.createEdge({
	              id: 'connectionEdge' + util.randomUUID(),
	              from: node.id,
	              to: targetNode.id,
	              physics: false,
	              smooth: {
	                enabled: true,
	                type: 'continuous',
	                roundness: 0.5
	              }
	            });
	            this.body.edges[connectionEdge.id] = connectionEdge;
	            this.body.edgeIndices.push(connectionEdge.id);

	            this.temporaryIds.nodes.push(targetNode.id);
	            this.temporaryIds.edges.push(connectionEdge.id);
	          }
	        }
	        this.touchTime = new Date().valueOf();
	      }
	    }

	    /**
	     *
	     * @param {Event} event
	     * @private
	     */

	  }, {
	    key: '_dragControlNode',
	    value: function _dragControlNode(event) {
	      var pointer = this.body.functions.getPointer(event.center);
	      if (this.temporaryIds.nodes[0] !== undefined) {
	        var targetNode = this.body.nodes[this.temporaryIds.nodes[0]]; // there is only one temp node in the add edge mode.
	        targetNode.x = this.canvas._XconvertDOMtoCanvas(pointer.x);
	        targetNode.y = this.canvas._YconvertDOMtoCanvas(pointer.y);
	        this.body.emitter.emit('_redraw');
	      } else {
	        var diffX = pointer.x - this.lastTouch.x;
	        var diffY = pointer.y - this.lastTouch.y;
	        this.body.view.translation = { x: this.lastTouch.translation.x + diffX, y: this.lastTouch.translation.y + diffY };
	      }
	    }

	    /**
	     * Connect the new edge to the target if one exists, otherwise remove temp line
	     * @param {Event}  event   The event
	     * @private
	     */

	  }, {
	    key: '_finishConnect',
	    value: function _finishConnect(event) {
	      var pointer = this.body.functions.getPointer(event.center);
	      var pointerObj = this.selectionHandler._pointerToPositionObject(pointer);

	      // remember the edge id
	      var connectFromId = undefined;
	      if (this.temporaryIds.edges[0] !== undefined) {
	        connectFromId = this.body.edges[this.temporaryIds.edges[0]].fromId;
	      }

	      // get the overlapping node but NOT the temporary node;
	      var overlappingNodeIds = this.selectionHandler._getAllNodesOverlappingWith(pointerObj);
	      var node = undefined;
	      for (var i = overlappingNodeIds.length - 1; i >= 0; i--) {
	        // if the node id is NOT a temporary node, accept the node.
	        if (this.temporaryIds.nodes.indexOf(overlappingNodeIds[i]) === -1) {
	          node = this.body.nodes[overlappingNodeIds[i]];
	          break;
	        }
	      }

	      // clean temporary nodes and edges.
	      this._cleanupTemporaryNodesAndEdges();

	      // perform the connection
	      if (node !== undefined) {
	        if (node.isCluster === true) {
	          alert(this.options.locales[this.options.locale]['createEdgeError'] || this.options.locales['en']['createEdgeError']);
	        } else {
	          if (this.body.nodes[connectFromId] !== undefined && this.body.nodes[node.id] !== undefined) {
	            this._performAddEdge(connectFromId, node.id);
	          }
	        }
	      }

	      // No need to do _generateclickevent('dragEnd') here, the regular dragEnd event fires.
	      this.body.emitter.emit('_redraw');
	    }

	    /**
	     *
	     * @param {Event} event
	     * @private
	     */

	  }, {
	    key: '_dragStartEdge',
	    value: function _dragStartEdge(event) {
	      var pointer = this.lastTouch;
	      this.selectionHandler._generateClickEvent('dragStart', event, pointer, undefined, true);
	    }

	    // --------------------------------------- END OF ADD EDGE FUNCTIONS -------------------------------------//


	    // ------------------------------ Performing all the actual data manipulation ------------------------//

	    /**
	     * Adds a node on the specified location
	     *
	     * @param {Object} clickData
	     * @private
	     */

	  }, {
	    key: '_performAddNode',
	    value: function _performAddNode(clickData) {
	      var _this4 = this;

	      var defaultData = {
	        id: util.randomUUID(),
	        x: clickData.pointer.canvas.x,
	        y: clickData.pointer.canvas.y,
	        label: 'new'
	      };

	      if (typeof this.options.addNode === 'function') {
	        if (this.options.addNode.length === 2) {
	          this.options.addNode(defaultData, function (finalizedData) {
	            if (finalizedData !== null && finalizedData !== undefined && _this4.inMode === 'addNode') {
	              // if for whatever reason the mode has changes (due to dataset change) disregard the callback
	              _this4.body.data.nodes.getDataSet().add(finalizedData);
	              _this4.showManipulatorToolbar();
	            }
	          });
	        } else {
	          this.showManipulatorToolbar();
	          throw new Error('The function for add does not support two arguments (data,callback)');
	        }
	      } else {
	        this.body.data.nodes.getDataSet().add(defaultData);
	        this.showManipulatorToolbar();
	      }
	    }

	    /**
	     * connect two nodes with a new edge.
	     *
	     * @param {Node.id} sourceNodeId
	     * @param {Node.id} targetNodeId
	     * @private
	     */

	  }, {
	    key: '_performAddEdge',
	    value: function _performAddEdge(sourceNodeId, targetNodeId) {
	      var _this5 = this;

	      var defaultData = { from: sourceNodeId, to: targetNodeId };
	      if (typeof this.options.addEdge === 'function') {
	        if (this.options.addEdge.length === 2) {
	          this.options.addEdge(defaultData, function (finalizedData) {
	            if (finalizedData !== null && finalizedData !== undefined && _this5.inMode === 'addEdge') {
	              // if for whatever reason the mode has changes (due to dataset change) disregard the callback
	              _this5.body.data.edges.getDataSet().add(finalizedData);
	              _this5.selectionHandler.unselectAll();
	              _this5.showManipulatorToolbar();
	            }
	          });
	        } else {
	          throw new Error('The function for connect does not support two arguments (data,callback)');
	        }
	      } else {
	        this.body.data.edges.getDataSet().add(defaultData);
	        this.selectionHandler.unselectAll();
	        this.showManipulatorToolbar();
	      }
	    }

	    /**
	     * connect two nodes with a new edge.
	     *
	     * @param {Node.id} sourceNodeId
	     * @param {Node.id} targetNodeId
	     * @private
	     */

	  }, {
	    key: '_performEditEdge',
	    value: function _performEditEdge(sourceNodeId, targetNodeId) {
	      var _this6 = this;

	      var defaultData = { id: this.edgeBeingEditedId, from: sourceNodeId, to: targetNodeId, label: this.body.data.edges._data[this.edgeBeingEditedId].label };
	      var eeFunct = this.options.editEdge;
	      if ((typeof eeFunct === 'undefined' ? 'undefined' : (0, _typeof3['default'])(eeFunct)) === 'object') {
	        eeFunct = eeFunct.editWithoutDrag;
	      }
	      if (typeof eeFunct === 'function') {
	        if (eeFunct.length === 2) {
	          eeFunct(defaultData, function (finalizedData) {
	            if (finalizedData === null || finalizedData === undefined || _this6.inMode !== 'editEdge') {
	              // if for whatever reason the mode has changes (due to dataset change) disregard the callback) {
	              _this6.body.edges[defaultData.id].updateEdgeType();
	              _this6.body.emitter.emit('_redraw');
	              _this6.showManipulatorToolbar();
	            } else {
	              _this6.body.data.edges.getDataSet().update(finalizedData);
	              _this6.selectionHandler.unselectAll();
	              _this6.showManipulatorToolbar();
	            }
	          });
	        } else {
	          throw new Error('The function for edit does not support two arguments (data, callback)');
	        }
	      } else {
	        this.body.data.edges.getDataSet().update(defaultData);
	        this.selectionHandler.unselectAll();
	        this.showManipulatorToolbar();
	      }
	    }
	  }]);
	  return ManipulationSystem;
	}();

	exports['default'] = ManipulationSystem;

	/***/ }),
	/* 238 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _slicedToArray2 = __webpack_require__(30);

	var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	var _FloydWarshall = __webpack_require__(239);

	var _FloydWarshall2 = _interopRequireDefault(_FloydWarshall);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * KamadaKawai positions the nodes initially based on
	 *
	 * "AN ALGORITHM FOR DRAWING GENERAL UNDIRECTED GRAPHS"
	 * -- Tomihisa KAMADA and Satoru KAWAI in 1989
	 *
	 * Possible optimizations in the distance calculation can be implemented.
	 */
	var KamadaKawai = function () {
	  /**
	   * @param {Object} body
	   * @param {number} edgeLength
	   * @param {number} edgeStrength
	   */
	  function KamadaKawai(body, edgeLength, edgeStrength) {
	    (0, _classCallCheck3["default"])(this, KamadaKawai);

	    this.body = body;
	    this.springLength = edgeLength;
	    this.springConstant = edgeStrength;
	    this.distanceSolver = new _FloydWarshall2["default"]();
	  }

	  /**
	   * Not sure if needed but can be used to update the spring length and spring constant
	   * @param {Object} options
	   */


	  (0, _createClass3["default"])(KamadaKawai, [{
	    key: "setOptions",
	    value: function setOptions(options) {
	      if (options) {
	        if (options.springLength) {
	          this.springLength = options.springLength;
	        }
	        if (options.springConstant) {
	          this.springConstant = options.springConstant;
	        }
	      }
	    }

	    /**
	     * Position the system
	     * @param {Array.<Node>} nodesArray
	     * @param {Array.<vis.Edge>} edgesArray
	     * @param {boolean} [ignoreClusters=false]
	     */

	  }, {
	    key: "solve",
	    value: function solve(nodesArray, edgesArray) {
	      var ignoreClusters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	      // get distance matrix
	      var D_matrix = this.distanceSolver.getDistances(this.body, nodesArray, edgesArray); // distance matrix

	      // get the L Matrix
	      this._createL_matrix(D_matrix);

	      // get the K Matrix
	      this._createK_matrix(D_matrix);

	      // initial E Matrix
	      this._createE_matrix();

	      // calculate positions
	      var threshold = 0.01;
	      var innerThreshold = 1;
	      var iterations = 0;
	      var maxIterations = Math.max(1000, Math.min(10 * this.body.nodeIndices.length, 6000));
	      var maxInnerIterations = 5;

	      var maxEnergy = 1e9;
	      var highE_nodeId = 0,
	          dE_dx = 0,
	          dE_dy = 0,
	          delta_m = 0,
	          subIterations = 0;

	      while (maxEnergy > threshold && iterations < maxIterations) {
	        iterations += 1;

	        var _getHighestEnergyNode2 = this._getHighestEnergyNode(ignoreClusters);

	        var _getHighestEnergyNode3 = (0, _slicedToArray3["default"])(_getHighestEnergyNode2, 4);

	        highE_nodeId = _getHighestEnergyNode3[0];
	        maxEnergy = _getHighestEnergyNode3[1];
	        dE_dx = _getHighestEnergyNode3[2];
	        dE_dy = _getHighestEnergyNode3[3];

	        delta_m = maxEnergy;
	        subIterations = 0;
	        while (delta_m > innerThreshold && subIterations < maxInnerIterations) {
	          subIterations += 1;
	          this._moveNode(highE_nodeId, dE_dx, dE_dy);

	          var _getEnergy2 = this._getEnergy(highE_nodeId);

	          var _getEnergy3 = (0, _slicedToArray3["default"])(_getEnergy2, 3);

	          delta_m = _getEnergy3[0];
	          dE_dx = _getEnergy3[1];
	          dE_dy = _getEnergy3[2];
	        }
	      }
	    }

	    /**
	     * get the node with the highest energy
	     * @param {boolean} ignoreClusters
	     * @returns {number[]}
	     * @private
	     */

	  }, {
	    key: "_getHighestEnergyNode",
	    value: function _getHighestEnergyNode(ignoreClusters) {
	      var nodesArray = this.body.nodeIndices;
	      var nodes = this.body.nodes;
	      var maxEnergy = 0;
	      var maxEnergyNodeId = nodesArray[0];
	      var dE_dx_max = 0,
	          dE_dy_max = 0;

	      for (var nodeIdx = 0; nodeIdx < nodesArray.length; nodeIdx++) {
	        var m = nodesArray[nodeIdx];
	        // by not evaluating nodes with predefined positions we should only move nodes that have no positions.
	        if (nodes[m].predefinedPosition === false || nodes[m].isCluster === true && ignoreClusters === true || nodes[m].options.fixed.x === true || nodes[m].options.fixed.y === true) {
	          var _getEnergy4 = this._getEnergy(m),
	              _getEnergy5 = (0, _slicedToArray3["default"])(_getEnergy4, 3),
	              delta_m = _getEnergy5[0],
	              dE_dx = _getEnergy5[1],
	              dE_dy = _getEnergy5[2];

	          if (maxEnergy < delta_m) {
	            maxEnergy = delta_m;
	            maxEnergyNodeId = m;
	            dE_dx_max = dE_dx;
	            dE_dy_max = dE_dy;
	          }
	        }
	      }

	      return [maxEnergyNodeId, maxEnergy, dE_dx_max, dE_dy_max];
	    }

	    /**
	     * calculate the energy of a single node
	     * @param {Node.id} m
	     * @returns {number[]}
	     * @private
	     */

	  }, {
	    key: "_getEnergy",
	    value: function _getEnergy(m) {
	      var _E_sums$m = (0, _slicedToArray3["default"])(this.E_sums[m], 2),
	          dE_dx = _E_sums$m[0],
	          dE_dy = _E_sums$m[1];

	      var delta_m = Math.sqrt(Math.pow(dE_dx, 2) + Math.pow(dE_dy, 2));
	      return [delta_m, dE_dx, dE_dy];
	    }

	    /**
	     * move the node based on it's energy
	     * the dx and dy are calculated from the linear system proposed by Kamada and Kawai
	     * @param {number} m
	     * @param {number} dE_dx
	     * @param {number} dE_dy
	     * @private
	     */

	  }, {
	    key: "_moveNode",
	    value: function _moveNode(m, dE_dx, dE_dy) {
	      var nodesArray = this.body.nodeIndices;
	      var nodes = this.body.nodes;
	      var d2E_dx2 = 0;
	      var d2E_dxdy = 0;
	      var d2E_dy2 = 0;

	      var x_m = nodes[m].x;
	      var y_m = nodes[m].y;
	      var km = this.K_matrix[m];
	      var lm = this.L_matrix[m];

	      for (var iIdx = 0; iIdx < nodesArray.length; iIdx++) {
	        var i = nodesArray[iIdx];
	        if (i !== m) {
	          var x_i = nodes[i].x;
	          var y_i = nodes[i].y;
	          var kmat = km[i];
	          var lmat = lm[i];
	          var denominator = 1.0 / Math.pow(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2), 1.5);
	          d2E_dx2 += kmat * (1 - lmat * Math.pow(y_m - y_i, 2) * denominator);
	          d2E_dxdy += kmat * (lmat * (x_m - x_i) * (y_m - y_i) * denominator);
	          d2E_dy2 += kmat * (1 - lmat * Math.pow(x_m - x_i, 2) * denominator);
	        }
	      }
	      // make the variable names easier to make the solving of the linear system easier to read
	      var A = d2E_dx2,
	          B = d2E_dxdy,
	          C = dE_dx,
	          D = d2E_dy2,
	          E = dE_dy;

	      // solve the linear system for dx and dy
	      var dy = (C / A + E / B) / (B / A - D / B);
	      var dx = -(B * dy + C) / A;

	      // move the node
	      nodes[m].x += dx;
	      nodes[m].y += dy;

	      // Recalculate E_matrix (should be incremental)
	      this._updateE_matrix(m);
	    }

	    /**
	     * Create the L matrix: edge length times shortest path
	     * @param {Object} D_matrix
	     * @private
	     */

	  }, {
	    key: "_createL_matrix",
	    value: function _createL_matrix(D_matrix) {
	      var nodesArray = this.body.nodeIndices;
	      var edgeLength = this.springLength;

	      this.L_matrix = [];
	      for (var i = 0; i < nodesArray.length; i++) {
	        this.L_matrix[nodesArray[i]] = {};
	        for (var j = 0; j < nodesArray.length; j++) {
	          this.L_matrix[nodesArray[i]][nodesArray[j]] = edgeLength * D_matrix[nodesArray[i]][nodesArray[j]];
	        }
	      }
	    }

	    /**
	     * Create the K matrix: spring constants times shortest path
	     * @param {Object} D_matrix
	     * @private
	     */

	  }, {
	    key: "_createK_matrix",
	    value: function _createK_matrix(D_matrix) {
	      var nodesArray = this.body.nodeIndices;
	      var edgeStrength = this.springConstant;

	      this.K_matrix = [];
	      for (var i = 0; i < nodesArray.length; i++) {
	        this.K_matrix[nodesArray[i]] = {};
	        for (var j = 0; j < nodesArray.length; j++) {
	          this.K_matrix[nodesArray[i]][nodesArray[j]] = edgeStrength * Math.pow(D_matrix[nodesArray[i]][nodesArray[j]], -2);
	        }
	      }
	    }

	    /**
	     *  Create matrix with all energies between nodes
	     *  @private
	     */

	  }, {
	    key: "_createE_matrix",
	    value: function _createE_matrix() {
	      var nodesArray = this.body.nodeIndices;
	      var nodes = this.body.nodes;
	      this.E_matrix = {};
	      this.E_sums = {};
	      for (var mIdx = 0; mIdx < nodesArray.length; mIdx++) {
	        this.E_matrix[nodesArray[mIdx]] = [];
	      }
	      for (var _mIdx = 0; _mIdx < nodesArray.length; _mIdx++) {
	        var m = nodesArray[_mIdx];
	        var x_m = nodes[m].x;
	        var y_m = nodes[m].y;
	        var dE_dx = 0;
	        var dE_dy = 0;
	        for (var iIdx = _mIdx; iIdx < nodesArray.length; iIdx++) {
	          var i = nodesArray[iIdx];
	          if (i !== m) {
	            var x_i = nodes[i].x;
	            var y_i = nodes[i].y;
	            var denominator = 1.0 / Math.sqrt(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2));
	            this.E_matrix[m][iIdx] = [this.K_matrix[m][i] * (x_m - x_i - this.L_matrix[m][i] * (x_m - x_i) * denominator), this.K_matrix[m][i] * (y_m - y_i - this.L_matrix[m][i] * (y_m - y_i) * denominator)];
	            this.E_matrix[i][_mIdx] = this.E_matrix[m][iIdx];
	            dE_dx += this.E_matrix[m][iIdx][0];
	            dE_dy += this.E_matrix[m][iIdx][1];
	          }
	        }
	        //Store sum
	        this.E_sums[m] = [dE_dx, dE_dy];
	      }
	    }

	    /**
	     * Update method, just doing single column (rows are auto-updated) (update all sums)
	     *
	     * @param {number} m
	     * @private
	     */

	  }, {
	    key: "_updateE_matrix",
	    value: function _updateE_matrix(m) {
	      var nodesArray = this.body.nodeIndices;
	      var nodes = this.body.nodes;
	      var colm = this.E_matrix[m];
	      var kcolm = this.K_matrix[m];
	      var lcolm = this.L_matrix[m];
	      var x_m = nodes[m].x;
	      var y_m = nodes[m].y;
	      var dE_dx = 0;
	      var dE_dy = 0;
	      for (var iIdx = 0; iIdx < nodesArray.length; iIdx++) {
	        var i = nodesArray[iIdx];
	        if (i !== m) {
	          //Keep old energy value for sum modification below
	          var cell = colm[iIdx];
	          var oldDx = cell[0];
	          var oldDy = cell[1];

	          //Calc new energy:
	          var x_i = nodes[i].x;
	          var y_i = nodes[i].y;
	          var denominator = 1.0 / Math.sqrt(Math.pow(x_m - x_i, 2) + Math.pow(y_m - y_i, 2));
	          var dx = kcolm[i] * (x_m - x_i - lcolm[i] * (x_m - x_i) * denominator);
	          var dy = kcolm[i] * (y_m - y_i - lcolm[i] * (y_m - y_i) * denominator);
	          colm[iIdx] = [dx, dy];
	          dE_dx += dx;
	          dE_dy += dy;

	          //add new energy to sum of each column
	          var sum = this.E_sums[i];
	          sum[0] += dx - oldDx;
	          sum[1] += dy - oldDy;
	        }
	      }
	      //Store sum at -1 index
	      this.E_sums[m] = [dE_dx, dE_dy];
	    }
	  }]);
	  return KamadaKawai;
	}(); // distance finding algorithm


	exports["default"] = KamadaKawai;

	/***/ }),
	/* 239 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _classCallCheck2 = __webpack_require__(0);

	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

	var _createClass2 = __webpack_require__(1);

	var _createClass3 = _interopRequireDefault(_createClass2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 *  The Floyd–Warshall algorithm is an algorithm for finding shortest paths in
	 *  a weighted graph with positive or negative edge weights (but with no negative
	 *  cycles). - https://en.wikipedia.org/wiki/Floyd–Warshall_algorithm
	 */
	var FloydWarshall = function () {
	  /**
	   * @ignore
	   */
	  function FloydWarshall() {
	    (0, _classCallCheck3["default"])(this, FloydWarshall);
	  }

	  /**
	   *
	   * @param {Object} body
	   * @param {Array.<Node>} nodesArray
	   * @param {Array.<Edge>} edgesArray
	   * @returns {{}}
	   */


	  (0, _createClass3["default"])(FloydWarshall, [{
	    key: "getDistances",
	    value: function getDistances(body, nodesArray, edgesArray) {
	      var D_matrix = {};
	      var edges = body.edges;

	      // prepare matrix with large numbers
	      for (var i = 0; i < nodesArray.length; i++) {
	        var node = nodesArray[i];
	        var cell = {};
	        D_matrix[node] = cell;
	        for (var j = 0; j < nodesArray.length; j++) {
	          cell[nodesArray[j]] = i == j ? 0 : 1e9;
	        }
	      }

	      // put the weights for the edges in. This assumes unidirectionality.
	      for (var _i = 0; _i < edgesArray.length; _i++) {
	        var edge = edges[edgesArray[_i]];
	        // edge has to be connected if it counts to the distances. If it is connected to inner clusters it will crash so we also check if it is in the D_matrix
	        if (edge.connected === true && D_matrix[edge.fromId] !== undefined && D_matrix[edge.toId] !== undefined) {
	          D_matrix[edge.fromId][edge.toId] = 1;
	          D_matrix[edge.toId][edge.fromId] = 1;
	        }
	      }

	      var nodeCount = nodesArray.length;

	      // Adapted FloydWarshall based on unidirectionality to greatly reduce complexity.
	      for (var k = 0; k < nodeCount; k++) {
	        var knode = nodesArray[k];
	        var kcolm = D_matrix[knode];
	        for (var _i2 = 0; _i2 < nodeCount - 1; _i2++) {
	          var inode = nodesArray[_i2];
	          var icolm = D_matrix[inode];
	          for (var _j = _i2 + 1; _j < nodeCount; _j++) {
	            var jnode = nodesArray[_j];
	            var jcolm = D_matrix[jnode];

	            var val = Math.min(icolm[jnode], icolm[knode] + kcolm[jnode]);
	            icolm[jnode] = val;
	            jcolm[inode] = val;
	          }
	        }
	      }

	      return D_matrix;
	    }
	  }]);
	  return FloydWarshall;
	}();

	exports["default"] = FloydWarshall;

	/***/ })
	/******/ ]);
	});

/***/ }),
/* 401 */
/***/ (function(module, exports) {

	var config = {};
	var noInteraction = {
	  dragNodes: false,
	  dragView: true,
	  selectable: false
	};
	config.expression = {
	  layout: {
	    hierarchical: {
	      direction: 'UD',
	      levelSeparation: 100
	    }
	  },
	  edges: {
	    arrows: 'to',
	    color: 'black'
	  },
	  nodes: {
	    color: {
	      border: 'black',
	      background: 'white'
	    },
	  },
	  interaction: noInteraction
	};
	config.nfa = {
	  layout: {
	    randomSeed: 2
	  },
	  edges: {
	    arrows: 'to',
	    color: 'grey',
	    font: {
	      align: 'horizontal'
	    }
	  },
	  nodes: {
	    color: {
	      border: 'black',
	      background: 'white'
	    }
	  },
	  interaction: noInteraction
	};

	var expressionGraph = function(rootExpr) {
	  var nextId = 0;
	  var makeNode = function(expr, level) {
	    var label = expr.type == 'predicate' ? expr.data.name : expr.type;
	    return {
	      id: nextId++,
	      label: label,
	      expr: expr,
	      level: level
	    };
	  };
	  var rootNode = makeNode(rootExpr, 0);
	  var nodes = [rootNode];
	  var edges = [];
	  var frontier = [rootNode];
	  while (frontier.length > 0) {
	    var previous = frontier.pop();
	    previous.expr.children.map(function(expr) {
	      var next = makeNode(expr, previous.level + 1);
	      var edge = {from: previous.id, to: next.id};
	      nodes.push(next);
	      edges.push(edge);
	      frontier.push(next);
	    });
	  };
	  return {nodes: nodes, edges: edges};
	};

	var nfaGraph = function(nfa) {
	  var nodes = [{id: 'start', color: 'rgba(0,0,0,0)'}];
	  var edges = [{from: 'start', to: '0', label: 'start', color: 'black'}];
	  for (var i = 0; i < nfa.numStates; i++) {
	    var thisId = String(i);
	    var node = { id: thisId, label: thisId };
	    if (i == nfa.finalState) {
	      node.borderWidth = 5;
	    }
	    nodes.push(node);
	    var trans = nfa.transitions[i];
	    Object.keys(trans).forEach(function(target) {
	      var nextId = String(target);
	      var label = trans[target];
	      edges.push({from: thisId, to: nextId, label: label});
	    });
	  }
	  return {nodes: nodes, edges: edges};
	};

	module.exports = {
	  expressionGraph: expressionGraph,
	  config: config,
	  nfaGraph: nfaGraph
	};


/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

	var parser = __webpack_require__(403);
	var env = __webpack_require__(407);
	var vm = __webpack_require__(409);
	var nfa = __webpack_require__(410);
	var Parsimmon = __webpack_require__(406);

	var CharRegex = function(pattern) {
	  this.pattern = pattern;
	  this.parseResults = parser.parse(pattern);
	  if (!this.parseResults.status) {
	    var error = Parsimmon.formatError(pattern, this.parseResults)
	    throw "Could not parse: " + error;
	  }
	  this.expression = this.parseResults.value;
	  this.program = vm.compile(this.expression);
	  this.nfa = nfa.compile(this.expression);
	  this.match = function(input) {
	    return vm.run(this.program, input, env);
	  }
	};

	module.exports = CharRegex;


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

	var syntax = __webpack_require__(404);
	var parsers = __webpack_require__(405);
	var seq = parsers.seq;
	var string = parsers.string;
	var alt = parsers.alt;
	var lazy = parsers.lazy;
	var regexParser = parsers.regex;
	var sepBy = parsers.sepBy;
	var pipe = parsers.pipe;
	var dot = parsers.dot;
	var parenthesized = parsers.parenthesized;
	var lsqr = parsers.lsqr;
	var rsqr = parsers.rsqr;
	var caret = parsers.caret;
	var lparen = parsers.lparen;
	var rparen = parsers.rparen;
	var star = parsers.star;
	var plus = parsers.plus;
	var qmark = parsers.qmark;
	var starred = parsers.starred(syntax.zeroOrMore);
	var plussed = parsers.plussed(syntax.oneOrMore);
	var qmarked = parsers.qmarked(syntax.zeroOrOne);
	var root = lazy('root expression', function() {
	  return regex.map(syntax.root);
	});
	var regex = lazy('regex', function() {
	  return sepBy(branch, pipe).map(syntax.alternation);
	});
	var wildcard = dot.map(function() {
	  return syntax.predicate('wildcard');
	}).desc('wildcard');
	var escaped = function(str, name) {
	  if (!name) name = str;
	  return string('\\' + str).result(syntax.predicate(name)).desc(name);
	};
	var character = regexParser(/[^\\*+?()\[\].|-]/).map(syntax.predicate).desc('character');
	var space = string(' ').result(syntax.predicate('space')).desc('space');
	var dash = string('-').result(syntax.predicate('-')).desc('-');
	var escapedBackslash = escaped('\\');
	var whitespace = escaped('s', 'whitespace');
	var newline = escaped('n', 'newline');
	var word = escaped('w', 'wordChar');
	var escapedLparen = escaped('(');
	var escapedRparen = escaped(')');
	var escapedLsqr = escaped('[');
	var escapedRsqr = escaped(']');
	var escapedStar = escaped('*');
	var escapedPlus = escaped('+');
	var escapedQmark = escaped('?');
	var escapedPipe = escaped('|');
	var escapedDot = escaped('.');
	var escapedSymbol = alt(escapedBackslash, escapedLparen, escapedRparen, escapedPlus, escapedQmark,
				escapedRsqr, escapedLsqr, word, newline, whitespace, escapedDot, escapedPipe);
	var literal = alt(escapedBackslash, whitespace, newline, word, space, character, lparen, rparen, star, plus, qmark, pipe, dot);
	var literals = sepBy(literal, string('')).map(syntax.alternation);
	//var rangeValue = alt(escapedSymbol, nonDashCharacter);
	//var ranges = alt(positiveRange, negativeRange);
	var charClass = lsqr.then(literals).skip(rsqr).desc('character class');
	var atom = alt(parenthesized(regex), charClass, wildcard, escapedSymbol, space, dash, character).desc('atom');
	var piece = alt(starred(atom), plussed(atom), qmarked(atom), atom).desc('piece');
	var branch = piece.atLeast(1).map(syntax.concatenation).desc('branch');
	module.exports = root;


/***/ }),
/* 404 */
/***/ (function(module, exports) {

	var expression = function(type, children, data) {
	  return {
	    type: type,
	    children: children ? children : [],
	    data: data ? data : {}
	  };
	};

	var withOneChild = function(name) {
	  return function(expr, data) {
	    return expression(name, [expr], data);
	  };
	};

	var withMultipleChildren = function(name) {
	  return function(exprs, data) {
	    if (exprs.length == 0) {
	      throw name + ' takes at least one child node';
	    } else if (exprs.length == 1) {
	      return exprs[0];
	    } else {
	      return expression(name, exprs, data);
	    }
	  };
	};

	var disjunction = function(exprs, negated) {
	  var notPred = function(x) { return !('type' in x) || x.type != 'predicate' };
	  if (exprs.some(notPred)) {
	    var first = notPred.find(notPred);
	    throw 'disjunction must take predicates as arguments, got: ' + first.type;
	  } else if (exprs.length < 1) {
	    throw 'disjunction must take at least one predicate';
	  }
	  var children = exprs;
	  var data = {negated: negated};
	  return expression('disjunction', children, data);
	};

	var expressions = {
	  predicate: function(name) {
	    var data = {name: name};
	    var children = [];
	    return expression('predicate', children, data);
	  },
	  concatenation: withMultipleChildren('concatenation'),
	  alternation: withMultipleChildren('alternation'),
	  zeroOrMore: withOneChild('zeroOrMore'),
	  oneOrMore: withOneChild('oneOrMore'),
	  zeroOrOne: withOneChild('zeroOrOne'),
	  root: withOneChild('root'),
	  disjunction: disjunction
	}

	module.exports = expressions;


/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

	var parsers = __webpack_require__(406);
	var syntax = __webpack_require__(404);
	parsers.sepBy = function(parser, separator) {
	  var pairs = separator.then(parser).many();
	  return parser.chain(function(r) {
	    return pairs.map(function(rs) {
	       return [r].concat(rs);
	     })
	  })
	};
	var pipe = parsers.pipe = parsers.string('|');
	var lparen = parsers.lparen = parsers.string('(');
	var rparen = parsers.rparen = parsers.string(')');
	var star = parsers.star = parsers.string('*');
	var plus = parsers.plus = parsers.string('+');
	var qmark = parsers.qmark = parsers.string('?');
	var dot = parsers.dot = parsers.string('.');
	var lsqr = parsers.lsqr = parsers.string('[');
	var rsqr = parsers.rsqr = parsers.string(']');
	var caret = parsers.caret = parsers.string('^');
	var parenthesized = parsers.parenthesized = function(parser) {
	  return lparen.then(parser).skip(rparen);
	};
	var suffixOperator = parsers.suffixOperator = function(operator) {
	  return function(fn) {
	    return function(parser) {
	      return parser.skip(operator).map(fn);
	    }
	  }
	};
	parsers.plussed = suffixOperator(plus);
	parsers.starred = suffixOperator(star);
	parsers.qmarked = suffixOperator(qmark);
	module.exports = parsers;


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// This unsightly UMD-module header is here to make this code work without
	// modification with CommonJS, AMD, and browser globals.

	(function(root, factory) {
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof module === 'object' && module.exports) {
	    // Node. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like Node.
	    module.exports = factory();
	  } else {
	    // Browser globals (root is window).
	    root.Parsimmon = factory();
	  }
	}(this, function() {
	  "use strict";

	  var Parsimmon = {};

	  // The Parser object is a wrapper for a parser function.
	  // Externally, you use one to parse a string by calling
	  //   var result = SomeParser.parse('Me Me Me! Parse Me!');
	  // You should never call the constructor, rather you should
	  // construct your Parser from the base parsers and the
	  // parser combinator methods.
	  function Parser(action) {
	    if (!(this instanceof Parser)) return new Parser(action);
	    this._ = action;
	  };

	  Parsimmon.Parser = Parser;

	  var _ = Parser.prototype;

	  function makeSuccess(index, value) {
	    return {
	      status: true,
	      index: index,
	      value: value,
	      furthest: -1,
	      expected: []
	    };
	  }

	  function makeFailure(index, expected) {
	    return {
	      status: false,
	      index: -1,
	      value: null,
	      furthest: index,
	      expected: [expected]
	    };
	  }

	  function mergeReplies(result, last) {
	    if (!last) return result;
	    if (result.furthest > last.furthest) return result;

	    var expected = (result.furthest === last.furthest)
	      ? result.expected.concat(last.expected)
	      : last.expected;

	    return {
	      status: result.status,
	      index: result.index,
	      value: result.value,
	      furthest: last.furthest,
	      expected: expected
	    }
	  }

	  // For ensuring we have the right argument types
	  function assertParser(p) {
	    if (!(p instanceof Parser)) throw new Error('not a parser: '+p);
	  }
	  function assertNumber(x) {
	    if (typeof x !== 'number') throw new Error('not a number: '+x);
	  }
	  function assertRegexp(x) {
	    if (!(x instanceof RegExp)) throw new Error('not a regex: '+x);
	  }
	  function assertFunction(x) {
	    if (typeof x !== 'function') throw new Error('not a function: '+x);
	  }
	  function assertString(x) {
	    if (typeof x !== 'string') throw new Error('not a string: '+x)
	  }

	  function formatExpected(expected) {
	    if (expected.length === 1) return expected[0];

	    return 'one of ' + expected.join(', ')
	  }

	  function formatGot(stream, error) {
	    var index = error.index;
	    var i = index.offset;

	    if (i === stream.length) return ', got the end of the stream'


	    var prefix = (i > 0 ? "'..." : "'");
	    var suffix = (stream.length - i > 12 ? "...'" : "'");

	    return ' at line ' + index.line + ' column ' + index.column
	      +  ', got ' + prefix + stream.slice(i, i+12) + suffix
	  }

	  var formatError = Parsimmon.formatError = function(stream, error) {
	    return 'expected ' + formatExpected(error.expected) + formatGot(stream, error)
	  };

	  _.parse = function(stream) {
	    if (typeof stream !== 'string') {
	      throw new Error('.parse must be called with a string as its argument');
	    }
	    var result = this.skip(eof)._(stream, 0);

	    return result.status ? {
	      status: true,
	      value: result.value
	    } : {
	      status: false,
	      index: makeLineColumnIndex(stream, result.furthest),
	      expected: result.expected
	    };
	  };

	  // [Parser a] -> Parser [a]
	  var seq = Parsimmon.seq = function() {
	    var parsers = [].slice.call(arguments);
	    var numParsers = parsers.length;

	    for (var j = 0; j < numParsers; j += 1) {
	      assertParser(parsers[j]);
	    }

	    return Parser(function(stream, i) {
	      var result;
	      var accum = new Array(numParsers);

	      for (var j = 0; j < numParsers; j += 1) {
	        result = mergeReplies(parsers[j]._(stream, i), result);
	        if (!result.status) return result;
	        accum[j] = result.value
	        i = result.index;
	      }

	      return mergeReplies(makeSuccess(i, accum), result);
	    });
	  };


	  var seqMap = Parsimmon.seqMap = function() {
	    var args = [].slice.call(arguments);
	    var mapper = args.pop();
	    return seq.apply(null, args).map(function(results) {
	      return mapper.apply(null, results);
	    });
	  };

	  /**
	   * Allows to add custom primitive parsers
	   */
	  var custom = Parsimmon.custom = function(parsingFunction) {
	    return Parser(parsingFunction(makeSuccess, makeFailure));
	  };

	  var alt = Parsimmon.alt = function() {
	    var parsers = [].slice.call(arguments);
	    var numParsers = parsers.length;
	    if (numParsers === 0) return fail('zero alternates')

	    for (var j = 0; j < numParsers; j += 1) {
	      assertParser(parsers[j]);
	    }

	    return Parser(function(stream, i) {
	      var result;
	      for (var j = 0; j < parsers.length; j += 1) {
	        result = mergeReplies(parsers[j]._(stream, i), result);
	        if (result.status) return result;
	      }
	      return result;
	    });
	  };

	  var sepBy = Parsimmon.sepBy = function(parser, separator) {
	    // Argument asserted by sepBy1
	    return sepBy1(parser, separator).or(Parsimmon.of([]));
	  };

	  var sepBy1 = Parsimmon.sepBy1 = function(parser, separator) {
	    assertParser(parser);
	    assertParser(separator);

	    var pairs = separator.then(parser).many();

	    return parser.chain(function(r) {
	      return pairs.map(function(rs) {
	        return [r].concat(rs);
	      })
	    })
	  };

	  // -*- primitive combinators -*- //
	  _.or = function(alternative) {
	    return alt(this, alternative);
	  };

	  _.then = function(next) {
	    if (typeof next === 'function') {
	      throw new Error('chaining features of .then are no longer supported, use .chain instead');
	    }

	    assertParser(next);
	    return seq(this, next).map(function(results) { return results[1]; });
	  };

	  // -*- optimized iterative combinators -*- //
	  // equivalent to:
	  // _.many = function() {
	  //   return this.times(0, Infinity);
	  // };
	  // or, more explicitly:
	  // _.many = function() {
	  //   var self = this;
	  //   return self.then(function(x) {
	  //     return self.many().then(function(xs) {
	  //       return [x].concat(xs);
	  //     });
	  //   }).or(succeed([]));
	  // };
	  _.many = function() {
	    var self = this;

	    return Parser(function(stream, i) {
	      var accum = [];
	      var result;
	      var prevResult;

	      for (;;) {
	        result = mergeReplies(self._(stream, i), result);

	        if (result.status) {
	          i = result.index;
	          accum.push(result.value);
	        }
	        else {
	          return mergeReplies(makeSuccess(i, accum), result);
	        }
	      }
	    });
	  };

	  // equivalent to:
	  // _.times = function(min, max) {
	  //   if (arguments.length < 2) max = min;
	  //   var self = this;
	  //   if (min > 0) {
	  //     return self.then(function(x) {
	  //       return self.times(min - 1, max - 1).then(function(xs) {
	  //         return [x].concat(xs);
	  //       });
	  //     });
	  //   }
	  //   else if (max > 0) {
	  //     return self.then(function(x) {
	  //       return self.times(0, max - 1).then(function(xs) {
	  //         return [x].concat(xs);
	  //       });
	  //     }).or(succeed([]));
	  //   }
	  //   else return succeed([]);
	  // };
	  _.times = function(min, max) {
	    if (arguments.length < 2) max = min;
	    var self = this;

	    assertNumber(min);
	    assertNumber(max);

	    return Parser(function(stream, i) {
	      var accum = [];
	      var start = i;
	      var result;
	      var prevResult;

	      for (var times = 0; times < min; times += 1) {
	        result = self._(stream, i);
	        prevResult = mergeReplies(result, prevResult);
	        if (result.status) {
	          i = result.index;
	          accum.push(result.value);
	        }
	        else return prevResult;
	      }

	      for (; times < max; times += 1) {
	        result = self._(stream, i);
	        prevResult = mergeReplies(result, prevResult);
	        if (result.status) {
	          i = result.index;
	          accum.push(result.value);
	        }
	        else break;
	      }

	      return mergeReplies(makeSuccess(i, accum), prevResult);
	    });
	  };

	  // -*- higher-level combinators -*- //
	  _.result = function(res) { return this.map(function(_) { return res; }); };
	  _.atMost = function(n) { return this.times(0, n); };
	  _.atLeast = function(n) {
	    var self = this;
	    return seqMap(this.times(n), this.many(), function(init, rest) {
	      return init.concat(rest);
	    });
	  };

	  _.map = function(fn) {

	    assertFunction(fn);

	    var self = this;
	    return Parser(function(stream, i) {
	      var result = self._(stream, i);
	      if (!result.status) return result;
	      return mergeReplies(makeSuccess(result.index, fn(result.value)), result);
	    });
	  };

	  _.skip = function(next) {
	    return seq(this, next).map(function(results) { return results[0]; });
	  };

	  _.mark = function() {
	    return seqMap(index, this, index, function(start, value, end) {
	      return { start: start, value: value, end: end };
	    });
	  };

	  _.desc = function(expected) {
	    var self = this;
	    return Parser(function(stream, i) {
	      var reply = self._(stream, i);
	      if (!reply.status) reply.expected = [expected];
	      return reply;
	    });
	  };

	  // -*- primitive parsers -*- //
	  var string = Parsimmon.string = function(str) {
	    var len = str.length;
	    var expected = "'"+str+"'";

	    assertString(str);

	    return Parser(function(stream, i) {
	      var head = stream.slice(i, i+len);

	      if (head === str) {
	        return makeSuccess(i+len, head);
	      }
	      else {
	        return makeFailure(i, expected);
	      }
	    });
	  };

	  var regex = Parsimmon.regex = function(re, group) {

	    assertRegexp(re);
	    if (group) assertNumber(group);

	    var anchored = RegExp('^(?:'+re.source+')', (''+re).slice((''+re).lastIndexOf('/')+1));
	    var expected = '' + re;
	    if (group == null) group = 0;

	    return Parser(function(stream, i) {
	      var match = anchored.exec(stream.slice(i));

	      if (match) {
	        var fullMatch = match[0];
	        var groupMatch = match[group];
	        if (groupMatch != null) return makeSuccess(i+fullMatch.length, groupMatch);
	      }

	      return makeFailure(i, expected);
	    });
	  };

	  var succeed = Parsimmon.succeed = function(value) {
	    return Parser(function(stream, i) {
	      return makeSuccess(i, value);
	    });
	  };

	  var fail = Parsimmon.fail = function(expected) {
	    return Parser(function(stream, i) { return makeFailure(i, expected); });
	  };

	  var letter = Parsimmon.letter = regex(/[a-z]/i).desc('a letter')
	  var letters = Parsimmon.letters = regex(/[a-z]*/i)
	  var digit = Parsimmon.digit = regex(/[0-9]/).desc('a digit');
	  var digits = Parsimmon.digits = regex(/[0-9]*/)
	  var whitespace = Parsimmon.whitespace = regex(/\s+/).desc('whitespace');
	  var optWhitespace = Parsimmon.optWhitespace = regex(/\s*/);

	  var any = Parsimmon.any = Parser(function(stream, i) {
	    if (i >= stream.length) return makeFailure(i, 'any character');

	    return makeSuccess(i+1, stream.charAt(i));
	  });

	  var all = Parsimmon.all = Parser(function(stream, i) {
	    return makeSuccess(stream.length, stream.slice(i));
	  });

	  var eof = Parsimmon.eof = Parser(function(stream, i) {
	    if (i < stream.length) return makeFailure(i, 'EOF');

	    return makeSuccess(i, null);
	  });

	  var test = Parsimmon.test = function(predicate) {
	    assertFunction(predicate);

	    return Parser(function(stream, i) {
	      var char = stream.charAt(i);
	      if (i < stream.length && predicate(char)) {
	        return makeSuccess(i+1, char);
	      }
	      else {
	        return makeFailure(i, 'a character matching '+predicate);
	      }
	    });
	  };

	  var oneOf = Parsimmon.oneOf = function(str) {
	    return test(function(ch) { return str.indexOf(ch) >= 0; });
	  };

	  var noneOf = Parsimmon.noneOf = function(str) {
	    return test(function(ch) { return str.indexOf(ch) < 0; });
	  };

	  var takeWhile = Parsimmon.takeWhile = function(predicate) {
	    assertFunction(predicate);

	    return Parser(function(stream, i) {
	      var j = i;
	      while (j < stream.length && predicate(stream.charAt(j))) j += 1;
	      return makeSuccess(j, stream.slice(i, j));
	    });
	  };

	  var lazy = Parsimmon.lazy = function(desc, f) {
	    if (arguments.length < 2) {
	      f = desc;
	      desc = undefined;
	    }

	    var parser = Parser(function(stream, i) {
	      parser._ = f()._;
	      return parser._(stream, i);
	    });

	    if (desc) parser = parser.desc(desc)

	    return parser;
	  };

	  var makeLineColumnIndex = function(stream, i) {
	    var lines = stream.slice(0, i).split("\n");
	    // Note that unlike the character offset, the line and column offsets are
	    // 1-based.
	    var lineWeAreUpTo = lines.length;
	    var columnWeAreUpTo = lines[lines.length - 1].length + 1;

	    return {
	      offset: i,
	      line: lineWeAreUpTo,
	      column: columnWeAreUpTo
	    };
	  };

	  var index
	    = Parsimmon.index
	    = Parser(function(stream, i) {
	      return makeSuccess(i, makeLineColumnIndex(stream, i));
	    });

	  //- fantasyland compat

	  //- Monoid (Alternative, really)
	  _.concat = _.or;
	  _.empty = fail('empty')

	  //- Applicative
	  _.of = Parser.of = Parsimmon.of = succeed

	  _.ap = function(other) {
	    return seqMap(this, other, function(f, x) { return f(x); })
	  };

	  //- Monad
	  _.chain = function(f) {
	    var self = this;
	    return Parser(function(stream, i) {
	      var result = self._(stream, i);
	      if (!result.status) return result;
	      var nextParser = f(result.value);
	      return mergeReplies(nextParser._(stream, result.index), result);
	    });
	  };

	  return Parsimmon;
	}));


/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

	var predicates = __webpack_require__(408);
	var env = function(symbol) {
	  if (symbol == 'wildcard') {
	    return predicates.alwaysTrue;
	  } else if (symbol == 'space') {
	    return predicates.equals(' ');
	  } else {
	    return predicates.equals(symbol);
	  }
	};
	module.exports = env;


/***/ }),
/* 408 */
/***/ (function(module, exports) {

	module.exports = {
	  alwaysTrue: function() {
	    return true;
	  },
	  equals: function(x) {
	    return function(y) {
	      return x == y;
	    }
	  }
	};


/***/ }),
/* 409 */
/***/ (function(module, exports) {

	var instruction = {};
	instruction.predicate = function(name) {
	  return { type: 'predicate', name: name };
	};
	instruction.match = function() {
	  return { type: 'match' };
	};
	instruction.jump = function(increment) {
	  return { type: 'jump', increment: increment };
	};
	instruction.split = function(increment) {
	  return { type: 'split', increment: increment };
	};

	var concat = function(array1, array2) { return array1.concat(array2); };
	var codes = {};
	var compile = function(expr) {
	  if (expr.type in codes) {
	    return codes[expr.type](expr);
	  } else {
	    throw 'Unexpected expression type: "' + expr.type + '"';
	  }
	};

	codes.predicate = function(expr) {
	  var predName = expr.data.name;
	  var pred = instruction.predicate(predName);
	  return [pred];
	};

	codes.concatenation = function(expr) {
	  var childCodes = expr.children.map(compile);
	  return childCodes.reduce(concat);
	};

	codes.alternation = function(expr) {
	  var childCodes = expr.children.map(compile);
	  var reducer = function(codes1, codes2) {
	    var split = [instruction.split(codes1.length + 2)];
	    var jump = [instruction.jump(codes2.length + 1)];
	    var parts = [ split, codes1, jump, codes2 ];
	    return parts.reduce(concat);
	  };
	  return childCodes.reduce(reducer);
	};

	codes.zeroOrOne = function(expr) {
	  var codes = compile(expr.children[0]);
	  var split = [instruction.split(codes.length + 1)];
	  return concat(split, codes);
	};

	codes.zeroOrMore = function(expr) {
	  var codes = compile(expr.children[0]);
	  var split = [instruction.split(codes.length + 2)];
	  var jump = [instruction.jump(-codes.length - 1)];
	  var parts = [split, codes, jump];
	  return parts.reduce(concat);
	};

	codes.oneOrMore = function(expr) {
	  var codes = compile(expr.children[0]);
	  var split = [instruction.split(-codes.length)];
	  return concat(codes, split);
	};

	codes.root = function(expr) {
	  var childCodes = compile(expr.children[0]);
	  var match = instruction.match();
	  return childCodes.concat([match]);
	};

	var thread = function(position) {
	  return { position: position };
	};

	var addThread = function(t, threads) {
	  var positions = threads.map(function(x) { return x.position; });
	  if (positions.indexOf(t.position) == -1) {
	    threads.push(t);
	  }
	};

	var threadList = function() {
	  var positions = {};
	  var threads = [];
	  var addThread = function(t) {
	    if (!(t.position in positions)) {
	      threads.push(t);
	      positions[t.position] = t;
	    }
	  };
	  return { positions: positions, threads: threads, addThread: addThread };
	};

	var thompson = function(program, input, env) {
	  var currentThreads = threadList();
	  currentThreads.addThread(thread(0));
	  for (var i = 0; i <= input.length; i++) {
	    var nextThreads = threadList();
	    for (var j = 0; j < currentThreads.threads.length; j++) {
	      var t = currentThreads.threads[j];
	      var instr = program[t.position];
	      switch(instr.type) {
		case 'predicate':
		  var pred = env(instr.name);
		  if (pred(input[i])) {
		    nextThreads.addThread(thread(t.position + 1));
		  }
		  break;
		case 'match':
		  if (i == input.length) {
		    return true;
		  }
		  break;
		case 'split':
		  currentThreads.addThread(thread(t.position + 1));
		  currentThreads.addThread(thread(t.position + instr.increment));
		  break;
		case 'jump':
		  currentThreads.addThread(thread(t.position + instr.increment));
		  break;
	      }
	    }
	    currentThreads = nextThreads;
	  }
	  return false;
	};

	module.exports = {
	  compile: compile,
	  run: thompson
	};


/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

	var util = __webpack_require__(411);
	var fragment = __webpack_require__(414);

	var indexedFragmentStates = function(fragment) {
	  var nextIndex = 0;
	  var frontier = [fragment.head];
	  var states = [];
	  while (frontier.length > 0) {
	    var state = frontier.pop();
	    if (state.index == null) {
	      state.index = nextIndex;
	      nextIndex++;
	      state.transitions.forEach(function(transition) {
		frontier.push(transition.target);
	      });
	      states.push(state);
	    };
	  };
	  return states;
	};

	var evalFunctions = {};
	var evalExpression = function(expr) {
	  if (expr.type == null) {
	    var exprString = util.inspect(expr);
	    throw "Expression has no type: " + exprString;
	  } else if (!(expr.type in evalFunctions)) {
	    throw "No evaluation function for expression type '" + expr.type + "'";
	  } else {
	    return evalFunctions[expr.type](expr);
	  }
	};

	var evalChildThen = function(wrapper) {
	  return function(expr) {
	    var childFrag = evalExpression(expr.children[0]);
	    return wrapper(childFrag);
	  };
	};

	var evalChildrenThen = function(wrapper) {
	  return function(expr) {
	    var evalChild = function(child) { return evalExpression(child); };
	    var childFrags = expr.children.map(evalChild);
	    return wrapper(childFrags);
	  };
	};

	evalFunctions.root = evalChildThen(fragment.root);
	evalFunctions.concatenation = evalChildrenThen(fragment.concatenation);
	evalFunctions.alternation = evalChildrenThen(fragment.alternation);
	evalFunctions.zeroOrMore = evalChildThen(fragment.zeroOrMore);
	evalFunctions.oneOrMore = evalChildThen(fragment.oneOrMore);
	evalFunctions.zeroOrOne = evalChildThen(fragment.zeroOrOne);
	evalFunctions.predicate = function(expr) {
	  var name = expr.data.name;
	  return fragment.predicate(name);
	};

	var compile = function(parsedRegex) {
	  var fragment = evalExpression(parsedRegex);
	  var util=__webpack_require__(411);
	  var states = indexedFragmentStates(fragment);
	  var numStates = states.length;
	  var nfaTransitions = {};
	  var finalState;
	  states.forEach(function(state) {
	    if (state.transitions.length == 0) {
	      finalState = state.index;
	    };
	    var outTrans = {};
	    state.transitions.map(function(fragTrans) {
	      outTrans[fragTrans.target.index] = fragTrans.name;
	    });
	    nfaTransitions[state.index] = outTrans;
	  });
	  return {
	    initialState: 0,
	    numStates: numStates,
	    finalState: finalState,
	    transitions: nfaTransitions,
	    expression: parsedRegex
	  };
	};

	var simulate = function(nfa, input) {
	  var initial = { state: 0, offset: 0 };
	  var frontier = [initial];
	  while (frontier.length > 0) {
	    var current = frontier.shift();
	    if (current.state == nfa.finalState && current.offset == input.length) {
	      return true;
	    }
	    for (nextState in nfa.transitions[current.state]) {
	      var observed = input[current.offset];
	      var transition = nfa.transitions[current.state][nextState];
	      var nextOffset = current.offset + transition.increment;
	      if (transition.predicate(observed) && nextOffset <= input.length) {
		var next = { state: nextState, offset: nextOffset };
		frontier.push(next);
	      }
	    }
	  }
	  return false;
	};

	module.exports = {
	  compile: compile,
	  simulate: simulate
	};


/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(412);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(413);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(14)))

/***/ }),
/* 412 */
/***/ (function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ }),
/* 413 */
/***/ (function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

	var predicates = __webpack_require__(408);
	var epsilon = "\u03B5";

	var fragmentState = function(transitions, index) {
	  return {
	    transitions: transitions ? transitions : [],
	    index: index
	  };
	};

	var fragmentTransition = function(name, target) {
	  return {
	    name: name,
	    target: target
	  };
	};

	var fragment = function(head, tails) {
	  return {
	    head: head,
	    tails: tails
	  }
	};

	var patch = function(tails, state) {
	  tails.forEach(function(tail) {
	    tail.target = state;
	  });
	};

	var build = {};

	build.predicate = function(name) {
	  var trans = fragmentTransition(name, null);
	  var head = fragmentState([trans]);
	  var tails = [trans];
	  return fragment(head, tails);
	};

	build.concatenation = function(frags) {
	  var binaryConcat = function(frag1, frag2) {
	    patch(frag1.tails, frag2.head);
	    var head = frag1.head;
	    var tails = frag2.tails;
	    return fragment(head, tails);
	  };
	  return frags.reduce(binaryConcat);
	};

	build.alternation = function(frags) {
	  var binaryAlt = function(frag1, frag2) {
	    var trans1 = fragmentTransition(epsilon, frag1.head);
	    var trans2 = fragmentTransition(epsilon, frag2.head);
	    var head = fragmentState([trans1, trans2]);
	    var tails = frag1.tails.concat(frag2.tails);
	    return fragment(head, tails);
	  };
	  return frags.reduce(binaryAlt);
	};

	build.zeroOrMore = function(frag) {
	  var loopTrans = fragmentTransition(epsilon, frag.head);
	  var breakTrans = fragmentTransition(epsilon, null);
	  var head = fragmentState([loopTrans, breakTrans]);
	  patch(frag.tails, head);
	  return fragment(head, [breakTrans]);
	};

	build.oneOrMore = function(frag) {
	  var loopTrans = fragmentTransition(epsilon, frag.head);
	  var breakTrans = fragmentTransition(epsilon, null);
	  var state = fragmentState([loopTrans, breakTrans]);
	  patch(frag.tails, state);
	  return fragment(frag.head, [breakTrans]);
	};

	build.zeroOrOne = function(frag) {
	  var matchTrans = fragmentTransition(epsilon, frag.head);
	  var skipTrans = fragmentTransition(epsilon, null);
	  var head = fragmentState([matchTrans, skipTrans]);
	  var tails = frag.tails.concat([skipTrans]);
	  return fragment(head, tails);
	};

	build.root = function(frag) {
	  var finalState = fragmentState();
	  patch(frag.tails, finalState);
	  return fragment(frag.head, []);
	};

	module.exports = build;


/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

	var React = __webpack_require__(12);
	var Bootstrap = __webpack_require__(169);
	var Input = Bootstrap.Input;
	var Figure = __webpack_require__(416);

	var wrapInteractiveFigure = function(Component, propName) {
	  return React.createClass({
	    getInitialState: function() {
	      return { value: this.props[propName] };
	    },
	    componentDidMount: function() {
	      this.setState({value: this.props.defaultValue });
	    },
	    setChildState: function(val) {
	      var state = this.state;
	      state[propName] = val;
	      this.setState(state);
	    },
	    getInputValue: function() {
	      var node = React.findDOMNode(this.refs.input);
	      var val = node.getElementsByTagName('input')[0].value
	      return val;
	    },
	    handleSubmit: function(e) {
	      e.preventDefault();
	      this.setChildState(this.getInputValue());
	    },
	    render: function() {
	      var caption = this.props.caption;
	      var captionComponent;
	      var input = React.createElement(Input, {ref: "input", type: "text", defaultValue: this.state.value});
	      var button = React.createElement(Bootstrap.Button, null, "Submit");
	      input = React.cloneElement(input, {buttonAfter: button});
	      if (caption) {
	        captionComponent = React.createElement("div", {className: "caption"}, caption);
	      }
	      return (
		React.createElement(Figure, null, 
		  React.createElement("form", {onSubmit: this.handleSubmit}, input), 
		  React.createElement(Component, React.__spread({},  this.props,  this.state))
		)
	      );
	    }
	  });
	};

	module.exports = wrapInteractiveFigure;


/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

	var React = __webpack_require__(12);
	var Bootstrap = __webpack_require__(169);
	var Figure = React.createClass({displayName: "Figure",
	  render: function() {
	    var caption = this.props.caption;
	    var captionComponent;
	    if (caption) {
	      captionComponent = React.createElement("div", {className: "caption"}, caption);
	    }
	    var content = this.props.children;
	    return (
	      React.createElement("div", {className: "figure"}, 
		React.createElement(Bootstrap.Panel, {className: "figureBox"}, 
		  content
		), 
		captionComponent
	      )
	    );
	  }
	});
	module.exports = Figure;


/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

	var React = __webpack_require__(12);
	var InteractiveFigure = __webpack_require__(415);
	var NfaViewer = __webpack_require__(418);
	module.exports = InteractiveFigure(NfaViewer, 'regex');


/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

	var React = __webpack_require__(12);
	var Bootstrap = __webpack_require__(169);
	var vis = __webpack_require__(400);
	var visualization = __webpack_require__(401);
	var CharRegex = __webpack_require__(402);
	var NfaViewer = React.createClass({displayName: "NfaViewer",
	  drawGraph: function() {
	    var cont = React.findDOMNode(this.refs.container);
	    var data = visualization.nfaGraph(this.regex.nfa);
	    var net = new vis.Network(cont, data, visualization.config.nfa);
	    var parentHeight = React.findDOMNode(this).offsetHeight;
	    net.setOptions({height: String(parentHeight)});
	  },
	  componentDidMount: function() {
	    if (this.didCompile) this.drawGraph();
	  },
	  componentDidUpdate: function() {
	    if (this.didCompile) this.drawGraph();
	  },
	  render: function() {
	    try {
	      this.regex = new CharRegex(this.props.regex);
	      this.didCompile = true;
	      return React.createElement("div", {ref: "container"});
	    } catch(err) {
	      this.didCompile = false;
	      return React.createElement(Bootstrap.Alert, {bsStyle: "danger"}, err);
	    }
	  }
	});
	module.exports = NfaViewer;


/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

	var React = __webpack_require__(12);
	var InteractiveFigure = __webpack_require__(415);
	var ProgramViewer = __webpack_require__(420);
	module.exports = InteractiveFigure(ProgramViewer, 'regex');


/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

	var React = __webpack_require__(12);
	var Bootstrap = __webpack_require__(169);
	var CharRegex = __webpack_require__(402);

	var render = {};
	render.predicate = function(instr) {
	  return 'equals ' + instr.name;
	};
	render.jump = function(instr, i) {
	  var target = i + instr.increment;
	  return 'jump to ' + target;
	};
	render.split = function(instr, i) {
	  var target1 = i + 1;
	  var target2 = i + instr.increment;
	  return 'split to ' + target1 + ', ' + target2;
	};
	render.match = function(instr, i) {
	  return 'match';
	};

	var ProgramViewer = React.createClass({displayName: "ProgramViewer",
	  renderRow: function(instr, i) {
	    var string = render[instr.type](instr, i);
	    return (
	      React.createElement("tr", {key: i}, 
	        React.createElement("td", null, i), 
	        React.createElement("td", null, string)
	      )
	    );
	  },
	  render: function() {
	    try {
	      var regex = new CharRegex(this.props.regex);
	      var rows = regex.program.map(this.renderRow);
	      return (
		React.createElement("div", {className: "program"}, 
	      React.createElement(Bootstrap.Table, null, 
		React.createElement("thead", null, 
	          React.createElement("tr", null, 
	            React.createElement("th", null, "Program Counter"), 
	            React.createElement("th", null, "Instruction")
	          )
	        ), 
	        React.createElement("tbody", null, 
	          rows
	        )
	      )
	      )
	      );
	    } catch (err) {
	      return React.createElement(Bootstrap.Alert, {bsStyle: "danger"}, err);
	    }
	  }
	});
	module.exports = ProgramViewer;


/***/ })
/******/ ]);